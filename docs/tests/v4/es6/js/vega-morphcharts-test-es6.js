// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"dlIYU":[function(require,module,exports) {
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var _vega = require("vega");
var _vegaMorphcharts = require("@msrvida/vega-morphcharts");
_vegaMorphcharts.use(_vega);
class SpecRenderer {
    viewType = "2d";
    spec = null;
    view = null;
    constructor(){
        const json = localStorage.getItem("spec");
        if (json) this.getTextArea().value = json;
    }
    toggleView() {
        if (this.viewType === "3d") this.viewType = "2d";
        else this.viewType = "3d";
        this.getText();
    }
    getTextArea() {
        return document.getElementsByTagName("textarea")[0];
    }
    getText() {
        const textarea = this.getTextArea();
        const text = textarea.value;
        const errorDiv = document.getElementById("error");
        const splitRight = document.getElementById("vis");
        try {
            const spec = JSON.parse(text);
            splitRight.style.opacity = "1";
            errorDiv.style.display = "none";
            this.update(spec, text);
        } catch (e) {
            errorDiv.innerText = e;
            errorDiv.style.display = "";
            splitRight.style.opacity = "0.1";
        }
    }
    update(spec, json) {
        this.view;
        const runtime = _vega.parse(spec);
        //save in local storage
        localStorage.setItem("spec", json);
        this.view = new _vegaMorphcharts.ViewGl(runtime, {
            getView: ()=>{
                return this.viewType;
            },
            presenterConfig: {
                onTargetViewState: (height, width)=>{
                    return {
                        height,
                        width,
                        newViewStateTarget: false
                    };
                }
            }
        }).renderer("morphcharts").initialize(document.querySelector("#vis"));
        this.view.run();
    }
}
const specRenderer = new SpecRenderer();
window["vegaTest"] = {
    vega: _vega,
    specRenderer
};

},{"vega":"2BRQe","@msrvida/vega-morphcharts":"dysWg"}],"2BRQe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Dataflow", ()=>(0, _vegaDataflow.Dataflow));
parcelHelpers.export(exports, "EventStream", ()=>(0, _vegaDataflow.EventStream));
parcelHelpers.export(exports, "MultiPulse", ()=>(0, _vegaDataflow.MultiPulse));
parcelHelpers.export(exports, "Operator", ()=>(0, _vegaDataflow.Operator));
parcelHelpers.export(exports, "Parameters", ()=>(0, _vegaDataflow.Parameters));
parcelHelpers.export(exports, "Pulse", ()=>(0, _vegaDataflow.Pulse));
parcelHelpers.export(exports, "Transform", ()=>(0, _vegaDataflow.Transform));
parcelHelpers.export(exports, "changeset", ()=>(0, _vegaDataflow.changeset));
parcelHelpers.export(exports, "definition", ()=>(0, _vegaDataflow.definition));
parcelHelpers.export(exports, "ingest", ()=>(0, _vegaDataflow.ingest));
parcelHelpers.export(exports, "isTuple", ()=>(0, _vegaDataflow.isTuple));
parcelHelpers.export(exports, "transform", ()=>(0, _vegaDataflow.transform));
parcelHelpers.export(exports, "transforms", ()=>(0, _vegaDataflow.transforms));
parcelHelpers.export(exports, "tupleid", ()=>(0, _vegaDataflow.tupleid));
parcelHelpers.export(exports, "interpolate", ()=>(0, _vegaScale.interpolate));
parcelHelpers.export(exports, "interpolateColors", ()=>(0, _vegaScale.interpolateColors));
parcelHelpers.export(exports, "interpolateRange", ()=>(0, _vegaScale.interpolateRange));
parcelHelpers.export(exports, "quantizeInterpolator", ()=>(0, _vegaScale.quantizeInterpolator));
parcelHelpers.export(exports, "scale", ()=>(0, _vegaScale.scale));
parcelHelpers.export(exports, "scheme", ()=>(0, _vegaScale.scheme));
parcelHelpers.export(exports, "projection", ()=>(0, _vegaProjection.projection));
parcelHelpers.export(exports, "View", ()=>(0, _vegaView.View));
parcelHelpers.export(exports, "defaultLocale", ()=>(0, _vegaFormat.defaultLocale));
parcelHelpers.export(exports, "formatLocale", ()=>(0, _vegaFormat.numberFormatDefaultLocale));
parcelHelpers.export(exports, "locale", ()=>(0, _vegaFormat.locale));
parcelHelpers.export(exports, "resetDefaultLocale", ()=>(0, _vegaFormat.resetDefaultLocale));
parcelHelpers.export(exports, "timeFormatLocale", ()=>(0, _vegaFormat.timeFormatDefaultLocale));
parcelHelpers.export(exports, "expressionFunction", ()=>(0, _vegaFunctions.expressionFunction));
parcelHelpers.export(exports, "parse", ()=>(0, _vegaParser.parse));
parcelHelpers.export(exports, "runtimeContext", ()=>(0, _vegaRuntime.context));
parcelHelpers.export(exports, "codegenExpression", ()=>(0, _vegaExpression.codegen));
parcelHelpers.export(exports, "parseExpression", ()=>(0, _vegaExpression.parse));
parcelHelpers.export(exports, "parseSelector", ()=>(0, _vegaEventSelector.selector));
parcelHelpers.export(exports, "version", ()=>version);
var _vegaUtil = require("vega-util");
var _vegaDataflow = require("vega-dataflow");
var _vegaTransforms = require("vega-transforms");
var _vegaViewTransforms = require("vega-view-transforms");
var _vegaEncode = require("vega-encode");
var _vegaGeo = require("vega-geo");
var _vegaForce = require("vega-force");
var _vegaHierarchy = require("vega-hierarchy");
var _vegaLabel = require("vega-label");
var _vegaRegression = require("vega-regression");
var _vegaVoronoi = require("vega-voronoi");
var _vegaWordcloud = require("vega-wordcloud");
var _vegaCrossfilter = require("vega-crossfilter");
parcelHelpers.exportAll(_vegaUtil, exports);
var _vegaStatistics = require("vega-statistics");
parcelHelpers.exportAll(_vegaStatistics, exports);
var _vegaTime = require("vega-time");
parcelHelpers.exportAll(_vegaTime, exports);
var _vegaLoader = require("vega-loader");
parcelHelpers.exportAll(_vegaLoader, exports);
var _vegaScenegraph = require("vega-scenegraph");
parcelHelpers.exportAll(_vegaScenegraph, exports);
var _vegaScale = require("vega-scale");
var _vegaProjection = require("vega-projection");
var _vegaView = require("vega-view");
var _vegaFormat = require("vega-format");
var _vegaFunctions = require("vega-functions");
var _vegaParser = require("vega-parser");
var _vegaRuntime = require("vega-runtime");
var _vegaExpression = require("vega-expression");
var _vegaEventSelector = require("vega-event-selector");
var name = "vega";
var version$1 = "5.20.2";
var description = "The Vega visualization grammar.";
var keywords = [
    "vega",
    "visualization",
    "interaction",
    "dataflow",
    "library",
    "data",
    "d3"
];
var license = "BSD-3-Clause";
var author = "UW Interactive Data Lab (http://idl.cs.washington.edu)";
var main = "build/vega-node.js";
var module = "build/vega.module.js";
var unpkg = "build/vega.min.js";
var jsdelivr = "build/vega.min.js";
var types = "index.d.ts";
var repository = "vega/vega";
var scripts = {
    bundle: "rollup -c --config-bundle",
    prebuild: "rimraf build && rimraf build-es5",
    build: "rollup -c --config-core --config-bundle --config-ie",
    postbuild: "node schema-copy",
    pretest: "yarn build --config-test",
    test: "TZ=America/Los_Angeles tape 'test/**/*-test.js'",
    prepublishOnly: "yarn test && yarn build",
    postpublish: "./schema-deploy.sh"
};
var dependencies = {
    "vega-crossfilter": "~4.0.5",
    "vega-dataflow": "~5.7.4",
    "vega-encode": "~4.8.3",
    "vega-event-selector": "~2.0.6",
    "vega-expression": "~4.0.1",
    "vega-force": "~4.0.7",
    "vega-format": "~1.0.4",
    "vega-functions": "~5.12.0",
    "vega-geo": "~4.3.8",
    "vega-hierarchy": "~4.0.9",
    "vega-label": "~1.0.0",
    "vega-loader": "~4.4.0",
    "vega-parser": "~6.1.3",
    "vega-projection": "~1.4.5",
    "vega-regression": "~1.0.9",
    "vega-runtime": "~6.1.3",
    "vega-scale": "~7.1.1",
    "vega-scenegraph": "~4.9.4",
    "vega-statistics": "~1.7.9",
    "vega-time": "~2.0.4",
    "vega-transforms": "~4.9.4",
    "vega-typings": "~0.21.0",
    "vega-util": "~1.16.1",
    "vega-view": "~5.10.1",
    "vega-view-transforms": "~4.5.8",
    "vega-voronoi": "~4.1.5",
    "vega-wordcloud": "~4.1.3"
};
var devDependencies = {
    "vega-schema": "*"
};
var gitHead = "e251dbc61ab6645689d9f349e7dd9d15ddb85bce";
var pkg = {
    name: name,
    version: version$1,
    description: description,
    keywords: keywords,
    license: license,
    author: author,
    main: main,
    module: module,
    unpkg: unpkg,
    jsdelivr: jsdelivr,
    types: types,
    repository: repository,
    scripts: scripts,
    dependencies: dependencies,
    devDependencies: devDependencies,
    gitHead: gitHead
};
// -- Transforms -----
(0, _vegaUtil.extend)((0, _vegaDataflow.transforms), _vegaTransforms, _vegaViewTransforms, _vegaEncode, _vegaGeo, _vegaForce, _vegaLabel, _vegaHierarchy, _vegaRegression, _vegaVoronoi, _vegaWordcloud, _vegaCrossfilter); // -- Exports -----
const version = pkg.version;

},{"vega-util":"bApja","vega-dataflow":"3NitK","vega-transforms":"gA9mK","vega-view-transforms":"i63Ad","vega-encode":"fpesP","vega-geo":"3rF9B","vega-force":"4JCry","vega-hierarchy":"lserr","vega-label":"lZyUZ","vega-regression":"elv3U","vega-voronoi":"96rkJ","vega-wordcloud":"7Z7Aq","vega-crossfilter":"8iEZv","vega-statistics":"5ncfv","vega-time":"27kpp","vega-loader":"gmbOr","vega-scenegraph":"jattk","vega-scale":"bEydG","vega-projection":"4wv4C","vega-view":"cGC2i","vega-format":"47kOt","vega-functions":"iuqsd","vega-parser":"hsy9Z","vega-runtime":"k7ppL","vega-expression":"2l1no","vega-event-selector":"gXMNx","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bApja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Debug", ()=>Debug);
parcelHelpers.export(exports, "Error", ()=>Error$1);
parcelHelpers.export(exports, "Info", ()=>Info);
parcelHelpers.export(exports, "None", ()=>None);
parcelHelpers.export(exports, "Warn", ()=>Warn);
parcelHelpers.export(exports, "accessor", ()=>accessor);
parcelHelpers.export(exports, "accessorFields", ()=>accessorFields);
parcelHelpers.export(exports, "accessorName", ()=>accessorName);
parcelHelpers.export(exports, "array", ()=>array);
parcelHelpers.export(exports, "ascending", ()=>ascending);
parcelHelpers.export(exports, "clampRange", ()=>clampRange);
parcelHelpers.export(exports, "compare", ()=>compare);
parcelHelpers.export(exports, "constant", ()=>constant);
parcelHelpers.export(exports, "debounce", ()=>debounce);
parcelHelpers.export(exports, "error", ()=>error);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "extent", ()=>extent);
parcelHelpers.export(exports, "extentIndex", ()=>extentIndex);
parcelHelpers.export(exports, "falsy", ()=>falsy);
parcelHelpers.export(exports, "fastmap", ()=>fastmap);
parcelHelpers.export(exports, "field", ()=>field);
parcelHelpers.export(exports, "flush", ()=>flush);
parcelHelpers.export(exports, "hasOwnProperty", ()=>has);
parcelHelpers.export(exports, "id", ()=>id);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "inherits", ()=>inherits);
parcelHelpers.export(exports, "inrange", ()=>inrange);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isIterable", ()=>isIterable);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isRegExp", ()=>isRegExp);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "key", ()=>key);
parcelHelpers.export(exports, "lerp", ()=>lerp);
parcelHelpers.export(exports, "logger", ()=>logger);
parcelHelpers.export(exports, "lruCache", ()=>lruCache);
parcelHelpers.export(exports, "merge", ()=>merge);
parcelHelpers.export(exports, "mergeConfig", ()=>mergeConfig);
parcelHelpers.export(exports, "one", ()=>one);
parcelHelpers.export(exports, "pad", ()=>pad);
parcelHelpers.export(exports, "panLinear", ()=>panLinear);
parcelHelpers.export(exports, "panLog", ()=>panLog);
parcelHelpers.export(exports, "panPow", ()=>panPow);
parcelHelpers.export(exports, "panSymlog", ()=>panSymlog);
parcelHelpers.export(exports, "peek", ()=>peek);
parcelHelpers.export(exports, "quarter", ()=>quarter);
parcelHelpers.export(exports, "repeat", ()=>repeat);
parcelHelpers.export(exports, "span", ()=>span);
parcelHelpers.export(exports, "splitAccessPath", ()=>splitAccessPath);
parcelHelpers.export(exports, "stringValue", ()=>$);
parcelHelpers.export(exports, "toBoolean", ()=>toBoolean);
parcelHelpers.export(exports, "toDate", ()=>toDate);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toSet", ()=>toSet);
parcelHelpers.export(exports, "toString", ()=>toString);
parcelHelpers.export(exports, "truncate", ()=>truncate);
parcelHelpers.export(exports, "truthy", ()=>truthy);
parcelHelpers.export(exports, "utcquarter", ()=>utcquarter);
parcelHelpers.export(exports, "visitArray", ()=>visitArray);
parcelHelpers.export(exports, "writeConfig", ()=>writeConfig);
parcelHelpers.export(exports, "zero", ()=>zero);
parcelHelpers.export(exports, "zoomLinear", ()=>zoomLinear);
parcelHelpers.export(exports, "zoomLog", ()=>zoomLog);
parcelHelpers.export(exports, "zoomPow", ()=>zoomPow);
parcelHelpers.export(exports, "zoomSymlog", ()=>zoomSymlog);
function accessor(fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
}
function accessorName(fn) {
    return fn == null ? null : fn.fname;
}
function accessorFields(fn) {
    return fn == null ? null : fn.fields;
}
function getter(path) {
    return path.length === 1 ? get1(path[0]) : getN(path);
}
const get1 = (field)=>function(obj) {
        return obj[field];
    };
const getN = (path)=>{
    const len = path.length;
    return function(obj) {
        for(let i = 0; i < len; ++i)obj = obj[path[i]];
        return obj;
    };
};
function error(message) {
    throw Error(message);
}
function splitAccessPath(p) {
    const path = [], n = p.length;
    let q = null, b = 0, s = "", i, j, c;
    p = p + "";
    function push() {
        path.push(s + p.substring(i, j));
        s = "";
        i = j + 1;
    }
    for(i = j = 0; j < n; ++j){
        c = p[j];
        if (c === "\\") {
            s += p.substring(i, j);
            s += p.substring(++j, ++j);
            i = j;
        } else if (c === q) {
            push();
            q = null;
            b = -1;
        } else if (q) continue;
        else if (i === b && c === '"') {
            i = j + 1;
            q = c;
        } else if (i === b && c === "'") {
            i = j + 1;
            q = c;
        } else if (c === "." && !b) {
            if (j > i) push();
            else i = j + 1;
        } else if (c === "[") {
            if (j > i) push();
            b = i = j + 1;
        } else if (c === "]") {
            if (!b) error("Access path missing open bracket: " + p);
            if (b > 0) push();
            b = 0;
            i = j + 1;
        }
    }
    if (b) error("Access path missing closing bracket: " + p);
    if (q) error("Access path missing closing quote: " + p);
    if (j > i) {
        j++;
        push();
    }
    return path;
}
function field(field, name, opt) {
    const path = splitAccessPath(field);
    field = path.length === 1 ? path[0] : field;
    return accessor((opt && opt.get || getter)(path), [
        field
    ], name || field);
}
const id = field("id");
const identity = accessor((_)=>_, [], "identity");
const zero = accessor(()=>0, [], "zero");
const one = accessor(()=>1, [], "one");
const truthy = accessor(()=>true, [], "true");
const falsy = accessor(()=>false, [], "false");
function log$1(method, level, input) {
    const args = [
        level
    ].concat([].slice.call(input));
    console[method].apply(console, args); // eslint-disable-line no-console
}
const None = 0;
const Error$1 = 1;
const Warn = 2;
const Info = 3;
const Debug = 4;
function logger(_, method) {
    let level = _ || None;
    return {
        level (_) {
            if (arguments.length) {
                level = +_;
                return this;
            } else return level;
        },
        error () {
            if (level >= Error$1) log$1(method || "error", "ERROR", arguments);
            return this;
        },
        warn () {
            if (level >= Warn) log$1(method || "warn", "WARN", arguments);
            return this;
        },
        info () {
            if (level >= Info) log$1(method || "log", "INFO", arguments);
            return this;
        },
        debug () {
            if (level >= Debug) log$1(method || "log", "DEBUG", arguments);
            return this;
        }
    };
}
var isArray = Array.isArray;
function isObject(_) {
    return _ === Object(_);
}
const isLegalKey = (key)=>key !== "__proto__";
function mergeConfig(...configs) {
    return configs.reduce((out, source)=>{
        for(const key in source)if (key === "signals") // for signals, we merge the signals arrays
        // source signals take precedence over
        // existing signals with the same name
        out.signals = mergeNamed(out.signals, source.signals);
        else {
            // otherwise, merge objects subject to recursion constraints
            // for legend block, recurse for the layout entry only
            // for style block, recurse for all properties
            // otherwise, no recursion: objects overwrite, no merging
            const r = key === "legend" ? {
                layout: 1
            } : key === "style" ? true : null;
            writeConfig(out, key, source[key], r);
        }
        return out;
    }, {});
}
function writeConfig(output, key, value, recurse) {
    if (!isLegalKey(key)) return;
    let k, o;
    if (isObject(value) && !isArray(value)) {
        o = isObject(output[key]) ? output[key] : output[key] = {};
        for(k in value){
            if (recurse && (recurse === true || recurse[k])) writeConfig(o, k, value[k]);
            else if (isLegalKey(k)) o[k] = value[k];
        }
    } else output[key] = value;
}
function mergeNamed(a, b) {
    if (a == null) return b;
    const map = {}, out = [];
    function add(_) {
        if (!map[_.name]) {
            map[_.name] = 1;
            out.push(_);
        }
    }
    b.forEach(add);
    a.forEach(add);
    return out;
}
function peek(array) {
    return array[array.length - 1];
}
function toNumber(_) {
    return _ == null || _ === "" ? null : +_;
}
const exp = (sign)=>(x)=>sign * Math.exp(x);
const log = (sign)=>(x)=>Math.log(sign * x);
const symlog = (c)=>(x)=>Math.sign(x) * Math.log1p(Math.abs(x / c));
const symexp = (c)=>(x)=>Math.sign(x) * Math.expm1(Math.abs(x)) * c;
const pow = (exponent)=>(x)=>x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
function pan(domain, delta, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift(peek(domain)), dd = (d1 - d0) * delta;
    return [
        ground(d0 - dd),
        ground(d1 - dd)
    ];
}
function panLinear(domain, delta) {
    return pan(domain, delta, toNumber, identity);
}
function panLog(domain, delta) {
    var sign = Math.sign(domain[0]);
    return pan(domain, delta, log(sign), exp(sign));
}
function panPow(domain, delta, exponent) {
    return pan(domain, delta, pow(exponent), pow(1 / exponent));
}
function panSymlog(domain, delta, constant) {
    return pan(domain, delta, symlog(constant), symexp(constant));
}
function zoom(domain, anchor, scale, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift(peek(domain)), da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [
        ground(da + (d0 - da) * scale),
        ground(da + (d1 - da) * scale)
    ];
}
function zoomLinear(domain, anchor, scale) {
    return zoom(domain, anchor, scale, toNumber, identity);
}
function zoomLog(domain, anchor, scale) {
    const sign = Math.sign(domain[0]);
    return zoom(domain, anchor, scale, log(sign), exp(sign));
}
function zoomPow(domain, anchor, scale, exponent) {
    return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));
}
function zoomSymlog(domain, anchor, scale, constant) {
    return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
}
function quarter(date) {
    return 1 + ~~(new Date(date).getMonth() / 3);
}
function utcquarter(date) {
    return 1 + ~~(new Date(date).getUTCMonth() / 3);
}
function array(_) {
    return _ != null ? isArray(_) ? _ : [
        _
    ] : [];
}
/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */ function clampRange(range, min, max) {
    let lo = range[0], hi = range[1], span;
    if (hi < lo) {
        span = hi;
        hi = lo;
        lo = span;
    }
    span = hi - lo;
    return span >= max - min ? [
        min,
        max
    ] : [
        lo = Math.min(Math.max(lo, min), max - span),
        lo + span
    ];
}
function isFunction(_) {
    return typeof _ === "function";
}
const DESCENDING = "descending";
function compare(fields, orders, opt) {
    opt = opt || {};
    orders = array(orders) || [];
    const ord = [], get = [], fmap = {}, gen = opt.comparator || comparator;
    array(fields).forEach((f, i)=>{
        if (f == null) return;
        ord.push(orders[i] === DESCENDING ? -1 : 1);
        get.push(f = isFunction(f) ? f : field(f, null, opt));
        (accessorFields(f) || []).forEach((_)=>fmap[_] = 1);
    });
    return get.length === 0 ? null : accessor(gen(get, ord), Object.keys(fmap));
}
const ascending = (u, v)=>(u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
const comparator = (fields, orders)=>fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);
const compare1 = (field, order)=>function(a, b) {
        return ascending(field(a), field(b)) * order;
    };
const compareN = (fields, orders, n)=>{
    orders.push(0); // pad zero for convenient lookup
    return function(a, b) {
        let f, c = 0, i = -1;
        while(c === 0 && ++i < n){
            f = fields[i];
            c = ascending(f(a), f(b));
        }
        return c * orders[i];
    };
};
function constant(_) {
    return isFunction(_) ? _ : ()=>_;
}
function debounce(delay, handler) {
    let tid;
    return (e)=>{
        if (tid) clearTimeout(tid);
        tid = setTimeout(()=>(handler(e), tid = null), delay);
    };
}
function extend(_) {
    for(let x, k, i = 1, len = arguments.length; i < len; ++i){
        x = arguments[i];
        for(k in x)_[k] = x[k];
    }
    return _;
}
/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */ function extent(array, f) {
    let i = 0, n, v, min, max;
    if (array && (n = array.length)) {
        if (f == null) {
            // find first valid value
            for(v = array[i]; i < n && (v == null || v !== v); v = array[++i]);
            min = max = v; // visit all other values
            for(; i < n; ++i){
                v = array[i]; // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        } else {
            // find first valid value
            for(v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));
            min = max = v; // visit all other values
            for(; i < n; ++i){
                v = f(array[i]); // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        }
    }
    return [
        min,
        max
    ];
}
function extentIndex(array, f) {
    const n = array.length;
    let i = -1, a, b, c, u, v;
    if (f == null) {
        while(++i < n){
            b = array[i];
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = array[i];
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    } else {
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    }
    return [
        u,
        v
    ];
}
const hop = Object.prototype.hasOwnProperty;
function has(object, property) {
    return hop.call(object, property);
}
const NULL = {};
function fastmap(input) {
    let obj = {}, test;
    function has$1(key) {
        return has(obj, key) && obj[key] !== NULL;
    }
    const map = {
        size: 0,
        empty: 0,
        object: obj,
        has: has$1,
        get (key) {
            return has$1(key) ? obj[key] : undefined;
        },
        set (key, value) {
            if (!has$1(key)) {
                ++map.size;
                if (obj[key] === NULL) --map.empty;
            }
            obj[key] = value;
            return this;
        },
        delete (key) {
            if (has$1(key)) {
                --map.size;
                ++map.empty;
                obj[key] = NULL;
            }
            return this;
        },
        clear () {
            map.size = map.empty = 0;
            map.object = obj = {};
        },
        test (_) {
            if (arguments.length) {
                test = _;
                return map;
            } else return test;
        },
        clean () {
            const next = {};
            let size = 0;
            for(const key in obj){
                const value = obj[key];
                if (value !== NULL && (!test || !test(value))) {
                    next[key] = value;
                    ++size;
                }
            }
            map.size = size;
            map.empty = 0;
            map.object = obj = next;
        }
    };
    if (input) Object.keys(input).forEach((key)=>{
        map.set(key, input[key]);
    });
    return map;
}
function flush(range, value, threshold, left, right, center) {
    if (!threshold && threshold !== 0) return center;
    const t = +threshold;
    let a = range[0], b = peek(range), l; // swap endpoints if range is reversed
    if (b < a) {
        l = a;
        a = b;
        b = l;
    } // compare value to endpoints
    l = Math.abs(value - a);
    const r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint
    return l < r && l <= t ? left : r <= t ? right : center;
}
function inherits(child, parent, members) {
    const proto = child.prototype = Object.create(parent.prototype);
    Object.defineProperty(proto, "constructor", {
        value: child,
        writable: true,
        enumerable: true,
        configurable: true
    });
    return extend(proto, members);
}
/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */ function inrange(value, range, left, right) {
    let r0 = range[0], r1 = range[range.length - 1], t;
    if (r0 > r1) {
        t = r0;
        r0 = r1;
        r1 = t;
    }
    left = left === undefined || left;
    right = right === undefined || right;
    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}
function isBoolean(_) {
    return typeof _ === "boolean";
}
function isDate(_) {
    return Object.prototype.toString.call(_) === "[object Date]";
}
function isIterable(_) {
    return _ && isFunction(_[Symbol.iterator]);
}
function isNumber(_) {
    return typeof _ === "number";
}
function isRegExp(_) {
    return Object.prototype.toString.call(_) === "[object RegExp]";
}
function isString(_) {
    return typeof _ === "string";
}
function key(fields, flat, opt) {
    if (fields) fields = flat ? array(fields).map((f)=>f.replace(/\\(.)/g, "$1")) : array(fields);
    const len = fields && fields.length, gen = opt && opt.get || getter, map = (f)=>gen(flat ? [
            f
        ] : splitAccessPath(f));
    let fn;
    if (!len) fn = function() {
        return "";
    };
    else if (len === 1) {
        const get = map(fields[0]);
        fn = function(_) {
            return "" + get(_);
        };
    } else {
        const get1 = fields.map(map);
        fn = function(_) {
            let s = "" + get1[0](_), i = 0;
            while(++i < len)s += "|" + get1[i](_);
            return s;
        };
    }
    return accessor(fn, fields, "key");
}
function lerp(array, frac) {
    const lo = array[0], hi = peek(array), f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
const DEFAULT_MAX_SIZE = 10000; // adapted from https://github.com/dominictarr/hashlru/ (MIT License)
function lruCache(maxsize) {
    maxsize = +maxsize || DEFAULT_MAX_SIZE;
    let curr, prev, size;
    const clear = ()=>{
        curr = {};
        prev = {};
        size = 0;
    };
    const update = (key, value)=>{
        if (++size > maxsize) {
            prev = curr;
            curr = {};
            size = 1;
        }
        return curr[key] = value;
    };
    clear();
    return {
        clear,
        has: (key)=>has(curr, key) || has(prev, key),
        get: (key)=>has(curr, key) ? curr[key] : has(prev, key) ? update(key, prev[key]) : undefined,
        set: (key, value)=>has(curr, key) ? curr[key] = value : update(key, value)
    };
}
function merge(compare, array0, array1, output) {
    const n0 = array0.length, n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    const merged = output || new array0.constructor(n0 + n1);
    let i0 = 0, i1 = 0, i = 0;
    for(; i0 < n0 && i1 < n1; ++i)merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    for(; i0 < n0; ++i0, ++i)merged[i] = array0[i0];
    for(; i1 < n1; ++i1, ++i)merged[i] = array1[i1];
    return merged;
}
function repeat(str, reps) {
    let s = "";
    while(--reps >= 0)s += str;
    return s;
}
function pad(str, length, padchar, align) {
    const c = padchar || " ", s = str + "", n = length - s.length;
    return n <= 0 ? s : align === "left" ? repeat(c, n) + s : align === "center" ? repeat(c, ~~(n / 2)) + s + repeat(c, Math.ceil(n / 2)) : s + repeat(c, n);
}
/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */ function span(array) {
    return array && peek(array) - array[0] || 0;
}
function $(x) {
    return isArray(x) ? "[" + x.map($) + "]" : isObject(x) || isString(x) ? // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x;
}
function toBoolean(_) {
    return _ == null || _ === "" ? null : !_ || _ === "false" || _ === "0" ? false : !!_;
}
const defaultParser = (_)=>isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
function toDate(_, parser) {
    parser = parser || defaultParser;
    return _ == null || _ === "" ? null : parser(_);
}
function toString(_) {
    return _ == null || _ === "" ? null : _ + "";
}
function toSet(_) {
    const s = {}, n = _.length;
    for(let i = 0; i < n; ++i)s[_[i]] = true;
    return s;
}
function truncate(str, length, align, ellipsis) {
    const e = ellipsis != null ? ellipsis : "…", s = str + "", n = s.length, l = Math.max(0, length - e.length);
    return n <= length ? s : align === "left" ? e + s.slice(n - l) : align === "center" ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}
function visitArray(array, filter, visitor) {
    if (array) {
        if (filter) {
            const n = array.length;
            for(let i = 0; i < n; ++i){
                const t = filter(array[i]);
                if (t) visitor(t, i, array);
            }
        } else array.forEach(visitor);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jA2du":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"3NitK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Dataflow", ()=>Dataflow);
parcelHelpers.export(exports, "EventStream", ()=>EventStream);
parcelHelpers.export(exports, "MultiPulse", ()=>MultiPulse);
parcelHelpers.export(exports, "Operator", ()=>Operator);
parcelHelpers.export(exports, "Parameters", ()=>Parameters);
parcelHelpers.export(exports, "Pulse", ()=>Pulse);
parcelHelpers.export(exports, "Transform", ()=>Transform);
parcelHelpers.export(exports, "UniqueList", ()=>UniqueList);
parcelHelpers.export(exports, "asyncCallback", ()=>asyncCallback);
parcelHelpers.export(exports, "changeset", ()=>changeset);
parcelHelpers.export(exports, "definition", ()=>definition);
parcelHelpers.export(exports, "derive", ()=>derive);
parcelHelpers.export(exports, "ingest", ()=>ingest$1);
parcelHelpers.export(exports, "isChangeSet", ()=>isChangeSet);
parcelHelpers.export(exports, "isTuple", ()=>isTuple);
parcelHelpers.export(exports, "rederive", ()=>rederive);
parcelHelpers.export(exports, "replace", ()=>replace);
parcelHelpers.export(exports, "stableCompare", ()=>stableCompare);
parcelHelpers.export(exports, "transform", ()=>transform);
parcelHelpers.export(exports, "transforms", ()=>transforms);
parcelHelpers.export(exports, "tupleid", ()=>tupleid);
var _vegaUtil = require("vega-util");
var _vegaLoader = require("vega-loader");
var _vegaFormat = require("vega-format");
function UniqueList(idFunc) {
    const $ = idFunc || (0, _vegaUtil.identity), list = [], ids = {};
    list.add = (_)=>{
        const id = $(_);
        if (!ids[id]) {
            ids[id] = 1;
            list.push(_);
        }
        return list;
    };
    list.remove = (_)=>{
        const id = $(_);
        if (ids[id]) {
            ids[id] = 0;
            const idx = list.indexOf(_);
            if (idx >= 0) list.splice(idx, 1);
        }
        return list;
    };
    return list;
}
/**
 * Invoke and await a potentially async callback function. If
 * an error occurs, trap it and route to Dataflow.error.
 * @param {Dataflow} df - The dataflow instance
 * @param {function} callback - A callback function to invoke
 *   and then await. The dataflow will be passed as the single
 *   argument to the function.
 */ async function asyncCallback(df, callback) {
    try {
        await callback(df);
    } catch (err) {
        df.error(err);
    }
}
const TUPLE_ID_KEY = Symbol("vega_id");
let TUPLE_ID = 1;
/**
 * Checks if an input value is a registered tuple.
 * @param {*} t - The value to check.
 * @return {boolean} True if the input is a tuple, false otherwise.
 */ function isTuple(t) {
    return !!(t && tupleid(t));
}
/**
 * Returns the id of a tuple.
 * @param {object} t - The input tuple.
 * @return {*} the tuple id.
 */ function tupleid(t) {
    return t[TUPLE_ID_KEY];
}
/**
 * Sets the id of a tuple.
 * @param {object} t - The input tuple.
 * @param {*} id - The id value to set.
 * @return {object} the input tuple.
 */ function setid(t, id) {
    t[TUPLE_ID_KEY] = id;
    return t;
}
/**
 * Ingest an object or value as a data tuple.
 * If the input value is an object, an id field will be added to it. For
 * efficiency, the input object is modified directly. A copy is not made.
 * If the input value is a literal, it will be wrapped in a new object
 * instance, with the value accessible as the 'data' property.
 * @param datum - The value to ingest.
 * @return {object} The ingested data tuple.
 */ function ingest$1(datum) {
    const t = datum === Object(datum) ? datum : {
        data: datum
    };
    return tupleid(t) ? t : setid(t, TUPLE_ID++);
}
/**
 * Given a source tuple, return a derived copy.
 * @param {object} t - The source tuple.
 * @return {object} The derived tuple.
 */ function derive(t) {
    return rederive(t, ingest$1({}));
}
/**
 * Rederive a derived tuple by copying values from the source tuple.
 * @param {object} t - The source tuple.
 * @param {object} d - The derived tuple.
 * @return {object} The derived tuple.
 */ function rederive(t, d) {
    for(const k in t)d[k] = t[k];
    return d;
}
/**
 * Replace an existing tuple with a new tuple.
 * @param {object} t - The existing data tuple.
 * @param {object} d - The new tuple that replaces the old.
 * @return {object} The new tuple.
 */ function replace(t, d) {
    return setid(d, tupleid(t));
}
/**
 * Generate an augmented comparator function that provides stable
 * sorting by tuple id when the given comparator produces ties.
 * @param {function} cmp - The comparator to augment.
 * @param {function} [f] - Optional tuple accessor function.
 * @return {function} An augmented comparator function.
 */ function stableCompare(cmp, f) {
    return !cmp ? null : f ? (a, b)=>cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b)=>cmp(a, b) || tupleid(a) - tupleid(b);
}
function isChangeSet(v) {
    return v && v.constructor === changeset;
}
function changeset() {
    const add = [], // insert tuples
    rem = [], // remove tuples
    mod = [], // modify tuples
    remp = [], // remove by predicate
    modp = []; // modify by predicate
    let clean = null, reflow = false;
    return {
        constructor: changeset,
        insert (t) {
            const d = (0, _vegaUtil.array)(t), n = d.length;
            for(let i = 0; i < n; ++i)add.push(d[i]);
            return this;
        },
        remove (t) {
            const a = (0, _vegaUtil.isFunction)(t) ? remp : rem, d = (0, _vegaUtil.array)(t), n = d.length;
            for(let i = 0; i < n; ++i)a.push(d[i]);
            return this;
        },
        modify (t, field, value) {
            const m = {
                field: field,
                value: (0, _vegaUtil.constant)(value)
            };
            if ((0, _vegaUtil.isFunction)(t)) {
                m.filter = t;
                modp.push(m);
            } else {
                m.tuple = t;
                mod.push(m);
            }
            return this;
        },
        encode (t, set) {
            if ((0, _vegaUtil.isFunction)(t)) modp.push({
                filter: t,
                field: set
            });
            else mod.push({
                tuple: t,
                field: set
            });
            return this;
        },
        clean (value) {
            clean = value;
            return this;
        },
        reflow () {
            reflow = true;
            return this;
        },
        pulse (pulse, tuples) {
            const cur = {}, out = {};
            let i, n, m, f, t, id; // build lookup table of current tuples
            for(i = 0, n = tuples.length; i < n; ++i)cur[tupleid(tuples[i])] = 1;
             // process individual tuples to remove
            for(i = 0, n = rem.length; i < n; ++i){
                t = rem[i];
                cur[tupleid(t)] = -1;
            } // process predicate-based removals
            for(i = 0, n = remp.length; i < n; ++i){
                f = remp[i];
                tuples.forEach((t)=>{
                    if (f(t)) cur[tupleid(t)] = -1;
                });
            } // process all add tuples
            for(i = 0, n = add.length; i < n; ++i){
                t = add[i];
                id = tupleid(t);
                if (cur[id]) // tuple already resides in dataset
                // if flagged for both add and remove, cancel
                cur[id] = 1;
                else // tuple does not reside in dataset, add
                pulse.add.push(ingest$1(add[i]));
            } // populate pulse rem list
            for(i = 0, n = tuples.length; i < n; ++i){
                t = tuples[i];
                if (cur[tupleid(t)] < 0) pulse.rem.push(t);
            } // modify helper method
            function modify(t, f, v) {
                if (v) t[f] = v(t);
                else pulse.encode = f;
                if (!reflow) out[tupleid(t)] = t;
            } // process individual tuples to modify
            for(i = 0, n = mod.length; i < n; ++i){
                m = mod[i];
                t = m.tuple;
                f = m.field;
                id = cur[tupleid(t)];
                if (id > 0) {
                    modify(t, f, m.value);
                    pulse.modifies(f);
                }
            } // process predicate-based modifications
            for(i = 0, n = modp.length; i < n; ++i){
                m = modp[i];
                f = m.filter;
                tuples.forEach((t)=>{
                    if (f(t) && cur[tupleid(t)] > 0) modify(t, m.field, m.value);
                });
                pulse.modifies(m.field);
            } // upon reflow request, populate mod with all non-removed tuples
            // otherwise, populate mod with modified tuples only
            if (reflow) pulse.mod = rem.length || remp.length ? tuples.filter((t)=>cur[tupleid(t)] > 0) : tuples.slice();
            else for(id in out)pulse.mod.push(out[id]);
             // set pulse garbage collection request
            if (clean || clean == null && (rem.length || remp.length)) pulse.clean(true);
            return pulse;
        }
    };
}
const CACHE = "_:mod:_";
/**
 * Hash that tracks modifications to assigned values.
 * Callers *must* use the set method to update values.
 */ function Parameters() {
    Object.defineProperty(this, CACHE, {
        writable: true,
        value: {}
    });
}
Parameters.prototype = {
    /**
   * Set a parameter value. If the parameter value changes, the parameter
   * will be recorded as modified.
   * @param {string} name - The parameter name.
   * @param {number} index - The index into an array-value parameter. Ignored if
   *   the argument is undefined, null or less than zero.
   * @param {*} value - The parameter value to set.
   * @param {boolean} [force=false] - If true, records the parameter as modified
   *   even if the value is unchanged.
   * @return {Parameters} - This parameter object.
   */ set (name, index, value, force) {
        const o = this, v = o[name], mod = o[CACHE];
        if (index != null && index >= 0) {
            if (v[index] !== value || force) {
                v[index] = value;
                mod[index + ":" + name] = -1;
                mod[name] = -1;
            }
        } else if (v !== value || force) {
            o[name] = value;
            mod[name] = (0, _vegaUtil.isArray)(value) ? 1 + value.length : -1;
        }
        return o;
    },
    /**
   * Tests if one or more parameters has been modified. If invoked with no
   * arguments, returns true if any parameter value has changed. If the first
   * argument is array, returns trues if any parameter name in the array has
   * changed. Otherwise, tests if the given name and optional array index has
   * changed.
   * @param {string} name - The parameter name to test.
   * @param {number} [index=undefined] - The parameter array index to test.
   * @return {boolean} - Returns true if a queried parameter was modified.
   */ modified (name, index) {
        const mod = this[CACHE];
        if (!arguments.length) {
            for(const k in mod){
                if (mod[k]) return true;
            }
            return false;
        } else if ((0, _vegaUtil.isArray)(name)) {
            for(let k1 = 0; k1 < name.length; ++k1){
                if (mod[name[k1]]) return true;
            }
            return false;
        }
        return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ":" + name] : !!mod[name];
    },
    /**
   * Clears the modification records. After calling this method,
   * all parameters are considered unmodified.
   */ clear () {
        this[CACHE] = {};
        return this;
    }
};
let OP_ID = 0;
const PULSE = "pulse", NO_PARAMS = new Parameters(); // Boolean Flags
const SKIP$1 = 1, MODIFIED = 2;
/**
 * An Operator is a processing node in a dataflow graph.
 * Each operator stores a value and an optional value update function.
 * Operators can accept a hash of named parameters. Parameter values can
 * either be direct (JavaScript literals, arrays, objects) or indirect
 * (other operators whose values will be pulled dynamically). Operators
 * included as parameters will have this operator added as a dependency.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {function(object, Pulse)} [update] - An update function. Upon
 *   evaluation of this operator, the update function will be invoked and the
 *   return value will be used as the new value of this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @see parameters
 */ function Operator(init, update, params, react) {
    this.id = ++OP_ID;
    this.value = init;
    this.stamp = -1;
    this.rank = -1;
    this.qrank = -1;
    this.flags = 0;
    if (update) this._update = update;
    if (params) this.parameters(params, react);
}
function flag(bit) {
    return function(state) {
        const f = this.flags;
        if (arguments.length === 0) return !!(f & bit);
        this.flags = state ? f | bit : f & ~bit;
        return this;
    };
}
Operator.prototype = {
    /**
   * Returns a list of target operators dependent on this operator.
   * If this list does not exist, it is created and then returned.
   * @return {UniqueList}
   */ targets () {
        return this._targets || (this._targets = UniqueList((0, _vegaUtil.id)));
    },
    /**
   * Sets the value of this operator.
   * @param {*} value - the value to set.
   * @return {Number} Returns 1 if the operator value has changed
   *   according to strict equality, returns 0 otherwise.
   */ set (value) {
        if (this.value !== value) {
            this.value = value;
            return 1;
        } else return 0;
    },
    /**
   * Indicates that operator evaluation should be skipped on the next pulse.
   * This operator will still propagate incoming pulses, but its update function
   * will not be invoked. The skip flag is reset after every pulse, so calling
   * this method will affect processing of the next pulse only.
   */ skip: flag(SKIP$1),
    /**
   * Indicates that this operator's value has been modified on its most recent
   * pulse. Normally modification is checked via strict equality; however, in
   * some cases it is more efficient to update the internal state of an object.
   * In those cases, the modified flag can be used to trigger propagation. Once
   * set, the modification flag persists across pulses until unset. The flag can
   * be used with the last timestamp to test if a modification is recent.
   */ modified: flag(MODIFIED),
    /**
   * Sets the parameters for this operator. The parameter values are analyzed for
   * operator instances. If found, this operator will be added as a dependency
   * of the parameterizing operator. Operator values are dynamically marshalled
   * from each operator parameter prior to evaluation. If a parameter value is
   * an array, the array will also be searched for Operator instances. However,
   * the search does not recurse into sub-arrays or object properties.
   * @param {object} params - A hash of operator parameters.
   * @param {boolean} [react=true] - A flag indicating if this operator should
   *   automatically update (react) when parameter values change. In other words,
   *   this flag determines if the operator registers itself as a listener on
   *   any upstream operators included in the parameters.
   * @param {boolean} [initonly=false] - A flag indicating if this operator
   *   should calculate an update only upon its initiatal evaluation, then
   *   deregister dependencies and suppress all future update invocations.
   * @return {Operator[]} - An array of upstream dependencies.
   */ parameters (params, react, initonly) {
        react = react !== false;
        const argval = this._argval = this._argval || new Parameters(), argops = this._argops = this._argops || [], deps = [];
        let name, value, n, i;
        const add = (name, index, value)=>{
            if (value instanceof Operator) {
                if (value !== this) {
                    if (react) value.targets().add(this);
                    deps.push(value);
                }
                argops.push({
                    op: value,
                    name: name,
                    index: index
                });
            } else argval.set(name, index, value);
        };
        for(name in params){
            value = params[name];
            if (name === PULSE) {
                (0, _vegaUtil.array)(value).forEach((op)=>{
                    if (!(op instanceof Operator)) (0, _vegaUtil.error)("Pulse parameters must be operator instances.");
                    else if (op !== this) {
                        op.targets().add(this);
                        deps.push(op);
                    }
                });
                this.source = value;
            } else if ((0, _vegaUtil.isArray)(value)) {
                argval.set(name, -1, Array(n = value.length));
                for(i = 0; i < n; ++i)add(name, i, value[i]);
            } else add(name, -1, value);
        }
        this.marshall().clear(); // initialize values
        if (initonly) argops.initonly = true;
        return deps;
    },
    /**
   * Internal method for marshalling parameter values.
   * Visits each operator dependency to pull the latest value.
   * @return {Parameters} A Parameters object to pass to the update function.
   */ marshall (stamp) {
        const argval = this._argval || NO_PARAMS, argops = this._argops;
        let item, i, op, mod;
        if (argops) {
            const n = argops.length;
            for(i = 0; i < n; ++i){
                item = argops[i];
                op = item.op;
                mod = op.modified() && op.stamp === stamp;
                argval.set(item.name, item.index, op.value, mod);
            }
            if (argops.initonly) {
                for(i = 0; i < n; ++i){
                    item = argops[i];
                    item.op.targets().remove(this);
                }
                this._argops = null;
                this._update = null;
            }
        }
        return argval;
    },
    /**
   * Detach this operator from the dataflow.
   * Unregisters listeners on upstream dependencies.
   */ detach () {
        const argops = this._argops;
        let i, n, item, op;
        if (argops) for(i = 0, n = argops.length; i < n; ++i){
            item = argops[i];
            op = item.op;
            if (op._targets) op._targets.remove(this);
        }
         // remove references to the source and pulse object,
        // if present, to prevent memory leaks of old data.
        this.pulse = null;
        this.source = null;
    },
    /**
   * Delegate method to perform operator processing.
   * Subclasses can override this method to perform custom processing.
   * By default, it marshalls parameters and calls the update function
   * if that function is defined. If the update function does not
   * change the operator value then StopPropagation is returned.
   * If no update function is defined, this method does nothing.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return The output pulse or StopPropagation. A falsy return value
   *   (including undefined) will let the input pulse pass through.
   */ evaluate (pulse) {
        const update = this._update;
        if (update) {
            const params = this.marshall(pulse.stamp), v = update.call(this, params, pulse);
            params.clear();
            if (v !== this.value) this.value = v;
            else if (!this.modified()) return pulse.StopPropagation;
        }
    },
    /**
   * Run this operator for the current pulse. If this operator has already
   * been run at (or after) the pulse timestamp, returns StopPropagation.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */ run (pulse) {
        if (pulse.stamp < this.stamp) return pulse.StopPropagation;
        let rv;
        if (this.skip()) {
            this.skip(false);
            rv = 0;
        } else rv = this.evaluate(pulse);
        return this.pulse = rv || pulse;
    }
};
/**
 * Add an operator to the dataflow graph. This function accepts a
 * variety of input argument types. The basic signature supports an
 * initial value, update function and parameters. If the first parameter
 * is an Operator instance, it will be added directly. If it is a
 * constructor for an Operator subclass, a new instance will be instantiated.
 * Otherwise, if the first parameter is a function instance, it will be used
 * as the update function and a null initial value is assumed.
 * @param {*} init - One of: the operator to add, the initial value of
 *   the operator, an operator class to instantiate, or an update function.
 * @param {function} [update] - The operator update function.
 * @param {object} [params] - The operator parameters.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @return {Operator} - The added operator.
 */ function add(init, update, params, react) {
    let shift = 1, op;
    if (init instanceof Operator) op = init;
    else if (init && init.prototype instanceof Operator) op = new init();
    else if ((0, _vegaUtil.isFunction)(init)) op = new Operator(null, init);
    else {
        shift = 0;
        op = new Operator(init, update);
    }
    this.rank(op);
    if (shift) {
        react = params;
        params = update;
    }
    if (params) this.connect(op, op.parameters(params, react));
    this.touch(op);
    return op;
}
/**
 * Connect a target operator as a dependent of source operators.
 * If necessary, this method will rerank the target operator and its
 * dependents to ensure propagation proceeds in a topologically sorted order.
 * @param {Operator} target - The target operator.
 * @param {Array<Operator>} - The source operators that should propagate
 *   to the target operator.
 */ function connect(target, sources) {
    const targetRank = target.rank, n = sources.length;
    for(let i = 0; i < n; ++i)if (targetRank < sources[i].rank) {
        this.rerank(target);
        return;
    }
}
let STREAM_ID = 0;
/**
 * Models an event stream.
 * @constructor
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @param {function(Object)} [receive] - Event callback function to invoke
 *   upon receipt of a new event. Use to override standard event processing.
 */ function EventStream(filter, apply, receive) {
    this.id = ++STREAM_ID;
    this.value = null;
    if (receive) this.receive = receive;
    if (filter) this._filter = filter;
    if (apply) this._apply = apply;
}
/**
 * Creates a new event stream instance with the provided
 * (optional) filter, apply and receive functions.
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @see EventStream
 */ function stream(filter, apply, receive) {
    return new EventStream(filter, apply, receive);
}
EventStream.prototype = {
    _filter: (0, _vegaUtil.truthy),
    _apply: (0, _vegaUtil.identity),
    targets () {
        return this._targets || (this._targets = UniqueList((0, _vegaUtil.id)));
    },
    consume (_) {
        if (!arguments.length) return !!this._consume;
        this._consume = !!_;
        return this;
    },
    receive (evt) {
        if (this._filter(evt)) {
            const val = this.value = this._apply(evt), trg = this._targets, n = trg ? trg.length : 0;
            for(let i = 0; i < n; ++i)trg[i].receive(val);
            if (this._consume) {
                evt.preventDefault();
                evt.stopPropagation();
            }
        }
    },
    filter (filter) {
        const s = stream(filter);
        this.targets().add(s);
        return s;
    },
    apply (apply) {
        const s = stream(null, apply);
        this.targets().add(s);
        return s;
    },
    merge () {
        const s = stream();
        this.targets().add(s);
        for(let i = 0, n = arguments.length; i < n; ++i)arguments[i].targets().add(s);
        return s;
    },
    throttle (pause) {
        let t = -1;
        return this.filter(()=>{
            const now = Date.now();
            if (now - t > pause) {
                t = now;
                return 1;
            } else return 0;
        });
    },
    debounce (delay) {
        const s = stream();
        this.targets().add(stream(null, null, (0, _vegaUtil.debounce)(delay, (e)=>{
            const df = e.dataflow;
            s.receive(e);
            if (df && df.run) df.run();
        })));
        return s;
    },
    between (a, b) {
        let active = false;
        a.targets().add(stream(null, null, ()=>active = true));
        b.targets().add(stream(null, null, ()=>active = false));
        return this.filter(()=>active);
    },
    detach () {
        // ensures compatibility with operators (#2753)
        // remove references to other streams and filter functions that may
        // be bound to subcontexts that need to be garbage collected.
        this._filter = (0, _vegaUtil.truthy);
        this._targets = null;
    }
};
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor. The input must
 *  support the addEventListener method.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @param {function(object): *} [apply] - Event application function.
 *   If provided, this function will be invoked and the result will be
 *   used as the downstream event value.
 * @return {EventStream}
 */ function events(source, type, filter, apply) {
    const df = this, s = stream(filter, apply), send = function(e) {
        e.dataflow = df;
        try {
            s.receive(e);
        } catch (error) {
            df.error(error);
        } finally{
            df.run();
        }
    };
    let sources;
    if (typeof source === "string" && typeof document !== "undefined") sources = document.querySelectorAll(source);
    else sources = (0, _vegaUtil.array)(source);
    const n = sources.length;
    for(let i = 0; i < n; ++i)sources[i].addEventListener(type, send);
    return s;
}
function parse(data, format) {
    const locale = this.locale();
    return (0, _vegaLoader.read)(data, format, locale.timeParse, locale.utcParse);
}
/**
 * Ingests new data into the dataflow. First parses the data using the
 * vega-loader read method, then pulses a changeset to the target operator.
 * @param {Operator} target - The Operator to target with ingested data,
 *   typically a Collect transform instance.
 * @param {*} data - The input data, prior to parsing. For JSON this may
 *   be a string or an object. For CSV, TSV, etc should be a string.
 * @param {object} format - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @returns {Dataflow}
 */ function ingest(target, data, format) {
    data = this.parse(data, format);
    return this.pulse(target, this.changeset().insert(data));
}
/**
 * Request data from an external source, parse it, and return a Promise.
 * @param {string} url - The URL from which to load the data. This string
 *   is passed to the vega-loader load method.
 * @param {object} [format] - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @return {Promise} A Promise that resolves upon completion of the request.
 *   The resolved object contains the following properties:
 *   - data: an array of parsed data (or null upon error)
 *   - status: a code for success (0), load fail (-1), or parse fail (-2)
 */ async function request(url, format) {
    const df = this;
    let status = 0, data;
    try {
        data = await df.loader().load(url, {
            context: "dataflow",
            response: (0, _vegaLoader.responseType)(format && format.type)
        });
        try {
            data = df.parse(data, format);
        } catch (err) {
            status = -2;
            df.warn("Data ingestion failed", url, err);
        }
    } catch (err1) {
        status = -1;
        df.warn("Loading failed", url, err1);
    }
    return {
        data,
        status
    };
}
async function preload(target, url, format) {
    const df = this, pending = df._pending || loadPending(df);
    pending.requests += 1;
    const res = await df.request(url, format);
    df.pulse(target, df.changeset().remove((0, _vegaUtil.truthy)).insert(res.data || []));
    pending.done();
    return res;
}
function loadPending(df) {
    let accept;
    const pending = new Promise((a)=>accept = a);
    pending.requests = 0;
    pending.done = ()=>{
        if (--pending.requests === 0) {
            df._pending = null;
            accept(df);
        }
    };
    return df._pending = pending;
}
const SKIP = {
    skip: true
};
/**
 * Perform operator updates in response to events. Applies an
 * update function to compute a new operator value. If the update function
 * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
 * changes. Otherwise, the operator value will be updated to the return value.
 * @param {EventStream|Operator} source - The event source to react to.
 *   This argument can be either an EventStream or an Operator.
 * @param {Operator|function(object):Operator} target - The operator to update.
 *   This argument can either be an Operator instance or (if the source
 *   argument is an EventStream), a function that accepts an event object as
 *   input and returns an Operator to target.
 * @param {function(Parameters,Event): *} [update] - Optional update function
 *   to compute the new operator value, or a literal value to set. Update
 *   functions expect to receive a parameter object and event as arguments.
 *   This function can either return a new operator value or (if the source
 *   argument is an EventStream) a {@link ChangeSet} instance to pulse
 *   the target operator with tuple changes.
 * @param {object} [params] - The update function parameters.
 * @param {object} [options] - Additional options hash. If not overridden,
 *   updated operators will be skipped by default.
 * @param {boolean} [options.skip] - If true, the operator will
 *  be skipped: it will not be evaluated, but its dependents will be.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @return {Dataflow}
 */ function on(source, target, update, params, options) {
    const fn = source instanceof Operator ? onOperator : onStream;
    fn(this, source, target, update, params, options);
    return this;
}
function onStream(df, stream, target, update, params, options) {
    const opt = (0, _vegaUtil.extend)({}, options, SKIP);
    let func, op;
    if (!(0, _vegaUtil.isFunction)(target)) target = (0, _vegaUtil.constant)(target);
    if (update === undefined) func = (e)=>df.touch(target(e));
    else if ((0, _vegaUtil.isFunction)(update)) {
        op = new Operator(null, update, params, false);
        func = (e)=>{
            op.evaluate(e);
            const t = target(e), v = op.value;
            isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
        };
    } else func = (e)=>df.update(target(e), update, opt);
    stream.apply(func);
}
function onOperator(df, source, target, update, params, options) {
    if (update === undefined) source.targets().add(target);
    else {
        const opt = options || {}, op = new Operator(null, updater(target, update), params, false);
        op.modified(opt.force);
        op.rank = source.rank; // immediately follow source
        source.targets().add(op); // add dependency
        if (target) {
            op.skip(true); // skip first invocation
            op.value = target.value; // initialize value
            op.targets().add(target); // chain dependencies
            df.connect(target, [
                op
            ]); // rerank as needed, #1672
        }
    }
}
function updater(target, update) {
    update = (0, _vegaUtil.isFunction)(update) ? update : (0, _vegaUtil.constant)(update);
    return target ? function(_, pulse) {
        const value = update(_, pulse);
        if (!target.skip()) target.skip(value !== this.value).value = value;
        return value;
    } : update;
}
/**
 * Assigns a rank to an operator. Ranks are assigned in increasing order
 * by incrementing an internal rank counter.
 * @param {Operator} op - The operator to assign a rank.
 */ function rank(op) {
    op.rank = ++this._rank;
}
/**
 * Re-ranks an operator and all downstream target dependencies. This
 * is necessary when upstream dependencies of higher rank are added to
 * a target operator.
 * @param {Operator} op - The operator to re-rank.
 */ function rerank(op) {
    const queue = [
        op
    ];
    let cur, list, i;
    while(queue.length){
        this.rank(cur = queue.pop());
        if (list = cur._targets) for(i = list.length; --i >= 0;){
            queue.push(cur = list[i]);
            if (cur === op) (0, _vegaUtil.error)("Cycle detected in dataflow graph.");
        }
    }
}
/**
 * Sentinel value indicating pulse propagation should stop.
 */ const StopPropagation = {}; // Pulse visit type flags
const ADD = 1, REM = 2, MOD = 4, ADD_REM = ADD | REM, ADD_MOD = ADD | MOD, ALL = ADD | REM | MOD, REFLOW = 8, SOURCE = 16, NO_SOURCE = 32, NO_FIELDS = 64;
/**
 * A Pulse enables inter-operator communication during a run of the
 * dataflow graph. In addition to the current timestamp, a pulse may also
 * contain a change-set of added, removed or modified data tuples, as well as
 * a pointer to a full backing data source. Tuple change sets may not
 * be fully materialized; for example, to prevent needless array creation
 * a change set may include larger arrays and corresponding filter functions.
 * The pulse provides a {@link visit} method to enable proper and efficient
 * iteration over requested data tuples.
 *
 * In addition, each pulse can track modification flags for data tuple fields.
 * Responsible transform operators should call the {@link modifies} method to
 * indicate changes to data fields. The {@link modified} method enables
 * querying of this modification state.
 *
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The current propagation timestamp.
 * @param {string} [encode] - An optional encoding set name, which is then
 *   accessible as Pulse.encode. Operators can respond to (or ignore) this
 *   setting as appropriate. This parameter can be used in conjunction with
 *   the Encode transform in the vega-encode module.
 */ function Pulse(dataflow, stamp, encode) {
    this.dataflow = dataflow;
    this.stamp = stamp == null ? -1 : stamp;
    this.add = [];
    this.rem = [];
    this.mod = [];
    this.fields = null;
    this.encode = encode || null;
}
function materialize(data, filter) {
    const out = [];
    (0, _vegaUtil.visitArray)(data, filter, (_)=>out.push(_));
    return out;
}
function filter(pulse, flags) {
    const map = {};
    pulse.visit(flags, (t)=>{
        map[tupleid(t)] = 1;
    });
    return (t)=>map[tupleid(t)] ? null : t;
}
function addFilter(a, b) {
    return a ? (t, i)=>a(t, i) && b(t, i) : b;
}
Pulse.prototype = {
    /**
   * Sentinel value indicating pulse propagation should stop.
   */ StopPropagation,
    /**
   * Boolean flag indicating ADD (added) tuples.
   */ ADD,
    /**
   * Boolean flag indicating REM (removed) tuples.
   */ REM,
    /**
   * Boolean flag indicating MOD (modified) tuples.
   */ MOD,
    /**
   * Boolean flag indicating ADD (added) and REM (removed) tuples.
   */ ADD_REM,
    /**
   * Boolean flag indicating ADD (added) and MOD (modified) tuples.
   */ ADD_MOD,
    /**
   * Boolean flag indicating ADD, REM and MOD tuples.
   */ ALL,
    /**
   * Boolean flag indicating all tuples in a data source
   * except for the ADD, REM and MOD tuples.
   */ REFLOW,
    /**
   * Boolean flag indicating a 'pass-through' to a
   * backing data source, ignoring ADD, REM and MOD tuples.
   */ SOURCE,
    /**
   * Boolean flag indicating that source data should be
   * suppressed when creating a forked pulse.
   */ NO_SOURCE,
    /**
   * Boolean flag indicating that field modifications should be
   * suppressed when creating a forked pulse.
   */ NO_FIELDS,
    /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created.
   * @return {Pulse} - The forked pulse instance.
   * @see init
   */ fork (flags) {
        return new Pulse(this.dataflow).init(this, flags);
    },
    /**
   * Creates a copy of this pulse with new materialized array
   * instances for the ADD, REM, MOD, and SOURCE arrays.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse} - The cloned pulse instance.
   * @see init
   */ clone () {
        const p = this.fork(ALL);
        p.add = p.add.slice();
        p.rem = p.rem.slice();
        p.mod = p.mod.slice();
        if (p.source) p.source = p.source.slice();
        return p.materialize(ALL | SOURCE);
    },
    /**
   * Returns a pulse that adds all tuples from a backing source. This is
   * useful for cases where operators are added to a dataflow after an
   * upstream data pipeline has already been processed, ensuring that
   * new operators can observe all tuples within a stream.
   * @return {Pulse} - A pulse instance with all source tuples included
   *   in the add array. If the current pulse already has all source
   *   tuples in its add array, it is returned directly. If the current
   *   pulse does not have a backing source, it is returned directly.
   */ addAll () {
        let p = this;
        const reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)
         || !p.rem.length && p.source.length === p.add.length;
        if (reuse) return p;
        else {
            p = new Pulse(this.dataflow).init(this);
            p.add = p.source;
            p.rem = []; // new operators can ignore rem #2769
            return p;
        }
    },
    /**
   * Initialize this pulse based on the values of another pulse. This method
   * is used internally by {@link fork} to initialize a new forked tuple.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {Pulse} src - The source pulse to copy from.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created. By default, source data arrays are copied
   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
   * @return {Pulse} - Returns this Pulse instance.
   */ init (src, flags) {
        const p = this;
        p.stamp = src.stamp;
        p.encode = src.encode;
        if (src.fields && !(flags & NO_FIELDS)) p.fields = src.fields;
        if (flags & ADD) {
            p.addF = src.addF;
            p.add = src.add;
        } else {
            p.addF = null;
            p.add = [];
        }
        if (flags & REM) {
            p.remF = src.remF;
            p.rem = src.rem;
        } else {
            p.remF = null;
            p.rem = [];
        }
        if (flags & MOD) {
            p.modF = src.modF;
            p.mod = src.mod;
        } else {
            p.modF = null;
            p.mod = [];
        }
        if (flags & NO_SOURCE) {
            p.srcF = null;
            p.source = null;
        } else {
            p.srcF = src.srcF;
            p.source = src.source;
            if (src.cleans) p.cleans = src.cleans;
        }
        return p;
    },
    /**
   * Schedules a function to run after pulse propagation completes.
   * @param {function} func - The function to run.
   */ runAfter (func) {
        this.dataflow.runAfter(func);
    },
    /**
   * Indicates if tuples have been added, removed or modified.
   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
   *   Defaults to ALL, returning true if any tuple type has changed.
   * @return {boolean} - Returns true if one or more queried tuple types have
   *   changed, false otherwise.
   */ changed (flags) {
        const f = flags || ALL;
        return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
    },
    /**
   * Forces a "reflow" of tuple values, such that all tuples in the backing
   * source are added to the MOD set, unless already present in the ADD set.
   * @param {boolean} [fork=false] - If true, returns a forked copy of this
   *   pulse, and invokes reflow on that derived pulse.
   * @return {Pulse} - The reflowed pulse instance.
   */ reflow (fork) {
        if (fork) return this.fork(ALL).reflow();
        const len = this.add.length, src = this.source && this.source.length;
        if (src && src !== len) {
            this.mod = this.source;
            if (len) this.filter(MOD, filter(this, ADD));
        }
        return this;
    },
    /**
   * Get/set metadata to pulse requesting garbage collection
   * to reclaim currently unused resources.
   */ clean (value) {
        if (arguments.length) {
            this.cleans = !!value;
            return this;
        } else return this.cleans;
    },
    /**
   * Marks one or more data field names as modified to assist dependency
   * tracking and incremental processing by transform operators.
   * @param {string|Array<string>} _ - The field(s) to mark as modified.
   * @return {Pulse} - This pulse instance.
   */ modifies (_) {
        const hash = this.fields || (this.fields = {});
        if ((0, _vegaUtil.isArray)(_)) _.forEach((f)=>hash[f] = true);
        else hash[_] = true;
        return this;
    },
    /**
   * Checks if one or more data fields have been modified during this pulse
   * propagation timestamp.
   * @param {string|Array<string>} _ - The field(s) to check for modified.
   * @param {boolean} nomod - If true, will check the modified flag even if
   *   no mod tuples exist. If false (default), mod tuples must be present.
   * @return {boolean} - Returns true if any of the provided fields has been
   *   marked as modified, false otherwise.
   */ modified (_, nomod) {
        const fields = this.fields;
        return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : (0, _vegaUtil.isArray)(_) ? _.some((f)=>fields[f]) : fields[_];
    },
    /**
   * Adds a filter function to one more tuple sets. Filters are applied to
   * backing tuple arrays, to determine the actual set of tuples considered
   * added, removed or modified. They can be used to delay materialization of
   * a tuple set in order to avoid expensive array copies. In addition, the
   * filter functions can serve as value transformers: unlike standard predicate
   * function (which return boolean values), Pulse filters should return the
   * actual tuple value to process. If a tuple set is already filtered, the
   * new filter function will be appended into a conjuntive ('and') query.
   * @param {number} flags - Flags indicating the tuple set(s) to filter.
   * @param {function(*):object} filter - Filter function that will be applied
   *   to the tuple set array, and should return a data tuple if the value
   *   should be included in the tuple set, and falsy (or null) otherwise.
   * @return {Pulse} - Returns this pulse instance.
   */ filter (flags, filter) {
        const p = this;
        if (flags & ADD) p.addF = addFilter(p.addF, filter);
        if (flags & REM) p.remF = addFilter(p.remF, filter);
        if (flags & MOD) p.modF = addFilter(p.modF, filter);
        if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
        return p;
    },
    /**
   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
   * a registered filter function, it will be applied and the tuple set(s) will
   * be replaced with materialized tuple arrays.
   * @param {number} flags - Flags indicating the tuple set(s) to materialize.
   * @return {Pulse} - Returns this pulse instance.
   */ materialize (flags) {
        flags = flags || ALL;
        const p = this;
        if (flags & ADD && p.addF) {
            p.add = materialize(p.add, p.addF);
            p.addF = null;
        }
        if (flags & REM && p.remF) {
            p.rem = materialize(p.rem, p.remF);
            p.remF = null;
        }
        if (flags & MOD && p.modF) {
            p.mod = materialize(p.mod, p.modF);
            p.modF = null;
        }
        if (flags & SOURCE && p.srcF) {
            p.source = p.source.filter(p.srcF);
            p.srcF = null;
        }
        return p;
    },
    /**
   * Visit one or more tuple sets in this pulse.
   * @param {number} flags - Flags indicating the tuple set(s) to visit.
   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
   *   has been set).
   * @param {function(object):*} - Visitor function invoked per-tuple.
   * @return {Pulse} - Returns this pulse instance.
   */ visit (flags, visitor) {
        const p = this, v = visitor;
        if (flags & SOURCE) {
            (0, _vegaUtil.visitArray)(p.source, p.srcF, v);
            return p;
        }
        if (flags & ADD) (0, _vegaUtil.visitArray)(p.add, p.addF, v);
        if (flags & REM) (0, _vegaUtil.visitArray)(p.rem, p.remF, v);
        if (flags & MOD) (0, _vegaUtil.visitArray)(p.mod, p.modF, v);
        const src = p.source;
        if (flags & REFLOW && src) {
            const sum = p.add.length + p.mod.length;
            if (sum === src.length) ;
            else if (sum) (0, _vegaUtil.visitArray)(src, filter(p, ADD_MOD), v);
            else // if no add/rem/mod tuples, visit source
            (0, _vegaUtil.visitArray)(src, p.srcF, v);
        }
        return p;
    }
};
/**
 * Represents a set of multiple pulses. Used as input for operators
 * that accept multiple pulses at a time. Contained pulses are
 * accessible via the public "pulses" array property. This pulse doe
 * not carry added, removed or modified tuples directly. However,
 * the visit method can be used to traverse all such tuples contained
 * in sub-pulses with a timestamp matching this parent multi-pulse.
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The timestamp.
 * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
 */ function MultiPulse(dataflow, stamp, pulses, encode) {
    const p = this, n = pulses.length;
    let c = 0;
    this.dataflow = dataflow;
    this.stamp = stamp;
    this.fields = null;
    this.encode = encode || null;
    this.pulses = pulses;
    for(let i = 0; i < n; ++i){
        const pulse = pulses[i];
        if (pulse.stamp !== stamp) continue;
        if (pulse.fields) {
            const hash = p.fields || (p.fields = {});
            for(const f in pulse.fields)hash[f] = 1;
        }
        if (pulse.changed(p.ADD)) c |= p.ADD;
        if (pulse.changed(p.REM)) c |= p.REM;
        if (pulse.changed(p.MOD)) c |= p.MOD;
    }
    this.changes = c;
}
(0, _vegaUtil.inherits)(MultiPulse, Pulse, {
    /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse}
   */ fork (flags) {
        const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
        if (flags !== undefined) {
            if (flags & p.ADD) this.visit(p.ADD, (t)=>p.add.push(t));
            if (flags & p.REM) this.visit(p.REM, (t)=>p.rem.push(t));
            if (flags & p.MOD) this.visit(p.MOD, (t)=>p.mod.push(t));
        }
        return p;
    },
    changed (flags) {
        return this.changes & flags;
    },
    modified (_) {
        const p = this, fields = p.fields;
        return !(fields && p.changes & p.MOD) ? 0 : (0, _vegaUtil.isArray)(_) ? _.some((f)=>fields[f]) : fields[_];
    },
    filter () {
        (0, _vegaUtil.error)("MultiPulse does not support filtering.");
    },
    materialize () {
        (0, _vegaUtil.error)("MultiPulse does not support materialization.");
    },
    visit (flags, visitor) {
        const p = this, pulses = p.pulses, n = pulses.length;
        let i = 0;
        if (flags & p.SOURCE) for(; i < n; ++i)pulses[i].visit(flags, visitor);
        else {
            for(; i < n; ++i)if (pulses[i].stamp === p.stamp) pulses[i].visit(flags, visitor);
        }
        return p;
    }
});
/* eslint-disable require-atomic-updates */ /**
 * Evaluates the dataflow and returns a Promise that resolves when pulse
 * propagation completes. This method will increment the current timestamp
 * and process all updated, pulsed and touched operators. When invoked for
 * the first time, all registered operators will be processed. This method
 * should not be invoked by third-party clients, use {@link runAsync} or
 * {@link run} instead.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */ async function evaluate(encode, prerun, postrun) {
    const df = this, async = []; // if the pulse value is set, this is a re-entrant call
    if (df._pulse) return reentrant(df); // wait for pending datasets to load
    if (df._pending) await df._pending; // invoke prerun function, if provided
    if (prerun) await asyncCallback(df, prerun); // exit early if there are no updates
    if (!df._touched.length) {
        df.debug("Dataflow invoked, but nothing to do.");
        return df;
    } // increment timestamp clock
    const stamp = ++df._clock; // set the current pulse
    df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators
    df._touched.forEach((op)=>df._enqueue(op, true));
    df._touched = UniqueList((0, _vegaUtil.id));
    let count = 0, op, next, error;
    try {
        while(df._heap.size() > 0){
            // dequeue operator with highest priority
            op = df._heap.pop(); // re-queue if rank changed
            if (op.rank !== op.qrank) {
                df._enqueue(op, true);
                continue;
            } // otherwise, evaluate the operator
            next = op.run(df._getPulse(op, encode));
            if (next.then) // await if operator returns a promise directly
            next = await next;
            else if (next.async) {
                // queue parallel asynchronous execution
                async.push(next.async);
                next = StopPropagation;
            } // propagate evaluation, enqueue dependent operators
            if (next !== StopPropagation) {
                if (op._targets) op._targets.forEach((op)=>df._enqueue(op));
            } // increment visit counter
            ++count;
        }
    } catch (err) {
        df._heap.clear();
        error = err;
    } // reset pulse map
    df._input = {};
    df._pulse = null;
    df.debug(`Pulse ${stamp}: ${count} operators`);
    if (error) {
        df._postrun = [];
        df.error(error);
    } // invoke callbacks queued via runAfter
    if (df._postrun.length) {
        const pr = df._postrun.sort((a, b)=>b.priority - a.priority);
        df._postrun = [];
        for(let i = 0; i < pr.length; ++i)await asyncCallback(df, pr[i].callback);
    } // invoke postrun function, if provided
    if (postrun) await asyncCallback(df, postrun); // handle non-blocking asynchronous callbacks
    if (async.length) Promise.all(async).then((cb)=>df.runAsync(null, ()=>{
            cb.forEach((f)=>{
                try {
                    f(df);
                } catch (err) {
                    df.error(err);
                }
            });
        }));
    return df;
}
/**
 * Queues dataflow evaluation to run once any other queued evaluations have
 * completed and returns a Promise that resolves when the queued pulse
 * propagation completes. If provided, a callback function will be invoked
 * immediately before evaluation commences. This method will ensure a
 * separate evaluation is invoked for each time it is called.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */ async function runAsync(encode, prerun, postrun) {
    // await previously queued functions
    while(this._running)await this._running; // run dataflow, manage running promise
    const clear = ()=>this._running = null;
    (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);
    return this._running;
}
/**
 * Requests dataflow evaluation and the immediately returns this dataflow
 * instance. If there are pending data loading or other asynchronous
 * operations, the dataflow will evaluate asynchronously after this method
 * has been invoked. To track when dataflow evaluation completes, use the
 * {@link runAsync} method instead. This method will raise an error if
 * invoked while the dataflow is already in the midst of evaluation.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode module.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Dataflow} - This dataflow instance.
 */ function run(encode, prerun, postrun) {
    return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);
}
/**
 * Schedules a callback function to be invoked after the current pulse
 * propagation completes. If no propagation is currently occurring,
 * the function is invoked immediately. Callbacks scheduled via runAfter
 * are invoked immediately upon completion of the current cycle, before
 * any request queued via runAsync. This method is primarily intended for
 * internal use. Third-party callers using runAfter to schedule a callback
 * that invokes {@link run} or {@link runAsync} should not use this method,
 * but instead use {@link runAsync} with prerun or postrun arguments.
 * @param {function(Dataflow)} callback - The callback function to run.
 *   The callback will be invoked with this Dataflow instance as its
 *   sole argument.
 * @param {boolean} enqueue - A boolean flag indicating that the
 *   callback should be queued up to run after the next propagation
 *   cycle, suppressing immediate invocation when propagation is not
 *   currently occurring.
 * @param {number} [priority] - A priority value used to sort registered
 *   callbacks to determine execution order. This argument is intended
 *   for internal Vega use only.
 */ function runAfter(callback, enqueue, priority) {
    if (this._pulse || enqueue) // pulse propagation is currently running, queue to run after
    this._postrun.push({
        priority: priority || 0,
        callback: callback
    });
    else // pulse propagation already complete, invoke immediately
    try {
        callback(this);
    } catch (err) {
        this.error(err);
    }
}
/**
 * Raise an error for re-entrant dataflow evaluation.
 */ function reentrant(df) {
    df.error("Dataflow already running. Use runAsync() to chain invocations.");
    return df;
}
/**
 * Enqueue an operator into the priority queue for evaluation. The operator
 * will be enqueued if it has no registered pulse for the current cycle, or if
 * the force argument is true. Upon enqueue, this method also sets the
 * operator's qrank to the current rank value.
 * @param {Operator} op - The operator to enqueue.
 * @param {boolean} [force] - A flag indicating if the operator should be
 *   forceably added to the queue, even if it has already been previously
 *   enqueued during the current pulse propagation. This is useful when the
 *   dataflow graph is dynamically modified and the operator rank changes.
 */ function enqueue(op, force) {
    const q = op.stamp < this._clock;
    if (q) op.stamp = this._clock;
    if (q || force) {
        op.qrank = op.rank;
        this._heap.push(op);
    }
}
/**
 * Provide a correct pulse for evaluating an operator. If the operator has an
 * explicit source operator, we will try to pull the pulse(s) from it.
 * If there is an array of source operators, we build a multi-pulse.
 * Otherwise, we return a current pulse with correct source data.
 * If the pulse is the pulse map has an explicit target set, we use that.
 * Else if the pulse on the upstream source operator is current, we use that.
 * Else we use the pulse from the pulse map, but copy the source tuple array.
 * @param {Operator} op - The operator for which to get an input pulse.
 * @param {string} [encode] - An (optional) encoding set name with which to
 *   annotate the returned pulse. See {@link run} for more information.
 */ function getPulse(op, encode) {
    const s = op.source, stamp = this._clock;
    return s && (0, _vegaUtil.isArray)(s) ? new MultiPulse(this, stamp, s.map((_)=>_.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
}
function singlePulse(p, s) {
    if (s && s.stamp === p.stamp) return s;
    p = p.fork();
    if (s && s !== StopPropagation) p.source = s.source;
    return p;
}
const NO_OPT = {
    skip: false,
    force: false
};
/**
 * Touches an operator, scheduling it to be evaluated. If invoked outside of
 * a pulse propagation, the operator will be evaluated the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the operator
 * will be queued for evaluation if and only if the operator has not yet been
 * evaluated on the current propagation timestamp.
 * @param {Operator} op - The operator to touch.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */ function touch(op, options) {
    const opt = options || NO_OPT;
    if (this._pulse) // if in midst of propagation, add to priority queue
    this._enqueue(op);
    else // otherwise, queue for next propagation
    this._touched.add(op);
    if (opt.skip) op.skip(true);
    return this;
}
/**
 * Updates the value of the given operator.
 * @param {Operator} op - The operator to update.
 * @param {*} value - The value to set.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */ function update(op, value, options) {
    const opt = options || NO_OPT;
    if (op.set(value) || opt.force) this.touch(op, opt);
    return this;
}
/**
 * Pulses an operator with a changeset of tuples. If invoked outside of
 * a pulse propagation, the pulse will be applied the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the pulse
 * will be added to the set of active pulses and will be applied if and
 * only if the target operator has not yet been evaluated on the current
 * propagation timestamp.
 * @param {Operator} op - The operator to pulse.
 * @param {ChangeSet} value - The tuple changeset to apply.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */ function pulse(op, changeset, options) {
    this.touch(op, options || NO_OPT);
    const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)), t = op.pulse && op.pulse.source || [];
    p.target = op;
    this._input[op.id] = changeset.pulse(p, t);
    return this;
}
function Heap(cmp) {
    let nodes = [];
    return {
        clear: ()=>nodes = [],
        size: ()=>nodes.length,
        peek: ()=>nodes[0],
        push: (x)=>{
            nodes.push(x);
            return siftdown(nodes, 0, nodes.length - 1, cmp);
        },
        pop: ()=>{
            const last = nodes.pop();
            let item;
            if (nodes.length) {
                item = nodes[0];
                nodes[0] = last;
                siftup(nodes, 0, cmp);
            } else item = last;
            return item;
        }
    };
}
function siftdown(array, start, idx, cmp) {
    let parent, pidx;
    const item = array[idx];
    while(idx > start){
        pidx = idx - 1 >> 1;
        parent = array[pidx];
        if (cmp(item, parent) < 0) {
            array[idx] = parent;
            idx = pidx;
            continue;
        }
        break;
    }
    return array[idx] = item;
}
function siftup(array, idx, cmp) {
    const start = idx, end = array.length, item = array[idx];
    let cidx = (idx << 1) + 1, ridx;
    while(cidx < end){
        ridx = cidx + 1;
        if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) cidx = ridx;
        array[idx] = array[cidx];
        idx = cidx;
        cidx = (idx << 1) + 1;
    }
    array[idx] = item;
    return siftdown(array, start, idx, cmp);
}
/**
 * A dataflow graph for reactive processing of data streams.
 * @constructor
 */ function Dataflow() {
    this.logger((0, _vegaUtil.logger)());
    this.logLevel((0, _vegaUtil.Error));
    this._clock = 0;
    this._rank = 0;
    this._locale = (0, _vegaFormat.defaultLocale)();
    try {
        this._loader = (0, _vegaLoader.loader)();
    } catch (e) {}
    this._touched = UniqueList((0, _vegaUtil.id));
    this._input = {};
    this._pulse = null;
    this._heap = Heap((a, b)=>a.qrank - b.qrank);
    this._postrun = [];
}
function logMethod(method) {
    return function() {
        return this._log[method].apply(this, arguments);
    };
}
Dataflow.prototype = {
    /**
   * The current timestamp of this dataflow. This value reflects the
   * timestamp of the previous dataflow run. The dataflow is initialized
   * with a stamp value of 0. The initial run of the dataflow will have
   * a timestap of 1, and so on. This value will match the
   * {@link Pulse.stamp} property.
   * @return {number} - The current timestamp value.
   */ stamp () {
        return this._clock;
    },
    /**
   * Gets or sets the loader instance to use for data file loading. A
   * loader object must provide a "load" method for loading files and a
   * "sanitize" method for checking URL/filename validity. Both methods
   * should accept a URI and options hash as arguments, and return a Promise
   * that resolves to the loaded file contents (load) or a hash containing
   * sanitized URI data with the sanitized url assigned to the "href" property
   * (sanitize).
   * @param {object} _ - The loader instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current loader instance. Otherwise returns this Dataflow instance.
   */ loader (_) {
        if (arguments.length) {
            this._loader = _;
            return this;
        } else return this._loader;
    },
    /**
   * Gets or sets the locale instance to use for formatting and parsing
   * string values. The locale object should be provided by the
   * vega-format library, and include methods such as format, timeFormat,
   * utcFormat, timeParse, and utcParse.
   * @param {object} _ - The locale instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current locale instance. Otherwise returns this Dataflow instance.
   */ locale (_) {
        if (arguments.length) {
            this._locale = _;
            return this;
        } else return this._locale;
    },
    /**
   * Get or set the logger instance used to log messages. If no arguments are
   * provided, returns the current logger instance. Otherwise, sets the logger
   * and return this Dataflow instance. Provided loggers must support the full
   * API of logger objects generated by the vega-util logger method. Note that
   * by default the log level of the new logger will be used; use the logLevel
   * method to adjust the log level as needed.
   */ logger (logger) {
        if (arguments.length) {
            this._log = logger;
            return this;
        } else return this._log;
    },
    /**
   * Logs an error message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit error messages.
   */ error: logMethod("error"),
    /**
   * Logs a warning message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit warning messages.
   */ warn: logMethod("warn"),
    /**
   * Logs a information message. By default, logged messages are written to
   * console output. The message will only be logged if the current log level is
   * high enough to permit information messages.
   */ info: logMethod("info"),
    /**
   * Logs a debug message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit debug messages.
   */ debug: logMethod("debug"),
    /**
   * Get or set the current log level. If an argument is provided, it
   * will be used as the new log level.
   * @param {number} [level] - Should be one of None, Warn, Info
   * @return {number} - The current log level.
   */ logLevel: logMethod("level"),
    /**
   * Empty entry threshold for garbage cleaning. Map data structures will
   * perform cleaning once the number of empty entries exceeds this value.
   */ cleanThreshold: 1e4,
    // OPERATOR REGISTRATION
    add,
    connect,
    rank,
    rerank,
    // OPERATOR UPDATES
    pulse,
    touch,
    update,
    changeset,
    // DATA LOADING
    ingest,
    parse,
    preload,
    request,
    // EVENT HANDLING
    events,
    on,
    // PULSE PROPAGATION
    evaluate,
    run,
    runAsync,
    runAfter,
    _enqueue: enqueue,
    _getPulse: getPulse
};
/**
 * Abstract class for operators that process data tuples.
 * Subclasses must provide a {@link transform} method for operator processing.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {Operator} [source] - The operator from which to receive pulses.
 */ function Transform(init, params) {
    Operator.call(this, init, null, params);
}
(0, _vegaUtil.inherits)(Transform, Operator, {
    /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */ run (pulse) {
        if (pulse.stamp < this.stamp) return pulse.StopPropagation;
        let rv;
        if (this.skip()) this.skip(false);
        else rv = this.evaluate(pulse);
        rv = rv || pulse;
        if (rv.then) rv = rv.then((_)=>this.pulse = _);
        else if (rv !== pulse.StopPropagation) this.pulse = rv;
        return rv;
    },
    /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Marshalls parameter values and then invokes {@link transform}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
       value (including undefined) will let the input pulse pass through.
  */ evaluate (pulse) {
        const params = this.marshall(pulse.stamp), out = this.transform(params, pulse);
        params.clear();
        return out;
    },
    /**
   * Process incoming pulses.
   * Subclasses should override this method to implement transforms.
   * @param {Parameters} _ - The operator parameter values.
   * @param {Pulse} pulse - The current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
   *   value (including undefined) will let the input pulse pass through.
   */ transform () {}
});
const transforms = {};
function definition(type) {
    const t = transform(type);
    return t && t.Definition || null;
}
function transform(type) {
    type = type && type.toLowerCase();
    return (0, _vegaUtil.hasOwnProperty)(transforms, type) ? transforms[type] : null;
}

},{"vega-util":"bApja","vega-loader":"gmbOr","vega-format":"47kOt","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gmbOr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "format", ()=>format);
parcelHelpers.export(exports, "formats", ()=>formats);
parcelHelpers.export(exports, "inferType", ()=>inferType);
parcelHelpers.export(exports, "inferTypes", ()=>inferTypes);
parcelHelpers.export(exports, "loader", ()=>loader);
parcelHelpers.export(exports, "read", ()=>read);
parcelHelpers.export(exports, "responseType", ()=>responseType);
parcelHelpers.export(exports, "typeParsers", ()=>typeParsers);
var _vegaUtil = require("vega-util");
var _d3Dsv = require("d3-dsv");
var _topojsonClient = require("topojson-client");
var _vegaFormat = require("vega-format");
var Buffer = require("buffer").Buffer;
//   https://...    file://...    //...
const protocol_re = /^(data:|([A-Za-z]+:)?\/\/)/; // Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://
const allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape
const whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g; // eslint-disable-line no-control-regex
// Special treatment in node.js for the file: protocol
const fileProtocol = "file://";
/**
 * Factory for a loader constructor that provides methods for requesting
 * files from either the network or disk, and for sanitizing request URIs.
 * @param {function} fetch - The Fetch API for HTTP network requests.
 *   If null or undefined, HTTP loading will be disabled.
 * @param {object} fs - The file system interface for file loading.
 *   If null or undefined, local file loading will be disabled.
 * @return {function} A loader constructor with the following signature:
 *   param {object} [options] - Optional default loading options to use.
 *   return {object} - A new loader instance.
 */ function loaderFactory(fetch1, fs) {
    return (options)=>({
            options: options || {},
            sanitize: sanitize,
            load: load,
            fileAccess: !!fs,
            file: fileLoader(fs),
            http: httpLoader(fetch1)
        });
}
/**
 * Load an external resource, typically either from the web or from the local
 * filesystem. This function uses {@link sanitize} to first sanitize the uri,
 * then calls either {@link http} (for web requests) or {@link file} (for
 * filesystem loading).
 * @param {string} uri - The resource indicator (e.g., URL or filename).
 * @param {object} [options] - Optional loading options. These options will
 *   override any existing default options.
 * @return {Promise} - A promise that resolves to the loaded content.
 */ async function load(uri, options) {
    const opt = await this.sanitize(uri, options), url = opt.href;
    return opt.localFile ? this.file(url) : this.http(url, options);
}
/**
 * URI sanitizer function.
 * @param {string} uri - The uri (url or filename) to check.
 * @param {object} options - An options hash.
 * @return {Promise} - A promise that resolves to an object containing
 *  sanitized uri data, or rejects it the input uri is deemed invalid.
 *  The properties of the resolved object are assumed to be
 *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
 *  provided by the 'href' property of the returned object.
 */ async function sanitize(uri, options) {
    options = (0, _vegaUtil.extend)({}, this.options, options);
    const fileAccess = this.fileAccess, result = {
        href: null
    };
    let isFile, loadFile, base;
    const isAllowed = allowed_re.test(uri.replace(whitespace_re, ""));
    if (uri == null || typeof uri !== "string" || !isAllowed) (0, _vegaUtil.error)("Sanitize failure, invalid URI: " + (0, _vegaUtil.stringValue)(uri));
    const hasProtocol = protocol_re.test(uri); // if relative url (no protocol/host), prepend baseURL
    if ((base = options.baseURL) && !hasProtocol) {
        // Ensure that there is a slash between the baseURL (e.g. hostname) and url
        if (!uri.startsWith("/") && !base.endsWith("/")) uri = "/" + uri;
        uri = base + uri;
    } // should we load from file system?
    loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === "file" || options.mode !== "http" && !hasProtocol && fileAccess;
    if (isFile) // strip file protocol
    uri = uri.slice(fileProtocol.length);
    else if (uri.startsWith("//")) {
        if (options.defaultProtocol === "file") {
            // if is file, strip protocol and set loadFile flag
            uri = uri.slice(2);
            loadFile = true;
        } else // if relative protocol (starts with '//'), prepend default protocol
        uri = (options.defaultProtocol || "http") + ":" + uri;
    } // set non-enumerable mode flag to indicate local file load
    Object.defineProperty(result, "localFile", {
        value: !!loadFile
    }); // set uri
    result.href = uri; // set default result target, if specified
    if (options.target) result.target = options.target + "";
     // set default result rel, if specified (#1542)
    if (options.rel) result.rel = options.rel + "";
     // provide control over cross-origin image handling (#2238)
    // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
    if (options.context === "image" && options.crossOrigin) result.crossOrigin = options.crossOrigin + "";
     // return
    return result;
}
/**
 * File system loader factory.
 * @param {object} fs - The file system interface.
 * @return {function} - A file loader with the following signature:
 *   param {string} filename - The file system path to load.
 *   param {string} filename - The file system path to load.
 *   return {Promise} A promise that resolves to the file contents.
 */ function fileLoader(fs) {
    return fs ? (filename)=>new Promise((accept, reject)=>{
            fs.readFile(filename, (error, data)=>{
                if (error) reject(error);
                else accept(data);
            });
        }) : fileReject;
}
/**
 * Default file system loader that simply rejects.
 */ async function fileReject() {
    (0, _vegaUtil.error)("No file system access.");
}
/**
 * HTTP request handler factory.
 * @param {function} fetch - The Fetch API method.
 * @return {function} - An http loader with the following signature:
 *   param {string} url - The url to request.
 *   param {object} options - An options hash.
 *   return {Promise} - A promise that resolves to the file contents.
 */ function httpLoader(fetch1) {
    return fetch1 ? async function(url, options) {
        const opt = (0, _vegaUtil.extend)({}, this.options.http, options), type = options && options.response, response = await fetch1(url, opt);
        return !response.ok ? (0, _vegaUtil.error)(response.status + "" + response.statusText) : (0, _vegaUtil.isFunction)(response[type]) ? response[type]() : response.text();
    } : httpReject;
}
/**
 * Default http request handler that simply rejects.
 */ async function httpReject() {
    (0, _vegaUtil.error)("No HTTP fetch method available.");
}
const isValid = (_)=>_ != null && _ === _;
const isBoolean = (_)=>_ === "true" || _ === "false" || _ === true || _ === false;
const isDate = (_)=>!Number.isNaN(Date.parse(_));
const isNumber = (_)=>!Number.isNaN(+_) && !(_ instanceof Date);
const isInteger = (_)=>isNumber(_) && Number.isInteger(+_);
const typeParsers = {
    boolean: (0, _vegaUtil.toBoolean),
    integer: (0, _vegaUtil.toNumber),
    number: (0, _vegaUtil.toNumber),
    date: (0, _vegaUtil.toDate),
    string: (0, _vegaUtil.toString),
    unknown: (0, _vegaUtil.identity)
};
const typeTests = [
    isBoolean,
    isInteger,
    isNumber,
    isDate
];
const typeList = [
    "boolean",
    "integer",
    "number",
    "date"
];
function inferType(values, field) {
    if (!values || !values.length) return "unknown";
    const n = values.length, m = typeTests.length, a = typeTests.map((_, i)=>i + 1);
    for(let i = 0, t = 0, j, value; i < n; ++i){
        value = field ? values[i][field] : values[i];
        for(j = 0; j < m; ++j)if (a[j] && isValid(value) && !typeTests[j](value)) {
            a[j] = 0;
            ++t;
            if (t === typeTests.length) return "string";
        }
    }
    return typeList[a.reduce((u, v)=>u === 0 ? v : u, 0) - 1];
}
function inferTypes(data, fields) {
    return fields.reduce((types, field)=>{
        types[field] = inferType(data, field);
        return types;
    }, {});
}
function delimitedFormat(delimiter) {
    const parse = function(data, format) {
        const delim = {
            delimiter: delimiter
        };
        return dsv(data, format ? (0, _vegaUtil.extend)(format, delim) : delim);
    };
    parse.responseType = "text";
    return parse;
}
function dsv(data, format) {
    if (format.header) data = format.header.map((0, _vegaUtil.stringValue)).join(format.delimiter) + "\n" + data;
    return (0, _d3Dsv.dsvFormat)(format.delimiter).parse(data + "");
}
dsv.responseType = "text";
function isBuffer(_) {
    return typeof Buffer === "function" && (0, _vegaUtil.isFunction)(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;
}
function json(data, format) {
    const prop = format && format.property ? (0, _vegaUtil.field)(format.property) : (0, _vegaUtil.identity);
    return (0, _vegaUtil.isObject)(data) && !isBuffer(data) ? parseJSON(prop(data), format) : prop(JSON.parse(data));
}
json.responseType = "json";
function parseJSON(data, format) {
    if (!(0, _vegaUtil.isArray)(data) && (0, _vegaUtil.isIterable)(data)) data = [
        ...data
    ];
    return format && format.copy ? JSON.parse(JSON.stringify(data)) : data;
}
const filters = {
    interior: (a, b)=>a !== b,
    exterior: (a, b)=>a === b
};
function topojson(data, format) {
    let method, object, property, filter;
    data = json(data, format);
    if (format && format.feature) {
        method = (0, _topojsonClient.feature);
        property = format.feature;
    } else if (format && format.mesh) {
        method = (0, _topojsonClient.mesh);
        property = format.mesh;
        filter = filters[format.filter];
    } else (0, _vegaUtil.error)("Missing TopoJSON feature or mesh parameter.");
    object = (object = data.objects[property]) ? method(data, object, filter) : (0, _vegaUtil.error)("Invalid TopoJSON object: " + property);
    return object && object.features || [
        object
    ];
}
topojson.responseType = "json";
const format = {
    dsv: dsv,
    csv: delimitedFormat(","),
    tsv: delimitedFormat("	"),
    json: json,
    topojson: topojson
};
function formats(name, reader) {
    if (arguments.length > 1) {
        format[name] = reader;
        return this;
    } else return (0, _vegaUtil.hasOwnProperty)(format, name) ? format[name] : null;
}
function responseType(type) {
    const f = formats(type);
    return f && f.responseType || "text";
}
function read(data, schema, timeParser, utcParser) {
    schema = schema || {};
    const reader = formats(schema.type || "json");
    if (!reader) (0, _vegaUtil.error)("Unknown data format type: " + schema.type);
    data = reader(data, schema);
    if (schema.parse) parse(data, schema.parse, timeParser, utcParser);
    if ((0, _vegaUtil.hasOwnProperty)(data, "columns")) delete data.columns;
    return data;
}
function parse(data, types, timeParser, utcParser) {
    if (!data.length) return; // early exit for empty data
    const locale = (0, _vegaFormat.timeFormatDefaultLocale)();
    timeParser = timeParser || locale.timeParse;
    utcParser = utcParser || locale.utcParse;
    let fields = data.columns || Object.keys(data[0]), datum, field, i, j, n, m;
    if (types === "auto") types = inferTypes(data, fields);
    fields = Object.keys(types);
    const parsers = fields.map((field)=>{
        const type = types[field];
        let parts, pattern;
        if (type && (type.startsWith("date:") || type.startsWith("utc:"))) {
            parts = type.split(/:(.+)?/, 2); // split on first :
            pattern = parts[1];
            if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') pattern = pattern.slice(1, -1);
            const parse = parts[0] === "utc" ? utcParser : timeParser;
            return parse(pattern);
        }
        if (!typeParsers[type]) throw Error("Illegal format pattern: " + field + ":" + type);
        return typeParsers[type];
    });
    for(i = 0, n = data.length, m = fields.length; i < n; ++i){
        datum = data[i];
        for(j = 0; j < m; ++j){
            field = fields[j];
            datum[field] = parsers[j](datum[field]);
        }
    }
}
const loader = loaderFactory(typeof fetch !== "undefined" && fetch, null // no file system access
);

},{"vega-util":"bApja","d3-dsv":"70Sp2","topojson-client":"aKIOa","vega-format":"47kOt","buffer":"2axoo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"70Sp2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dsvFormat", ()=>(0, _dsvJsDefault.default));
parcelHelpers.export(exports, "csvParse", ()=>(0, _csvJs.csvParse));
parcelHelpers.export(exports, "csvParseRows", ()=>(0, _csvJs.csvParseRows));
parcelHelpers.export(exports, "csvFormat", ()=>(0, _csvJs.csvFormat));
parcelHelpers.export(exports, "csvFormatBody", ()=>(0, _csvJs.csvFormatBody));
parcelHelpers.export(exports, "csvFormatRows", ()=>(0, _csvJs.csvFormatRows));
parcelHelpers.export(exports, "csvFormatRow", ()=>(0, _csvJs.csvFormatRow));
parcelHelpers.export(exports, "csvFormatValue", ()=>(0, _csvJs.csvFormatValue));
parcelHelpers.export(exports, "tsvParse", ()=>(0, _tsvJs.tsvParse));
parcelHelpers.export(exports, "tsvParseRows", ()=>(0, _tsvJs.tsvParseRows));
parcelHelpers.export(exports, "tsvFormat", ()=>(0, _tsvJs.tsvFormat));
parcelHelpers.export(exports, "tsvFormatBody", ()=>(0, _tsvJs.tsvFormatBody));
parcelHelpers.export(exports, "tsvFormatRows", ()=>(0, _tsvJs.tsvFormatRows));
parcelHelpers.export(exports, "tsvFormatRow", ()=>(0, _tsvJs.tsvFormatRow));
parcelHelpers.export(exports, "tsvFormatValue", ()=>(0, _tsvJs.tsvFormatValue));
parcelHelpers.export(exports, "autoType", ()=>(0, _autoTypeJsDefault.default));
var _dsvJs = require("./dsv.js");
var _dsvJsDefault = parcelHelpers.interopDefault(_dsvJs);
var _csvJs = require("./csv.js");
var _tsvJs = require("./tsv.js");
var _autoTypeJs = require("./autoType.js");
var _autoTypeJsDefault = parcelHelpers.interopDefault(_autoTypeJs);

},{"./dsv.js":"fRZim","./csv.js":false,"./tsv.js":false,"./autoType.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fRZim":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var EOL = {}, EOF = {}, QUOTE = 34, NEWLINE = 10, RETURN = 13;
function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + '] || ""';
    }).join(",") + "}");
}
function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function(row, i) {
        return f(object(row), i, columns);
    };
}
// Compute unique columns in order of discovery.
function inferColumns(rows) {
    var columnSet = Object.create(null), columns = [];
    rows.forEach(function(row) {
        for(var column in row)if (!(column in columnSet)) columns.push(columnSet[column] = column);
    });
    return columns;
}
function pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
}
function formatYear(year) {
    return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}
function formatDate(date) {
    var hours = date.getUTCHours(), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds(), milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}
exports.default = function(delimiter) {
    var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
    function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
            if (convert) return convert(row, i - 1);
            columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
    }
    function parseRows(text, f) {
        var rows = [], N = text.length, I = 0, n = 0, t, eof = N <= 0, eol = false; // current token followed by EOL?
        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;
        function token() {
            if (eof) return EOF;
            if (eol) return eol = false, EOL;
            // Unescape quotes.
            var i, j = I, c;
            if (text.charCodeAt(j) === QUOTE) {
                while((I++) < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
                if ((i = I) >= N) eof = true;
                else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
                else if (c === RETURN) {
                    eol = true;
                    if (text.charCodeAt(I) === NEWLINE) ++I;
                }
                return text.slice(j + 1, i - 1).replace(/""/g, '"');
            }
            // Find next delimiter or newline.
            while(I < N){
                if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
                else if (c === RETURN) {
                    eol = true;
                    if (text.charCodeAt(I) === NEWLINE) ++I;
                } else if (c !== DELIMITER) continue;
                return text.slice(j, i);
            }
            // Return last token before EOF.
            return eof = true, text.slice(j, N);
        }
        while((t = token()) !== EOF){
            var row = [];
            while(t !== EOL && t !== EOF)row.push(t), t = token();
            if (f && (row = f(row, n++)) == null) continue;
            rows.push(row);
        }
        return rows;
    }
    function preformatBody(rows, columns) {
        return rows.map(function(row) {
            return columns.map(function(column) {
                return formatValue(row[column]);
            }).join(delimiter);
        });
    }
    function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [
            columns.map(formatValue).join(delimiter)
        ].concat(preformatBody(rows, columns)).join("\n");
    }
    function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
    }
    function formatRows(rows) {
        return rows.map(formatRow).join("\n");
    }
    function formatRow(row) {
        return row.map(formatValue).join(delimiter);
    }
    function formatValue(value) {
        return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
    }
    return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aKIOa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bbox", ()=>(0, _bboxJsDefault.default));
parcelHelpers.export(exports, "feature", ()=>(0, _featureJsDefault.default));
parcelHelpers.export(exports, "mesh", ()=>(0, _meshJsDefault.default));
parcelHelpers.export(exports, "meshArcs", ()=>(0, _meshJs.meshArcs));
parcelHelpers.export(exports, "merge", ()=>(0, _mergeJsDefault.default));
parcelHelpers.export(exports, "mergeArcs", ()=>(0, _mergeJs.mergeArcs));
parcelHelpers.export(exports, "neighbors", ()=>(0, _neighborsJsDefault.default));
parcelHelpers.export(exports, "quantize", ()=>(0, _quantizeJsDefault.default));
parcelHelpers.export(exports, "transform", ()=>(0, _transformJsDefault.default));
parcelHelpers.export(exports, "untransform", ()=>(0, _untransformJsDefault.default));
var _bboxJs = require("./bbox.js");
var _bboxJsDefault = parcelHelpers.interopDefault(_bboxJs);
var _featureJs = require("./feature.js");
var _featureJsDefault = parcelHelpers.interopDefault(_featureJs);
var _meshJs = require("./mesh.js");
var _meshJsDefault = parcelHelpers.interopDefault(_meshJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _neighborsJs = require("./neighbors.js");
var _neighborsJsDefault = parcelHelpers.interopDefault(_neighborsJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
var _untransformJs = require("./untransform.js");
var _untransformJsDefault = parcelHelpers.interopDefault(_untransformJs);

},{"./bbox.js":"e3LWp","./feature.js":"6K0pm","./mesh.js":"k2dDp","./merge.js":"7l4hb","./neighbors.js":"9d2MJ","./quantize.js":"kXipT","./transform.js":"ToH0M","./untransform.js":"6T4yq","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"e3LWp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
exports.default = function(topology) {
    var t = (0, _transformJsDefault.default)(topology.transform), key, x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;
    function bboxPoint(p) {
        p = t(p);
        if (p[0] < x0) x0 = p[0];
        if (p[0] > x1) x1 = p[0];
        if (p[1] < y0) y0 = p[1];
        if (p[1] > y1) y1 = p[1];
    }
    function bboxGeometry(o) {
        switch(o.type){
            case "GeometryCollection":
                o.geometries.forEach(bboxGeometry);
                break;
            case "Point":
                bboxPoint(o.coordinates);
                break;
            case "MultiPoint":
                o.coordinates.forEach(bboxPoint);
                break;
        }
    }
    topology.arcs.forEach(function(arc) {
        var i = -1, n = arc.length, p;
        while(++i < n){
            p = t(arc[i], i);
            if (p[0] < x0) x0 = p[0];
            if (p[0] > x1) x1 = p[0];
            if (p[1] < y0) y0 = p[1];
            if (p[1] > y1) y1 = p[1];
        }
    });
    for(key in topology.objects)bboxGeometry(topology.objects[key]);
    return [
        x0,
        y0,
        x1,
        y1
    ];
};

},{"./transform.js":"ToH0M","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ToH0M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
exports.default = function(transform) {
    if (transform == null) return 0, _identityJsDefault.default;
    var x0, y0, kx = transform.scale[0], ky = transform.scale[1], dx = transform.translate[0], dy = transform.translate[1];
    return function(input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2, n = input.length, output = new Array(n);
        output[0] = (x0 += input[0]) * kx + dx;
        output[1] = (y0 += input[1]) * ky + dy;
        while(j < n)output[j] = input[j], ++j;
        return output;
    };
};

},{"./identity.js":"dZ2Lk","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dZ2Lk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return x;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6K0pm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "object", ()=>object);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
exports.default = function(topology, o) {
    if (typeof o === "string") o = topology.objects[o];
    return o.type === "GeometryCollection" ? {
        type: "FeatureCollection",
        features: o.geometries.map(function(o) {
            return feature(topology, o);
        })
    } : feature(topology, o);
};
function feature(topology, o) {
    var id = o.id, bbox = o.bbox, properties = o.properties == null ? {} : o.properties, geometry = object(topology, o);
    return id == null && bbox == null ? {
        type: "Feature",
        properties: properties,
        geometry: geometry
    } : bbox == null ? {
        type: "Feature",
        id: id,
        properties: properties,
        geometry: geometry
    } : {
        type: "Feature",
        id: id,
        bbox: bbox,
        properties: properties,
        geometry: geometry
    };
}
function object(topology, o) {
    var transformPoint = (0, _transformJsDefault.default)(topology.transform), arcs = topology.arcs;
    function arc(i, points) {
        if (points.length) points.pop();
        for(var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k)points.push(transformPoint(a[k], k));
        if (i < 0) (0, _reverseJsDefault.default)(points, n);
    }
    function point(p) {
        return transformPoint(p);
    }
    function line(arcs) {
        var points = [];
        for(var i = 0, n = arcs.length; i < n; ++i)arc(arcs[i], points);
        if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
        return points;
    }
    function ring(arcs) {
        var points = line(arcs);
        while(points.length < 4)points.push(points[0]); // This may happen if an arc has only two points.
        return points;
    }
    function polygon(arcs) {
        return arcs.map(ring);
    }
    function geometry(o) {
        var type = o.type, coordinates;
        switch(type){
            case "GeometryCollection":
                return {
                    type: type,
                    geometries: o.geometries.map(geometry)
                };
            case "Point":
                coordinates = point(o.coordinates);
                break;
            case "MultiPoint":
                coordinates = o.coordinates.map(point);
                break;
            case "LineString":
                coordinates = line(o.arcs);
                break;
            case "MultiLineString":
                coordinates = o.arcs.map(line);
                break;
            case "Polygon":
                coordinates = polygon(o.arcs);
                break;
            case "MultiPolygon":
                coordinates = o.arcs.map(polygon);
                break;
            default:
                return null;
        }
        return {
            type: type,
            coordinates: coordinates
        };
    }
    return geometry(o);
}

},{"./reverse.js":"7nB9v","./transform.js":"ToH0M","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7nB9v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(array, n) {
    var t, j = array.length, i = j - n;
    while(i < --j)t = array[i], array[i++] = array[j], array[j] = t;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"k2dDp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "meshArcs", ()=>meshArcs);
var _featureJs = require("./feature.js");
var _stitchJs = require("./stitch.js");
var _stitchJsDefault = parcelHelpers.interopDefault(_stitchJs);
exports.default = function(topology) {
    return (0, _featureJs.object)(topology, meshArcs.apply(this, arguments));
};
function meshArcs(topology, object, filter) {
    var arcs, i, n;
    if (arguments.length > 1) arcs = extractArcs(topology, object, filter);
    else for(i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i)arcs[i] = i;
    return {
        type: "MultiLineString",
        arcs: (0, _stitchJsDefault.default)(topology, arcs)
    };
}
function extractArcs(topology, object, filter) {
    var arcs = [], geomsByArc = [], geom;
    function extract0(i) {
        var j = i < 0 ? ~i : i;
        (geomsByArc[j] || (geomsByArc[j] = [])).push({
            i: i,
            g: geom
        });
    }
    function extract1(arcs) {
        arcs.forEach(extract0);
    }
    function extract2(arcs) {
        arcs.forEach(extract1);
    }
    function extract3(arcs) {
        arcs.forEach(extract2);
    }
    function geometry(o) {
        switch(geom = o, o.type){
            case "GeometryCollection":
                o.geometries.forEach(geometry);
                break;
            case "LineString":
                extract1(o.arcs);
                break;
            case "MultiLineString":
            case "Polygon":
                extract2(o.arcs);
                break;
            case "MultiPolygon":
                extract3(o.arcs);
                break;
        }
    }
    geometry(object);
    geomsByArc.forEach(filter == null ? function(geoms) {
        arcs.push(geoms[0].i);
    } : function(geoms) {
        if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
    });
    return arcs;
}

},{"./feature.js":"6K0pm","./stitch.js":"26mb3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"26mb3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(topology, arcs) {
    var stitchedArcs = {}, fragmentByStart = {}, fragmentByEnd = {}, fragments = [], emptyIndex = -1;
    // Stitch empty arcs first, since they may be subsumed by other arcs.
    arcs.forEach(function(i, j) {
        var arc = topology.arcs[i < 0 ? ~i : i], t;
        if (arc.length < 3 && !arc[1][0] && !arc[1][1]) t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    });
    arcs.forEach(function(i) {
        var e = ends(i), start = e[0], end = e[1], f, g;
        if (f = fragmentByEnd[start]) {
            delete fragmentByEnd[f.end];
            f.push(i);
            f.end = end;
            if (g = fragmentByStart[end]) {
                delete fragmentByStart[g.start];
                var fg = g === f ? f : f.concat(g);
                fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
            } else fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        } else if (f = fragmentByStart[end]) {
            delete fragmentByStart[f.start];
            f.unshift(i);
            f.start = start;
            if (g = fragmentByEnd[start]) {
                delete fragmentByEnd[g.end];
                var gf = g === f ? f : g.concat(f);
                fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
            } else fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        } else {
            f = [
                i
            ];
            fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
        }
    });
    function ends(i) {
        var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
        if (topology.transform) p1 = [
            0,
            0
        ], arc.forEach(function(dp) {
            p1[0] += dp[0], p1[1] += dp[1];
        });
        else p1 = arc[arc.length - 1];
        return i < 0 ? [
            p1,
            p0
        ] : [
            p0,
            p1
        ];
    }
    function flush(fragmentByEnd, fragmentByStart) {
        for(var k in fragmentByEnd){
            var f = fragmentByEnd[k];
            delete fragmentByStart[f.start];
            delete f.start;
            delete f.end;
            f.forEach(function(i) {
                stitchedArcs[i < 0 ? ~i : i] = 1;
            });
            fragments.push(f);
        }
    }
    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function(i) {
        if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([
            i
        ]);
    });
    return fragments;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7l4hb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeArcs", ()=>mergeArcs);
var _featureJs = require("./feature.js");
var _stitchJs = require("./stitch.js");
var _stitchJsDefault = parcelHelpers.interopDefault(_stitchJs);
function planarRingArea(ring) {
    var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
    while(++i < n)a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
    return Math.abs(area); // Note: doubled area!
}
exports.default = function(topology) {
    return (0, _featureJs.object)(topology, mergeArcs.apply(this, arguments));
};
function mergeArcs(topology, objects) {
    var polygonsByArc = {}, polygons = [], groups = [];
    objects.forEach(geometry);
    function geometry(o) {
        switch(o.type){
            case "GeometryCollection":
                o.geometries.forEach(geometry);
                break;
            case "Polygon":
                extract(o.arcs);
                break;
            case "MultiPolygon":
                o.arcs.forEach(extract);
                break;
        }
    }
    function extract(polygon) {
        polygon.forEach(function(ring) {
            ring.forEach(function(arc) {
                (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
            });
        });
        polygons.push(polygon);
    }
    function area(ring) {
        return planarRingArea((0, _featureJs.object)(topology, {
            type: "Polygon",
            arcs: [
                ring
            ]
        }).coordinates[0]);
    }
    polygons.forEach(function(polygon) {
        if (!polygon._) {
            var group = [], neighbors = [
                polygon
            ];
            polygon._ = 1;
            groups.push(group);
            while(polygon = neighbors.pop()){
                group.push(polygon);
                polygon.forEach(function(ring) {
                    ring.forEach(function(arc) {
                        polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
                            if (!polygon._) {
                                polygon._ = 1;
                                neighbors.push(polygon);
                            }
                        });
                    });
                });
            }
        }
    });
    polygons.forEach(function(polygon) {
        delete polygon._;
    });
    return {
        type: "MultiPolygon",
        arcs: groups.map(function(polygons) {
            var arcs = [], n;
            // Extract the exterior (unique) arcs.
            polygons.forEach(function(polygon) {
                polygon.forEach(function(ring) {
                    ring.forEach(function(arc) {
                        if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) arcs.push(arc);
                    });
                });
            });
            // Stitch the arcs into one or more rings.
            arcs = (0, _stitchJsDefault.default)(topology, arcs);
            // If more than one ring is returned,
            // at most one of these rings can be the exterior;
            // choose the one with the greatest absolute area.
            if ((n = arcs.length) > 1) {
                for(var i = 1, k = area(arcs[0]), ki, t; i < n; ++i)if ((ki = area(arcs[i])) > k) t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
            }
            return arcs;
        }).filter(function(arcs) {
            return arcs.length > 0;
        })
    };
}

},{"./feature.js":"6K0pm","./stitch.js":"26mb3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9d2MJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
exports.default = function(objects) {
    var indexesByArc = {}, neighbors = objects.map(function() {
        return [];
    });
    function line(arcs, i) {
        arcs.forEach(function(a) {
            if (a < 0) a = ~a;
            var o = indexesByArc[a];
            if (o) o.push(i);
            else indexesByArc[a] = [
                i
            ];
        });
    }
    function polygon(arcs, i) {
        arcs.forEach(function(arc) {
            line(arc, i);
        });
    }
    function geometry(o, i) {
        if (o.type === "GeometryCollection") o.geometries.forEach(function(o) {
            geometry(o, i);
        });
        else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
    }
    var geometryType = {
        LineString: line,
        MultiLineString: polygon,
        Polygon: polygon,
        MultiPolygon: function(arcs, i) {
            arcs.forEach(function(arc) {
                polygon(arc, i);
            });
        }
    };
    objects.forEach(geometry);
    for(var i in indexesByArc){
        for(var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j)for(var k = j + 1; k < m; ++k){
            var ij = indexes[j], ik = indexes[k], n;
            if ((n = neighbors[ij])[i = (0, _bisectJsDefault.default)(n, ik)] !== ik) n.splice(i, 0, ik);
            if ((n = neighbors[ik])[i = (0, _bisectJsDefault.default)(n, ij)] !== ij) n.splice(i, 0, ij);
        }
    }
    return neighbors;
};

},{"./bisect.js":"lbTH3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lbTH3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, x) {
    var lo = 0, hi = a.length;
    while(lo < hi){
        var mid = lo + hi >>> 1;
        if (a[mid] < x) lo = mid + 1;
        else hi = mid;
    }
    return lo;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kXipT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bboxJs = require("./bbox.js");
var _bboxJsDefault = parcelHelpers.interopDefault(_bboxJs);
var _untransformJs = require("./untransform.js");
var _untransformJsDefault = parcelHelpers.interopDefault(_untransformJs);
exports.default = function(topology, transform) {
    if (topology.transform) throw new Error("already quantized");
    if (!transform || !transform.scale) {
        if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
        box = topology.bbox || (0, _bboxJsDefault.default)(topology);
        var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;
        transform = {
            scale: [
                x1 - x0 ? (x1 - x0) / (n - 1) : 1,
                y1 - y0 ? (y1 - y0) / (n - 1) : 1
            ],
            translate: [
                x0,
                y0
            ]
        };
    } else box = topology.bbox;
    var t = (0, _untransformJsDefault.default)(transform), box, key, inputs = topology.objects, outputs = {};
    function quantizePoint(point) {
        return t(point);
    }
    function quantizeGeometry(input) {
        var output;
        switch(input.type){
            case "GeometryCollection":
                output = {
                    type: "GeometryCollection",
                    geometries: input.geometries.map(quantizeGeometry)
                };
                break;
            case "Point":
                output = {
                    type: "Point",
                    coordinates: quantizePoint(input.coordinates)
                };
                break;
            case "MultiPoint":
                output = {
                    type: "MultiPoint",
                    coordinates: input.coordinates.map(quantizePoint)
                };
                break;
            default:
                return input;
        }
        if (input.id != null) output.id = input.id;
        if (input.bbox != null) output.bbox = input.bbox;
        if (input.properties != null) output.properties = input.properties;
        return output;
    }
    function quantizeArc(input) {
        var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic
        output[0] = t(input[0], 0);
        while(++i < n)if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points
        if (j === 1) output[j++] = [
            0,
            0
        ]; // an arc must have at least two points
        output.length = j;
        return output;
    }
    for(key in inputs)outputs[key] = quantizeGeometry(inputs[key]);
    return {
        type: "Topology",
        bbox: box,
        transform: transform,
        objects: outputs,
        arcs: topology.arcs.map(quantizeArc)
    };
};

},{"./bbox.js":"e3LWp","./untransform.js":"6T4yq","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6T4yq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
exports.default = function(transform) {
    if (transform == null) return 0, _identityJsDefault.default;
    var x0, y0, kx = transform.scale[0], ky = transform.scale[1], dx = transform.translate[0], dy = transform.translate[1];
    return function(input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2, n = input.length, output = new Array(n), x1 = Math.round((input[0] - dx) / kx), y1 = Math.round((input[1] - dy) / ky);
        output[0] = x1 - x0, x0 = x1;
        output[1] = y1 - y0, y0 = y1;
        while(j < n)output[j] = input[j], ++j;
        return output;
    };
};

},{"./identity.js":"dZ2Lk","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"47kOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultLocale", ()=>defaultLocale);
parcelHelpers.export(exports, "locale", ()=>locale);
parcelHelpers.export(exports, "numberFormatDefaultLocale", ()=>numberFormatDefaultLocale);
parcelHelpers.export(exports, "numberFormatLocale", ()=>numberFormatLocale);
parcelHelpers.export(exports, "resetDefaultLocale", ()=>resetDefaultLocale);
parcelHelpers.export(exports, "resetNumberFormatDefaultLocale", ()=>resetNumberFormatDefaultLocale);
parcelHelpers.export(exports, "resetTimeFormatDefaultLocale", ()=>resetTimeFormatDefaultLocale);
parcelHelpers.export(exports, "timeFormatDefaultLocale", ()=>timeFormatDefaultLocale);
parcelHelpers.export(exports, "timeFormatLocale", ()=>timeFormatLocale);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
var _vegaTime = require("vega-time");
var _vegaUtil = require("vega-util");
var _d3TimeFormat = require("d3-time-format");
function memoize(method) {
    const cache = {};
    return (spec)=>cache[spec] || (cache[spec] = method(spec));
}
function trimZeroes(numberFormat, decimalChar) {
    return (x)=>{
        const str = numberFormat(x), dec = str.indexOf(decimalChar);
        if (dec < 0) return str;
        let idx = rightmostDigit(str, dec);
        const end = idx < str.length ? str.slice(idx) : "";
        while(--idx > dec)if (str[idx] !== "0") {
            ++idx;
            break;
        }
        return str.slice(0, idx) + end;
    };
}
function rightmostDigit(str, dec) {
    let i = str.lastIndexOf("e"), c;
    if (i > 0) return i;
    for(i = str.length; --i > dec;){
        c = str.charCodeAt(i);
        if (c >= 48 && c <= 57) return i + 1; // is digit
    }
}
function numberLocale(locale) {
    const format = memoize(locale.format), formatPrefix = locale.formatPrefix;
    return {
        format,
        formatPrefix,
        formatFloat (spec) {
            const s = (0, _d3Format.formatSpecifier)(spec || ",");
            if (s.precision == null) {
                s.precision = 12;
                switch(s.type){
                    case "%":
                        s.precision -= 2;
                        break;
                    case "e":
                        s.precision -= 1;
                        break;
                }
                return trimZeroes(format(s), format(".1f")(1)[1] // decimal point character
                );
            } else return format(s);
        },
        formatSpan (start, stop, count, specifier) {
            specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);
            const step = (0, _d3Array.tickStep)(start, stop, count), value = Math.max(Math.abs(start), Math.abs(stop));
            let precision;
            if (specifier.precision == null) switch(specifier.type){
                case "s":
                    if (!isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
                    return formatPrefix(specifier, value);
                case "":
                case "e":
                case "g":
                case "p":
                case "r":
                    if (!isNaN(precision = (0, _d3Format.precisionRound)(step, value))) specifier.precision = precision - (specifier.type === "e");
                    break;
                case "f":
                case "%":
                    if (!isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
                    break;
            }
            return format(specifier);
        }
    };
}
let defaultNumberLocale;
resetNumberFormatDefaultLocale();
function resetNumberFormatDefaultLocale() {
    return defaultNumberLocale = numberLocale({
        format: (0, _d3Format.format),
        formatPrefix: (0, _d3Format.formatPrefix)
    });
}
function numberFormatLocale(definition) {
    return numberLocale((0, _d3Format.formatLocale)(definition));
}
function numberFormatDefaultLocale(definition) {
    return arguments.length ? defaultNumberLocale = numberFormatLocale(definition) : defaultNumberLocale;
}
function timeMultiFormat(format, interval, spec) {
    spec = spec || {};
    if (!(0, _vegaUtil.isObject)(spec)) (0, _vegaUtil.error)("Invalid time multi-format specifier: ".concat(spec));
    const second = interval((0, _vegaTime.SECONDS)), minute = interval((0, _vegaTime.MINUTES)), hour = interval((0, _vegaTime.HOURS)), day = interval((0, _vegaTime.DATE)), week = interval((0, _vegaTime.WEEK)), month = interval((0, _vegaTime.MONTH)), quarter = interval((0, _vegaTime.QUARTER)), year = interval((0, _vegaTime.YEAR)), L = format(spec[0, _vegaTime.MILLISECONDS] || ".%L"), S = format(spec[0, _vegaTime.SECONDS] || ":%S"), M = format(spec[0, _vegaTime.MINUTES] || "%I:%M"), H = format(spec[0, _vegaTime.HOURS] || "%I %p"), d = format(spec[0, _vegaTime.DATE] || spec[0, _vegaTime.DAY] || "%a %d"), w = format(spec[0, _vegaTime.WEEK] || "%b %d"), m = format(spec[0, _vegaTime.MONTH] || "%B"), q = format(spec[0, _vegaTime.QUARTER] || "%B"), y = format(spec[0, _vegaTime.YEAR] || "%Y");
    return (date)=>(second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);
}
function timeLocale(locale) {
    const timeFormat = memoize(locale.format), utcFormat = memoize(locale.utcFormat);
    return {
        timeFormat: (spec)=>(0, _vegaUtil.isString)(spec) ? timeFormat(spec) : timeMultiFormat(timeFormat, (0, _vegaTime.timeInterval), spec),
        utcFormat: (spec)=>(0, _vegaUtil.isString)(spec) ? utcFormat(spec) : timeMultiFormat(utcFormat, (0, _vegaTime.utcInterval), spec),
        timeParse: memoize(locale.parse),
        utcParse: memoize(locale.utcParse)
    };
}
let defaultTimeLocale;
resetTimeFormatDefaultLocale();
function resetTimeFormatDefaultLocale() {
    return defaultTimeLocale = timeLocale({
        format: (0, _d3TimeFormat.timeFormat),
        parse: (0, _d3TimeFormat.timeParse),
        utcFormat: (0, _d3TimeFormat.utcFormat),
        utcParse: (0, _d3TimeFormat.utcParse)
    });
}
function timeFormatLocale(definition) {
    return timeLocale((0, _d3TimeFormat.timeFormatLocale)(definition));
}
function timeFormatDefaultLocale(definition) {
    return arguments.length ? defaultTimeLocale = timeFormatLocale(definition) : defaultTimeLocale;
}
const createLocale = (number, time)=>(0, _vegaUtil.extend)({}, number, time);
function locale(numberSpec, timeSpec) {
    const number = numberSpec ? numberFormatLocale(numberSpec) : numberFormatDefaultLocale();
    const time = timeSpec ? timeFormatLocale(timeSpec) : timeFormatDefaultLocale();
    return createLocale(number, time);
}
function defaultLocale(numberSpec, timeSpec) {
    const args = arguments.length;
    if (args && args !== 2) (0, _vegaUtil.error)("defaultLocale expects either zero or two arguments.");
    return args ? createLocale(numberFormatDefaultLocale(numberSpec), timeFormatDefaultLocale(timeSpec)) : createLocale(numberFormatDefaultLocale(), timeFormatDefaultLocale());
}
function resetDefaultLocale() {
    resetNumberFormatDefaultLocale();
    resetTimeFormatDefaultLocale();
    return defaultLocale();
}

},{"d3-array":"6IwJG","d3-format":"8dYFL","vega-time":"27kpp","vega-util":"bApja","d3-time-format":"242jH","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6IwJG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisect", ()=>(0, _bisectJsDefault.default));
parcelHelpers.export(exports, "bisectRight", ()=>(0, _bisectJs.bisectRight));
parcelHelpers.export(exports, "bisectLeft", ()=>(0, _bisectJs.bisectLeft));
parcelHelpers.export(exports, "bisectCenter", ()=>(0, _bisectJs.bisectCenter));
parcelHelpers.export(exports, "ascending", ()=>(0, _ascendingJsDefault.default));
parcelHelpers.export(exports, "bisector", ()=>(0, _bisectorJsDefault.default));
parcelHelpers.export(exports, "count", ()=>(0, _countJsDefault.default));
parcelHelpers.export(exports, "cross", ()=>(0, _crossJsDefault.default));
parcelHelpers.export(exports, "cumsum", ()=>(0, _cumsumJsDefault.default));
parcelHelpers.export(exports, "descending", ()=>(0, _descendingJsDefault.default));
parcelHelpers.export(exports, "deviation", ()=>(0, _deviationJsDefault.default));
parcelHelpers.export(exports, "extent", ()=>(0, _extentJsDefault.default));
parcelHelpers.export(exports, "Adder", ()=>(0, _fsumJs.Adder));
parcelHelpers.export(exports, "fsum", ()=>(0, _fsumJs.fsum));
parcelHelpers.export(exports, "fcumsum", ()=>(0, _fsumJs.fcumsum));
parcelHelpers.export(exports, "group", ()=>(0, _groupJsDefault.default));
parcelHelpers.export(exports, "groups", ()=>(0, _groupJs.groups));
parcelHelpers.export(exports, "index", ()=>(0, _groupJs.index));
parcelHelpers.export(exports, "indexes", ()=>(0, _groupJs.indexes));
parcelHelpers.export(exports, "rollup", ()=>(0, _groupJs.rollup));
parcelHelpers.export(exports, "rollups", ()=>(0, _groupJs.rollups));
parcelHelpers.export(exports, "groupSort", ()=>(0, _groupSortJsDefault.default));
parcelHelpers.export(exports, "bin", ()=>(0, _binJsDefault.default)) // Deprecated; use bin.
;
parcelHelpers.export(exports, "histogram", ()=>(0, _binJsDefault.default));
parcelHelpers.export(exports, "thresholdFreedmanDiaconis", ()=>(0, _freedmanDiaconisJsDefault.default));
parcelHelpers.export(exports, "thresholdScott", ()=>(0, _scottJsDefault.default));
parcelHelpers.export(exports, "thresholdSturges", ()=>(0, _sturgesJsDefault.default));
parcelHelpers.export(exports, "max", ()=>(0, _maxJsDefault.default));
parcelHelpers.export(exports, "maxIndex", ()=>(0, _maxIndexJsDefault.default));
parcelHelpers.export(exports, "mean", ()=>(0, _meanJsDefault.default));
parcelHelpers.export(exports, "median", ()=>(0, _medianJsDefault.default));
parcelHelpers.export(exports, "merge", ()=>(0, _mergeJsDefault.default));
parcelHelpers.export(exports, "min", ()=>(0, _minJsDefault.default));
parcelHelpers.export(exports, "minIndex", ()=>(0, _minIndexJsDefault.default));
parcelHelpers.export(exports, "nice", ()=>(0, _niceJsDefault.default));
parcelHelpers.export(exports, "pairs", ()=>(0, _pairsJsDefault.default));
parcelHelpers.export(exports, "permute", ()=>(0, _permuteJsDefault.default));
parcelHelpers.export(exports, "quantile", ()=>(0, _quantileJsDefault.default));
parcelHelpers.export(exports, "quantileSorted", ()=>(0, _quantileJs.quantileSorted));
parcelHelpers.export(exports, "quickselect", ()=>(0, _quickselectJsDefault.default));
parcelHelpers.export(exports, "range", ()=>(0, _rangeJsDefault.default));
parcelHelpers.export(exports, "least", ()=>(0, _leastJsDefault.default));
parcelHelpers.export(exports, "leastIndex", ()=>(0, _leastIndexJsDefault.default));
parcelHelpers.export(exports, "greatest", ()=>(0, _greatestJsDefault.default));
parcelHelpers.export(exports, "greatestIndex", ()=>(0, _greatestIndexJsDefault.default));
parcelHelpers.export(exports, "scan", ()=>(0, _scanJsDefault.default)) // Deprecated; use leastIndex.
;
parcelHelpers.export(exports, "shuffle", ()=>(0, _shuffleJsDefault.default));
parcelHelpers.export(exports, "shuffler", ()=>(0, _shuffleJs.shuffler));
parcelHelpers.export(exports, "sum", ()=>(0, _sumJsDefault.default));
parcelHelpers.export(exports, "ticks", ()=>(0, _ticksJsDefault.default));
parcelHelpers.export(exports, "tickIncrement", ()=>(0, _ticksJs.tickIncrement));
parcelHelpers.export(exports, "tickStep", ()=>(0, _ticksJs.tickStep));
parcelHelpers.export(exports, "transpose", ()=>(0, _transposeJsDefault.default));
parcelHelpers.export(exports, "variance", ()=>(0, _varianceJsDefault.default));
parcelHelpers.export(exports, "zip", ()=>(0, _zipJsDefault.default));
parcelHelpers.export(exports, "every", ()=>(0, _everyJsDefault.default));
parcelHelpers.export(exports, "some", ()=>(0, _someJsDefault.default));
parcelHelpers.export(exports, "filter", ()=>(0, _filterJsDefault.default));
parcelHelpers.export(exports, "map", ()=>(0, _mapJsDefault.default));
parcelHelpers.export(exports, "reduce", ()=>(0, _reduceJsDefault.default));
parcelHelpers.export(exports, "reverse", ()=>(0, _reverseJsDefault.default));
parcelHelpers.export(exports, "sort", ()=>(0, _sortJsDefault.default));
parcelHelpers.export(exports, "difference", ()=>(0, _differenceJsDefault.default));
parcelHelpers.export(exports, "disjoint", ()=>(0, _disjointJsDefault.default));
parcelHelpers.export(exports, "intersection", ()=>(0, _intersectionJsDefault.default));
parcelHelpers.export(exports, "subset", ()=>(0, _subsetJsDefault.default));
parcelHelpers.export(exports, "superset", ()=>(0, _supersetJsDefault.default));
parcelHelpers.export(exports, "union", ()=>(0, _unionJsDefault.default));
parcelHelpers.export(exports, "InternMap", ()=>(0, _internmap.InternMap));
parcelHelpers.export(exports, "InternSet", ()=>(0, _internmap.InternSet));
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _crossJs = require("./cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _cumsumJs = require("./cumsum.js");
var _cumsumJsDefault = parcelHelpers.interopDefault(_cumsumJs);
var _descendingJs = require("./descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _deviationJs = require("./deviation.js");
var _deviationJsDefault = parcelHelpers.interopDefault(_deviationJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _fsumJs = require("./fsum.js");
var _groupJs = require("./group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _groupSortJs = require("./groupSort.js");
var _groupSortJsDefault = parcelHelpers.interopDefault(_groupSortJs);
var _binJs = require("./bin.js");
var _binJsDefault = parcelHelpers.interopDefault(_binJs);
var _freedmanDiaconisJs = require("./threshold/freedmanDiaconis.js");
var _freedmanDiaconisJsDefault = parcelHelpers.interopDefault(_freedmanDiaconisJs);
var _scottJs = require("./threshold/scott.js");
var _scottJsDefault = parcelHelpers.interopDefault(_scottJs);
var _sturgesJs = require("./threshold/sturges.js");
var _sturgesJsDefault = parcelHelpers.interopDefault(_sturgesJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _medianJs = require("./median.js");
var _medianJsDefault = parcelHelpers.interopDefault(_medianJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _pairsJs = require("./pairs.js");
var _pairsJsDefault = parcelHelpers.interopDefault(_pairsJs);
var _permuteJs = require("./permute.js");
var _permuteJsDefault = parcelHelpers.interopDefault(_permuteJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _leastJs = require("./least.js");
var _leastJsDefault = parcelHelpers.interopDefault(_leastJs);
var _leastIndexJs = require("./leastIndex.js");
var _leastIndexJsDefault = parcelHelpers.interopDefault(_leastIndexJs);
var _greatestJs = require("./greatest.js");
var _greatestJsDefault = parcelHelpers.interopDefault(_greatestJs);
var _greatestIndexJs = require("./greatestIndex.js");
var _greatestIndexJsDefault = parcelHelpers.interopDefault(_greatestIndexJs);
var _scanJs = require("./scan.js");
var _scanJsDefault = parcelHelpers.interopDefault(_scanJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _ticksJs = require("./ticks.js");
var _ticksJsDefault = parcelHelpers.interopDefault(_ticksJs);
var _transposeJs = require("./transpose.js");
var _transposeJsDefault = parcelHelpers.interopDefault(_transposeJs);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _disjointJs = require("./disjoint.js");
var _disjointJsDefault = parcelHelpers.interopDefault(_disjointJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _subsetJs = require("./subset.js");
var _subsetJsDefault = parcelHelpers.interopDefault(_subsetJs);
var _supersetJs = require("./superset.js");
var _supersetJsDefault = parcelHelpers.interopDefault(_supersetJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _internmap = require("internmap");

},{"./bisect.js":"iJojn","./ascending.js":"60o1Z","./bisector.js":"k5JwJ","./count.js":false,"./cross.js":false,"./cumsum.js":false,"./descending.js":false,"./deviation.js":"euifj","./extent.js":false,"./fsum.js":"g7Aa0","./group.js":false,"./groupSort.js":false,"./bin.js":false,"./threshold/freedmanDiaconis.js":false,"./threshold/scott.js":false,"./threshold/sturges.js":false,"./max.js":"5fCPh","./maxIndex.js":false,"./mean.js":"8HbAa","./median.js":"ai1Kc","./merge.js":"d56l7","./min.js":"h0RAg","./minIndex.js":false,"./nice.js":false,"./pairs.js":false,"./permute.js":"3ydIg","./quantile.js":"49cDh","./quickselect.js":"doA4Q","./range.js":"7QVPN","./least.js":false,"./leastIndex.js":false,"./greatest.js":false,"./greatestIndex.js":false,"./scan.js":false,"./shuffle.js":false,"./sum.js":"hdZOC","./ticks.js":"71MAh","./transpose.js":false,"./variance.js":"gba1Y","./zip.js":false,"./every.js":false,"./some.js":false,"./filter.js":false,"./map.js":false,"./reduce.js":false,"./reverse.js":false,"./sort.js":false,"./difference.js":false,"./disjoint.js":false,"./intersection.js":false,"./subset.js":false,"./superset.js":false,"./union.js":false,"internmap":"3ULAv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iJojn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisectRight", ()=>bisectRight);
parcelHelpers.export(exports, "bisectLeft", ()=>bisectLeft);
parcelHelpers.export(exports, "bisectCenter", ()=>bisectCenter);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
const ascendingBisect = (0, _bisectorJsDefault.default)((0, _ascendingJsDefault.default));
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = (0, _bisectorJsDefault.default)((0, _numberJsDefault.default)).center;
exports.default = bisectRight;

},{"./ascending.js":"60o1Z","./bisector.js":"k5JwJ","./number.js":"gcMRK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"60o1Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"k5JwJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
exports.default = function(f) {
    let delta = f;
    let compare = f;
    if (f.length === 1) {
        delta = (d, x)=>f(d) - x;
        compare = ascendingComparator(f);
    }
    function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while(lo < hi){
            const mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
        }
        return lo;
    }
    function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while(lo < hi){
            const mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
        }
        return lo;
    }
    function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left,
        center,
        right
    };
};
function ascendingComparator(f) {
    return (d, x)=>(0, _ascendingJsDefault.default)(f(d), x);
}

},{"./ascending.js":"60o1Z","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gcMRK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numbers", ()=>numbers);
exports.default = function(x) {
    return x === null ? NaN : +x;
};
function* numbers(values, valueof) {
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value1 of values)if ((value1 = valueof(value1, ++index, values)) != null && (value1 = +value1) >= value1) yield value1;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"euifj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
function deviation(values, valueof) {
    const v = (0, _varianceJsDefault.default)(values, valueof);
    return v ? Math.sqrt(v) : v;
}
exports.default = deviation;

},{"./variance.js":"gba1Y","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gba1Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function variance(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    } else {
        let index = -1;
        for (let value1 of values)if ((value1 = valueof(value1, ++index, values)) != null && (value1 = +value1) >= value1) {
            delta = value1 - mean;
            mean += delta / ++count;
            sum += delta * (value1 - mean);
        }
    }
    if (count > 1) return sum / (count - 1);
}
exports.default = variance;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"g7Aa0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
parcelHelpers.export(exports, "Adder", ()=>Adder);
parcelHelpers.export(exports, "fsum", ()=>fsum);
parcelHelpers.export(exports, "fcumsum", ()=>fcumsum);
class Adder {
    constructor(){
        this._partials = new Float64Array(32);
        this._n = 0;
    }
    add(x) {
        const p = this._partials;
        let i = 0;
        for(let j = 0; j < this._n && j < 32; j++){
            const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
            if (lo) p[i++] = lo;
            x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
    }
    valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
            hi = p[--n];
            while(n > 0){
                x = hi;
                y = p[--n];
                hi = x + y;
                lo = y - (hi - x);
                if (lo) break;
            }
            if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
                y = lo * 2;
                x = hi + y;
                if (y == x - hi) hi = x;
            }
        }
        return hi;
    }
}
function fsum(values, valueof) {
    const adder = new Adder();
    if (valueof === undefined) {
        for (let value of values)if (value = +value) adder.add(value);
    } else {
        let index = -1;
        for (let value1 of values)if (value1 = +valueof(value1, ++index, values)) adder.add(value1);
    }
    return +adder;
}
function fcumsum(values, valueof) {
    const adder = new Adder();
    let index = -1;
    return Float64Array.from(values, valueof === undefined ? (v)=>adder.add(+v || 0) : (v)=>adder.add(+valueof(v, ++index, values) || 0));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5fCPh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function max(values, valueof) {
    let max;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (max < value || max === undefined && value >= value)) max = value;
    } else {
        let index = -1;
        for (let value1 of values)if ((value1 = valueof(value1, ++index, values)) != null && (max < value1 || max === undefined && value1 >= value1)) max = value1;
    }
    return max;
}
exports.default = max;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8HbAa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mean(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count, sum += value;
    } else {
        let index = -1;
        for (let value1 of values)if ((value1 = valueof(value1, ++index, values)) != null && (value1 = +value1) >= value1) ++count, sum += value1;
    }
    if (count) return sum / count;
}
exports.default = mean;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ai1Kc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
exports.default = function(values, valueof) {
    return (0, _quantileJsDefault.default)(values, 0.5, valueof);
};

},{"./quantile.js":"49cDh","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"49cDh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quantileSorted", ()=>quantileSorted);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
function quantile(values, p, valueof) {
    values = Float64Array.from((0, _numberJs.numbers)(values, valueof));
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return (0, _minJsDefault.default)(values);
    if (p >= 1) return (0, _maxJsDefault.default)(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = (0, _maxJsDefault.default)((0, _quickselectJsDefault.default)(values, i0).subarray(0, i0 + 1)), value1 = (0, _minJsDefault.default)(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
}
exports.default = quantile;
function quantileSorted(values, p, valueof = (0, _numberJsDefault.default)) {
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
}

},{"./max.js":"5fCPh","./min.js":"h0RAg","./quickselect.js":"doA4Q","./number.js":"gcMRK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"h0RAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function min(values, valueof) {
    let min;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (min > value || min === undefined && value >= value)) min = value;
    } else {
        let index = -1;
        for (let value1 of values)if ((value1 = valueof(value1, ++index, values)) != null && (min > value1 || min === undefined && value1 >= value1)) min = value1;
    }
    return min;
}
exports.default = min;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"doA4Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function quickselect(array, k, left = 0, right = array.length - 1, compare = (0, _ascendingJsDefault.default)) {
    while(right > left){
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselect(array, k, newLeft, newRight, compare);
        }
        const t = array[k];
        let i = left;
        let j = right;
        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);
        while(i < j){
            swap(array, i, j), ++i, --j;
            while(compare(array[i], t) < 0)++i;
            while(compare(array[j], t) > 0)--j;
        }
        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
    return array;
}
exports.default = quickselect;
function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}

},{"./ascending.js":"60o1Z","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"d56l7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function* flatten(arrays) {
    for (const array of arrays)yield* array;
}
function merge(arrays) {
    return Array.from(flatten(arrays));
}
exports.default = merge;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3ydIg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(source, keys) {
    return Array.from(keys, (key)=>source[key]);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7QVPN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while(++i < n)range[i] = start + i * step;
    return range;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hdZOC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function sum(values, valueof) {
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value = +value) sum += value;
    } else {
        let index = -1;
        for (let value1 of values)if (value1 = +valueof(value1, ++index, values)) sum += value1;
    }
    return sum;
}
exports.default = sum;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"71MAh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tickIncrement", ()=>tickIncrement);
parcelHelpers.export(exports, "tickStep", ()=>tickStep);
var e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
exports.default = function(start, stop, count) {
    var reverse, i = -1, n, ticks, step;
    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [
        start
    ];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
    if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while(++i < n)ticks[i] = (r0 + i) * step;
    } else {
        step = -step;
        let r01 = Math.round(start * step), r11 = Math.round(stop * step);
        if (r01 / step < start) ++r01;
        if (r11 / step > stop) --r11;
        ticks = new Array(n = r11 - r01 + 1);
        while(++i < n)ticks[i] = (r01 + i) / step;
    }
    if (reverse) ticks.reverse();
    return ticks;
};
function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e10) step1 *= 10;
    else if (error >= e5) step1 *= 5;
    else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3ULAv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InternMap", ()=>InternMap);
parcelHelpers.export(exports, "InternSet", ()=>InternSet);
class InternMap extends Map {
    constructor(entries, key = keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (entries != null) for (const [key1, value] of entries)this.set(key1, value);
    }
    get(key) {
        return super.get(intern_get(this, key));
    }
    has(key) {
        return super.has(intern_get(this, key));
    }
    set(key, value) {
        return super.set(intern_set(this, key), value);
    }
    delete(key) {
        return super.delete(intern_delete(this, key));
    }
}
class InternSet extends Set {
    constructor(values, key = keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (values != null) for (const value of values)this.add(value);
    }
    has(value) {
        return super.has(intern_get(this, value));
    }
    add(value) {
        return super.add(intern_set(this, value));
    }
    delete(value) {
        return super.delete(intern_delete(this, value));
    }
}
function intern_get({ _intern , _key  }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern , _key  }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
}
function intern_delete({ _intern , _key  }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
        value = _intern.get(value);
        _intern.delete(key);
    }
    return value;
}
function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8dYFL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatDefaultLocale", ()=>(0, _defaultLocaleJsDefault.default));
parcelHelpers.export(exports, "format", ()=>(0, _defaultLocaleJs.format));
parcelHelpers.export(exports, "formatPrefix", ()=>(0, _defaultLocaleJs.formatPrefix));
parcelHelpers.export(exports, "formatLocale", ()=>(0, _localeJsDefault.default));
parcelHelpers.export(exports, "formatSpecifier", ()=>(0, _formatSpecifierJsDefault.default));
parcelHelpers.export(exports, "FormatSpecifier", ()=>(0, _formatSpecifierJs.FormatSpecifier));
parcelHelpers.export(exports, "precisionFixed", ()=>(0, _precisionFixedJsDefault.default));
parcelHelpers.export(exports, "precisionPrefix", ()=>(0, _precisionPrefixJsDefault.default));
parcelHelpers.export(exports, "precisionRound", ()=>(0, _precisionRoundJsDefault.default));
var _defaultLocaleJs = require("./defaultLocale.js");
var _defaultLocaleJsDefault = parcelHelpers.interopDefault(_defaultLocaleJs);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var _formatSpecifierJs = require("./formatSpecifier.js");
var _formatSpecifierJsDefault = parcelHelpers.interopDefault(_formatSpecifierJs);
var _precisionFixedJs = require("./precisionFixed.js");
var _precisionFixedJsDefault = parcelHelpers.interopDefault(_precisionFixedJs);
var _precisionPrefixJs = require("./precisionPrefix.js");
var _precisionPrefixJsDefault = parcelHelpers.interopDefault(_precisionPrefixJs);
var _precisionRoundJs = require("./precisionRound.js");
var _precisionRoundJsDefault = parcelHelpers.interopDefault(_precisionRoundJs);

},{"./defaultLocale.js":"1ffdx","./locale.js":"dwvYJ","./formatSpecifier.js":"bIdqX","./precisionFixed.js":"8IQWL","./precisionPrefix.js":"iTn3h","./precisionRound.js":"kzQd5","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1ffdx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "format", ()=>format);
parcelHelpers.export(exports, "formatPrefix", ()=>formatPrefix);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var locale;
var format;
var formatPrefix;
defaultLocale({
    thousands: ",",
    grouping: [
        3
    ],
    currency: [
        "$",
        ""
    ]
});
function defaultLocale(definition) {
    locale = (0, _localeJsDefault.default)(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
}
exports.default = defaultLocale;

},{"./locale.js":"dwvYJ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dwvYJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
var _formatGroupJs = require("./formatGroup.js");
var _formatGroupJsDefault = parcelHelpers.interopDefault(_formatGroupJs);
var _formatNumeralsJs = require("./formatNumerals.js");
var _formatNumeralsJsDefault = parcelHelpers.interopDefault(_formatNumeralsJs);
var _formatSpecifierJs = require("./formatSpecifier.js");
var _formatSpecifierJsDefault = parcelHelpers.interopDefault(_formatSpecifierJs);
var _formatTrimJs = require("./formatTrim.js");
var _formatTrimJsDefault = parcelHelpers.interopDefault(_formatTrimJs);
var _formatTypesJs = require("./formatTypes.js");
var _formatTypesJsDefault = parcelHelpers.interopDefault(_formatTypesJs);
var _formatPrefixAutoJs = require("./formatPrefixAuto.js");
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var map = Array.prototype.map, prefixes = [
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "\xb5",
    "m",
    "",
    "k",
    "M",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
];
exports.default = function(locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? (0, _identityJsDefault.default) : (0, _formatGroupJsDefault.default)(map.call(locale.grouping, Number), locale.thousands + ""), currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "", currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "", decimal = locale.decimal === undefined ? "." : locale.decimal + "", numerals = locale.numerals === undefined ? (0, _identityJsDefault.default) : (0, _formatNumeralsJsDefault.default)(map.call(locale.numerals, String)), percent = locale.percent === undefined ? "%" : locale.percent + "", minus = locale.minus === undefined ? "−" : locale.minus + "", nan = locale.nan === undefined ? "NaN" : locale.nan + "";
    function newFormat(specifier) {
        specifier = (0, _formatSpecifierJsDefault.default)(specifier);
        var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";
        else if (!(0, _formatTypesJsDefault.default)[type]) precision === undefined && (precision = 12), trim = true, type = "g";
        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = (0, _formatTypesJsDefault.default)[type], maybeSuffix = /[defgprs%]/.test(type);
        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format(value) {
            var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
            if (type === "c") {
                valueSuffix = formatType(value) + valueSuffix;
                value = "";
            } else {
                value = +value;
                // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                var valueNegative = value < 0 || 1 / value < 0;
                // Perform the initial formatting.
                value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
                // Trim insignificant zeros.
                if (trim) value = (0, _formatTrimJsDefault.default)(value);
                // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
                // Compute the prefix and suffix.
                valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                valueSuffix = (type === "s" ? prefixes[8 + (0, _formatPrefixAutoJs.prefixExponent) / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
                // Break the formatted value into the integer “value” part that can be
                // grouped, and fractional or exponential “suffix” part that is not.
                if (maybeSuffix) {
                    i = -1, n = value.length;
                    while(++i < n)if (c = value.charCodeAt(i), 48 > c || c > 57) {
                        valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                        value = value.slice(0, i);
                        break;
                    }
                }
            }
            // If the fill character is not "0", grouping is applied before padding.
            if (comma && !zero) value = group(value, Infinity);
            // Compute the padding.
            var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
            // If the fill character is "0", grouping is applied after padding.
            if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
            // Reconstruct the final output based on the desired alignment.
            switch(align){
                case "<":
                    value = valuePrefix + value + valueSuffix + padding;
                    break;
                case "=":
                    value = valuePrefix + padding + value + valueSuffix;
                    break;
                case "^":
                    value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                    break;
                default:
                    value = padding + valuePrefix + value + valueSuffix;
                    break;
            }
            return numerals(value);
        }
        format.toString = function() {
            return specifier + "";
        };
        return format;
    }
    function formatPrefix(specifier, value) {
        var f = newFormat((specifier = (0, _formatSpecifierJsDefault.default)(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor((0, _exponentJsDefault.default)(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
        return function(value) {
            return f(k * value) + prefix;
        };
    }
    return {
        format: newFormat,
        formatPrefix: formatPrefix
    };
};

},{"./exponent.js":"iqnEO","./formatGroup.js":"d3NPN","./formatNumerals.js":"32lVM","./formatSpecifier.js":"bIdqX","./formatTrim.js":"1v59S","./formatTypes.js":"eJoM5","./formatPrefixAuto.js":"5DQGQ","./identity.js":"5utPE","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iqnEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
exports.default = function(x) {
    return x = (0, _formatDecimalJs.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
};

},{"./formatDecimal.js":"8WhgD","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8WhgD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
parcelHelpers.export(exports, "formatDecimalParts", ()=>formatDecimalParts);
exports.default = function(x) {
    return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
};
function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);
    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"d3NPN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(grouping, thousands) {
    return function(value, width) {
        var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while(i > 0 && g > 0){
            if (length + g + 1 > width) g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width) break;
            g = grouping[j = (j + 1) % grouping.length];
        }
        return t.reverse().join(thousands);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"32lVM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(numerals) {
    return function(value) {
        return value.replace(/[0-9]/g, function(i) {
            return numerals[+i];
        });
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bIdqX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormatSpecifier", ()=>FormatSpecifier);
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
    });
}
exports.default = formatSpecifier;
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1v59S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
exports.default = function(s) {
    out: for(var n = s.length, i = 1, i0 = -1, i1; i < n; ++i)switch(s[i]){
        case ".":
            i0 = i1 = i;
            break;
        case "0":
            if (i0 === 0) i0 = i;
            i1 = i;
            break;
        default:
            if (!+s[i]) break out;
            if (i0 > 0) i0 = 0;
            break;
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eJoM5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
var _formatDecimalJsDefault = parcelHelpers.interopDefault(_formatDecimalJs);
var _formatPrefixAutoJs = require("./formatPrefixAuto.js");
var _formatPrefixAutoJsDefault = parcelHelpers.interopDefault(_formatPrefixAutoJs);
var _formatRoundedJs = require("./formatRounded.js");
var _formatRoundedJsDefault = parcelHelpers.interopDefault(_formatRoundedJs);
exports.default = {
    "%": (x, p)=>(x * 100).toFixed(p),
    "b": (x)=>Math.round(x).toString(2),
    "c": (x)=>x + "",
    "d": (0, _formatDecimalJsDefault.default),
    "e": (x, p)=>x.toExponential(p),
    "f": (x, p)=>x.toFixed(p),
    "g": (x, p)=>x.toPrecision(p),
    "o": (x)=>Math.round(x).toString(8),
    "p": (x, p)=>(0, _formatRoundedJsDefault.default)(x * 100, p),
    "r": (0, _formatRoundedJsDefault.default),
    "s": (0, _formatPrefixAutoJsDefault.default),
    "X": (x)=>Math.round(x).toString(16).toUpperCase(),
    "x": (x)=>Math.round(x).toString(16)
};

},{"./formatDecimal.js":"8WhgD","./formatPrefixAuto.js":"5DQGQ","./formatRounded.js":"dJog3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5DQGQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prefixExponent", ()=>prefixExponent);
var _formatDecimalJs = require("./formatDecimal.js");
var prefixExponent;
exports.default = function(x, p) {
    var d = (0, _formatDecimalJs.formatDecimalParts)(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimalJs.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
};

},{"./formatDecimal.js":"8WhgD","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dJog3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
exports.default = function(x, p) {
    var d = (0, _formatDecimalJs.formatDecimalParts)(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
};

},{"./formatDecimal.js":"8WhgD","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5utPE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return x;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8IQWL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
exports.default = function(step) {
    return Math.max(0, -(0, _exponentJsDefault.default)(Math.abs(step)));
};

},{"./exponent.js":"iqnEO","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iTn3h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
exports.default = function(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponentJsDefault.default)(value) / 3))) * 3 - (0, _exponentJsDefault.default)(Math.abs(step)));
};

},{"./exponent.js":"iqnEO","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kzQd5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
exports.default = function(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, (0, _exponentJsDefault.default)(max) - (0, _exponentJsDefault.default)(step)) + 1;
};

},{"./exponent.js":"iqnEO","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"27kpp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATE", ()=>DATE);
parcelHelpers.export(exports, "DAY", ()=>DAY);
parcelHelpers.export(exports, "DAYOFYEAR", ()=>DAYOFYEAR);
parcelHelpers.export(exports, "HOURS", ()=>HOURS);
parcelHelpers.export(exports, "MILLISECONDS", ()=>MILLISECONDS);
parcelHelpers.export(exports, "MINUTES", ()=>MINUTES);
parcelHelpers.export(exports, "MONTH", ()=>MONTH);
parcelHelpers.export(exports, "QUARTER", ()=>QUARTER);
parcelHelpers.export(exports, "SECONDS", ()=>SECONDS);
parcelHelpers.export(exports, "TIME_UNITS", ()=>TIME_UNITS);
parcelHelpers.export(exports, "WEEK", ()=>WEEK);
parcelHelpers.export(exports, "YEAR", ()=>YEAR);
parcelHelpers.export(exports, "dayofyear", ()=>dayofyear);
parcelHelpers.export(exports, "timeBin", ()=>bin);
parcelHelpers.export(exports, "timeFloor", ()=>timeFloor);
parcelHelpers.export(exports, "timeInterval", ()=>timeInterval);
parcelHelpers.export(exports, "timeOffset", ()=>timeOffset);
parcelHelpers.export(exports, "timeSequence", ()=>timeSequence);
parcelHelpers.export(exports, "timeUnitSpecifier", ()=>timeUnitSpecifier);
parcelHelpers.export(exports, "timeUnits", ()=>timeUnits);
parcelHelpers.export(exports, "utcFloor", ()=>utcFloor);
parcelHelpers.export(exports, "utcInterval", ()=>utcInterval);
parcelHelpers.export(exports, "utcOffset", ()=>utcOffset);
parcelHelpers.export(exports, "utcSequence", ()=>utcSequence);
parcelHelpers.export(exports, "utcdayofyear", ()=>utcdayofyear);
parcelHelpers.export(exports, "utcweek", ()=>utcweek);
parcelHelpers.export(exports, "week", ()=>week);
var _vegaUtil = require("vega-util");
var _d3Time = require("d3-time");
var _d3Array = require("d3-array");
const YEAR = "year";
const QUARTER = "quarter";
const MONTH = "month";
const WEEK = "week";
const DATE = "date";
const DAY = "day";
const DAYOFYEAR = "dayofyear";
const HOURS = "hours";
const MINUTES = "minutes";
const SECONDS = "seconds";
const MILLISECONDS = "milliseconds";
const TIME_UNITS = [
    YEAR,
    QUARTER,
    MONTH,
    WEEK,
    DATE,
    DAY,
    DAYOFYEAR,
    HOURS,
    MINUTES,
    SECONDS,
    MILLISECONDS
];
const UNITS = TIME_UNITS.reduce((o, u, i)=>(o[u] = 1 + i, o), {});
function timeUnits(units) {
    const u = (0, _vegaUtil.array)(units).slice(), m = {}; // check validity
    if (!u.length) (0, _vegaUtil.error)("Missing time unit.");
    u.forEach((unit)=>{
        if ((0, _vegaUtil.hasOwnProperty)(UNITS, unit)) m[unit] = 1;
        else (0, _vegaUtil.error)("Invalid time unit: ".concat(unit, "."));
    });
    const numTypes = (m[WEEK] || m[DAY] ? 1 : 0) + (m[QUARTER] || m[MONTH] || m[DATE] ? 1 : 0) + (m[DAYOFYEAR] ? 1 : 0);
    if (numTypes > 1) (0, _vegaUtil.error)("Incompatible time units: ".concat(units));
     // ensure proper sort order
    u.sort((a, b)=>UNITS[a] - UNITS[b]);
    return u;
}
const defaultSpecifiers = {
    [YEAR]: "%Y ",
    [QUARTER]: "Q%q ",
    [MONTH]: "%b ",
    [DATE]: "%d ",
    [WEEK]: "W%U ",
    [DAY]: "%a ",
    [DAYOFYEAR]: "%j ",
    [HOURS]: "%H:00",
    [MINUTES]: "00:%M",
    [SECONDS]: ":%S",
    [MILLISECONDS]: ".%L",
    ["".concat(YEAR, "-").concat(MONTH)]: "%Y-%m ",
    ["".concat(YEAR, "-").concat(MONTH, "-").concat(DATE)]: "%Y-%m-%d ",
    ["".concat(HOURS, "-").concat(MINUTES)]: "%H:%M"
};
function timeUnitSpecifier(units, specifiers) {
    const s = (0, _vegaUtil.extend)({}, defaultSpecifiers, specifiers), u = timeUnits(units), n = u.length;
    let fmt = "", start = 0, end, key;
    for(start = 0; start < n;)for(end = u.length; end > start; --end){
        key = u.slice(start, end).join("-");
        if (s[key] != null) {
            fmt += s[key];
            start = end;
            break;
        }
    }
    return fmt.trim();
}
const t0 = new Date();
function localYear(y) {
    t0.setFullYear(y);
    t0.setMonth(0);
    t0.setDate(1);
    t0.setHours(0, 0, 0, 0);
    return t0;
}
function dayofyear(d) {
    return localDayOfYear(new Date(d));
}
function week(d) {
    return localWeekNum(new Date(d));
}
function localDayOfYear(d) {
    return (0, _d3Time.timeDay).count(localYear(d.getFullYear()) - 1, d);
}
function localWeekNum(d) {
    return (0, _d3Time.timeWeek).count(localYear(d.getFullYear()) - 1, d);
}
function localFirst(y) {
    return localYear(y).getDay();
}
function localDate(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
        const date = new Date(-1, m, d, H, M, S, L);
        date.setFullYear(y);
        return date;
    }
    return new Date(y, m, d, H, M, S, L);
}
function utcdayofyear(d) {
    return utcDayOfYear(new Date(d));
}
function utcweek(d) {
    return utcWeekNum(new Date(d));
}
function utcDayOfYear(d) {
    const y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return (0, _d3Time.utcDay).count(y - 1, d);
}
function utcWeekNum(d) {
    const y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return (0, _d3Time.utcWeek).count(y - 1, d);
}
function utcFirst(y) {
    t0.setTime(Date.UTC(y, 0, 1));
    return t0.getUTCDay();
}
function utcDate(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
        const date = new Date(Date.UTC(-1, m, d, H, M, S, L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(y, m, d, H, M, S, L));
}
function floor(units, step, get, inv, newDate) {
    const s = step || 1, b = (0, _vegaUtil.peek)(units), _ = (unit, p, key)=>{
        key = key || unit;
        return getUnit(get[key], inv[key], unit === b && s, p);
    };
    const t = new Date(), u = (0, _vegaUtil.toSet)(units), y = u[YEAR] ? _(YEAR) : (0, _vegaUtil.constant)(2012), m = u[MONTH] ? _(MONTH) : u[QUARTER] ? _(QUARTER) : (0, _vegaUtil.zero), d = u[WEEK] && u[DAY] ? _(DAY, 1, WEEK + DAY) : u[WEEK] ? _(WEEK, 1) : u[DAY] ? _(DAY, 1) : u[DATE] ? _(DATE, 1) : u[DAYOFYEAR] ? _(DAYOFYEAR, 1) : (0, _vegaUtil.one), H = u[HOURS] ? _(HOURS) : (0, _vegaUtil.zero), M = u[MINUTES] ? _(MINUTES) : (0, _vegaUtil.zero), S = u[SECONDS] ? _(SECONDS) : (0, _vegaUtil.zero), L = u[MILLISECONDS] ? _(MILLISECONDS) : (0, _vegaUtil.zero);
    return function(v) {
        t.setTime(+v);
        const year = y(t);
        return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));
    };
}
function getUnit(f, inv, step, phase) {
    const u = step <= 1 ? f : phase ? (d, y)=>phase + step * Math.floor((f(d, y) - phase) / step) : (d, y)=>step * Math.floor(f(d, y) / step);
    return inv ? (d, y)=>inv(u(d, y), y) : u;
} // returns the day of the year based on week number, day of week,
// and the day of the week for the first day of the year
function weekday(week, day, firstDay) {
    return day + week * 7 - (firstDay + 6) % 7;
} // -- LOCAL TIME --
const localGet = {
    [YEAR]: (d)=>d.getFullYear(),
    [QUARTER]: (d)=>Math.floor(d.getMonth() / 3),
    [MONTH]: (d)=>d.getMonth(),
    [DATE]: (d)=>d.getDate(),
    [HOURS]: (d)=>d.getHours(),
    [MINUTES]: (d)=>d.getMinutes(),
    [SECONDS]: (d)=>d.getSeconds(),
    [MILLISECONDS]: (d)=>d.getMilliseconds(),
    [DAYOFYEAR]: (d)=>localDayOfYear(d),
    [WEEK]: (d)=>localWeekNum(d),
    [WEEK + DAY]: (d, y)=>weekday(localWeekNum(d), d.getDay(), localFirst(y)),
    [DAY]: (d, y)=>weekday(1, d.getDay(), localFirst(y))
};
const localInv = {
    [QUARTER]: (q)=>3 * q,
    [WEEK]: (w, y)=>weekday(w, 0, localFirst(y))
};
function timeFloor(units, step) {
    return floor(units, step || 1, localGet, localInv, localDate);
} // -- UTC TIME --
const utcGet = {
    [YEAR]: (d)=>d.getUTCFullYear(),
    [QUARTER]: (d)=>Math.floor(d.getUTCMonth() / 3),
    [MONTH]: (d)=>d.getUTCMonth(),
    [DATE]: (d)=>d.getUTCDate(),
    [HOURS]: (d)=>d.getUTCHours(),
    [MINUTES]: (d)=>d.getUTCMinutes(),
    [SECONDS]: (d)=>d.getUTCSeconds(),
    [MILLISECONDS]: (d)=>d.getUTCMilliseconds(),
    [DAYOFYEAR]: (d)=>utcDayOfYear(d),
    [WEEK]: (d)=>utcWeekNum(d),
    [DAY]: (d, y)=>weekday(1, d.getUTCDay(), utcFirst(y)),
    [WEEK + DAY]: (d, y)=>weekday(utcWeekNum(d), d.getUTCDay(), utcFirst(y))
};
const utcInv = {
    [QUARTER]: (q)=>3 * q,
    [WEEK]: (w, y)=>weekday(w, 0, utcFirst(y))
};
function utcFloor(units, step) {
    return floor(units, step || 1, utcGet, utcInv, utcDate);
}
const timeIntervals = {
    [YEAR]: (0, _d3Time.timeYear),
    [QUARTER]: (0, _d3Time.timeMonth).every(3),
    [MONTH]: (0, _d3Time.timeMonth),
    [WEEK]: (0, _d3Time.timeWeek),
    [DATE]: (0, _d3Time.timeDay),
    [DAY]: (0, _d3Time.timeDay),
    [DAYOFYEAR]: (0, _d3Time.timeDay),
    [HOURS]: (0, _d3Time.timeHour),
    [MINUTES]: (0, _d3Time.timeMinute),
    [SECONDS]: (0, _d3Time.timeSecond),
    [MILLISECONDS]: (0, _d3Time.timeMillisecond)
};
const utcIntervals = {
    [YEAR]: (0, _d3Time.utcYear),
    [QUARTER]: (0, _d3Time.utcMonth).every(3),
    [MONTH]: (0, _d3Time.utcMonth),
    [WEEK]: (0, _d3Time.utcWeek),
    [DATE]: (0, _d3Time.utcDay),
    [DAY]: (0, _d3Time.utcDay),
    [DAYOFYEAR]: (0, _d3Time.utcDay),
    [HOURS]: (0, _d3Time.utcHour),
    [MINUTES]: (0, _d3Time.utcMinute),
    [SECONDS]: (0, _d3Time.utcSecond),
    [MILLISECONDS]: (0, _d3Time.utcMillisecond)
};
function timeInterval(unit) {
    return timeIntervals[unit];
}
function utcInterval(unit) {
    return utcIntervals[unit];
}
function offset(ival, date, step) {
    return ival ? ival.offset(date, step) : undefined;
}
function timeOffset(unit, date, step) {
    return offset(timeInterval(unit), date, step);
}
function utcOffset(unit, date, step) {
    return offset(utcInterval(unit), date, step);
}
function sequence(ival, start, stop, step) {
    return ival ? ival.range(start, stop, step) : undefined;
}
function timeSequence(unit, start, stop, step) {
    return sequence(timeInterval(unit), start, stop, step);
}
function utcSequence(unit, start, stop, step) {
    return sequence(utcInterval(unit), start, stop, step);
}
const durationSecond = 1000, durationMinute = durationSecond * 60, durationHour = durationMinute * 60, durationDay = durationHour * 24, durationWeek = durationDay * 7, durationMonth = durationDay * 30, durationYear = durationDay * 365;
const Milli = [
    YEAR,
    MONTH,
    DATE,
    HOURS,
    MINUTES,
    SECONDS,
    MILLISECONDS
], Seconds = Milli.slice(0, -1), Minutes = Seconds.slice(0, -1), Hours = Minutes.slice(0, -1), Day = Hours.slice(0, -1), Week = [
    YEAR,
    WEEK
], Month = [
    YEAR,
    MONTH
], Year = [
    YEAR
];
const intervals = [
    [
        Seconds,
        1,
        durationSecond
    ],
    [
        Seconds,
        5,
        5 * durationSecond
    ],
    [
        Seconds,
        15,
        15 * durationSecond
    ],
    [
        Seconds,
        30,
        30 * durationSecond
    ],
    [
        Minutes,
        1,
        durationMinute
    ],
    [
        Minutes,
        5,
        5 * durationMinute
    ],
    [
        Minutes,
        15,
        15 * durationMinute
    ],
    [
        Minutes,
        30,
        30 * durationMinute
    ],
    [
        Hours,
        1,
        durationHour
    ],
    [
        Hours,
        3,
        3 * durationHour
    ],
    [
        Hours,
        6,
        6 * durationHour
    ],
    [
        Hours,
        12,
        12 * durationHour
    ],
    [
        Day,
        1,
        durationDay
    ],
    [
        Week,
        1,
        durationWeek
    ],
    [
        Month,
        1,
        durationMonth
    ],
    [
        Month,
        3,
        3 * durationMonth
    ],
    [
        Year,
        1,
        durationYear
    ]
];
function bin(opt) {
    const ext = opt.extent, max = opt.maxbins || 40, target = Math.abs((0, _vegaUtil.span)(ext)) / max;
    let i = (0, _d3Array.bisector)((i)=>i[2]).right(intervals, target), units, step;
    if (i === intervals.length) units = Year, step = (0, _d3Array.tickStep)(ext[0] / durationYear, ext[1] / durationYear, max);
    else if (i) {
        i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];
        units = i[0];
        step = i[1];
    } else {
        units = Milli;
        step = Math.max((0, _d3Array.tickStep)(ext[0], ext[1], max), 1);
    }
    return {
        units,
        step
    };
}

},{"vega-util":"bApja","d3-time":"8e7eR","d3-array":"6IwJG","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8e7eR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeInterval", ()=>(0, _intervalJsDefault.default));
parcelHelpers.export(exports, "timeMillisecond", ()=>(0, _millisecondJsDefault.default));
parcelHelpers.export(exports, "timeMilliseconds", ()=>(0, _millisecondJs.milliseconds));
parcelHelpers.export(exports, "utcMillisecond", ()=>(0, _millisecondJsDefault.default));
parcelHelpers.export(exports, "utcMilliseconds", ()=>(0, _millisecondJs.milliseconds));
parcelHelpers.export(exports, "timeSecond", ()=>(0, _secondJsDefault.default));
parcelHelpers.export(exports, "timeSeconds", ()=>(0, _secondJs.seconds));
parcelHelpers.export(exports, "utcSecond", ()=>(0, _secondJsDefault.default));
parcelHelpers.export(exports, "utcSeconds", ()=>(0, _secondJs.seconds));
parcelHelpers.export(exports, "timeMinute", ()=>(0, _minuteJsDefault.default));
parcelHelpers.export(exports, "timeMinutes", ()=>(0, _minuteJs.minutes));
parcelHelpers.export(exports, "timeHour", ()=>(0, _hourJsDefault.default));
parcelHelpers.export(exports, "timeHours", ()=>(0, _hourJs.hours));
parcelHelpers.export(exports, "timeDay", ()=>(0, _dayJsDefault.default));
parcelHelpers.export(exports, "timeDays", ()=>(0, _dayJs.days));
parcelHelpers.export(exports, "timeWeek", ()=>(0, _weekJs.sunday));
parcelHelpers.export(exports, "timeWeeks", ()=>(0, _weekJs.sundays));
parcelHelpers.export(exports, "timeSunday", ()=>(0, _weekJs.sunday));
parcelHelpers.export(exports, "timeSundays", ()=>(0, _weekJs.sundays));
parcelHelpers.export(exports, "timeMonday", ()=>(0, _weekJs.monday));
parcelHelpers.export(exports, "timeMondays", ()=>(0, _weekJs.mondays));
parcelHelpers.export(exports, "timeTuesday", ()=>(0, _weekJs.tuesday));
parcelHelpers.export(exports, "timeTuesdays", ()=>(0, _weekJs.tuesdays));
parcelHelpers.export(exports, "timeWednesday", ()=>(0, _weekJs.wednesday));
parcelHelpers.export(exports, "timeWednesdays", ()=>(0, _weekJs.wednesdays));
parcelHelpers.export(exports, "timeThursday", ()=>(0, _weekJs.thursday));
parcelHelpers.export(exports, "timeThursdays", ()=>(0, _weekJs.thursdays));
parcelHelpers.export(exports, "timeFriday", ()=>(0, _weekJs.friday));
parcelHelpers.export(exports, "timeFridays", ()=>(0, _weekJs.fridays));
parcelHelpers.export(exports, "timeSaturday", ()=>(0, _weekJs.saturday));
parcelHelpers.export(exports, "timeSaturdays", ()=>(0, _weekJs.saturdays));
parcelHelpers.export(exports, "timeMonth", ()=>(0, _monthJsDefault.default));
parcelHelpers.export(exports, "timeMonths", ()=>(0, _monthJs.months));
parcelHelpers.export(exports, "timeYear", ()=>(0, _yearJsDefault.default));
parcelHelpers.export(exports, "timeYears", ()=>(0, _yearJs.years));
parcelHelpers.export(exports, "utcMinute", ()=>(0, _utcMinuteJsDefault.default));
parcelHelpers.export(exports, "utcMinutes", ()=>(0, _utcMinuteJs.utcMinutes));
parcelHelpers.export(exports, "utcHour", ()=>(0, _utcHourJsDefault.default));
parcelHelpers.export(exports, "utcHours", ()=>(0, _utcHourJs.utcHours));
parcelHelpers.export(exports, "utcDay", ()=>(0, _utcDayJsDefault.default));
parcelHelpers.export(exports, "utcDays", ()=>(0, _utcDayJs.utcDays));
parcelHelpers.export(exports, "utcWeek", ()=>(0, _utcWeekJs.utcSunday));
parcelHelpers.export(exports, "utcWeeks", ()=>(0, _utcWeekJs.utcSundays));
parcelHelpers.export(exports, "utcSunday", ()=>(0, _utcWeekJs.utcSunday));
parcelHelpers.export(exports, "utcSundays", ()=>(0, _utcWeekJs.utcSundays));
parcelHelpers.export(exports, "utcMonday", ()=>(0, _utcWeekJs.utcMonday));
parcelHelpers.export(exports, "utcMondays", ()=>(0, _utcWeekJs.utcMondays));
parcelHelpers.export(exports, "utcTuesday", ()=>(0, _utcWeekJs.utcTuesday));
parcelHelpers.export(exports, "utcTuesdays", ()=>(0, _utcWeekJs.utcTuesdays));
parcelHelpers.export(exports, "utcWednesday", ()=>(0, _utcWeekJs.utcWednesday));
parcelHelpers.export(exports, "utcWednesdays", ()=>(0, _utcWeekJs.utcWednesdays));
parcelHelpers.export(exports, "utcThursday", ()=>(0, _utcWeekJs.utcThursday));
parcelHelpers.export(exports, "utcThursdays", ()=>(0, _utcWeekJs.utcThursdays));
parcelHelpers.export(exports, "utcFriday", ()=>(0, _utcWeekJs.utcFriday));
parcelHelpers.export(exports, "utcFridays", ()=>(0, _utcWeekJs.utcFridays));
parcelHelpers.export(exports, "utcSaturday", ()=>(0, _utcWeekJs.utcSaturday));
parcelHelpers.export(exports, "utcSaturdays", ()=>(0, _utcWeekJs.utcSaturdays));
parcelHelpers.export(exports, "utcMonth", ()=>(0, _utcMonthJsDefault.default));
parcelHelpers.export(exports, "utcMonths", ()=>(0, _utcMonthJs.utcMonths));
parcelHelpers.export(exports, "utcYear", ()=>(0, _utcYearJsDefault.default));
parcelHelpers.export(exports, "utcYears", ()=>(0, _utcYearJs.utcYears));
parcelHelpers.export(exports, "utcTicks", ()=>(0, _ticksJs.utcTicks));
parcelHelpers.export(exports, "utcTickInterval", ()=>(0, _ticksJs.utcTickInterval));
parcelHelpers.export(exports, "timeTicks", ()=>(0, _ticksJs.timeTicks));
parcelHelpers.export(exports, "timeTickInterval", ()=>(0, _ticksJs.timeTickInterval));
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _millisecondJs = require("./millisecond.js");
var _millisecondJsDefault = parcelHelpers.interopDefault(_millisecondJs);
var _secondJs = require("./second.js");
var _secondJsDefault = parcelHelpers.interopDefault(_secondJs);
var _minuteJs = require("./minute.js");
var _minuteJsDefault = parcelHelpers.interopDefault(_minuteJs);
var _hourJs = require("./hour.js");
var _hourJsDefault = parcelHelpers.interopDefault(_hourJs);
var _dayJs = require("./day.js");
var _dayJsDefault = parcelHelpers.interopDefault(_dayJs);
var _weekJs = require("./week.js");
var _monthJs = require("./month.js");
var _monthJsDefault = parcelHelpers.interopDefault(_monthJs);
var _yearJs = require("./year.js");
var _yearJsDefault = parcelHelpers.interopDefault(_yearJs);
var _utcMinuteJs = require("./utcMinute.js");
var _utcMinuteJsDefault = parcelHelpers.interopDefault(_utcMinuteJs);
var _utcHourJs = require("./utcHour.js");
var _utcHourJsDefault = parcelHelpers.interopDefault(_utcHourJs);
var _utcDayJs = require("./utcDay.js");
var _utcDayJsDefault = parcelHelpers.interopDefault(_utcDayJs);
var _utcWeekJs = require("./utcWeek.js");
var _utcMonthJs = require("./utcMonth.js");
var _utcMonthJsDefault = parcelHelpers.interopDefault(_utcMonthJs);
var _utcYearJs = require("./utcYear.js");
var _utcYearJsDefault = parcelHelpers.interopDefault(_utcYearJs);
var _ticksJs = require("./ticks.js");

},{"./interval.js":"l16eQ","./millisecond.js":"1aEMD","./second.js":"22XHb","./minute.js":"6j7Ml","./hour.js":"llDoC","./day.js":"ewpwG","./week.js":"gpqk4","./month.js":"gnhQl","./year.js":"flVyx","./utcMinute.js":"eEHXX","./utcHour.js":"3ujpd","./utcDay.js":"8xXoA","./utcWeek.js":"eQvmg","./utcMonth.js":"8g1B9","./utcYear.js":"hr08P","./ticks.js":"hqlJr","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"l16eQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var t0 = new Date, t1 = new Date;
function newInterval(floori, offseti, count, field) {
    function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
    }
    interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
    };
    interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval.round = function(date) {
        var d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
    };
    interval.filter = function(test) {
        return newInterval(function(date) {
            if (date >= date) while(floori(date), !test(date))date.setTime(date - 1);
        }, function(date, step) {
            if (date >= date) {
                if (step < 0) while(++step <= 0){
                    while(offseti(date, -1), !test(date)); // eslint-disable-line no-empty
                }
                else while(--step >= 0){
                    while(offseti(date, 1), !test(date)); // eslint-disable-line no-empty
                }
            }
        });
    };
    if (count) {
        interval.count = function(start, end) {
            t0.setTime(+start), t1.setTime(+end);
            floori(t0), floori(t1);
            return Math.floor(count(t0, t1));
        };
        interval.every = function(step) {
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
                return field(d) % step === 0;
            } : function(d) {
                return interval.count(0, d) % step === 0;
            });
        };
    }
    return interval;
}
exports.default = newInterval;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1aEMD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "milliseconds", ()=>milliseconds);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var millisecond = (0, _intervalJsDefault.default)(function() {
// noop
}, function(date, step) {
    date.setTime(+date + step);
}, function(start, end) {
    return end - start;
});
// An optimized implementation for this simple case.
millisecond.every = function(k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return (0, _intervalJsDefault.default)(function(date) {
        date.setTime(Math.floor(date / k) * k);
    }, function(date, step) {
        date.setTime(+date + step * k);
    }, function(start, end) {
        return (end - start) / k;
    });
};
exports.default = millisecond;
var milliseconds = millisecond.range;

},{"./interval.js":"l16eQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"22XHb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "seconds", ()=>seconds);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var second = (0, _intervalJsDefault.default)(function(date) {
    date.setTime(date - date.getMilliseconds());
}, function(date, step) {
    date.setTime(+date + step * (0, _durationJs.durationSecond));
}, function(start, end) {
    return (end - start) / (0, _durationJs.durationSecond);
}, function(date) {
    return date.getUTCSeconds();
});
exports.default = second;
var seconds = second.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1XXl6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "durationSecond", ()=>durationSecond);
parcelHelpers.export(exports, "durationMinute", ()=>durationMinute);
parcelHelpers.export(exports, "durationHour", ()=>durationHour);
parcelHelpers.export(exports, "durationDay", ()=>durationDay);
parcelHelpers.export(exports, "durationWeek", ()=>durationWeek);
parcelHelpers.export(exports, "durationMonth", ()=>durationMonth);
parcelHelpers.export(exports, "durationYear", ()=>durationYear);
const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;
const durationWeek = durationDay * 7;
const durationMonth = durationDay * 30;
const durationYear = durationDay * 365;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6j7Ml":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minutes", ()=>minutes);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var minute = (0, _intervalJsDefault.default)(function(date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * (0, _durationJs.durationSecond));
}, function(date, step) {
    date.setTime(+date + step * (0, _durationJs.durationMinute));
}, function(start, end) {
    return (end - start) / (0, _durationJs.durationMinute);
}, function(date) {
    return date.getMinutes();
});
exports.default = minute;
var minutes = minute.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"llDoC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hours", ()=>hours);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var hour = (0, _intervalJsDefault.default)(function(date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * (0, _durationJs.durationSecond) - date.getMinutes() * (0, _durationJs.durationMinute));
}, function(date, step) {
    date.setTime(+date + step * (0, _durationJs.durationHour));
}, function(start, end) {
    return (end - start) / (0, _durationJs.durationHour);
}, function(date) {
    return date.getHours();
});
exports.default = hour;
var hours = hour.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ewpwG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "days", ()=>days);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var day = (0, _intervalJsDefault.default)((date)=>date.setHours(0, 0, 0, 0), (date, step)=>date.setDate(date.getDate() + step), (start, end)=>(end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * (0, _durationJs.durationMinute)) / (0, _durationJs.durationDay), (date)=>date.getDate() - 1);
exports.default = day;
var days = day.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gpqk4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sunday", ()=>sunday);
parcelHelpers.export(exports, "monday", ()=>monday);
parcelHelpers.export(exports, "tuesday", ()=>tuesday);
parcelHelpers.export(exports, "wednesday", ()=>wednesday);
parcelHelpers.export(exports, "thursday", ()=>thursday);
parcelHelpers.export(exports, "friday", ()=>friday);
parcelHelpers.export(exports, "saturday", ()=>saturday);
parcelHelpers.export(exports, "sundays", ()=>sundays);
parcelHelpers.export(exports, "mondays", ()=>mondays);
parcelHelpers.export(exports, "tuesdays", ()=>tuesdays);
parcelHelpers.export(exports, "wednesdays", ()=>wednesdays);
parcelHelpers.export(exports, "thursdays", ()=>thursdays);
parcelHelpers.export(exports, "fridays", ()=>fridays);
parcelHelpers.export(exports, "saturdays", ()=>saturdays);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
function weekday(i) {
    return (0, _intervalJsDefault.default)(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
    }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * (0, _durationJs.durationMinute)) / (0, _durationJs.durationWeek);
    });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gnhQl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "months", ()=>months);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var month = (0, _intervalJsDefault.default)(function(date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
}, function(date, step) {
    date.setMonth(date.getMonth() + step);
}, function(start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
    return date.getMonth();
});
exports.default = month;
var months = month.range;

},{"./interval.js":"l16eQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"flVyx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "years", ()=>years);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var year = (0, _intervalJsDefault.default)(function(date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
}, function(date, step) {
    date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
    return end.getFullYear() - start.getFullYear();
}, function(date) {
    return date.getFullYear();
});
// An optimized implementation for this simple case.
year.every = function(k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _intervalJsDefault.default)(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
    });
};
exports.default = year;
var years = year.range;

},{"./interval.js":"l16eQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eEHXX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcMinutes", ()=>utcMinutes);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var utcMinute = (0, _intervalJsDefault.default)(function(date) {
    date.setUTCSeconds(0, 0);
}, function(date, step) {
    date.setTime(+date + step * (0, _durationJs.durationMinute));
}, function(start, end) {
    return (end - start) / (0, _durationJs.durationMinute);
}, function(date) {
    return date.getUTCMinutes();
});
exports.default = utcMinute;
var utcMinutes = utcMinute.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3ujpd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcHours", ()=>utcHours);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var utcHour = (0, _intervalJsDefault.default)(function(date) {
    date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
    date.setTime(+date + step * (0, _durationJs.durationHour));
}, function(start, end) {
    return (end - start) / (0, _durationJs.durationHour);
}, function(date) {
    return date.getUTCHours();
});
exports.default = utcHour;
var utcHours = utcHour.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8xXoA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcDays", ()=>utcDays);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var utcDay = (0, _intervalJsDefault.default)(function(date) {
    date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
    return (end - start) / (0, _durationJs.durationDay);
}, function(date) {
    return date.getUTCDate() - 1;
});
exports.default = utcDay;
var utcDays = utcDay.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eQvmg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcSunday", ()=>utcSunday);
parcelHelpers.export(exports, "utcMonday", ()=>utcMonday);
parcelHelpers.export(exports, "utcTuesday", ()=>utcTuesday);
parcelHelpers.export(exports, "utcWednesday", ()=>utcWednesday);
parcelHelpers.export(exports, "utcThursday", ()=>utcThursday);
parcelHelpers.export(exports, "utcFriday", ()=>utcFriday);
parcelHelpers.export(exports, "utcSaturday", ()=>utcSaturday);
parcelHelpers.export(exports, "utcSundays", ()=>utcSundays);
parcelHelpers.export(exports, "utcMondays", ()=>utcMondays);
parcelHelpers.export(exports, "utcTuesdays", ()=>utcTuesdays);
parcelHelpers.export(exports, "utcWednesdays", ()=>utcWednesdays);
parcelHelpers.export(exports, "utcThursdays", ()=>utcThursdays);
parcelHelpers.export(exports, "utcFridays", ()=>utcFridays);
parcelHelpers.export(exports, "utcSaturdays", ()=>utcSaturdays);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
function utcWeekday(i) {
    return (0, _intervalJsDefault.default)(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
    }, function(start, end) {
        return (end - start) / (0, _durationJs.durationWeek);
    });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

},{"./interval.js":"l16eQ","./duration.js":"1XXl6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8g1B9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcMonths", ()=>utcMonths);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var utcMonth = (0, _intervalJsDefault.default)(function(date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
    return date.getUTCMonth();
});
exports.default = utcMonth;
var utcMonths = utcMonth.range;

},{"./interval.js":"l16eQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hr08P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcYears", ()=>utcYears);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var utcYear = (0, _intervalJsDefault.default)(function(date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
    return date.getUTCFullYear();
});
// An optimized implementation for this simple case.
utcYear.every = function(k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _intervalJsDefault.default)(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
};
exports.default = utcYear;
var utcYears = utcYear.range;

},{"./interval.js":"l16eQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hqlJr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcTicks", ()=>utcTicks);
parcelHelpers.export(exports, "utcTickInterval", ()=>utcTickInterval);
parcelHelpers.export(exports, "timeTicks", ()=>timeTicks);
parcelHelpers.export(exports, "timeTickInterval", ()=>timeTickInterval);
var _d3Array = require("d3-array");
var _durationJs = require("./duration.js");
var _millisecondJs = require("./millisecond.js");
var _millisecondJsDefault = parcelHelpers.interopDefault(_millisecondJs);
var _secondJs = require("./second.js");
var _secondJsDefault = parcelHelpers.interopDefault(_secondJs);
var _minuteJs = require("./minute.js");
var _minuteJsDefault = parcelHelpers.interopDefault(_minuteJs);
var _hourJs = require("./hour.js");
var _hourJsDefault = parcelHelpers.interopDefault(_hourJs);
var _dayJs = require("./day.js");
var _dayJsDefault = parcelHelpers.interopDefault(_dayJs);
var _weekJs = require("./week.js");
var _monthJs = require("./month.js");
var _monthJsDefault = parcelHelpers.interopDefault(_monthJs);
var _yearJs = require("./year.js");
var _yearJsDefault = parcelHelpers.interopDefault(_yearJs);
var _utcMinuteJs = require("./utcMinute.js");
var _utcMinuteJsDefault = parcelHelpers.interopDefault(_utcMinuteJs);
var _utcHourJs = require("./utcHour.js");
var _utcHourJsDefault = parcelHelpers.interopDefault(_utcHourJs);
var _utcDayJs = require("./utcDay.js");
var _utcDayJsDefault = parcelHelpers.interopDefault(_utcDayJs);
var _utcWeekJs = require("./utcWeek.js");
var _utcMonthJs = require("./utcMonth.js");
var _utcMonthJsDefault = parcelHelpers.interopDefault(_utcMonthJs);
var _utcYearJs = require("./utcYear.js");
var _utcYearJsDefault = parcelHelpers.interopDefault(_utcYearJs);
function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
        [
            (0, _secondJsDefault.default),
            1,
            (0, _durationJs.durationSecond)
        ],
        [
            (0, _secondJsDefault.default),
            5,
            5 * (0, _durationJs.durationSecond)
        ],
        [
            (0, _secondJsDefault.default),
            15,
            15 * (0, _durationJs.durationSecond)
        ],
        [
            (0, _secondJsDefault.default),
            30,
            30 * (0, _durationJs.durationSecond)
        ],
        [
            minute,
            1,
            (0, _durationJs.durationMinute)
        ],
        [
            minute,
            5,
            5 * (0, _durationJs.durationMinute)
        ],
        [
            minute,
            15,
            15 * (0, _durationJs.durationMinute)
        ],
        [
            minute,
            30,
            30 * (0, _durationJs.durationMinute)
        ],
        [
            hour,
            1,
            (0, _durationJs.durationHour)
        ],
        [
            hour,
            3,
            3 * (0, _durationJs.durationHour)
        ],
        [
            hour,
            6,
            6 * (0, _durationJs.durationHour)
        ],
        [
            hour,
            12,
            12 * (0, _durationJs.durationHour)
        ],
        [
            day,
            1,
            (0, _durationJs.durationDay)
        ],
        [
            day,
            2,
            2 * (0, _durationJs.durationDay)
        ],
        [
            week,
            1,
            (0, _durationJs.durationWeek)
        ],
        [
            month,
            1,
            (0, _durationJs.durationMonth)
        ],
        [
            month,
            3,
            3 * (0, _durationJs.durationMonth)
        ],
        [
            year,
            1,
            (0, _durationJs.durationYear)
        ]
    ];
    function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [
            stop,
            start
        ];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
    }
    function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = (0, _d3Array.bisector)(([, , step])=>step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every((0, _d3Array.tickStep)(start / (0, _durationJs.durationYear), stop / (0, _durationJs.durationYear), count));
        if (i === 0) return (0, _millisecondJsDefault.default).every(Math.max((0, _d3Array.tickStep)(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
    }
    return [
        ticks,
        tickInterval
    ];
}
const [utcTicks, utcTickInterval] = ticker((0, _utcYearJsDefault.default), (0, _utcMonthJsDefault.default), (0, _utcWeekJs.utcSunday), (0, _utcDayJsDefault.default), (0, _utcHourJsDefault.default), (0, _utcMinuteJsDefault.default));
const [timeTicks, timeTickInterval] = ticker((0, _yearJsDefault.default), (0, _monthJsDefault.default), (0, _weekJs.sunday), (0, _dayJsDefault.default), (0, _hourJsDefault.default), (0, _minuteJsDefault.default));

},{"d3-array":"6IwJG","./duration.js":"1XXl6","./millisecond.js":"1aEMD","./second.js":"22XHb","./minute.js":"6j7Ml","./hour.js":"llDoC","./day.js":"ewpwG","./week.js":"gpqk4","./month.js":"gnhQl","./year.js":"flVyx","./utcMinute.js":"eEHXX","./utcHour.js":"3ujpd","./utcDay.js":"8xXoA","./utcWeek.js":"eQvmg","./utcMonth.js":"8g1B9","./utcYear.js":"hr08P","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"242jH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeFormatDefaultLocale", ()=>(0, _defaultLocaleJsDefault.default));
parcelHelpers.export(exports, "timeFormat", ()=>(0, _defaultLocaleJs.timeFormat));
parcelHelpers.export(exports, "timeParse", ()=>(0, _defaultLocaleJs.timeParse));
parcelHelpers.export(exports, "utcFormat", ()=>(0, _defaultLocaleJs.utcFormat));
parcelHelpers.export(exports, "utcParse", ()=>(0, _defaultLocaleJs.utcParse));
parcelHelpers.export(exports, "timeFormatLocale", ()=>(0, _localeJsDefault.default));
parcelHelpers.export(exports, "isoFormat", ()=>(0, _isoFormatJsDefault.default));
parcelHelpers.export(exports, "isoParse", ()=>(0, _isoParseJsDefault.default));
var _defaultLocaleJs = require("./defaultLocale.js");
var _defaultLocaleJsDefault = parcelHelpers.interopDefault(_defaultLocaleJs);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var _isoFormatJs = require("./isoFormat.js");
var _isoFormatJsDefault = parcelHelpers.interopDefault(_isoFormatJs);
var _isoParseJs = require("./isoParse.js");
var _isoParseJsDefault = parcelHelpers.interopDefault(_isoParseJs);

},{"./defaultLocale.js":"hRBbX","./locale.js":"iUewg","./isoFormat.js":false,"./isoParse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hRBbX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeFormat", ()=>timeFormat);
parcelHelpers.export(exports, "timeParse", ()=>timeParse);
parcelHelpers.export(exports, "utcFormat", ()=>utcFormat);
parcelHelpers.export(exports, "utcParse", ()=>utcParse);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: [
        "AM",
        "PM"
    ],
    days: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ],
    shortDays: [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ],
    shortMonths: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ]
});
function defaultLocale(definition) {
    locale = (0, _localeJsDefault.default)(definition);
    timeFormat = locale.format;
    timeParse = locale.parse;
    utcFormat = locale.utcFormat;
    utcParse = locale.utcParse;
    return locale;
}
exports.default = defaultLocale;

},{"./locale.js":"iUewg","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iUewg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Time = require("d3-time");
function localDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m, d) {
    return {
        y: y,
        m: m,
        d: d,
        H: 0,
        M: 0,
        S: 0,
        L: 0
    };
}
function formatLocale(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
    };
    var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
    };
    var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
    };
    // These recursive directive definitions must be deferred.
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats) {
        return function(date) {
            var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
            if (!(date instanceof Date)) date = new Date(+date);
            while(++i < n)if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
                else pad = c === "e" ? " " : "0";
                if (format = formats[c]) c = format(date, pad);
                string.push(c);
                j = i + 1;
            }
            string.push(specifier.slice(j, i));
            return string.join("");
        };
    }
    function newParse(specifier, Z) {
        return function(string) {
            var d = newDate(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
            if (i != string.length) return null;
            // If a UNIX timestamp is specified, return it.
            if ("Q" in d) return new Date(d.Q);
            if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
            // If this is utcParse, never use the local timezone.
            if (Z && !("Z" in d)) d.Z = 0;
            // The am-pm flag is 0 for AM, and 1 for PM.
            if ("p" in d) d.H = d.H % 12 + d.p * 12;
            // If the month was not specified, inherit from the quarter.
            if (d.m === undefined) d.m = "q" in d ? d.q : 0;
            // Convert day-of-week and week-of-year to day-of-year.
            if ("V" in d) {
                if (d.V < 1 || d.V > 53) return null;
                if (!("w" in d)) d.w = 1;
                if ("Z" in d) {
                    week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
                    week = day > 4 || day === 0 ? (0, _d3Time.utcMonday).ceil(week) : (0, _d3Time.utcMonday)(week);
                    week = (0, _d3Time.utcDay).offset(week, (d.V - 1) * 7);
                    d.y = week.getUTCFullYear();
                    d.m = week.getUTCMonth();
                    d.d = week.getUTCDate() + (d.w + 6) % 7;
                } else {
                    week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
                    week = day > 4 || day === 0 ? (0, _d3Time.timeMonday).ceil(week) : (0, _d3Time.timeMonday)(week);
                    week = (0, _d3Time.timeDay).offset(week, (d.V - 1) * 7);
                    d.y = week.getFullYear();
                    d.m = week.getMonth();
                    d.d = week.getDate() + (d.w + 6) % 7;
                }
            } else if ("W" in d || "U" in d) {
                if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
                d.m = 0;
                d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
            }
            // If a time zone is specified, all fields are interpreted as UTC and then
            // offset according to the specified time zone.
            if ("Z" in d) {
                d.H += d.Z / 100 | 0;
                d.M += d.Z % 100;
                return utcDate(d);
            }
            // Otherwise, all fields are in local time.
            return localDate(d);
        };
    }
    function parseSpecifier(d, specifier, string, j) {
        var i = 0, n = specifier.length, m = string.length, c, parse;
        while(i < n){
            if (j >= m) return -1;
            c = specifier.charCodeAt(i++);
            if (c === 37) {
                c = specifier.charAt(i++);
                parse = parses[c in pads ? specifier.charAt(i++) : c];
                if (!parse || (j = parse(d, string, j)) < 0) return -1;
            } else if (c != string.charCodeAt(j++)) return -1;
        }
        return j;
    }
    function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
        return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
        format: function(specifier) {
            var f = newFormat(specifier += "", formats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        parse: function(specifier) {
            var p = newParse(specifier += "", false);
            p.toString = function() {
                return specifier;
            };
            return p;
        },
        utcFormat: function(specifier) {
            var f = newFormat(specifier += "", utcFormats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        utcParse: function(specifier) {
            var p = newParse(specifier += "", true);
            p.toString = function() {
                return specifier;
            };
            return p;
        }
    };
}
exports.default = formatLocale;
var pads = {
    "-": "",
    "_": " ",
    "0": "0"
}, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
    return s.replace(requoteRe, "\\$&");
}
function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
    return new Map(names.map((name, i)=>[
            name.toLowerCase(),
            i
        ]));
}
function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
    return pad(1 + (0, _d3Time.timeDay).count((0, _d3Time.timeYear)(d), d), p, 3);
}
function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
    return pad((0, _d3Time.timeSunday).count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}
function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : (0, _d3Time.timeThursday).ceil(d);
}
function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad((0, _d3Time.timeThursday).count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
    return d.getDay();
}
function formatWeekNumberMonday(d, p) {
    return pad((0, _d3Time.timeMonday).count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}
function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
}
function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : (0, _d3Time.timeThursday).ceil(d);
    return pad(d.getFullYear() % 10000, p, 4);
}
function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
    return pad(1 + (0, _d3Time.utcDay).count((0, _d3Time.utcYear)(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
    return pad((0, _d3Time.utcSunday).count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}
function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : (0, _d3Time.utcThursday).ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad((0, _d3Time.utcThursday).count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
    return pad((0, _d3Time.utcMonday).count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
}
function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : (0, _d3Time.utcThursday).ceil(d);
    return pad(d.getUTCFullYear() % 10000, p, 4);
}
function formatUTCZone() {
    return "+0000";
}
function formatLiteralPercent() {
    return "%";
}
function formatUnixTimestamp(d) {
    return +d;
}
function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
}

},{"d3-time":"8e7eR","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kZBmL":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var base64 = require("base64-js");
var ieee754 = require("ieee754");
var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"base64-js":"1lZue","ieee754":"2wWVg"}],"1lZue":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"2wWVg":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"2axoo":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var base64 = require("base64-js");
var ieee754 = require("ieee754");
var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"base64-js":"32JyI","ieee754":"7LzLb"}],"32JyI":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"7LzLb":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"gA9mK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "aggregate", ()=>Aggregate);
parcelHelpers.export(exports, "bin", ()=>Bin);
parcelHelpers.export(exports, "collect", ()=>Collect);
parcelHelpers.export(exports, "compare", ()=>Compare);
parcelHelpers.export(exports, "countpattern", ()=>CountPattern);
parcelHelpers.export(exports, "cross", ()=>Cross);
parcelHelpers.export(exports, "density", ()=>Density);
parcelHelpers.export(exports, "dotbin", ()=>DotBin);
parcelHelpers.export(exports, "expression", ()=>Expression);
parcelHelpers.export(exports, "extent", ()=>Extent);
parcelHelpers.export(exports, "facet", ()=>Facet);
parcelHelpers.export(exports, "field", ()=>Field);
parcelHelpers.export(exports, "filter", ()=>Filter);
parcelHelpers.export(exports, "flatten", ()=>Flatten);
parcelHelpers.export(exports, "fold", ()=>Fold);
parcelHelpers.export(exports, "formula", ()=>Formula);
parcelHelpers.export(exports, "generate", ()=>Generate);
parcelHelpers.export(exports, "impute", ()=>Impute);
parcelHelpers.export(exports, "joinaggregate", ()=>JoinAggregate);
parcelHelpers.export(exports, "kde", ()=>KDE);
parcelHelpers.export(exports, "key", ()=>Key);
parcelHelpers.export(exports, "load", ()=>Load);
parcelHelpers.export(exports, "lookup", ()=>Lookup);
parcelHelpers.export(exports, "multiextent", ()=>MultiExtent);
parcelHelpers.export(exports, "multivalues", ()=>MultiValues);
parcelHelpers.export(exports, "params", ()=>Params);
parcelHelpers.export(exports, "pivot", ()=>Pivot);
parcelHelpers.export(exports, "prefacet", ()=>PreFacet);
parcelHelpers.export(exports, "project", ()=>Project);
parcelHelpers.export(exports, "proxy", ()=>Proxy);
parcelHelpers.export(exports, "quantile", ()=>Quantile);
parcelHelpers.export(exports, "relay", ()=>Relay);
parcelHelpers.export(exports, "sample", ()=>Sample);
parcelHelpers.export(exports, "sequence", ()=>Sequence);
parcelHelpers.export(exports, "sieve", ()=>Sieve);
parcelHelpers.export(exports, "subflow", ()=>Subflow);
parcelHelpers.export(exports, "timeunit", ()=>TimeUnit);
parcelHelpers.export(exports, "tupleindex", ()=>TupleIndex);
parcelHelpers.export(exports, "values", ()=>Values);
parcelHelpers.export(exports, "window", ()=>Window);
var _vegaUtil = require("vega-util");
var _vegaDataflow = require("vega-dataflow");
var _vegaStatistics = require("vega-statistics");
var _d3Array = require("d3-array");
var _vegaTime = require("vega-time");
function multikey(f) {
    return (x)=>{
        const n = f.length;
        let i = 1, k = String(f[0](x));
        for(; i < n; ++i)k += "|" + f[i](x);
        return k;
    };
}
function groupkey(fields) {
    return !fields || !fields.length ? function() {
        return "";
    } : fields.length === 1 ? fields[0] : multikey(fields);
}
function measureName(op, field, as) {
    return as || op + (!field ? "" : "_" + field);
}
const noop = ()=>{};
const base_op = {
    init: noop,
    add: noop,
    rem: noop,
    idx: 0
};
const AggregateOps = {
    values: {
        init: (m)=>m.cell.store = true,
        value: (m)=>m.cell.data.values(),
        idx: -1
    },
    count: {
        value: (m)=>m.cell.num
    },
    __count__: {
        value: (m)=>m.missing + m.valid
    },
    missing: {
        value: (m)=>m.missing
    },
    valid: {
        value: (m)=>m.valid
    },
    sum: {
        init: (m)=>m.sum = 0,
        value: (m)=>m.sum,
        add: (m, v)=>m.sum += +v,
        rem: (m, v)=>m.sum -= v
    },
    product: {
        init: (m)=>m.product = 1,
        value: (m)=>m.valid ? m.product : undefined,
        add: (m, v)=>m.product *= v,
        rem: (m, v)=>m.product /= v
    },
    mean: {
        init: (m)=>m.mean = 0,
        value: (m)=>m.valid ? m.mean : undefined,
        add: (m, v)=>(m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),
        rem: (m, v)=>(m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)
    },
    average: {
        value: (m)=>m.valid ? m.mean : undefined,
        req: [
            "mean"
        ],
        idx: 1
    },
    variance: {
        init: (m)=>m.dev = 0,
        value: (m)=>m.valid > 1 ? m.dev / (m.valid - 1) : undefined,
        add: (m, v)=>m.dev += m.mean_d * (v - m.mean),
        rem: (m, v)=>m.dev -= m.mean_d * (v - m.mean),
        req: [
            "mean"
        ],
        idx: 1
    },
    variancep: {
        value: (m)=>m.valid > 1 ? m.dev / m.valid : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    stdev: {
        value: (m)=>m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    stdevp: {
        value: (m)=>m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    stderr: {
        value: (m)=>m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    distinct: {
        value: (m)=>m.cell.data.distinct(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    ci0: {
        value: (m)=>m.cell.data.ci0(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    ci1: {
        value: (m)=>m.cell.data.ci1(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    median: {
        value: (m)=>m.cell.data.q2(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    q1: {
        value: (m)=>m.cell.data.q1(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    q3: {
        value: (m)=>m.cell.data.q3(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    min: {
        init: (m)=>m.min = undefined,
        value: (m)=>m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,
        add: (m, v)=>{
            if (v < m.min || m.min === undefined) m.min = v;
        },
        rem: (m, v)=>{
            if (v <= m.min) m.min = NaN;
        },
        req: [
            "values"
        ],
        idx: 4
    },
    max: {
        init: (m)=>m.max = undefined,
        value: (m)=>m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,
        add: (m, v)=>{
            if (v > m.max || m.max === undefined) m.max = v;
        },
        rem: (m, v)=>{
            if (v >= m.max) m.max = NaN;
        },
        req: [
            "values"
        ],
        idx: 4
    },
    argmin: {
        init: (m)=>m.argmin = undefined,
        value: (m)=>m.argmin || m.cell.data.argmin(m.get),
        add: (m, v, t)=>{
            if (v < m.min) m.argmin = t;
        },
        rem: (m, v)=>{
            if (v <= m.min) m.argmin = undefined;
        },
        req: [
            "min",
            "values"
        ],
        idx: 3
    },
    argmax: {
        init: (m)=>m.argmax = undefined,
        value: (m)=>m.argmax || m.cell.data.argmax(m.get),
        add: (m, v, t)=>{
            if (v > m.max) m.argmax = t;
        },
        rem: (m, v)=>{
            if (v >= m.max) m.argmax = undefined;
        },
        req: [
            "max",
            "values"
        ],
        idx: 3
    }
};
const ValidAggregateOps = Object.keys(AggregateOps);
function measure(key, value) {
    return (out)=>(0, _vegaUtil.extend)({
            name: key,
            out: out || key
        }, base_op, value);
}
ValidAggregateOps.forEach((key)=>{
    AggregateOps[key] = measure(key, AggregateOps[key]);
});
function createMeasure(op, name) {
    return AggregateOps[op](name);
}
function compareIndex(a, b) {
    return a.idx - b.idx;
}
function resolve(agg) {
    const map = {};
    agg.forEach((a)=>map[a.name] = a);
    const getreqs = (a)=>{
        if (!a.req) return;
        a.req.forEach((key)=>{
            if (!map[key]) getreqs(map[key] = AggregateOps[key]());
        });
    };
    agg.forEach(getreqs);
    return Object.values(map).sort(compareIndex);
}
function init() {
    this.valid = 0;
    this.missing = 0;
    this._ops.forEach((op)=>op.init(this));
}
function add(v, t) {
    if (v == null || v === "") {
        ++this.missing;
        return;
    }
    if (v !== v) return;
    ++this.valid;
    this._ops.forEach((op)=>op.add(this, v, t));
}
function rem(v, t) {
    if (v == null || v === "") {
        --this.missing;
        return;
    }
    if (v !== v) return;
    --this.valid;
    this._ops.forEach((op)=>op.rem(this, v, t));
}
function set(t) {
    this._out.forEach((op)=>t[op.out] = op.value(this));
    return t;
}
function compileMeasures(agg, field) {
    const get = field || (0, _vegaUtil.identity), ops = resolve(agg), out = agg.slice().sort(compareIndex);
    function ctr(cell) {
        this._ops = ops;
        this._out = out;
        this.cell = cell;
        this.init();
    }
    ctr.prototype.init = init;
    ctr.prototype.add = add;
    ctr.prototype.rem = rem;
    ctr.prototype.set = set;
    ctr.prototype.get = get;
    ctr.fields = agg.map((op)=>op.out);
    return ctr;
}
function TupleStore(key) {
    this._key = key ? (0, _vegaUtil.field)(key) : (0, _vegaDataflow.tupleid);
    this.reset();
}
const prototype$1 = TupleStore.prototype;
prototype$1.reset = function() {
    this._add = [];
    this._rem = [];
    this._ext = null;
    this._get = null;
    this._q = null;
};
prototype$1.add = function(v) {
    this._add.push(v);
};
prototype$1.rem = function(v) {
    this._rem.push(v);
};
prototype$1.values = function() {
    this._get = null;
    if (this._rem.length === 0) return this._add;
    const a = this._add, r = this._rem, k = this._key, n = a.length, m = r.length, x = Array(n - m), map = {};
    let i, j, v; // use unique key field to clear removed values
    for(i = 0; i < m; ++i)map[k(r[i])] = 1;
    for(i = 0, j = 0; i < n; ++i)if (map[k(v = a[i])]) map[k(v)] = 0;
    else x[j++] = v;
    this._rem = [];
    return this._add = x;
}; // memoizing statistics methods
prototype$1.distinct = function(get) {
    const v = this.values(), map = {};
    let n = v.length, count = 0, s;
    while(--n >= 0){
        s = get(v[n]) + "";
        if (!(0, _vegaUtil.hasOwnProperty)(map, s)) {
            map[s] = 1;
            ++count;
        }
    }
    return count;
};
prototype$1.extent = function(get) {
    if (this._get !== get || !this._ext) {
        const v = this.values(), i = (0, _vegaUtil.extentIndex)(v, get);
        this._ext = [
            v[i[0]],
            v[i[1]]
        ];
        this._get = get;
    }
    return this._ext;
};
prototype$1.argmin = function(get) {
    return this.extent(get)[0] || {};
};
prototype$1.argmax = function(get) {
    return this.extent(get)[1] || {};
};
prototype$1.min = function(get) {
    const m = this.extent(get)[0];
    return m != null ? get(m) : undefined;
};
prototype$1.max = function(get) {
    const m = this.extent(get)[1];
    return m != null ? get(m) : undefined;
};
prototype$1.quartile = function(get) {
    if (this._get !== get || !this._q) {
        this._q = (0, _vegaStatistics.quartiles)(this.values(), get);
        this._get = get;
    }
    return this._q;
};
prototype$1.q1 = function(get) {
    return this.quartile(get)[0];
};
prototype$1.q2 = function(get) {
    return this.quartile(get)[1];
};
prototype$1.q3 = function(get) {
    return this.quartile(get)[2];
};
prototype$1.ci = function(get) {
    if (this._get !== get || !this._ci) {
        this._ci = (0, _vegaStatistics.bootstrapCI)(this.values(), 1000, 0.05, get);
        this._get = get;
    }
    return this._ci;
};
prototype$1.ci0 = function(get) {
    return this.ci(get)[0];
};
prototype$1.ci1 = function(get) {
    return this.ci(get)[1];
};
/**
 * Group-by aggregation operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
 * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
 * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
 * @param {boolean} [params.cross=false] - A flag indicating that the full
 *   cross-product of groupby values should be generated, including empty cells.
 *   If true, the drop parameter is ignored and empty cells are retained.
 * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
 */ function Aggregate(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
    this._adds = []; // array of added output tuples
    this._mods = []; // array of modified output tuples
    this._alen = 0; // number of active added tuples
    this._mlen = 0; // number of active modified tuples
    this._drop = true; // should empty aggregation cells be removed
    this._cross = false; // produce full cross-product of group-by values
    this._dims = []; // group-by dimension accessors
    this._dnames = []; // group-by dimension names
    this._measures = []; // collection of aggregation monoids
    this._countOnly = false; // flag indicating only count aggregation
    this._counts = null; // collection of count fields
    this._prev = null; // previous aggregation cells
    this._inputs = null; // array of dependent input tuple field names
    this._outputs = null; // array of output tuple field names
}
Aggregate.Definition = {
    "type": "Aggregate",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "ops",
            "type": "enum",
            "array": true,
            "values": ValidAggregateOps
        },
        {
            "name": "fields",
            "type": "field",
            "null": true,
            "array": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        },
        {
            "name": "drop",
            "type": "boolean",
            "default": true
        },
        {
            "name": "cross",
            "type": "boolean",
            "default": false
        },
        {
            "name": "key",
            "type": "field"
        }
    ]
};
(0, _vegaUtil.inherits)(Aggregate, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const aggr = this, out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), mod = _.modified();
        aggr.stamp = out.stamp;
        if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
            aggr._prev = aggr.value;
            aggr.value = mod ? aggr.init(_) : {};
            pulse.visit(pulse.SOURCE, (t)=>aggr.add(t));
        } else {
            aggr.value = aggr.value || aggr.init(_);
            pulse.visit(pulse.REM, (t)=>aggr.rem(t));
            pulse.visit(pulse.ADD, (t)=>aggr.add(t));
        } // Indicate output fields and return aggregate tuples.
        out.modifies(aggr._outputs); // Should empty cells be dropped?
        aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed
        // and ensure that empty cells are not dropped
        if (_.cross && aggr._dims.length > 1) {
            aggr._drop = false;
            aggr.cross();
        }
        if (pulse.clean() && aggr._drop) out.clean(true).runAfter(()=>this.clean());
        return aggr.changes(out);
    },
    cross () {
        const aggr = this, curr = aggr.value, dims = aggr._dnames, vals = dims.map(()=>({})), n = dims.length; // collect all group-by domain values
        function collect(cells) {
            let key, i, t, v;
            for(key in cells){
                t = cells[key].tuple;
                for(i = 0; i < n; ++i)vals[i][v = t[dims[i]]] = v;
            }
        }
        collect(aggr._prev);
        collect(curr); // iterate over key cross-product, create cells as needed
        function generate(base, tuple, index) {
            const name = dims[index], v = vals[index++];
            for(const k in v){
                const key = base ? base + "|" + k : k;
                tuple[name] = v[k];
                if (index < n) generate(key, tuple, index);
                else if (!curr[key]) aggr.cell(key, tuple);
            }
        }
        generate("", {}, 0);
    },
    init (_) {
        // initialize input and output fields
        const inputs = this._inputs = [], outputs = this._outputs = [], inputMap = {};
        function inputVisit(get) {
            const fields = (0, _vegaUtil.array)((0, _vegaUtil.accessorFields)(get)), n = fields.length;
            let i = 0, f;
            for(; i < n; ++i)if (!inputMap[f = fields[i]]) {
                inputMap[f] = 1;
                inputs.push(f);
            }
        } // initialize group-by dimensions
        this._dims = (0, _vegaUtil.array)(_.groupby);
        this._dnames = this._dims.map((d)=>{
            const dname = (0, _vegaUtil.accessorName)(d);
            inputVisit(d);
            outputs.push(dname);
            return dname;
        });
        this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures
        this._countOnly = true;
        this._counts = [];
        this._measures = [];
        const fields = _.fields || [
            null
        ], ops = _.ops || [
            "count"
        ], as = _.as || [], n = fields.length, map = {};
        let field, op, m, mname, outname, i;
        if (n !== ops.length) (0, _vegaUtil.error)("Unmatched number of fields and aggregate ops.");
        for(i = 0; i < n; ++i){
            field = fields[i];
            op = ops[i];
            if (field == null && op !== "count") (0, _vegaUtil.error)("Null aggregate field specified.");
            mname = (0, _vegaUtil.accessorName)(field);
            outname = measureName(op, mname, as[i]);
            outputs.push(outname);
            if (op === "count") {
                this._counts.push(outname);
                continue;
            }
            m = map[mname];
            if (!m) {
                inputVisit(field);
                m = map[mname] = [];
                m.field = field;
                this._measures.push(m);
            }
            if (op !== "count") this._countOnly = false;
            m.push(createMeasure(op, outname));
        }
        this._measures = this._measures.map((m)=>compileMeasures(m, m.field));
        return {}; // aggregation cells (this.value)
    },
    // -- Cell Management -----
    cellkey: groupkey(),
    cell (key, t) {
        let cell = this.value[key];
        if (!cell) {
            cell = this.value[key] = this.newcell(key, t);
            this._adds[this._alen++] = cell;
        } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
            cell.stamp = this.stamp;
            this._adds[this._alen++] = cell;
        } else if (cell.stamp < this.stamp) {
            cell.stamp = this.stamp;
            this._mods[this._mlen++] = cell;
        }
        return cell;
    },
    newcell (key, t) {
        const cell = {
            key: key,
            num: 0,
            agg: null,
            tuple: this.newtuple(t, this._prev && this._prev[key]),
            stamp: this.stamp,
            store: false
        };
        if (!this._countOnly) {
            const measures = this._measures, n = measures.length;
            cell.agg = Array(n);
            for(let i = 0; i < n; ++i)cell.agg[i] = new measures[i](cell);
        }
        if (cell.store) cell.data = new TupleStore();
        return cell;
    },
    newtuple (t, p) {
        const names = this._dnames, dims = this._dims, n = dims.length, x = {};
        for(let i = 0; i < n; ++i)x[names[i]] = dims[i](t);
        return p ? (0, _vegaDataflow.replace)(p.tuple, x) : (0, _vegaDataflow.ingest)(x);
    },
    clean () {
        const cells = this.value;
        for(const key in cells)if (cells[key].num === 0) delete cells[key];
    },
    // -- Process Tuples -----
    add (t) {
        const key = this.cellkey(t), cell = this.cell(key, t);
        cell.num += 1;
        if (this._countOnly) return;
        if (cell.store) cell.data.add(t);
        const agg = cell.agg;
        for(let i = 0, n = agg.length; i < n; ++i)agg[i].add(agg[i].get(t), t);
    },
    rem (t) {
        const key = this.cellkey(t), cell = this.cell(key, t);
        cell.num -= 1;
        if (this._countOnly) return;
        if (cell.store) cell.data.rem(t);
        const agg = cell.agg;
        for(let i = 0, n = agg.length; i < n; ++i)agg[i].rem(agg[i].get(t), t);
    },
    celltuple (cell) {
        const tuple = cell.tuple, counts = this._counts; // consolidate stored values
        if (cell.store) cell.data.values();
         // update tuple properties
        for(let i = 0, n = counts.length; i < n; ++i)tuple[counts[i]] = cell.num;
        if (!this._countOnly) {
            const agg = cell.agg;
            for(let i1 = 0, n1 = agg.length; i1 < n1; ++i1)agg[i1].set(tuple);
        }
        return tuple;
    },
    changes (out) {
        const adds = this._adds, mods = this._mods, prev = this._prev, drop = this._drop, add = out.add, rem = out.rem, mod = out.mod;
        let cell, key, i, n;
        if (prev) for(key in prev){
            cell = prev[key];
            if (!drop || cell.num) rem.push(cell.tuple);
        }
        for(i = 0, n = this._alen; i < n; ++i){
            add.push(this.celltuple(adds[i]));
            adds[i] = null; // for garbage collection
        }
        for(i = 0, n = this._mlen; i < n; ++i){
            cell = mods[i];
            (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
            mods[i] = null; // for garbage collection
        }
        this._alen = this._mlen = 0; // reset list of active cells
        this._prev = null;
        return out;
    }
});
const EPSILON$1 = 1e-14;
/**
 * Generates a binning function for discretizing data.
 * @constructor
 * @param {object} params - The parameters for this operator. The
 *   provided values should be valid options for the {@link bin} function.
 * @param {function(object): *} params.field - The data field to bin.
 */ function Bin(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Bin.Definition = {
    "type": "Bin",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "interval",
            "type": "boolean",
            "default": true
        },
        {
            "name": "anchor",
            "type": "number"
        },
        {
            "name": "maxbins",
            "type": "number",
            "default": 20
        },
        {
            "name": "base",
            "type": "number",
            "default": 10
        },
        {
            "name": "divide",
            "type": "number",
            "array": true,
            "default": [
                5,
                2
            ]
        },
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2,
            "required": true
        },
        {
            "name": "span",
            "type": "number"
        },
        {
            "name": "step",
            "type": "number"
        },
        {
            "name": "steps",
            "type": "number",
            "array": true
        },
        {
            "name": "minstep",
            "type": "number",
            "default": 0
        },
        {
            "name": "nice",
            "type": "boolean",
            "default": true
        },
        {
            "name": "name",
            "type": "string"
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "bin0",
                "bin1"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(Bin, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const band = _.interval !== false, bins = this._bins(_), start = bins.start, step = bins.step, as = _.as || [
            "bin0",
            "bin1"
        ], b0 = as[0], b1 = as[1];
        let flag;
        if (_.modified()) {
            pulse = pulse.reflow(true);
            flag = pulse.SOURCE;
        } else flag = pulse.modified((0, _vegaUtil.accessorFields)(_.field)) ? pulse.ADD_MOD : pulse.ADD;
        pulse.visit(flag, band ? (t)=>{
            const v = bins(t); // minimum bin value (inclusive)
            t[b0] = v; // maximum bin value (exclusive)
            // use convoluted math for better floating point agreement
            // see https://github.com/vega/vega/issues/830
            // infinite values propagate through this formula! #2227
            t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
        } : (t)=>t[b0] = bins(t));
        return pulse.modifies(band ? as : b0);
    },
    _bins (_) {
        if (this.value && !_.modified()) return this.value;
        const field = _.field, bins = (0, _vegaStatistics.bin)(_), step = bins.step;
        let start = bins.start, stop = start + Math.ceil((bins.stop - start) / step) * step, a, d;
        if ((a = _.anchor) != null) {
            d = a - (start + step * Math.floor((a - start) / step));
            start += d;
            stop += d;
        }
        const f = function(t) {
            let v = (0, _vegaUtil.toNumber)(field(t));
            return v == null ? null : v < start ? -Infinity : v > stop ? Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));
        };
        f.start = start;
        f.stop = bins.stop;
        f.step = step;
        return this.value = (0, _vegaUtil.accessor)(f, (0, _vegaUtil.accessorFields)(field), _.name || "bin_" + (0, _vegaUtil.accessorName)(field));
    }
});
function SortedList(idFunc, source, input) {
    const $ = idFunc;
    let data = source || [], add = input || [], rem = {}, cnt = 0;
    return {
        add: (t)=>add.push(t),
        remove: (t)=>rem[$(t)] = ++cnt,
        size: ()=>data.length,
        data: (compare, resort)=>{
            if (cnt) {
                data = data.filter((t)=>!rem[$(t)]);
                rem = {};
                cnt = 0;
            }
            if (resort && compare) data.sort(compare);
            if (add.length) {
                data = compare ? (0, _vegaUtil.merge)(compare, data, add.sort(compare)) : data.concat(add);
                add = [];
            }
            return data;
        }
    };
}
/**
 * Collects all data tuples that pass through this operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for additionally sorting the collected tuples.
 */ function Collect(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
Collect.Definition = {
    "type": "Collect",
    "metadata": {
        "source": true
    },
    "params": [
        {
            "name": "sort",
            "type": "compare"
        }
    ]
};
(0, _vegaUtil.inherits)(Collect, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.ALL), list = SortedList((0, _vegaDataflow.tupleid), this.value, out.materialize(out.ADD).add), sort = _.sort, mod = pulse.changed() || sort && (_.modified("sort") || pulse.modified(sort.fields));
        out.visit(out.REM, list.remove);
        this.modified(mod);
        this.value = out.source = list.data((0, _vegaDataflow.stableCompare)(sort), mod); // propagate tree root if defined
        if (pulse.source && pulse.source.root) this.value.root = pulse.source.root;
        return out;
    }
});
/**
 * Generates a comparator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string|function>} params.fields - The fields to compare.
 * @param {Array<string>} [params.orders] - The sort orders.
 *   Each entry should be one of "ascending" (default) or "descending".
 */ function Compare(params) {
    (0, _vegaDataflow.Operator).call(this, null, update$5, params);
}
(0, _vegaUtil.inherits)(Compare, (0, _vegaDataflow.Operator));
function update$5(_) {
    return this.value && !_.modified() ? this.value : (0, _vegaUtil.compare)(_.fields, _.orders);
}
/**
 * Count regexp-defined pattern occurrences in a text field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the text field.
 * @param {string} [params.pattern] - RegExp string defining the text pattern.
 * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
 * @param {string} [params.stopwords] - RegExp string of words to ignore.
 */ function CountPattern(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
CountPattern.Definition = {
    "type": "CountPattern",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "case",
            "type": "enum",
            "values": [
                "upper",
                "lower",
                "mixed"
            ],
            "default": "mixed"
        },
        {
            "name": "pattern",
            "type": "string",
            "default": '[\\w"]+'
        },
        {
            "name": "stopwords",
            "type": "string",
            "default": ""
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "text",
                "count"
            ]
        }
    ]
};
function tokenize(text, tcase, match) {
    switch(tcase){
        case "upper":
            text = text.toUpperCase();
            break;
        case "lower":
            text = text.toLowerCase();
            break;
    }
    return text.match(match);
}
(0, _vegaUtil.inherits)(CountPattern, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const process = (update)=>(tuple)=>{
                var tokens = tokenize(get(tuple), _.case, match) || [], t;
                for(var i = 0, n = tokens.length; i < n; ++i)if (!stop.test(t = tokens[i])) update(t);
            };
        const init = this._parameterCheck(_, pulse), counts = this._counts, match = this._match, stop = this._stop, get = _.field, as = _.as || [
            "text",
            "count"
        ], add = process((t)=>counts[t] = 1 + (counts[t] || 0)), rem = process((t)=>counts[t] -= 1);
        if (init) pulse.visit(pulse.SOURCE, add);
        else {
            pulse.visit(pulse.ADD, add);
            pulse.visit(pulse.REM, rem);
        }
        return this._finish(pulse, as); // generate output tuples
    },
    _parameterCheck (_, pulse) {
        let init = false;
        if (_.modified("stopwords") || !this._stop) {
            this._stop = new RegExp("^" + (_.stopwords || "") + "$", "i");
            init = true;
        }
        if (_.modified("pattern") || !this._match) {
            this._match = new RegExp(_.pattern || "[\\w']+", "g");
            init = true;
        }
        if (_.modified("field") || pulse.modified(_.field.fields)) init = true;
        if (init) this._counts = {};
        return init;
    },
    _finish (pulse, as) {
        const counts = this._counts, tuples = this._tuples || (this._tuples = {}), text = as[0], count = as[1], out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        let w, t, c;
        for(w in counts){
            t = tuples[w];
            c = counts[w] || 0;
            if (!t && c) {
                tuples[w] = t = (0, _vegaDataflow.ingest)({});
                t[text] = w;
                t[count] = c;
                out.add.push(t);
            } else if (c === 0) {
                if (t) out.rem.push(t);
                counts[w] = null;
                tuples[w] = null;
            } else if (t[count] !== c) {
                t[count] = c;
                out.mod.push(t);
            }
        }
        return out.modifies(as);
    }
});
/**
 * Perform a cross-product of a tuple stream with itself.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object):boolean} [params.filter] - An optional filter
 *   function for selectively including tuples in the cross product.
 * @param {Array<string>} [params.as] - The names of the output fields.
 */ function Cross(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Cross.Definition = {
    "type": "Cross",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "filter",
            "type": "expr"
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "a",
                "b"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(Cross, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), as = _.as || [
            "a",
            "b"
        ], a = as[0], b = as[1], reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified("as") || _.modified("filter");
        let data = this.value;
        if (reset) {
            if (data) out.rem = data;
            data = pulse.materialize(pulse.SOURCE).source;
            out.add = this.value = cross(data, a, b, _.filter || (0, _vegaUtil.truthy));
        } else out.mod = data;
        out.source = this.value;
        return out.modifies(as);
    }
});
function cross(input, a, b, filter) {
    var data = [], t = {}, n = input.length, i = 0, j, left;
    for(; i < n; ++i){
        t[a] = left = input[i];
        for(j = 0; j < n; ++j){
            t[b] = input[j];
            if (filter(t)) {
                data.push((0, _vegaDataflow.ingest)(t));
                t = {};
                t[a] = left;
            }
        }
    }
    return data;
}
const Distributions = {
    kde: (0, _vegaStatistics.randomKDE),
    mixture: (0, _vegaStatistics.randomMixture),
    normal: (0, _vegaStatistics.randomNormal),
    lognormal: (0, _vegaStatistics.randomLogNormal),
    uniform: (0, _vegaStatistics.randomUniform)
};
const DISTRIBUTIONS = "distributions", FUNCTION = "function", FIELD = "field";
/**
 * Parse a parameter object for a probability distribution.
 * @param {object} def - The distribution parameter object.
 * @param {function():Array<object>} - A method for requesting
 *   source data. Used for distributions (such as KDE) that
 *   require sample data points. This method will only be
 *   invoked if the 'from' parameter for a target data source
 *   is not provided. Typically this method returns backing
 *   source data for a Pulse object.
 * @return {object} - The output distribution object.
 */ function parse(def, data) {
    const func = def[FUNCTION];
    if (!(0, _vegaUtil.hasOwnProperty)(Distributions, func)) (0, _vegaUtil.error)("Unknown distribution function: " + func);
    const d = Distributions[func]();
    for(const name in def){
        // if data field, extract values
        if (name === FIELD) d.data((def.from || data()).map(def[name]));
        else if (name === DISTRIBUTIONS) d[name](def[name].map((_)=>parse(_, data)));
        else if (typeof d[name] === FUNCTION) d[name](def[name]);
    }
    return d;
}
/**
 * Grid sample points for a probability density. Given a distribution and
 * a sampling extent, will generate points suitable for plotting either
 * PDF (probability density function) or CDF (cumulative distribution
 * function) curves.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.distribution - The probability distribution. This
 *   is an object parameter dependent on the distribution type.
 * @param {string} [params.method='pdf'] - The distribution method to sample.
 *   One of 'pdf' or 'cdf'.
 * @param {Array<number>} [params.extent] - The [min, max] extent over which
 *   to sample the distribution. This argument is required in most cases, but
 *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
 *   that returns numerical sample points from which the extent can be deduced.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */ function Density(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
const distributions = [
    {
        "key": {
            "function": "normal"
        },
        "params": [
            {
                "name": "mean",
                "type": "number",
                "default": 0
            },
            {
                "name": "stdev",
                "type": "number",
                "default": 1
            }
        ]
    },
    {
        "key": {
            "function": "lognormal"
        },
        "params": [
            {
                "name": "mean",
                "type": "number",
                "default": 0
            },
            {
                "name": "stdev",
                "type": "number",
                "default": 1
            }
        ]
    },
    {
        "key": {
            "function": "uniform"
        },
        "params": [
            {
                "name": "min",
                "type": "number",
                "default": 0
            },
            {
                "name": "max",
                "type": "number",
                "default": 1
            }
        ]
    },
    {
        "key": {
            "function": "kde"
        },
        "params": [
            {
                "name": "field",
                "type": "field",
                "required": true
            },
            {
                "name": "from",
                "type": "data"
            },
            {
                "name": "bandwidth",
                "type": "number",
                "default": 0
            }
        ]
    }
];
const mixture = {
    "key": {
        "function": "mixture"
    },
    "params": [
        {
            "name": "distributions",
            "type": "param",
            "array": true,
            "params": distributions
        },
        {
            "name": "weights",
            "type": "number",
            "array": true
        }
    ]
};
Density.Definition = {
    "type": "Density",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "steps",
            "type": "number"
        },
        {
            "name": "minsteps",
            "type": "number",
            "default": 25
        },
        {
            "name": "maxsteps",
            "type": "number",
            "default": 200
        },
        {
            "name": "method",
            "type": "string",
            "default": "pdf",
            "values": [
                "pdf",
                "cdf"
            ]
        },
        {
            "name": "distribution",
            "type": "param",
            "params": distributions.concat(mixture)
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "default": [
                "value",
                "density"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(Density, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const dist = parse(_.distribution, source(pulse)), minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
            let method = _.method || "pdf";
            if (method !== "pdf" && method !== "cdf") (0, _vegaUtil.error)("Invalid density method: " + method);
            if (!_.extent && !dist.data) (0, _vegaUtil.error)("Missing density extent parameter.");
            method = dist[method];
            const as = _.as || [
                "value",
                "density"
            ], domain = _.extent || (0, _vegaUtil.extent)(dist.data()), values = (0, _vegaStatistics.sampleCurve)(method, domain, minsteps, maxsteps).map((v)=>{
                const tuple = {};
                tuple[as[0]] = v[0];
                tuple[as[1]] = v[1];
                return (0, _vegaDataflow.ingest)(tuple);
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});
function source(pulse) {
    return ()=>pulse.materialize(pulse.SOURCE).source;
}
function fieldNames(fields, as) {
    if (!fields) return null;
    return fields.map((f, i)=>as[i] || (0, _vegaUtil.accessorName)(f));
}
function partition$1(data, groupby, field) {
    const groups = [], get = (f)=>f(t);
    let map, i, n, t, k, g; // partition data points into groups
    if (groupby == null) groups.push(data.map(field));
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            g.dims = k;
            groups.push(g);
        }
        g.push(field(t));
    }
    return groups;
}
const Output = "bin";
/**
 * Dot density binning for dot plot construction.
 * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
 * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to bin.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.step] - The step size (bin width) within which dots should be
 *   stacked. Defaults to 1/30 of the extent of the data *field*.
 * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density
 *   stacks should be smoothed to reduce variance.
 */ function DotBin(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
DotBin.Definition = {
    "type": "DotBin",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "step",
            "type": "number"
        },
        {
            "name": "smooth",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "default": Output
        }
    ]
};
const autostep = (data, field)=>(0, _vegaUtil.span)((0, _vegaUtil.extent)(data, field)) / 30;
(0, _vegaUtil.inherits)(DotBin, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value && !(_.modified() || pulse.changed())) return pulse; // early exit
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(pulse.source, _.groupby, (0, _vegaUtil.identity)), smooth = _.smooth || false, field = _.field, step = _.step || autostep(source, field), sort = (0, _vegaDataflow.stableCompare)((a, b)=>field(a) - field(b)), as = _.as || Output, n = groups.length; // compute dotplot bins per group
        let min = Infinity, max = -Infinity, i = 0, j;
        for(; i < n; ++i){
            const g = groups[i].sort(sort);
            j = -1;
            for (const v of (0, _vegaStatistics.dotbin)(g, step, smooth, field)){
                if (v < min) min = v;
                if (v > max) max = v;
                g[++j][as] = v;
            }
        }
        this.value = {
            start: min,
            stop: max,
            step: step
        };
        return pulse.reflow(true).modifies(as);
    }
});
/**
 * Wraps an expression function with access to external parameters.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function} params.expr - The expression function. The
 *  function should accept both a datum and a parameter object.
 *  This operator's value will be a new function that wraps the
 *  expression function with access to this operator's parameters.
 */ function Expression(params) {
    (0, _vegaDataflow.Operator).call(this, null, update$4, params);
    this.modified(true);
}
(0, _vegaUtil.inherits)(Expression, (0, _vegaDataflow.Operator));
function update$4(_) {
    const expr = _.expr;
    return this.value && !_.modified("expr") ? this.value : (0, _vegaUtil.accessor)((datum)=>expr(datum, _), (0, _vegaUtil.accessorFields)(expr), (0, _vegaUtil.accessorName)(expr));
}
/**
 * Computes extents (min/max) for a data field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field over which to compute extends.
 */ function Extent(params) {
    (0, _vegaDataflow.Transform).call(this, [
        undefined,
        undefined
    ], params);
}
Extent.Definition = {
    "type": "Extent",
    "metadata": {},
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        }
    ]
};
(0, _vegaUtil.inherits)(Extent, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const extent = this.value, field = _.field, mod = pulse.changed() || pulse.modified(field.fields) || _.modified("field");
        let min = extent[0], max = extent[1];
        if (mod || min == null) {
            min = Infinity;
            max = -Infinity;
        }
        pulse.visit(mod ? pulse.SOURCE : pulse.ADD, (t)=>{
            const v = (0, _vegaUtil.toNumber)(field(t));
            if (v != null) {
                // NaNs will fail all comparisons!
                if (v < min) min = v;
                if (v > max) max = v;
            }
        });
        if (!Number.isFinite(min) || !Number.isFinite(max)) {
            let name = (0, _vegaUtil.accessorName)(field);
            if (name) name = ` for field "${name}"`;
            pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);
            min = max = undefined;
        }
        this.value = [
            min,
            max
        ];
    }
});
/**
 * Provides a bridge between a parent transform and a target subflow that
 * consumes only a subset of the tuples that pass through the parent.
 * @constructor
 * @param {Pulse} pulse - A pulse to use as the value of this operator.
 * @param {Transform} parent - The parent transform (typically a Facet instance).
 */ function Subflow(pulse, parent) {
    (0, _vegaDataflow.Operator).call(this, pulse);
    this.parent = parent;
    this.count = 0;
}
(0, _vegaUtil.inherits)(Subflow, (0, _vegaDataflow.Operator), {
    /**
   * Routes pulses from this subflow to a target transform.
   * @param {Transform} target - A transform that receives the subflow of tuples.
   */ connect (target) {
        this.detachSubflow = target.detachSubflow;
        this.targets().add(target);
        return target.source = this;
    },
    /**
   * Add an 'add' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being added.
   */ add (t) {
        this.count += 1;
        this.value.add.push(t);
    },
    /**
   * Add a 'rem' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being removed.
   */ rem (t) {
        this.count -= 1;
        this.value.rem.push(t);
    },
    /**
   * Add a 'mod' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being modified.
   */ mod (t) {
        this.value.mod.push(t);
    },
    /**
   * Re-initialize this operator's pulse value.
   * @param {Pulse} pulse - The pulse to copy from.
   * @see Pulse.init
   */ init (pulse) {
        this.value.init(pulse, pulse.NO_SOURCE);
    },
    /**
   * Evaluate this operator. This method overrides the
   * default behavior to simply return the contained pulse value.
   * @return {Pulse}
   */ evaluate () {
        // assert: this.value.stamp === pulse.stamp
        return this.value;
    }
});
/**
 * Facets a dataflow into a set of subflows based on a key.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): *} params.key - The key field to facet by.
 */ function Facet(params) {
    (0, _vegaDataflow.Transform).call(this, {}, params);
    this._keys = (0, _vegaUtil.fastmap)(); // cache previously calculated key values
    // keep track of active subflows, use as targets array for listeners
    // this allows us to limit propagation to only updated subflows
    const a = this._targets = [];
    a.active = 0;
    a.forEach = (f)=>{
        for(let i = 0, n = a.active; i < n; ++i)f(a[i], i, a);
    };
}
(0, _vegaUtil.inherits)(Facet, (0, _vegaDataflow.Transform), {
    activate (flow) {
        this._targets[this._targets.active++] = flow;
    },
    // parent argument provided by PreFacet subclass
    subflow (key, flow, pulse, parent) {
        const flows = this.value;
        let sf = (0, _vegaUtil.hasOwnProperty)(flows, key) && flows[key], df, p;
        if (!sf) {
            p = parent || (p = this._group[key]) && p.tuple;
            df = pulse.dataflow;
            sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);
            df.add(sf).connect(flow(df, key, p));
            flows[key] = sf;
            this.activate(sf);
        } else if (sf.value.stamp < pulse.stamp) {
            sf.init(pulse);
            this.activate(sf);
        }
        return sf;
    },
    clean () {
        const flows = this.value;
        let detached = 0;
        for(const key in flows)if (flows[key].count === 0) {
            const detach = flows[key].detachSubflow;
            if (detach) detach();
            delete flows[key];
            ++detached;
        }
         // remove inactive targets from the active targets array
        if (detached) {
            const active = this._targets.filter((sf)=>sf && sf.count > 0);
            this.initTargets(active);
        }
    },
    initTargets (act) {
        const a = this._targets, n = a.length, m = act ? act.length : 0;
        let i = 0;
        for(; i < m; ++i)a[i] = act[i];
        for(; i < n && a[i] != null; ++i)a[i] = null; // ensure old flows can be garbage collected
        a.active = m;
    },
    transform (_, pulse) {
        const df = pulse.dataflow, key = _.key, flow = _.subflow, cache = this._keys, rekey = _.modified("key"), subflow = (key)=>this.subflow(key, flow, pulse);
        this._group = _.group || {};
        this.initTargets(); // reset list of active subflows
        pulse.visit(pulse.REM, (t)=>{
            const id = (0, _vegaDataflow.tupleid)(t), k = cache.get(id);
            if (k !== undefined) {
                cache.delete(id);
                subflow(k).rem(t);
            }
        });
        pulse.visit(pulse.ADD, (t)=>{
            const k = key(t);
            cache.set((0, _vegaDataflow.tupleid)(t), k);
            subflow(k).add(t);
        });
        if (rekey || pulse.modified(key.fields)) pulse.visit(pulse.MOD, (t)=>{
            const id = (0, _vegaDataflow.tupleid)(t), k0 = cache.get(id), k1 = key(t);
            if (k0 === k1) subflow(k1).mod(t);
            else {
                cache.set(id, k1);
                subflow(k0).rem(t);
                subflow(k1).add(t);
            }
        });
        else if (pulse.changed(pulse.MOD)) pulse.visit(pulse.MOD, (t)=>{
            subflow(cache.get((0, _vegaDataflow.tupleid)(t))).mod(t);
        });
        if (rekey) pulse.visit(pulse.REFLOW, (t)=>{
            const id = (0, _vegaDataflow.tupleid)(t), k0 = cache.get(id), k1 = key(t);
            if (k0 !== k1) {
                cache.set(id, k1);
                subflow(k0).rem(t);
                subflow(k1).add(t);
            }
        });
        if (pulse.clean()) df.runAfter(()=>{
            this.clean();
            cache.clean();
        });
        else if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
        return pulse;
    }
});
/**
 * Generates one or more field accessor functions.
 * If the 'name' parameter is an array, an array of field accessors
 * will be created and the 'as' parameter will be ignored.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.name - The field name(s) to access.
 * @param {string} params.as - The accessor function name.
 */ function Field(params) {
    (0, _vegaDataflow.Operator).call(this, null, update$3, params);
}
(0, _vegaUtil.inherits)(Field, (0, _vegaDataflow.Operator));
function update$3(_) {
    return this.value && !_.modified() ? this.value : (0, _vegaUtil.isArray)(_.name) ? (0, _vegaUtil.array)(_.name).map((f)=>(0, _vegaUtil.field)(f)) : (0, _vegaUtil.field)(_.name, _.as);
}
/**
 * Filters data tuples according to a predicate function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The predicate expression function
 *   that determines a tuple's filter status. Truthy values pass the filter.
 */ function Filter(params) {
    (0, _vegaDataflow.Transform).call(this, (0, _vegaUtil.fastmap)(), params);
}
Filter.Definition = {
    "type": "Filter",
    "metadata": {
        "changes": true
    },
    "params": [
        {
            "name": "expr",
            "type": "expr",
            "required": true
        }
    ]
};
(0, _vegaUtil.inherits)(Filter, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const df = pulse.dataflow, cache = this.value, // cache ids of filtered tuples
        output = pulse.fork(), add = output.add, rem = output.rem, mod = output.mod, test = _.expr;
        let isMod = true;
        pulse.visit(pulse.REM, (t)=>{
            const id = (0, _vegaDataflow.tupleid)(t);
            if (!cache.has(id)) rem.push(t);
            else cache.delete(id);
        });
        pulse.visit(pulse.ADD, (t)=>{
            if (test(t, _)) add.push(t);
            else cache.set((0, _vegaDataflow.tupleid)(t), 1);
        });
        function revisit(t) {
            const id = (0, _vegaDataflow.tupleid)(t), b = test(t, _), s = cache.get(id);
            if (b && s) {
                cache.delete(id);
                add.push(t);
            } else if (!b && !s) {
                cache.set(id, 1);
                rem.push(t);
            } else if (isMod && b && !s) mod.push(t);
        }
        pulse.visit(pulse.MOD, revisit);
        if (_.modified()) {
            isMod = false;
            pulse.visit(pulse.REFLOW, revisit);
        }
        if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
        return output;
    }
});
/**
 * Flattens array-typed field values into new data objects.
 * If multiple fields are specified, they are treated as parallel arrays,
 * with output values included for each matching index (or null if missing).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of field
 *   accessors for the tuple fields that should be flattened.
 * @param {string} [params.index] - Optional output field name for index
 *   value. If unspecified, no index field is included in the output.
 * @param {Array<string>} [params.as] - Output field names for flattened
 *   array fields. Any unspecified fields will use the field name provided
 *   by the fields accessors.
 */ function Flatten(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
Flatten.Definition = {
    "type": "Flatten",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "index",
            "type": "string"
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        }
    ]
};
(0, _vegaUtil.inherits)(Flatten, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, as = fieldNames(fields, _.as || []), index = _.index || null, m = as.length; // remove any previous results
        out.rem = this.value; // generate flattened tuples
        pulse.visit(pulse.SOURCE, (t)=>{
            const arrays = fields.map((f)=>f(t)), maxlen = arrays.reduce((l, a)=>Math.max(l, a.length), 0);
            let i = 0, j, d, v;
            for(; i < maxlen; ++i){
                d = (0, _vegaDataflow.derive)(t);
                for(j = 0; j < m; ++j)d[as[j]] = (v = arrays[j][i]) == null ? null : v;
                if (index) d[index] = i;
                out.add.push(d);
            }
        });
        this.value = out.source = out.add;
        if (index) out.modifies(index);
        return out.modifies(as);
    }
});
/**
 * Folds one more tuple fields into multiple tuples in which the field
 * name and values are available under new 'key' and 'value' fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.fields - An array of field accessors
 *   for the tuple fields that should be folded.
 * @param {Array<string>} [params.as] - Output field names for folded key
 *   and value fields, defaults to ['key', 'value'].
 */ function Fold(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
Fold.Definition = {
    "type": "Fold",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "key",
                "value"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(Fold, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, fnames = fields.map((0, _vegaUtil.accessorName)), as = _.as || [
            "key",
            "value"
        ], k = as[0], v = as[1], n = fields.length;
        out.rem = this.value;
        pulse.visit(pulse.SOURCE, (t)=>{
            for(let i = 0, d; i < n; ++i){
                d = (0, _vegaDataflow.derive)(t);
                d[k] = fnames[i];
                d[v] = fields[i](t);
                out.add.push(d);
            }
        });
        this.value = out.source = out.add;
        return out.modifies(as);
    }
});
/**
 * Invokes a function for each data tuple and saves the results as a new field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
 * @param {string} params.as - The field name under which to save the result.
 * @param {boolean} [params.initonly=false] - If true, the formula is applied to
 *   added tuples only, and does not update in response to modifications.
 */ function Formula(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Formula.Definition = {
    "type": "Formula",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "expr",
            "type": "expr",
            "required": true
        },
        {
            "name": "as",
            "type": "string",
            "required": true
        },
        {
            "name": "initonly",
            "type": "boolean"
        }
    ]
};
(0, _vegaUtil.inherits)(Formula, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const func = _.expr, as = _.as, mod = _.modified(), flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;
        if (mod) // parameters updated, need to reflow
        pulse = pulse.materialize().reflow(true);
        if (!_.initonly) pulse.modifies(as);
        return pulse.visit(flag, (t)=>t[as] = func(t, _));
    }
});
/**
 * Generates data tuples using a provided generator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Parameters): object} params.generator - A tuple generator
 *   function. This function is given the operator parameters as input.
 *   Changes to any additional parameters will not trigger re-calculation
 *   of previously generated tuples. Only future tuples are affected.
 * @param {number} params.size - The number of tuples to produce.
 */ function Generate(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
(0, _vegaUtil.inherits)(Generate, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.ALL), gen = _.generator;
        let data = this.value, num = _.size - data.length, add, rem, t;
        if (num > 0) {
            // need more tuples, generate and add
            for(add = []; --num >= 0;){
                add.push(t = (0, _vegaDataflow.ingest)(gen(_)));
                data.push(t);
            }
            out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;
        } else {
            // need fewer tuples, remove
            rem = data.slice(0, -num);
            out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;
            data = data.slice(-num);
        }
        out.source = this.value = data;
        return out;
    }
});
const Methods = {
    value: "value",
    median: (0, _d3Array.median),
    mean: (0, _d3Array.mean),
    min: (0, _d3Array.min),
    max: (0, _d3Array.max)
};
const Empty = [];
/**
 * Impute missing values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to impute.
 * @param {Array<function(object): *>} [params.groupby] - An array of
 *   accessors to determine series within which to perform imputation.
 * @param {function(object): *} params.key - An accessor for a key value.
 *   Each key value should be unique within a group. New tuples will be
 *   imputed for any key values that are not found within a group.
 * @param {Array<*>} [params.keyvals] - Optional array of required key
 *   values. New tuples will be imputed for any key values that are not
 *   found within a group. In addition, these values will be automatically
 *   augmented with the key values observed in the input data.
 * @param {string} [method='value'] - The imputation method to use. One of
 *   'value', 'mean', 'median', 'max', 'min'.
 * @param {*} [value=0] - The constant value to use for imputation
 *   when using method 'value'.
 */ function Impute(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
Impute.Definition = {
    "type": "Impute",
    "metadata": {
        "changes": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "key",
            "type": "field",
            "required": true
        },
        {
            "name": "keyvals",
            "array": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "method",
            "type": "enum",
            "default": "value",
            "values": [
                "value",
                "mean",
                "median",
                "max",
                "min"
            ]
        },
        {
            "name": "value",
            "default": 0
        }
    ]
};
function getValue(_) {
    var m = _.method || Methods.value, v;
    if (Methods[m] == null) (0, _vegaUtil.error)("Unrecognized imputation method: " + m);
    else if (m === Methods.value) {
        v = _.value !== undefined ? _.value : 0;
        return ()=>v;
    } else return Methods[m];
}
function getField(_) {
    const f = _.field;
    return (t)=>t ? f(t) : NaN;
}
(0, _vegaUtil.inherits)(Impute, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ALL), impute = getValue(_), field = getField(_), fName = (0, _vegaUtil.accessorName)(_.field), kName = (0, _vegaUtil.accessorName)(_.key), gNames = (_.groupby || []).map((0, _vegaUtil.accessorName)), groups = partition(pulse.source, _.groupby, _.key, _.keyvals), curr = [], prev = this.value, m = groups.domain.length, group, value, gVals, kVal, g, i, j, l, n, t;
        for(g = 0, l = groups.length; g < l; ++g){
            group = groups[g];
            gVals = group.values;
            value = NaN; // add tuples for missing values
            for(j = 0; j < m; ++j){
                if (group[j] != null) continue;
                kVal = groups.domain[j];
                t = {
                    _impute: true
                };
                for(i = 0, n = gVals.length; i < n; ++i)t[gNames[i]] = gVals[i];
                t[kName] = kVal;
                t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;
                curr.push((0, _vegaDataflow.ingest)(t));
            }
        } // update pulse with imputed tuples
        if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
        if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
        this.value = curr;
        return out;
    }
});
function partition(data, groupby, key, keyvals) {
    var get = (f)=>f(t), groups = [], domain = keyvals ? keyvals.slice() : [], kMap = {}, gMap = {}, gVals, gKey, group, i, j, k, n, t;
    domain.forEach((k, i)=>kMap[k] = i + 1);
    for(i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = key(t);
        j = kMap[k] || (kMap[k] = domain.push(k));
        gKey = (gVals = groupby ? groupby.map(get) : Empty) + "";
        if (!(group = gMap[gKey])) {
            group = gMap[gKey] = [];
            groups.push(group);
            group.values = gVals;
        }
        group[j - 1] = t;
    }
    groups.domain = domain;
    return groups;
}
/**
 * Extend input tuples with aggregate values.
 * Calcuates aggregate values and joins them with the input stream.
 * @constructor
 */ function JoinAggregate(params) {
    Aggregate.call(this, params);
}
JoinAggregate.Definition = {
    "type": "JoinAggregate",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "fields",
            "type": "field",
            "null": true,
            "array": true
        },
        {
            "name": "ops",
            "type": "enum",
            "array": true,
            "values": ValidAggregateOps
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        },
        {
            "name": "key",
            "type": "field"
        }
    ]
};
(0, _vegaUtil.inherits)(JoinAggregate, Aggregate, {
    transform (_, pulse) {
        const aggr = this, mod = _.modified();
        let cells; // process all input tuples to calculate aggregates
        if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
            cells = aggr.value = mod ? aggr.init(_) : {};
            pulse.visit(pulse.SOURCE, (t)=>aggr.add(t));
        } else {
            cells = aggr.value = aggr.value || this.init(_);
            pulse.visit(pulse.REM, (t)=>aggr.rem(t));
            pulse.visit(pulse.ADD, (t)=>aggr.add(t));
        } // update aggregation cells
        aggr.changes(); // write aggregate values to input tuples
        pulse.visit(pulse.SOURCE, (t)=>{
            (0, _vegaUtil.extend)(t, cells[aggr.cellkey(t)].tuple);
        });
        return pulse.reflow(mod).modifies(this._outputs);
    },
    changes () {
        const adds = this._adds, mods = this._mods;
        let i, n;
        for(i = 0, n = this._alen; i < n; ++i){
            this.celltuple(adds[i]);
            adds[i] = null; // for garbage collection
        }
        for(i = 0, n = this._mlen; i < n; ++i){
            this.celltuple(mods[i]);
            mods[i] = null; // for garbage collection
        }
        this._alen = this._mlen = 0; // reset list of active cells
    }
});
/**
 * Compute kernel density estimates (KDE) for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {function(object): *} params.field - An accessor for the data field
 *   to estimate.
 * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.
 *   If zero or unspecified, the bandwidth is automatically determined.
 * @param {boolean} [params.counts=false] - A boolean flag indicating if the
 *   output values should be probability estimates (false, default) or
 *   smoothed counts (true).
 * @param {string} [params.cumulative=false] - A boolean flag indicating if a
 *   density (false) or cumulative distribution (true) should be generated.
 * @param {Array<number>} [params.extent] - The domain extent over which to
 *   plot the density. If unspecified, the [min, max] data extent is used.
 * @param {string} [params.resolve='independent'] - Indicates how parameters for
 *   multiple densities should be resolved. If "independent" (the default), each
 *   density may have its own domain extent and dynamic number of curve sample
 *   steps. If "shared", the KDE transform will ensure that all densities are
 *   defined over a shared domain and curve steps, enabling stacking.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */ function KDE(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
KDE.Definition = {
    "type": "KDE",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "cumulative",
            "type": "boolean",
            "default": false
        },
        {
            "name": "counts",
            "type": "boolean",
            "default": false
        },
        {
            "name": "bandwidth",
            "type": "number",
            "default": 0
        },
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "resolve",
            "type": "enum",
            "values": [
                "shared",
                "independent"
            ],
            "default": "independent"
        },
        {
            "name": "steps",
            "type": "number"
        },
        {
            "name": "minsteps",
            "type": "number",
            "default": 25
        },
        {
            "name": "maxsteps",
            "type": "number",
            "default": 200
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "default": [
                "value",
                "density"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(KDE, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(source, _.groupby, _.field), names = (_.groupby || []).map((0, _vegaUtil.accessorName)), bandwidth = _.bandwidth, method = _.cumulative ? "cdf" : "pdf", as = _.as || [
                "value",
                "density"
            ], values = [];
            let domain = _.extent, minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
            if (method !== "pdf" && method !== "cdf") (0, _vegaUtil.error)("Invalid density method: " + method);
            if (_.resolve === "shared") {
                if (!domain) domain = (0, _vegaUtil.extent)(source, _.field);
                minsteps = maxsteps = _.steps || maxsteps;
            }
            groups.forEach((g)=>{
                const density = (0, _vegaStatistics.randomKDE)(g, bandwidth)[method], scale = _.counts ? g.length : 1, local = domain || (0, _vegaUtil.extent)(g);
                (0, _vegaStatistics.sampleCurve)(density, local, minsteps, maxsteps).forEach((v)=>{
                    const t = {};
                    for(let i = 0; i < names.length; ++i)t[names[i]] = g.dims[i];
                    t[as[0]] = v[0];
                    t[as[1]] = v[1] * scale;
                    values.push((0, _vegaDataflow.ingest)(t));
                });
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});
/**
 * Generates a key function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string>} params.fields - The field name(s) for the key function.
 * @param {boolean} params.flat - A boolean flag indicating if the field names
 *  should be treated as flat property names, side-stepping nested field
 *  lookups normally indicated by dot or bracket notation.
 */ function Key(params) {
    (0, _vegaDataflow.Operator).call(this, null, update$2, params);
}
(0, _vegaUtil.inherits)(Key, (0, _vegaDataflow.Operator));
function update$2(_) {
    return this.value && !_.modified() ? this.value : (0, _vegaUtil.key)(_.fields, _.flat);
}
/**
 * Load and parse data from an external source. Marshalls parameter
 * values and then invokes the Dataflow request method.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.url - The URL to load from.
 * @param {object} params.format - The data format options.
 */ function Load(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
    this._pending = null;
}
(0, _vegaUtil.inherits)(Load, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const df = pulse.dataflow;
        if (this._pending) // update state and return pulse
        return output(this, pulse, this._pending);
        if (stop(_)) return pulse.StopPropagation;
        if (_.values) // parse and ingest values, return output pulse
        return output(this, pulse, df.parse(_.values, _.format));
        else if (_.async) {
            // return promise for non-blocking async loading
            const p = df.request(_.url, _.format).then((res)=>{
                this._pending = (0, _vegaUtil.array)(res.data);
                return (df)=>df.touch(this);
            });
            return {
                async: p
            };
        } else // return promise for synchronous loading
        return df.request(_.url, _.format).then((res)=>output(this, pulse, (0, _vegaUtil.array)(res.data)));
    }
});
function stop(_) {
    return _.modified("async") && !(_.modified("values") || _.modified("url") || _.modified("format"));
}
function output(op, pulse, data) {
    data.forEach((0, _vegaDataflow.ingest));
    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
    out.rem = op.value;
    op.value = out.source = out.add = data;
    op._pending = null;
    if (out.rem.length) out.clean(true);
    return out;
}
/**
 * Extend tuples by joining them with values from a lookup table.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Map} params.index - The lookup table map.
 * @param {Array<function(object): *} params.fields - The fields to lookup.
 * @param {Array<string>} params.as - Output field names for each lookup value.
 * @param {*} [params.default] - A default value to use if lookup fails.
 */ function Lookup(params) {
    (0, _vegaDataflow.Transform).call(this, {}, params);
}
Lookup.Definition = {
    "type": "Lookup",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "index",
            "type": "index",
            "params": [
                {
                    "name": "from",
                    "type": "data",
                    "required": true
                },
                {
                    "name": "key",
                    "type": "field",
                    "required": true
                }
            ]
        },
        {
            "name": "values",
            "type": "field",
            "array": true
        },
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        },
        {
            "name": "default",
            "default": null
        }
    ]
};
(0, _vegaUtil.inherits)(Lookup, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const keys = _.fields, index = _.index, values = _.values, defaultValue = _.default == null ? null : _.default, reset = _.modified(), n = keys.length;
        let flag = reset ? pulse.SOURCE : pulse.ADD, out = pulse, as = _.as, set, m, mods;
        if (values) {
            m = values.length;
            if (n > 1 && !as) (0, _vegaUtil.error)('Multi-field lookup requires explicit "as" parameter.');
            if (as && as.length !== n * m) (0, _vegaUtil.error)('The "as" parameter has too few output field names.');
            as = as || values.map((0, _vegaUtil.accessorName));
            set = function(t) {
                for(var i = 0, k = 0, j, v; i < n; ++i){
                    v = index.get(keys[i](t));
                    if (v == null) for(j = 0; j < m; ++j, ++k)t[as[k]] = defaultValue;
                    else for(j = 0; j < m; ++j, ++k)t[as[k]] = values[j](v);
                }
            };
        } else {
            if (!as) (0, _vegaUtil.error)("Missing output field names.");
            set = function(t) {
                for(var i = 0, v; i < n; ++i){
                    v = index.get(keys[i](t));
                    t[as[i]] = v == null ? defaultValue : v;
                }
            };
        }
        if (reset) out = pulse.reflow(true);
        else {
            mods = keys.some((k)=>pulse.modified(k.fields));
            flag |= mods ? pulse.MOD : 0;
        }
        pulse.visit(flag, set);
        return out.modifies(as);
    }
});
/**
 * Computes global min/max extents over a collection of extents.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<number>>} params.extents - The input extents.
 */ function MultiExtent(params) {
    (0, _vegaDataflow.Operator).call(this, null, update$1, params);
}
(0, _vegaUtil.inherits)(MultiExtent, (0, _vegaDataflow.Operator));
function update$1(_) {
    if (this.value && !_.modified()) return this.value;
    const ext = _.extents, n = ext.length;
    let min = Infinity, max = -Infinity, i, e;
    for(i = 0; i < n; ++i){
        e = ext[i];
        if (e[0] < min) min = e[0];
        if (e[1] > max) max = e[1];
    }
    return [
        min,
        max
    ];
}
/**
 * Merge a collection of value arrays.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<*>>} params.values - The input value arrrays.
 */ function MultiValues(params) {
    (0, _vegaDataflow.Operator).call(this, null, update, params);
}
(0, _vegaUtil.inherits)(MultiValues, (0, _vegaDataflow.Operator));
function update(_) {
    return this.value && !_.modified() ? this.value : _.values.reduce((data, _)=>data.concat(_), []);
}
/**
 * Operator whose value is simply its parameter hash. This operator is
 * useful for enabling reactive updates to values of nested objects.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function Params(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Params, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        this.modified(_.modified());
        this.value = _;
        return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
    }
});
/**
 * Aggregate and pivot selected field values to become new fields.
 * This operator is useful to construction cross-tabulations.
 * @constructor
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *  to groupby. These fields act just like groupby fields of an Aggregate transform.
 * @param {function(object): *} params.field - The field to pivot on. The unique
 *  values of this field become new field names in the output stream.
 * @param {function(object): *} params.value - The field to populate pivoted fields.
 *  The aggregate values of this field become the values of the new pivoted fields.
 * @param {string} [params.op] - The aggregation operation for the value field,
 *  applied per cell in the output stream. The default is "sum".
 * @param {number} [params.limit] - An optional parameter indicating the maximum
 *  number of pivoted fields to generate. The pivoted field names are sorted in
 *  ascending order prior to enforcing the limit.
 */ function Pivot(params) {
    Aggregate.call(this, params);
}
Pivot.Definition = {
    "type": "Pivot",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "value",
            "type": "field",
            "required": true
        },
        {
            "name": "op",
            "type": "enum",
            "values": ValidAggregateOps,
            "default": "sum"
        },
        {
            "name": "limit",
            "type": "number",
            "default": 0
        },
        {
            "name": "key",
            "type": "field"
        }
    ]
};
(0, _vegaUtil.inherits)(Pivot, Aggregate, {
    _transform: Aggregate.prototype.transform,
    transform (_, pulse) {
        return this._transform(aggregateParams(_, pulse), pulse);
    }
}); // Shoehorn a pivot transform into an aggregate transform!
// First collect all unique pivot field values.
// Then generate aggregate fields for each output pivot field.
function aggregateParams(_, pulse) {
    const key = _.field, value = _.value, op = (_.op === "count" ? "__count__" : _.op) || "sum", fields = (0, _vegaUtil.accessorFields)(key).concat((0, _vegaUtil.accessorFields)(value)), keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change
    // flag parameter modification to ensure re-initialization
    if (pulse.changed()) _.set("__pivot__", null, null, true);
    return {
        key: _.key,
        groupby: _.groupby,
        ops: keys.map(()=>op),
        fields: keys.map((k)=>get(k, key, value, fields)),
        as: keys.map((k)=>k + ""),
        modified: _.modified.bind(_)
    };
} // Generate aggregate field accessor.
// Output NaN for non-existent values; aggregator will ignore!
function get(k, key, value, fields) {
    return (0, _vegaUtil.accessor)((d)=>key(d) === k ? value(d) : NaN, fields, k + "");
} // Collect (and optionally limit) all unique pivot values.
function pivotKeys(key, limit, pulse) {
    const map = {}, list = [];
    pulse.visit(pulse.SOURCE, (t)=>{
        const k = key(t);
        if (!map[k]) {
            map[k] = 1;
            list.push(k);
        }
    });
    list.sort((0, _vegaUtil.ascending));
    return limit ? list.slice(0, limit) : list;
}
/**
 * Partitions pre-faceted data into tuple subflows.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): Array<object>} params.field - The field
 *   accessor for an array of subflow tuple objects.
 */ function PreFacet(params) {
    Facet.call(this, params);
}
(0, _vegaUtil.inherits)(PreFacet, Facet, {
    transform (_, pulse) {
        const flow = _.subflow, field = _.field, subflow = (t)=>this.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);
        if (_.modified("field") || field && pulse.modified((0, _vegaUtil.accessorFields)(field))) (0, _vegaUtil.error)("PreFacet does not support field modification.");
        this.initTargets(); // reset list of active subflows
        if (field) {
            pulse.visit(pulse.MOD, (t)=>{
                const sf = subflow(t);
                field(t).forEach((_)=>sf.mod(_));
            });
            pulse.visit(pulse.ADD, (t)=>{
                const sf = subflow(t);
                field(t).forEach((_)=>sf.add((0, _vegaDataflow.ingest)(_)));
            });
            pulse.visit(pulse.REM, (t)=>{
                const sf = subflow(t);
                field(t).forEach((_)=>sf.rem(_));
            });
        } else {
            pulse.visit(pulse.MOD, (t)=>subflow(t).mod(t));
            pulse.visit(pulse.ADD, (t)=>subflow(t).add(t));
            pulse.visit(pulse.REM, (t)=>subflow(t).rem(t));
        }
        if (pulse.clean()) pulse.runAfter(()=>this.clean());
        return pulse;
    }
});
/**
 * Performs a relational projection, copying selected fields from source
 * tuples to a new set of derived tuples.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *} params.fields - The fields to project,
 *   as an array of field accessors. If unspecified, all fields will be
 *   copied with names unchanged.
 * @param {Array<string>} [params.as] - Output field names for each projected
 *   field. Any unspecified fields will use the field name provided by
 *   the field accessor.
 */ function Project(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Project.Definition = {
    "type": "Project",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        }
    ]
};
(0, _vegaUtil.inherits)(Project, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, as = fieldNames(_.fields, _.as || []), derive = fields ? (s, t)=>project(s, t, fields, as) : (0, _vegaDataflow.rederive);
        let lut;
        if (this.value) lut = this.value;
        else {
            pulse = pulse.addAll();
            lut = this.value = {};
        }
        pulse.visit(pulse.REM, (t)=>{
            const id = (0, _vegaDataflow.tupleid)(t);
            out.rem.push(lut[id]);
            lut[id] = null;
        });
        pulse.visit(pulse.ADD, (t)=>{
            const dt = derive(t, (0, _vegaDataflow.ingest)({}));
            lut[(0, _vegaDataflow.tupleid)(t)] = dt;
            out.add.push(dt);
        });
        pulse.visit(pulse.MOD, (t)=>{
            out.mod.push(derive(t, lut[(0, _vegaDataflow.tupleid)(t)]));
        });
        return out;
    }
});
function project(s, t, fields, as) {
    for(let i = 0, n = fields.length; i < n; ++i)t[as[i]] = fields[i](s);
    return t;
}
/**
 * Proxy the value of another operator as a pure signal value.
 * Ensures no tuples are propagated.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {*} params.value - The value to proxy, becomes the value of this operator.
 */ function Proxy(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Proxy, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        this.value = _.value;
        return _.modified("value") ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
    }
});
/**
 * Generates sample quantile values from an input data stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the data field
 *   over which to calculate quantile values.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {Array<number>} [params.probs] - An array of probabilities in
 *   the range (0, 1) for which to compute quantile values. If not specified,
 *   the *step* parameter will be used.
 * @param {Array<number>} [params.step=0.01] - A probability step size for
 *   sampling quantile values. All values from one-half the step size up to
 *   1 (exclusive) will be sampled. This parameter is only used if the
 *   *quantiles* parameter is not provided.
 */ function Quantile(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Quantile.Definition = {
    "type": "Quantile",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "probs",
            "type": "number",
            "array": true
        },
        {
            "name": "step",
            "type": "number",
            "default": 0.01
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "default": [
                "prob",
                "value"
            ]
        }
    ]
};
const EPSILON = 1e-14;
(0, _vegaUtil.inherits)(Quantile, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), as = _.as || [
            "prob",
            "value"
        ];
        if (this.value && !_.modified() && !pulse.changed()) {
            out.source = this.value;
            return out;
        }
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(source, _.groupby, _.field), names = (_.groupby || []).map((0, _vegaUtil.accessorName)), values = [], step = _.step || 0.01, p = _.probs || (0, _d3Array.range)(step / 2, 1 - EPSILON, step), n = p.length;
        groups.forEach((g)=>{
            const q = (0, _vegaStatistics.quantiles)(g, p);
            for(let i = 0; i < n; ++i){
                const t = {};
                for(let i1 = 0; i1 < names.length; ++i1)t[names[i1]] = g.dims[i1];
                t[as[0]] = p[i];
                t[as[1]] = q[i];
                values.push((0, _vegaDataflow.ingest)(t));
            }
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
        return out;
    }
});
/**
 * Relays a data stream between data processing pipelines.
 * If the derive parameter is set, this transform will create derived
 * copies of observed tuples. This provides derived data streams in which
 * modifications to the tuples do not pollute an upstream data source.
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.derive=false] - Boolean flag indicating if
 *   the transform should make derived copies of incoming tuples.
 * @constructor
 */ function Relay(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Relay, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        let out, lut;
        if (this.value) lut = this.value;
        else {
            out = pulse = pulse.addAll();
            lut = this.value = {};
        }
        if (_.derive) {
            out = pulse.fork(pulse.NO_SOURCE);
            pulse.visit(pulse.REM, (t)=>{
                const id = (0, _vegaDataflow.tupleid)(t);
                out.rem.push(lut[id]);
                lut[id] = null;
            });
            pulse.visit(pulse.ADD, (t)=>{
                const dt = (0, _vegaDataflow.derive)(t);
                lut[(0, _vegaDataflow.tupleid)(t)] = dt;
                out.add.push(dt);
            });
            pulse.visit(pulse.MOD, (t)=>{
                const dt = lut[(0, _vegaDataflow.tupleid)(t)];
                for(const k in t){
                    dt[k] = t[k]; // down stream writes may overwrite re-derived tuples
                    // conservatively mark all source fields as modified
                    out.modifies(k);
                }
                out.mod.push(dt);
            });
        }
        return out;
    }
});
/**
 * Samples tuples passing through this operator.
 * Uses reservoir sampling to maintain a representative sample.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.size=1000] - The maximum number of samples.
 */ function Sample(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
    this.count = 0;
}
Sample.Definition = {
    "type": "Sample",
    "metadata": {},
    "params": [
        {
            "name": "size",
            "type": "number",
            "default": 1000
        }
    ]
};
(0, _vegaUtil.inherits)(Sample, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), mod = _.modified("size"), num = _.size, map = this.value.reduce((m, t)=>(m[(0, _vegaDataflow.tupleid)(t)] = 1, m), {});
        let res = this.value, cnt = this.count, cap = 0; // sample reservoir update function
        function update(t) {
            let p, idx;
            if (res.length < num) res.push(t);
            else {
                idx = ~~((cnt + 1) * (0, _vegaStatistics.random)());
                if (idx < res.length && idx >= cap) {
                    p = res[idx];
                    if (map[(0, _vegaDataflow.tupleid)(p)]) out.rem.push(p); // eviction
                    res[idx] = t;
                }
            }
            ++cnt;
        }
        if (pulse.rem.length) {
            // find all tuples that should be removed, add to output
            pulse.visit(pulse.REM, (t)=>{
                const id = (0, _vegaDataflow.tupleid)(t);
                if (map[id]) {
                    map[id] = -1;
                    out.rem.push(t);
                }
                --cnt;
            }); // filter removed tuples out of the sample reservoir
            res = res.filter((t)=>map[(0, _vegaDataflow.tupleid)(t)] !== -1);
        }
        if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
            // replenish sample if backing data source is available
            cap = cnt = res.length;
            pulse.visit(pulse.SOURCE, (t)=>{
                // update, but skip previously sampled tuples
                if (!map[(0, _vegaDataflow.tupleid)(t)]) update(t);
            });
            cap = -1;
        }
        if (mod && res.length > num) {
            const n = res.length - num;
            for(let i = 0; i < n; ++i){
                map[(0, _vegaDataflow.tupleid)(res[i])] = -1;
                out.rem.push(res[i]);
            }
            res = res.slice(n);
        }
        if (pulse.mod.length) // propagate modified tuples in the sample reservoir
        pulse.visit(pulse.MOD, (t)=>{
            if (map[(0, _vegaDataflow.tupleid)(t)]) out.mod.push(t);
        });
        if (pulse.add.length) // update sample reservoir
        pulse.visit(pulse.ADD, update);
        if (pulse.add.length || cap < 0) // output newly added tuples
        out.add = res.filter((t)=>!map[(0, _vegaDataflow.tupleid)(t)]);
        this.count = cnt;
        this.value = out.source = res;
        return out;
    }
});
/**
 * Generates data tuples for a specified sequence range of numbers.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} params.start - The first number in the sequence.
 * @param {number} params.stop - The last number (exclusive) in the sequence.
 * @param {number} [params.step=1] - The step size between numbers in the sequence.
 */ function Sequence(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Sequence.Definition = {
    "type": "Sequence",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "start",
            "type": "number",
            "required": true
        },
        {
            "name": "stop",
            "type": "number",
            "required": true
        },
        {
            "name": "step",
            "type": "number",
            "default": 1
        },
        {
            "name": "as",
            "type": "string",
            "default": "data"
        }
    ]
};
(0, _vegaUtil.inherits)(Sequence, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value && !_.modified()) return;
        const out = pulse.materialize().fork(pulse.MOD), as = _.as || "data";
        out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
        this.value = (0, _d3Array.range)(_.start, _.stop, _.step || 1).map((v)=>{
            const t = {};
            t[as] = v;
            return (0, _vegaDataflow.ingest)(t);
        });
        out.add = pulse.add.concat(this.value);
        return out;
    }
});
/**
 * Propagates a new pulse without any tuples so long as the input
 * pulse contains some added, removed or modified tuples.
 * @param {object} params - The parameters for this operator.
 * @constructor
 */ function Sieve(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
    this.modified(true); // always treat as modified
}
(0, _vegaUtil.inherits)(Sieve, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        this.value = pulse.source;
        return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
    }
});
/**
 * Discretize dates to specific time units.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The data field containing date/time values.
 */ function TimeUnit(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
const OUTPUT = [
    "unit0",
    "unit1"
];
TimeUnit.Definition = {
    "type": "TimeUnit",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "interval",
            "type": "boolean",
            "default": true
        },
        {
            "name": "units",
            "type": "enum",
            "values": (0, _vegaTime.TIME_UNITS),
            "array": true
        },
        {
            "name": "step",
            "type": "number",
            "default": 1
        },
        {
            "name": "maxbins",
            "type": "number",
            "default": 40
        },
        {
            "name": "extent",
            "type": "date",
            "array": true
        },
        {
            "name": "timezone",
            "type": "enum",
            "default": "local",
            "values": [
                "local",
                "utc"
            ]
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": OUTPUT
        }
    ]
};
(0, _vegaUtil.inherits)(TimeUnit, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const field = _.field, band = _.interval !== false, utc = _.timezone === "utc", floor = this._floor(_, pulse), offset = (utc ? (0, _vegaTime.utcInterval) : (0, _vegaTime.timeInterval))(floor.unit).offset, as = _.as || OUTPUT, u0 = as[0], u1 = as[1], step = floor.step;
        let min = floor.start || Infinity, max = floor.stop || -Infinity, flag = pulse.ADD;
        if (_.modified() || pulse.modified((0, _vegaUtil.accessorFields)(field))) {
            pulse = pulse.reflow(true);
            flag = pulse.SOURCE;
            min = Infinity;
            max = -Infinity;
        }
        pulse.visit(flag, (t)=>{
            const v = field(t);
            let a, b;
            if (v == null) {
                t[u0] = null;
                if (band) t[u1] = null;
            } else {
                t[u0] = a = b = floor(v);
                if (band) t[u1] = b = offset(a, step);
                if (a < min) min = a;
                if (b > max) max = b;
            }
        });
        floor.start = min;
        floor.stop = max;
        return pulse.modifies(band ? as : u0);
    },
    _floor (_, pulse) {
        const utc = _.timezone === "utc"; // get parameters
        const { units , step  } = _.units ? {
            units: _.units,
            step: _.step || 1
        } : (0, _vegaTime.timeBin)({
            extent: _.extent || (0, _vegaUtil.extent)(pulse.materialize(pulse.SOURCE).source, _.field),
            maxbins: _.maxbins
        }); // check / standardize time units
        const tunits = (0, _vegaTime.timeUnits)(units), prev = this.value || {}, floor = (utc ? (0, _vegaTime.utcFloor) : (0, _vegaTime.timeFloor))(tunits, step);
        floor.unit = (0, _vegaUtil.peek)(tunits);
        floor.units = tunits;
        floor.step = step;
        floor.start = prev.start;
        floor.stop = prev.stop;
        return this.value = floor;
    }
});
/**
 * An index that maps from unique, string-coerced, field values to tuples.
 * Assumes that the field serves as a unique key with no duplicate values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field accessor to index.
 */ function TupleIndex(params) {
    (0, _vegaDataflow.Transform).call(this, (0, _vegaUtil.fastmap)(), params);
}
(0, _vegaUtil.inherits)(TupleIndex, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const df = pulse.dataflow, field = _.field, index = this.value, set = (t)=>index.set(field(t), t);
        let mod = true;
        if (_.modified("field") || pulse.modified(field.fields)) {
            index.clear();
            pulse.visit(pulse.SOURCE, set);
        } else if (pulse.changed()) {
            pulse.visit(pulse.REM, (t)=>index.delete(field(t)));
            pulse.visit(pulse.ADD, set);
        } else mod = false;
        this.modified(mod);
        if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
        return pulse.fork();
    }
});
/**
 * Extracts an array of values. Assumes the source data has already been
 * reduced as needed (e.g., by an upstream Aggregate transform).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The domain field to extract.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting the values. The comparator will be
 *   applied to backing tuples prior to value extraction.
 */ function Values(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Values, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const run = !this.value || _.modified("field") || _.modified("sort") || pulse.changed() || _.sort && pulse.modified(_.sort.fields);
        if (run) this.value = (_.sort ? pulse.source.slice().sort((0, _vegaDataflow.stableCompare)(_.sort)) : pulse.source).map(_.field);
    }
});
function WindowOp(op, field, param, as) {
    const fn = WindowOps[op](field, param);
    return {
        init: fn.init || (0, _vegaUtil.zero),
        update: function(w, t) {
            t[as] = fn.next(w);
        }
    };
}
const WindowOps = {
    row_number: function() {
        return {
            next: (w)=>w.index + 1
        };
    },
    rank: function() {
        let rank;
        return {
            init: ()=>rank = 1,
            next: (w)=>{
                const i = w.index, data = w.data;
                return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;
            }
        };
    },
    dense_rank: function() {
        let drank;
        return {
            init: ()=>drank = 1,
            next: (w)=>{
                const i = w.index, d = w.data;
                return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;
            }
        };
    },
    percent_rank: function() {
        const rank = WindowOps.rank(), next = rank.next;
        return {
            init: rank.init,
            next: (w)=>(next(w) - 1) / (w.data.length - 1)
        };
    },
    cume_dist: function() {
        let cume;
        return {
            init: ()=>cume = 0,
            next: (w)=>{
                const d = w.data, c = w.compare;
                let i = w.index;
                if (cume < i) {
                    while(i + 1 < d.length && !c(d[i], d[i + 1]))++i;
                    cume = i;
                }
                return (1 + cume) / d.length;
            }
        };
    },
    ntile: function(field, num) {
        num = +num;
        if (!(num > 0)) (0, _vegaUtil.error)("ntile num must be greater than zero.");
        const cume = WindowOps.cume_dist(), next = cume.next;
        return {
            init: cume.init,
            next: (w)=>Math.ceil(num * next(w))
        };
    },
    lag: function(field, offset) {
        offset = +offset || 1;
        return {
            next: (w)=>{
                const i = w.index - offset;
                return i >= 0 ? field(w.data[i]) : null;
            }
        };
    },
    lead: function(field, offset) {
        offset = +offset || 1;
        return {
            next: (w)=>{
                const i = w.index + offset, d = w.data;
                return i < d.length ? field(d[i]) : null;
            }
        };
    },
    first_value: function(field) {
        return {
            next: (w)=>field(w.data[w.i0])
        };
    },
    last_value: function(field) {
        return {
            next: (w)=>field(w.data[w.i1 - 1])
        };
    },
    nth_value: function(field, nth) {
        nth = +nth;
        if (!(nth > 0)) (0, _vegaUtil.error)("nth_value nth must be greater than zero.");
        return {
            next: (w)=>{
                const i = w.i0 + (nth - 1);
                return i < w.i1 ? field(w.data[i]) : null;
            }
        };
    },
    prev_value: function(field) {
        let prev;
        return {
            init: ()=>prev = null,
            next: (w)=>{
                const v = field(w.data[w.index]);
                return v != null ? prev = v : prev;
            }
        };
    },
    next_value: function(field) {
        let v, i;
        return {
            init: ()=>(v = null, i = -1),
            next: (w)=>{
                const d = w.data;
                return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);
            }
        };
    }
};
function find(field, data, index) {
    for(let n = data.length; index < n; ++index){
        const v = field(data[index]);
        if (v != null) return index;
    }
    return -1;
}
const ValidWindowOps = Object.keys(WindowOps);
function WindowState(_) {
    const ops = (0, _vegaUtil.array)(_.ops), fields = (0, _vegaUtil.array)(_.fields), params = (0, _vegaUtil.array)(_.params), as = (0, _vegaUtil.array)(_.as), outputs = this.outputs = [], windows = this.windows = [], inputs = {}, map = {}, counts = [], measures = [];
    let countOnly = true;
    function visitInputs(f) {
        (0, _vegaUtil.array)((0, _vegaUtil.accessorFields)(f)).forEach((_)=>inputs[_] = 1);
    }
    visitInputs(_.sort);
    ops.forEach((op, i)=>{
        const field = fields[i], mname = (0, _vegaUtil.accessorName)(field), name = measureName(op, mname, as[i]);
        visitInputs(field);
        outputs.push(name); // Window operation
        if ((0, _vegaUtil.hasOwnProperty)(WindowOps, op)) windows.push(WindowOp(op, fields[i], params[i], name));
        else {
            if (field == null && op !== "count") (0, _vegaUtil.error)("Null aggregate field specified.");
            if (op === "count") {
                counts.push(name);
                return;
            }
            countOnly = false;
            let m = map[mname];
            if (!m) {
                m = map[mname] = [];
                m.field = field;
                measures.push(m);
            }
            m.push(createMeasure(op, name));
        }
    });
    if (counts.length || measures.length) this.cell = cell(measures, counts, countOnly);
    this.inputs = Object.keys(inputs);
}
const prototype = WindowState.prototype;
prototype.init = function() {
    this.windows.forEach((_)=>_.init());
    if (this.cell) this.cell.init();
};
prototype.update = function(w, t) {
    const cell = this.cell, wind = this.windows, data = w.data, m = wind && wind.length;
    let j;
    if (cell) {
        for(j = w.p0; j < w.i0; ++j)cell.rem(data[j]);
        for(j = w.p1; j < w.i1; ++j)cell.add(data[j]);
        cell.set(t);
    }
    for(j = 0; j < m; ++j)wind[j].update(w, t);
};
function cell(measures, counts, countOnly) {
    measures = measures.map((m)=>compileMeasures(m, m.field));
    const cell = {
        num: 0,
        agg: null,
        store: false,
        count: counts
    };
    if (!countOnly) {
        var n = measures.length, a = cell.agg = Array(n), i = 0;
        for(; i < n; ++i)a[i] = new measures[i](cell);
    }
    if (cell.store) var store = cell.data = new TupleStore();
    cell.add = function(t) {
        cell.num += 1;
        if (countOnly) return;
        if (store) store.add(t);
        for(let i = 0; i < n; ++i)a[i].add(a[i].get(t), t);
    };
    cell.rem = function(t) {
        cell.num -= 1;
        if (countOnly) return;
        if (store) store.rem(t);
        for(let i = 0; i < n; ++i)a[i].rem(a[i].get(t), t);
    };
    cell.set = function(t) {
        let i, n; // consolidate stored values
        if (store) store.values(); // update tuple properties
        for(i = 0, n = counts.length; i < n; ++i)t[counts[i]] = cell.num;
        if (!countOnly) for(i = 0, n = a.length; i < n; ++i)a[i].set(t);
    };
    cell.init = function() {
        cell.num = 0;
        if (store) store.reset();
        for(let i = 0; i < n; ++i)a[i].init();
    };
    return cell;
}
/**
 * Perform window calculations and write results to the input stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
 * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors
 *   for data fields to use as inputs to window operations.
 * @param {Array<*>} [params.params] - An array of parameter values for window operations.
 * @param {Array<string>} [params.as] - An array of output field names for window operations.
 * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
 * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
 *   number alone, ignoring peers with identical sort values. If false (default),
 *   the window boundaries will be adjusted to include peer values.
 */ function Window(params) {
    (0, _vegaDataflow.Transform).call(this, {}, params);
    this._mlen = 0;
    this._mods = [];
}
Window.Definition = {
    "type": "Window",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "ops",
            "type": "enum",
            "array": true,
            "values": ValidWindowOps.concat(ValidAggregateOps)
        },
        {
            "name": "params",
            "type": "number",
            "null": true,
            "array": true
        },
        {
            "name": "fields",
            "type": "field",
            "null": true,
            "array": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        },
        {
            "name": "frame",
            "type": "number",
            "null": true,
            "array": true,
            "length": 2,
            "default": [
                null,
                0
            ]
        },
        {
            "name": "ignorePeers",
            "type": "boolean",
            "default": false
        }
    ]
};
(0, _vegaUtil.inherits)(Window, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        this.stamp = pulse.stamp;
        const mod = _.modified(), cmp = (0, _vegaDataflow.stableCompare)(_.sort), key = groupkey(_.groupby), group = (t)=>this.group(key(t)); // initialize window state
        let state = this.state;
        if (!state || mod) state = this.state = new WindowState(_);
         // partition input tuples
        if (mod || pulse.modified(state.inputs)) {
            this.value = {};
            pulse.visit(pulse.SOURCE, (t)=>group(t).add(t));
        } else {
            pulse.visit(pulse.REM, (t)=>group(t).remove(t));
            pulse.visit(pulse.ADD, (t)=>group(t).add(t));
        } // perform window calculations for each modified partition
        for(let i = 0, n = this._mlen; i < n; ++i)processPartition(this._mods[i], state, cmp, _);
        this._mlen = 0;
        this._mods = []; // TODO don't reflow everything?
        return pulse.reflow(mod).modifies(state.outputs);
    },
    group (key) {
        let group = this.value[key];
        if (!group) {
            group = this.value[key] = SortedList((0, _vegaDataflow.tupleid));
            group.stamp = -1;
        }
        if (group.stamp < this.stamp) {
            group.stamp = this.stamp;
            this._mods[this._mlen++] = group;
        }
        return group;
    }
});
function processPartition(list, state, cmp, _) {
    const sort = _.sort, range = sort && !_.ignorePeers, frame = _.frame || [
        null,
        0
    ], data = list.data(cmp), // use cmp for stable sort
    n = data.length, b = range ? (0, _d3Array.bisector)(sort) : null, w = {
        i0: 0,
        i1: 0,
        p0: 0,
        p1: 0,
        index: 0,
        data: data,
        compare: sort || (0, _vegaUtil.constant)(-1)
    };
    state.init();
    for(let i = 0; i < n; ++i){
        setWindow(w, frame, i, n);
        if (range) adjustRange(w, b);
        state.update(w, data[i]);
    }
}
function setWindow(w, f, i, n) {
    w.p0 = w.i0;
    w.p1 = w.i1;
    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
    w.index = i;
} // if frame type is 'range', adjust window for peer values
function adjustRange(w, bisect) {
    const r0 = w.i0, r1 = w.i1 - 1, c = w.compare, d = w.data, n = d.length - 1;
    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);
    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);
}

},{"vega-util":"bApja","vega-dataflow":"3NitK","vega-statistics":"5ncfv","d3-array":"6IwJG","vega-time":"27kpp","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5ncfv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bandwidthNRD", ()=>estimateBandwidth);
parcelHelpers.export(exports, "bin", ()=>bin);
parcelHelpers.export(exports, "bootstrapCI", ()=>bootstrapCI);
parcelHelpers.export(exports, "cumulativeLogNormal", ()=>cumulativeLogNormal);
parcelHelpers.export(exports, "cumulativeNormal", ()=>cumulativeNormal);
parcelHelpers.export(exports, "cumulativeUniform", ()=>cumulativeUniform);
parcelHelpers.export(exports, "densityLogNormal", ()=>densityLogNormal);
parcelHelpers.export(exports, "densityNormal", ()=>densityNormal);
parcelHelpers.export(exports, "densityUniform", ()=>densityUniform);
parcelHelpers.export(exports, "dotbin", ()=>dotbin);
parcelHelpers.export(exports, "quantileLogNormal", ()=>quantileLogNormal);
parcelHelpers.export(exports, "quantileNormal", ()=>quantileNormal);
parcelHelpers.export(exports, "quantileUniform", ()=>quantileUniform);
parcelHelpers.export(exports, "quantiles", ()=>quantiles);
parcelHelpers.export(exports, "quartiles", ()=>quartiles);
parcelHelpers.export(exports, "random", ()=>random);
parcelHelpers.export(exports, "randomInteger", ()=>integer);
parcelHelpers.export(exports, "randomKDE", ()=>kde);
parcelHelpers.export(exports, "randomLCG", ()=>lcg);
parcelHelpers.export(exports, "randomLogNormal", ()=>lognormal);
parcelHelpers.export(exports, "randomMixture", ()=>mixture);
parcelHelpers.export(exports, "randomNormal", ()=>gaussian);
parcelHelpers.export(exports, "randomUniform", ()=>uniform);
parcelHelpers.export(exports, "regressionExp", ()=>exp);
parcelHelpers.export(exports, "regressionLinear", ()=>linear);
parcelHelpers.export(exports, "regressionLoess", ()=>loess);
parcelHelpers.export(exports, "regressionLog", ()=>log);
parcelHelpers.export(exports, "regressionPoly", ()=>poly);
parcelHelpers.export(exports, "regressionPow", ()=>pow);
parcelHelpers.export(exports, "regressionQuad", ()=>quad);
parcelHelpers.export(exports, "sampleCurve", ()=>sampleCurve);
parcelHelpers.export(exports, "sampleLogNormal", ()=>sampleLogNormal);
parcelHelpers.export(exports, "sampleNormal", ()=>sampleNormal);
parcelHelpers.export(exports, "sampleUniform", ()=>sampleUniform);
parcelHelpers.export(exports, "setRandom", ()=>setRandom);
var _d3Array = require("d3-array");
function* numbers(values, valueof) {
    if (valueof == null) {
        for (let value of values)if (value != null && value !== "" && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value1 of values){
            value1 = valueof(value1, ++index, values);
            if (value1 != null && value1 !== "" && (value1 = +value1) >= value1) yield value1;
        }
    }
}
function quantiles(array, p, f) {
    const values = Float64Array.from(numbers(array, f)); // don't depend on return value from typed array sort call
    // protects against undefined sort results in Safari (vega/vega-lite#4964)
    values.sort((0, _d3Array.ascending));
    return p.map((_)=>(0, _d3Array.quantileSorted)(values, _));
}
function quartiles(array, f) {
    return quantiles(array, [
        0.25,
        0.50,
        0.75
    ], f);
}
// Theory, Practice, and Visualization. Wiley.
function estimateBandwidth(array, f) {
    const n = array.length, d = (0, _d3Array.deviation)(array, f), q = quartiles(array, f), h = (q[2] - q[0]) / 1.34, v = Math.min(d, h) || d || Math.abs(q[0]) || 1;
    return 1.06 * v * Math.pow(n, -0.2);
}
function bin(_) {
    // determine range
    const maxb = _.maxbins || 20, base = _.base || 10, logb = Math.log(base), div = _.divide || [
        5,
        2
    ];
    let min = _.extent[0], max = _.extent[1], step, level, minstep, v, i, n;
    const span = _.span || max - min || Math.abs(min) || 1;
    if (_.step) // if step size is explicitly given, use that
    step = _.step;
    else if (_.steps) {
        // if provided, limit choice to acceptable step sizes
        v = span / maxb;
        for(i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);
        step = _.steps[Math.max(0, i - 1)];
    } else {
        // else use span to determine step size
        level = Math.ceil(Math.log(maxb) / logb);
        minstep = _.minstep || 0;
        step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins
        while(Math.ceil(span / step) > maxb)step *= base;
         // decrease step size if allowed
        for(i = 0, n = div.length; i < n; ++i){
            v = step / div[i];
            if (v >= minstep && span / v <= maxb) step = v;
        }
    } // update precision, min and max
    v = Math.log(step);
    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1, eps = Math.pow(base, -precision - 1);
    if (_.nice || _.nice === undefined) {
        v = Math.floor(min / step + eps) * step;
        min = min < v ? v - step : v;
        max = Math.ceil(max / step) * step;
    }
    return {
        start: min,
        stop: max === min ? min + step : max,
        step: step
    };
}
var random = Math.random;
function setRandom(r) {
    random = r;
}
function bootstrapCI(array, samples, alpha, f) {
    if (!array.length) return [
        undefined,
        undefined
    ];
    const values = Float64Array.from(numbers(array, f)), n = values.length, m = samples;
    let a, i, j, mu;
    for(j = 0, mu = Array(m); j < m; ++j){
        for(a = 0, i = 0; i < n; ++i)a += values[~~(random() * n)];
        mu[j] = a / n;
    }
    mu.sort((0, _d3Array.ascending));
    return [
        (0, _d3Array.quantile)(mu, alpha / 2),
        (0, _d3Array.quantile)(mu, 1 - alpha / 2)
    ];
}
// Dot density binning for dot plot construction.
// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
function dotbin(array, step, smooth, f) {
    f = f || ((_)=>_);
    const n = array.length, v = new Float64Array(n);
    let i = 0, j = 1, a = f(array[0]), b = a, w = a + step, x;
    for(; j < n; ++j){
        x = f(array[j]);
        if (x >= w) {
            b = (a + b) / 2;
            for(; i < j; ++i)v[i] = b;
            w = x + step;
            a = x;
        }
        b = x;
    }
    b = (a + b) / 2;
    for(; i < j; ++i)v[i] = b;
    return smooth ? smoothing(v, step + step / 4) : v;
} // perform smoothing to reduce variance
// swap points between "adjacent" stacks
// Wilkinson defines adjacent as within step/4 units
function smoothing(v, thresh) {
    const n = v.length;
    let a = 0, b = 1, c, d; // get left stack
    while(v[a] === v[b])++b;
    while(b < n){
        // get right stack
        c = b + 1;
        while(v[b] === v[c])++c; // are stacks adjacent?
        // if so, compare sizes and swap as needed
        if (v[b] - v[b - 1] < thresh) {
            d = b + (a + c - b - b >> 1);
            while(d < b)v[d++] = v[b];
            while(d > b)v[d--] = v[a];
        } // update left stack indices
        a = b;
        b = c;
    }
    return v;
}
function lcg(seed) {
    // Random numbers using a Linear Congruential Generator with seed value
    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator
    return function() {
        seed = (1103515245 * seed + 12345) % 2147483647;
        return seed / 2147483647;
    };
}
function integer(min, max) {
    if (max == null) {
        max = min;
        min = 0;
    }
    let a, b, d;
    const dist = {
        min (_) {
            if (arguments.length) {
                a = _ || 0;
                d = b - a;
                return dist;
            } else return a;
        },
        max (_) {
            if (arguments.length) {
                b = _ || 0;
                d = b - a;
                return dist;
            } else return b;
        },
        sample () {
            return a + Math.floor(d * random());
        },
        pdf (x) {
            return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;
        },
        cdf (x) {
            const v = Math.floor(x);
            return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
        },
        icdf (p) {
            return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;
        }
    };
    return dist.min(min).max(max);
}
const SQRT2PI = Math.sqrt(2 * Math.PI);
const SQRT2 = Math.SQRT2;
let nextSample = NaN;
function sampleNormal(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    let x = 0, y = 0, rds, c;
    if (nextSample === nextSample) {
        x = nextSample;
        nextSample = NaN;
    } else {
        do {
            x = random() * 2 - 1;
            y = random() * 2 - 1;
            rds = x * x + y * y;
        }while (rds === 0 || rds > 1);
        c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform
        x *= c;
        nextSample = y * c;
    }
    return mean + x * stdev;
}
function densityNormal(value, mean, stdev) {
    stdev = stdev == null ? 1 : stdev;
    const z = (value - (mean || 0)) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);
} // Approximation from West (2009)
// Better Approximations to Cumulative Normal Functions
function cumulativeNormal(value, mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (value - mean) / stdev, Z = Math.abs(z);
    let cd;
    if (Z > 37) cd = 0;
    else {
        const exp = Math.exp(-Z * Z / 2);
        let sum;
        if (Z < 7.07106781186547) {
            sum = 3.52624965998911e-02 * Z + 0.700383064443688;
            sum = sum * Z + 6.37396220353165;
            sum = sum * Z + 33.912866078383;
            sum = sum * Z + 112.079291497871;
            sum = sum * Z + 221.213596169931;
            sum = sum * Z + 220.206867912376;
            cd = exp * sum;
            sum = 8.83883476483184e-02 * Z + 1.75566716318264;
            sum = sum * Z + 16.064177579207;
            sum = sum * Z + 86.7807322029461;
            sum = sum * Z + 296.564248779674;
            sum = sum * Z + 637.333633378831;
            sum = sum * Z + 793.826512519948;
            sum = sum * Z + 440.413735824752;
            cd = cd / sum;
        } else {
            sum = Z + 0.65;
            sum = Z + 4 / sum;
            sum = Z + 3 / sum;
            sum = Z + 2 / sum;
            sum = Z + 1 / sum;
            cd = exp / sum / 2.506628274631;
        }
    }
    return z > 0 ? 1 - cd : cd;
} // Approximation of Probit function using inverse error function.
function quantileNormal(p, mean, stdev) {
    if (p < 0 || p > 1) return NaN;
    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);
} // Approximate inverse error function. Implementation from "Approximating
// the erfinv function" by Mike Giles, GPU Computing Gems, volume 2, 2010.
// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0
function erfinv(x) {
    // beware that the logarithm argument must be
    // commputed as (1.0 - x) * (1.0 + x),
    // it must NOT be simplified as 1.0 - x * x as this
    // would induce rounding errors near the boundaries +/-1
    let w = -Math.log((1 - x) * (1 + x)), p;
    if (w < 6.25) {
        w -= 3.125;
        p = -0.00000000000000000000364441206401782;
        p = -0.00000000000000000016850591381820166 + p * w;
        p = 1.2858480715256400167e-18 + p * w;
        p = 1.115787767802518096e-17 + p * w;
        p = -0.0000000000000001333171662854621 + p * w;
        p = 2.0972767875968561637e-17 + p * w;
        p = 6.6376381343583238325e-15 + p * w;
        p = -0.00000000000004054566272975207 + p * w;
        p = -0.00000000000008151934197605472 + p * w;
        p = 2.6335093153082322977e-12 + p * w;
        p = -0.000000000012975133253453532 + p * w;
        p = -0.00000000005415412054294628 + p * w;
        p = 1.051212273321532285e-09 + p * w;
        p = -0.000000004112633980346984 + p * w;
        p = -0.000000029070369957882005 + p * w;
        p = 4.2347877827932403518e-07 + p * w;
        p = -0.0000013654692000834679 + p * w;
        p = -0.000013882523362786469 + p * w;
        p = 0.0001867342080340571352 + p * w;
        p = -0.000740702534166267 + p * w;
        p = -0.006033670871430149 + p * w;
        p = 0.24015818242558961693 + p * w;
        p = 1.6536545626831027356 + p * w;
    } else if (w < 16.0) {
        w = Math.sqrt(w) - 3.25;
        p = 2.2137376921775787049e-09;
        p = 9.0756561938885390979e-08 + p * w;
        p = -0.00000027517406297064545 + p * w;
        p = 1.8239629214389227755e-08 + p * w;
        p = 1.5027403968909827627e-06 + p * w;
        p = -0.000004013867526981546 + p * w;
        p = 2.9234449089955446044e-06 + p * w;
        p = 1.2475304481671778723e-05 + p * w;
        p = -0.000047318229009055734 + p * w;
        p = 6.8284851459573175448e-05 + p * w;
        p = 2.4031110387097893999e-05 + p * w;
        p = -0.0003550375203628475 + p * w;
        p = 0.00095328937973738049703 + p * w;
        p = -0.0016882755560235047 + p * w;
        p = 0.0024914420961078508066 + p * w;
        p = -0.003751208507569241 + p * w;
        p = 0.005370914553590063617 + p * w;
        p = 1.0052589676941592334 + p * w;
        p = 3.0838856104922207635 + p * w;
    } else if (Number.isFinite(w)) {
        w = Math.sqrt(w) - 5.0;
        p = -0.000000000027109920616438573;
        p = -0.0000000002555641816996525 + p * w;
        p = 1.5076572693500548083e-09 + p * w;
        p = -0.000000003789465440126737 + p * w;
        p = 7.6157012080783393804e-09 + p * w;
        p = -0.00000001496002662714924 + p * w;
        p = 2.9147953450901080826e-08 + p * w;
        p = -0.00000006771199775845234 + p * w;
        p = 2.2900482228026654717e-07 + p * w;
        p = -0.00000099298272942317 + p * w;
        p = 4.5260625972231537039e-06 + p * w;
        p = -0.00001968177810553167 + p * w;
        p = 7.5995277030017761139e-05 + p * w;
        p = -0.00021503011930044477 + p * w;
        p = -0.00013871931833623122 + p * w;
        p = 1.0103004648645343977 + p * w;
        p = 4.8499064014085844221 + p * w;
    } else p = Infinity;
    return p * x;
}
function gaussian(mean, stdev) {
    let mu, sigma;
    const dist = {
        mean (_) {
            if (arguments.length) {
                mu = _ || 0;
                return dist;
            } else return mu;
        },
        stdev (_) {
            if (arguments.length) {
                sigma = _ == null ? 1 : _;
                return dist;
            } else return sigma;
        },
        sample: ()=>sampleNormal(mu, sigma),
        pdf: (value)=>densityNormal(value, mu, sigma),
        cdf: (value)=>cumulativeNormal(value, mu, sigma),
        icdf: (p)=>quantileNormal(p, mu, sigma)
    };
    return dist.mean(mean).stdev(stdev);
}
function kde(support, bandwidth) {
    const kernel = gaussian();
    let n = 0;
    const dist = {
        data (_) {
            if (arguments.length) {
                support = _;
                n = _ ? _.length : 0;
                return dist.bandwidth(bandwidth);
            } else return support;
        },
        bandwidth (_) {
            if (!arguments.length) return bandwidth;
            bandwidth = _;
            if (!bandwidth && support) bandwidth = estimateBandwidth(support);
            return dist;
        },
        sample () {
            return support[~~(random() * n)] + bandwidth * kernel.sample();
        },
        pdf (x) {
            let y = 0, i = 0;
            for(; i < n; ++i)y += kernel.pdf((x - support[i]) / bandwidth);
            return y / bandwidth / n;
        },
        cdf (x) {
            let y = 0, i = 0;
            for(; i < n; ++i)y += kernel.cdf((x - support[i]) / bandwidth);
            return y / n;
        },
        icdf () {
            throw Error("KDE icdf not supported.");
        }
    };
    return dist.data(support);
}
function sampleLogNormal(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    return Math.exp(mean + sampleNormal() * stdev);
}
function densityLogNormal(value, mean, stdev) {
    if (value <= 0) return 0;
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (Math.log(value) - mean) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);
}
function cumulativeLogNormal(value, mean, stdev) {
    return cumulativeNormal(Math.log(value), mean, stdev);
}
function quantileLogNormal(p, mean, stdev) {
    return Math.exp(quantileNormal(p, mean, stdev));
}
function lognormal(mean, stdev) {
    let mu, sigma;
    const dist = {
        mean (_) {
            if (arguments.length) {
                mu = _ || 0;
                return dist;
            } else return mu;
        },
        stdev (_) {
            if (arguments.length) {
                sigma = _ == null ? 1 : _;
                return dist;
            } else return sigma;
        },
        sample: ()=>sampleLogNormal(mu, sigma),
        pdf: (value)=>densityLogNormal(value, mu, sigma),
        cdf: (value)=>cumulativeLogNormal(value, mu, sigma),
        icdf: (p)=>quantileLogNormal(p, mu, sigma)
    };
    return dist.mean(mean).stdev(stdev);
}
function mixture(dists, weights) {
    let m = 0, w;
    function normalize(x) {
        const w = [];
        let sum = 0, i;
        for(i = 0; i < m; ++i)sum += w[i] = x[i] == null ? 1 : +x[i];
        for(i = 0; i < m; ++i)w[i] /= sum;
        return w;
    }
    const dist = {
        weights (_) {
            if (arguments.length) {
                w = normalize(weights = _ || []);
                return dist;
            }
            return weights;
        },
        distributions (_) {
            if (arguments.length) {
                if (_) {
                    m = _.length;
                    dists = _;
                } else {
                    m = 0;
                    dists = [];
                }
                return dist.weights(weights);
            }
            return dists;
        },
        sample () {
            const r = random();
            let d = dists[m - 1], v = w[0], i = 0; // first select distribution
            for(; i < m - 1; v += w[++i])if (r < v) {
                d = dists[i];
                break;
            }
             // then sample from it
            return d.sample();
        },
        pdf (x) {
            let p = 0, i = 0;
            for(; i < m; ++i)p += w[i] * dists[i].pdf(x);
            return p;
        },
        cdf (x) {
            let p = 0, i = 0;
            for(; i < m; ++i)p += w[i] * dists[i].cdf(x);
            return p;
        },
        icdf () {
            throw Error("Mixture icdf not supported.");
        }
    };
    return dist.distributions(dists).weights(weights);
}
function sampleUniform(min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return min + (max - min) * random();
}
function densityUniform(value, min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return value >= min && value <= max ? 1 / (max - min) : 0;
}
function cumulativeUniform(value, min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);
}
function quantileUniform(p, min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;
}
function uniform(min, max) {
    let a, b;
    const dist = {
        min (_) {
            if (arguments.length) {
                a = _ || 0;
                return dist;
            } else return a;
        },
        max (_) {
            if (arguments.length) {
                b = _ == null ? 1 : _;
                return dist;
            } else return b;
        },
        sample: ()=>sampleUniform(a, b),
        pdf: (value)=>densityUniform(value, a, b),
        cdf: (value)=>cumulativeUniform(value, a, b),
        icdf: (p)=>quantileUniform(p, a, b)
    };
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return dist.min(min).max(max);
}
// Ordinary Least Squares
function ols(uX, uY, uXY, uX2) {
    const delta = uX2 - uX * uX, slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta, intercept = uY - slope * uX;
    return [
        intercept,
        slope
    ];
}
function points(data, x, y, sort) {
    data = data.filter((d)=>{
        let u = x(d), v = y(d);
        return u != null && (u = +u) >= u && v != null && (v = +v) >= v;
    });
    if (sort) data.sort((a, b)=>x(a) - x(b));
    const n = data.length, X = new Float64Array(n), Y = new Float64Array(n); // extract values, calculate means
    let i = 0, ux = 0, uy = 0, xv, yv, d;
    for (d of data){
        X[i] = xv = +x(d);
        Y[i] = yv = +y(d);
        ++i;
        ux += (xv - ux) / i;
        uy += (yv - uy) / i;
    } // mean center the data
    for(i = 0; i < n; ++i){
        X[i] -= ux;
        Y[i] -= uy;
    }
    return [
        X,
        Y,
        ux,
        uy
    ];
}
function visitPoints(data, x, y, callback) {
    let i = -1, u, v;
    for (const d of data){
        u = x(d);
        v = y(d);
        if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) callback(u, v, ++i);
    }
}
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function rSquared(data, x, y, uY, predict) {
    let SSE = 0, SST = 0;
    visitPoints(data, x, y, (dx, dy)=>{
        const sse = dy - predict(dx), sst = dy - uY;
        SSE += sse * sse;
        SST += sst * sst;
    });
    return 1 - SSE / SST;
}
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function linear(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;
    visitPoints(data, x, y, (dx, dy)=>{
        ++n;
        X += (dx - X) / n;
        Y += (dy - Y) / n;
        XY += (dx * dy - XY) / n;
        X2 += (dx * dx - X2) / n;
    });
    const coef = ols(X, Y, XY, X2), predict = (x)=>coef[0] + coef[1] * x;
    return {
        coef: coef,
        predict: predict,
        rSquared: rSquared(data, x, y, Y, predict)
    };
}
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function log(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;
    visitPoints(data, x, y, (dx, dy)=>{
        ++n;
        dx = Math.log(dx);
        X += (dx - X) / n;
        Y += (dy - Y) / n;
        XY += (dx * dy - XY) / n;
        X2 += (dx * dx - X2) / n;
    });
    const coef = ols(X, Y, XY, X2), predict = (x)=>coef[0] + coef[1] * Math.log(x);
    return {
        coef: coef,
        predict: predict,
        rSquared: rSquared(data, x, y, Y, predict)
    };
}
function exp(data, x, y) {
    // eslint-disable-next-line no-unused-vars
    const [xv, yv, ux, uy] = points(data, x, y);
    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;
    visitPoints(data, x, y, (_, dy)=>{
        dx = xv[n++];
        ly = Math.log(dy);
        xy = dx * dy;
        YL += (dy * ly - YL) / n;
        XY += (xy - XY) / n;
        XYL += (xy * ly - XYL) / n;
        X2Y += (dx * xy - X2Y) / n;
    });
    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy), predict = (x)=>Math.exp(c0 + c1 * (x - ux));
    return {
        coef: [
            Math.exp(c0 - c1 * ux),
            c1
        ],
        predict: predict,
        rSquared: rSquared(data, x, y, uy, predict)
    };
}
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function pow(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;
    visitPoints(data, x, y, (dx, dy)=>{
        const lx = Math.log(dx), ly = Math.log(dy);
        ++n;
        X += (lx - X) / n;
        Y += (ly - Y) / n;
        XY += (lx * ly - XY) / n;
        X2 += (lx * lx - X2) / n;
        YS += (dy - YS) / n;
    });
    const coef = ols(X, Y, XY, X2), predict = (x)=>coef[0] * Math.pow(x, coef[1]);
    coef[0] = Math.exp(coef[0]);
    return {
        coef: coef,
        predict: predict,
        rSquared: rSquared(data, x, y, YS, predict)
    };
}
function quad(data, x, y) {
    const [xv, yv, ux, uy] = points(data, x, y), n = xv.length;
    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0, i, dx, dy, x2;
    for(i = 0; i < n;){
        dx = xv[i];
        dy = yv[i++];
        x2 = dx * dx;
        X2 += (x2 - X2) / i;
        X3 += (x2 * dx - X3) / i;
        X4 += (x2 * x2 - X4) / i;
        XY += (dx * dy - XY) / i;
        X2Y += (x2 * dy - X2Y) / i;
    }
    const X2X2 = X4 - X2 * X2, d = X2 * X2X2 - X3 * X3, a = (X2Y * X2 - XY * X3) / d, b = (XY * X2X2 - X2Y * X3) / d, c = -a * X2, predict = (x)=>{
        x = x - ux;
        return a * x * x + b * x + c + uy;
    }; // transform coefficients back from mean-centered space
    return {
        coef: [
            c - b * ux + a * ux * ux + uy,
            b - 2 * a * ux,
            a
        ],
        predict: predict,
        rSquared: rSquared(data, x, y, uy, predict)
    };
}
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
// ... which was adapted from regression-js by Tom Alexander
// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246
// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE
function poly(data, x, y, order) {
    // use more efficient methods for lower orders
    if (order === 1) return linear(data, x, y);
    if (order === 2) return quad(data, x, y);
    const [xv, yv, ux, uy] = points(data, x, y), n = xv.length, lhs = [], rhs = [], k = order + 1;
    let i, j, l, v, c;
    for(i = 0; i < k; ++i){
        for(l = 0, v = 0; l < n; ++l)v += Math.pow(xv[l], i) * yv[l];
        lhs.push(v);
        c = new Float64Array(k);
        for(j = 0; j < k; ++j){
            for(l = 0, v = 0; l < n; ++l)v += Math.pow(xv[l], i + j);
            c[j] = v;
        }
        rhs.push(c);
    }
    rhs.push(lhs);
    const coef = gaussianElimination(rhs), predict = (x)=>{
        x -= ux;
        let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;
        for(i = 3; i < k; ++i)y += coef[i] * Math.pow(x, i);
        return y;
    };
    return {
        coef: uncenter(k, coef, -ux, uy),
        predict: predict,
        rSquared: rSquared(data, x, y, uy, predict)
    };
}
function uncenter(k, a, x, y) {
    const z = Array(k);
    let i, j, v, c; // initialize to zero
    for(i = 0; i < k; ++i)z[i] = 0; // polynomial expansion
    for(i = k - 1; i >= 0; --i){
        v = a[i];
        c = 1;
        z[i] += v;
        for(j = 1; j <= i; ++j){
            c *= (i + 1 - j) / j; // binomial coefficent
            z[i - j] += v * Math.pow(x, j) * c;
        }
    } // bias term
    z[0] += y;
    return z;
} // Given an array for a two-dimensional matrix and the polynomial order,
// solve A * x = b using Gaussian elimination.
function gaussianElimination(matrix) {
    const n = matrix.length - 1, coef = [];
    let i, j, k, r, t;
    for(i = 0; i < n; ++i){
        r = i; // max row
        for(j = i + 1; j < n; ++j)if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) r = j;
        for(k = i; k < n + 1; ++k){
            t = matrix[k][i];
            matrix[k][i] = matrix[k][r];
            matrix[k][r] = t;
        }
        for(j = i + 1; j < n; ++j)for(k = n; k >= i; k--)matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
    }
    for(j = n - 1; j >= 0; --j){
        t = 0;
        for(k = j + 1; k < n; ++k)t += matrix[k][j] * coef[k];
        coef[j] = (matrix[n][j] - t) / matrix[j][j];
    }
    return coef;
}
const maxiters = 2, epsilon = 1e-12; // Adapted from science.js by Jason Davies
// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js
// License: https://github.com/jasondavies/science.js/blob/master/LICENSE
function loess(data, x, y, bandwidth) {
    const [xv, yv, ux, uy] = points(data, x, y, true), n = xv.length, bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors
    yhat = new Float64Array(n), residuals = new Float64Array(n), robustWeights = new Float64Array(n).fill(1);
    for(let iter = -1; ++iter <= maxiters;){
        const interval = [
            0,
            bw - 1
        ];
        for(let i = 0; i < n; ++i){
            const dx = xv[i], i0 = interval[0], i1 = interval[1], edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
            let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;
            const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!
            for(let k = i0; k <= i1; ++k){
                const xk = xv[k], yk = yv[k], w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k], xkw = xk * w;
                W += w;
                X += xkw;
                Y += yk * w;
                XY += yk * xkw;
                X2 += xk * xkw;
            } // linear regression fit
            const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);
            yhat[i] = a + b * dx;
            residuals[i] = Math.abs(yv[i] - yhat[i]);
            updateInterval(xv, i + 1, interval);
        }
        if (iter === maxiters) break;
        const medianResidual = (0, _d3Array.median)(residuals);
        if (Math.abs(medianResidual) < epsilon) break;
        for(let i2 = 0, arg, w1; i2 < n; ++i2){
            arg = residuals[i2] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations
            // keeping weights tiny but non-zero prevents singularites
            robustWeights[i2] = arg >= 1 ? epsilon : (w1 = 1 - arg * arg) * w1;
        }
    }
    return output(xv, yhat, ux, uy);
} // weighting kernel for local regression
function tricube(x) {
    return (x = 1 - x * x * x) * x * x;
} // advance sliding window interval of nearest neighbors
function updateInterval(xv, i, interval) {
    const val = xv[i];
    let left = interval[0], right = interval[1] + 1;
    if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge
    // step when distance is equal to ensure movement over duplicate x values
    while(i > left && xv[right] - val <= val - xv[left]){
        interval[0] = ++left;
        interval[1] = right;
        ++right;
    }
} // generate smoothed output points
// average points with repeated x values
function output(xv, yhat, ux, uy) {
    const n = xv.length, out = [];
    let i = 0, cnt = 0, prev = [], v;
    for(; i < n; ++i){
        v = xv[i] + ux;
        if (prev[0] === v) // average output values via online update
        prev[1] += (yhat[i] - prev[1]) / ++cnt;
        else {
            // add new output point
            cnt = 0;
            prev[1] += uy;
            prev = [
                v,
                yhat[i]
            ];
            out.push(prev);
        }
    }
    prev[1] += uy;
    return out;
}
// subdivide up to accuracy of 0.5 degrees
const MIN_RADIANS = 0.5 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent
function sampleCurve(f, extent, minSteps, maxSteps) {
    minSteps = minSteps || 25;
    maxSteps = Math.max(minSteps, maxSteps || 200);
    const point = (x)=>[
            x,
            f(x)
        ], minX = extent[0], maxX = extent[1], span = maxX - minX, stop = span / maxSteps, prev = [
        point(minX)
    ], next = [];
    if (minSteps === maxSteps) {
        // no adaptation, sample uniform grid directly and return
        for(let i = 1; i < maxSteps; ++i)prev.push(point(minX + i / minSteps * span));
        prev.push(point(maxX));
        return prev;
    } else {
        // sample minimum points on uniform grid
        // then move on to perform adaptive refinement
        next.push(point(maxX));
        for(let i1 = minSteps; --i1 > 0;)next.push(point(minX + i1 / minSteps * span));
    }
    let p0 = prev[0];
    let p1 = next[next.length - 1];
    const sx = 1 / span;
    const sy = scaleY(p0[1], next);
    while(p1){
        // midpoint for potential curve subdivision
        const pm = point((p0[0] + p1[0]) / 2);
        const dx = pm[0] - p0[0] >= stop;
        if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) // maximum resolution has not yet been met, and
        // subdivision midpoint is sufficiently different from endpoint
        // save subdivision, push midpoint onto the visitation stack
        next.push(pm);
        else {
            // subdivision midpoint sufficiently similar to endpoint
            // skip subdivision, store endpoint, move to next point on the stack
            p0 = p1;
            prev.push(p1);
            next.pop();
        }
        p1 = next[next.length - 1];
    }
    return prev;
}
function scaleY(init, points) {
    let ymin = init;
    let ymax = init;
    const n = points.length;
    for(let i = 0; i < n; ++i){
        const y = points[i][1];
        if (y < ymin) ymin = y;
        if (y > ymax) ymax = y;
    }
    return 1 / (ymax - ymin);
}
function angleDelta(p, q, r, sx, sy) {
    const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])), a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));
    return Math.abs(a0 - a1);
}

},{"d3-array":"6IwJG","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i63Ad":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bound", ()=>Bound);
parcelHelpers.export(exports, "identifier", ()=>Identifier);
parcelHelpers.export(exports, "mark", ()=>Mark);
parcelHelpers.export(exports, "overlap", ()=>Overlap);
parcelHelpers.export(exports, "render", ()=>Render);
parcelHelpers.export(exports, "viewlayout", ()=>ViewLayout);
var _vegaDataflow = require("vega-dataflow");
var _vegaScenegraph = require("vega-scenegraph");
var _vegaUtil = require("vega-util");
const Top = "top";
const Left = "left";
const Right = "right";
const Bottom = "bottom";
const TopLeft = "top-left";
const TopRight = "top-right";
const BottomLeft = "bottom-left";
const BottomRight = "bottom-right";
const Start = "start";
const Middle = "middle";
const End = "end";
const X = "x";
const Y = "y";
const Group = "group";
const AxisRole = "axis";
const TitleRole = "title";
const FrameRole = "frame";
const ScopeRole = "scope";
const LegendRole = "legend";
const RowHeader = "row-header";
const RowFooter = "row-footer";
const RowTitle = "row-title";
const ColHeader = "column-header";
const ColFooter = "column-footer";
const ColTitle = "column-title";
const Padding = "padding";
const Symbols = "symbol";
const Fit = "fit";
const FitX = "fit-x";
const FitY = "fit-y";
const Pad = "pad";
const None = "none";
const All = "all";
const Each = "each";
const Flush = "flush";
const Column = "column";
const Row = "row";
/**
 * Calculate bounding boxes for scenegraph items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - The scenegraph mark instance to bound.
 */ function Bound(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Bound, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const view = pulse.dataflow, mark = _.mark, type = mark.marktype, entry = (0, _vegaScenegraph.Marks)[type], bound = entry.bound;
        let markBounds = mark.bounds, rebound;
        if (entry.nested) {
            // multi-item marks have a single bounds instance
            if (mark.items.length) view.dirty(mark.items[0]);
            markBounds = boundItem(mark, bound);
            mark.items.forEach((item)=>{
                item.bounds.clear().union(markBounds);
            });
        } else if (type === Group || _.modified()) {
            // operator parameters modified -> re-bound all items
            // updates group bounds in response to modified group content
            pulse.visit(pulse.MOD, (item)=>view.dirty(item));
            markBounds.clear();
            mark.items.forEach((item)=>markBounds.union(boundItem(item, bound))); // force reflow for axes/legends/titles to propagate any layout changes
            switch(mark.role){
                case AxisRole:
                case LegendRole:
                case TitleRole:
                    pulse.reflow();
            }
        } else {
            // incrementally update bounds, re-bound mark as needed
            rebound = pulse.changed(pulse.REM);
            pulse.visit(pulse.ADD, (item)=>{
                markBounds.union(boundItem(item, bound));
            });
            pulse.visit(pulse.MOD, (item)=>{
                rebound = rebound || markBounds.alignsWith(item.bounds);
                view.dirty(item);
                markBounds.union(boundItem(item, bound));
            });
            if (rebound) {
                markBounds.clear();
                mark.items.forEach((item)=>markBounds.union(item.bounds));
            }
        } // ensure mark bounds do not exceed any clipping region
        (0, _vegaScenegraph.boundClip)(mark);
        return pulse.modifies("bounds");
    }
});
function boundItem(item, bound, opt) {
    return bound(item.bounds.clear(), item, opt);
}
const COUNTER_NAME = ":vega_identifier:";
/**
 * Adds a unique identifier to all added tuples.
 * This transform creates a new signal that serves as an id counter.
 * As a result, the id counter is shared across all instances of this
 * transform, generating unique ids across multiple data streams. In
 * addition, this signal value can be included in a snapshot of the
 * dataflow state, enabling correct resumption of id allocation.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.as - The field name for the generated identifier.
 */ function Identifier(params) {
    (0, _vegaDataflow.Transform).call(this, 0, params);
}
Identifier.Definition = {
    "type": "Identifier",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "as",
            "type": "string",
            "required": true
        }
    ]
};
(0, _vegaUtil.inherits)(Identifier, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const counter = getCounter(pulse.dataflow), as = _.as;
        let id = counter.value;
        pulse.visit(pulse.ADD, (t)=>t[as] = t[as] || ++id);
        counter.set(this.value = id);
        return pulse;
    }
});
function getCounter(view) {
    return view._signals[COUNTER_NAME] || (view._signals[COUNTER_NAME] = view.add(0));
}
/**
 * Bind scenegraph items to a scenegraph mark instance.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.markdef - The mark definition for creating the mark.
 *   This is an object of legal scenegraph mark properties which *must* include
 *   the 'marktype' property.
 */ function Mark(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Mark, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        let mark = this.value; // acquire mark on first invocation, bind context and group
        if (!mark) {
            mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup(_), _.index);
            mark.group.context = _.context;
            if (!_.context.group) _.context.group = mark.group;
            mark.source = this.source; // point to upstream collector
            mark.clip = _.clip;
            mark.interactive = _.interactive;
            this.value = mark;
        } // initialize entering items
        const Init = mark.marktype === Group ? (0, _vegaScenegraph.GroupItem) : (0, _vegaScenegraph.Item);
        pulse.visit(pulse.ADD, (item)=>Init.call(item, mark)); // update clipping and/or interactive status
        if (_.modified("clip") || _.modified("interactive")) {
            mark.clip = _.clip;
            mark.interactive = !!_.interactive;
            mark.zdirty = true; // force scenegraph re-eval
            pulse.reflow();
        } // bind items array to scenegraph mark
        mark.items = pulse.source;
        return pulse;
    }
});
function lookup(_) {
    const g = _.groups, p = _.parent;
    return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
}
/**
 * Analyze items for overlap, changing opacity to hide items with
 * overlapping bounding boxes. This transform will preserve at least
 * two items (e.g., first and last) even if overlap persists.
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting items.
 * @param {object} [params.method] - The overlap removal method to apply.
 *   One of 'parity' (default, hide every other item until there is no
 *   more overlap) or 'greedy' (sequentially scan and hide and items that
 *   overlap with the last visible item).
 * @param {object} [params.boundScale] - A scale whose range should be used
 *   to bound the items. Items exceeding the bounds of the scale range
 *   will be treated as overlapping. If null or undefined, no bounds check
 *   will be applied.
 * @param {object} [params.boundOrient] - The orientation of the scale
 *   (top, bottom, left, or right) used to bound items. This parameter is
 *   ignored if boundScale is null or undefined.
 * @param {object} [params.boundTolerance] - The tolerance in pixels for
 *   bound inclusion testing (default 1). This specifies by how many pixels
 *   an item's bounds may exceed the scale range bounds and not be culled.
 * @constructor
 */ function Overlap(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
const methods = {
    parity: (items)=>items.filter((item, i)=>i % 2 ? item.opacity = 0 : 1),
    greedy: (items, sep)=>{
        let a;
        return items.filter((b, i)=>!i || !intersect(a.bounds, b.bounds, sep) ? (a = b, 1) : b.opacity = 0);
    }
}; // compute bounding box intersection
// including padding pixels of separation
const intersect = (a, b, sep)=>sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);
const hasOverlap = (items, pad)=>{
    for(var i = 1, n = items.length, a = items[0].bounds, b; i < n; a = b, ++i){
        if (intersect(a, b = items[i].bounds, pad)) return true;
    }
};
const hasBounds = (item)=>{
    const b = item.bounds;
    return b.width() > 1 && b.height() > 1;
};
const boundTest = (scale, orient, tolerance)=>{
    var range = scale.range(), b = new (0, _vegaScenegraph.Bounds)();
    if (orient === Top || orient === Bottom) b.set(range[0], -Infinity, range[1], Infinity);
    else b.set(-Infinity, range[0], Infinity, range[1]);
    b.expand(tolerance || 1);
    return (item)=>b.encloses(item.bounds);
}; // reset all items to be fully opaque
const reset = (source)=>{
    source.forEach((item)=>item.opacity = 1);
    return source;
}; // add all tuples to mod, fork pulse if parameters were modified
// fork prevents cross-stream tuple pollution (e.g., pulse from scale)
const reflow = (pulse, _)=>pulse.reflow(_.modified()).modifies("opacity");
(0, _vegaUtil.inherits)(Overlap, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const reduce = methods[_.method] || methods.parity, sep = _.separation || 0;
        let source = pulse.materialize(pulse.SOURCE).source, items, test;
        if (!source || !source.length) return;
        if (!_.method) {
            // early exit if method is falsy
            if (_.modified("method")) {
                reset(source);
                pulse = reflow(pulse, _);
            }
            return pulse;
        } // skip labels with no content
        source = source.filter(hasBounds); // early exit, nothing to do
        if (!source.length) return;
        if (_.sort) source = source.slice().sort(_.sort);
        items = reset(source);
        pulse = reflow(pulse, _);
        if (items.length >= 3 && hasOverlap(items, sep)) {
            do items = reduce(items, sep);
            while (items.length >= 3 && hasOverlap(items, sep));
            if (items.length < 3 && !(0, _vegaUtil.peek)(source).opacity) {
                if (items.length > 1) (0, _vegaUtil.peek)(items).opacity = 0;
                (0, _vegaUtil.peek)(source).opacity = 1;
            }
        }
        if (_.boundScale && _.boundTolerance >= 0) {
            test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
            source.forEach((item)=>{
                if (!test(item)) item.opacity = 0;
            });
        } // re-calculate mark bounds
        const bounds = items[0].mark.bounds.clear();
        source.forEach((item)=>{
            if (item.opacity) bounds.union(item.bounds);
        });
        return pulse;
    }
});
/**
 * Queue modified scenegraph items for rendering.
 * @constructor
 */ function Render(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Render, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const view = pulse.dataflow;
        pulse.visit(pulse.ALL, (item)=>view.dirty(item)); // set z-index dirty flag as needed
        if (pulse.fields && pulse.fields["zindex"]) {
            const item = pulse.source && pulse.source[0];
            if (item) item.mark.zdirty = true;
        }
    }
});
const tempBounds = new (0, _vegaScenegraph.Bounds)();
function set(item, property, value) {
    return item[property] === value ? 0 : (item[property] = value, 1);
}
function isYAxis(mark) {
    var orient = mark.items[0].orient;
    return orient === Left || orient === Right;
}
function axisIndices(datum) {
    let index = +datum.grid;
    return [
        datum.ticks ? index++ : -1,
        datum.labels ? index++ : -1,
        index + +datum.domain // title index
    ];
}
function axisLayout(view, axis, width, height) {
    var item = axis.items[0], datum = item.datum, delta = item.translate != null ? item.translate : 0.5, orient = item.orient, indices = axisIndices(datum), range = item.range, offset = item.offset, position = item.position, minExtent = item.minExtent, maxExtent = item.maxExtent, title = datum.title && item.items[indices[2]].items[0], titlePadding = item.titlePadding, bounds = item.bounds, dl = title && (0, _vegaScenegraph.multiLineOffset)(title), x = 0, y = 0, i, s;
    tempBounds.clear().union(bounds);
    bounds.clear();
    if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);
    if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds); // position axis group and title
    switch(orient){
        case Top:
            x = position || 0;
            y = -offset;
            s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
            bounds.add(0, -s).add(range, 0);
            if (title) axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);
            break;
        case Left:
            x = -offset;
            y = position || 0;
            s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
            bounds.add(-s, 0).add(0, range);
            if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);
            break;
        case Right:
            x = width + offset;
            y = position || 0;
            s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
            bounds.add(0, 0).add(s, range);
            if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);
            break;
        case Bottom:
            x = position || 0;
            y = height + offset;
            s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
            bounds.add(0, 0).add(range, s);
            if (title) axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);
            break;
        default:
            x = item.x;
            y = item.y;
    } // update bounds
    (0, _vegaScenegraph.boundStroke)(bounds.translate(x, y), item);
    if (set(item, "x", x + delta) | set(item, "y", y + delta)) {
        item.bounds = tempBounds;
        view.dirty(item);
        item.bounds = bounds;
        view.dirty(item);
    }
    return item.mark.bounds.clear().union(bounds);
}
function axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {
    const b = title.bounds;
    if (title.auto) {
        const v = sign * (offset + dl + pad);
        let dx = 0, dy = 0;
        view.dirty(title);
        isYAxis ? dx = (title.x || 0) - (title.x = v) : dy = (title.y || 0) - (title.y = v);
        title.mark.bounds.clear().union(b.translate(-dx, -dy));
        view.dirty(title);
    }
    bounds.union(b);
}
const min = (a, b)=>Math.floor(Math.min(a, b));
const max = (a, b)=>Math.ceil(Math.max(a, b));
function gridLayoutGroups(group) {
    var groups = group.items, n = groups.length, i = 0, mark, items;
    const views = {
        marks: [],
        rowheaders: [],
        rowfooters: [],
        colheaders: [],
        colfooters: [],
        rowtitle: null,
        coltitle: null
    }; // layout axes, gather legends, collect bounds
    for(; i < n; ++i){
        mark = groups[i];
        items = mark.items;
        if (mark.marktype === Group) switch(mark.role){
            case AxisRole:
            case LegendRole:
            case TitleRole:
                break;
            case RowHeader:
                views.rowheaders.push(...items);
                break;
            case RowFooter:
                views.rowfooters.push(...items);
                break;
            case ColHeader:
                views.colheaders.push(...items);
                break;
            case ColFooter:
                views.colfooters.push(...items);
                break;
            case RowTitle:
                views.rowtitle = items[0];
                break;
            case ColTitle:
                views.coltitle = items[0];
                break;
            default:
                views.marks.push(...items);
        }
    }
    return views;
}
function bboxFlush(item) {
    return new (0, _vegaScenegraph.Bounds)().set(0, 0, item.width || 0, item.height || 0);
}
function bboxFull(item) {
    const b = item.bounds.clone();
    return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));
}
function get(opt, key, d) {
    const v = (0, _vegaUtil.isObject)(opt) ? opt[key] : opt;
    return v != null ? v : d !== undefined ? d : 0;
}
function offsetValue(v) {
    return v < 0 ? Math.ceil(-v) : 0;
}
function gridLayout(view, groups, opt) {
    var dirty = !opt.nodirty, bbox = opt.bounds === Flush ? bboxFlush : bboxFull, bounds = tempBounds.set(0, 0, 0, 0), alignCol = get(opt.align, Column), alignRow = get(opt.align, Row), padCol = get(opt.padding, Column), padRow = get(opt.padding, Row), ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), n = groups.length, xOffset = Array(n), xExtent = Array(ncols), xMax = 0, yOffset = Array(n), yExtent = Array(nrows), yMax = 0, dx = Array(n), dy = Array(n), boxes = Array(n), m, i, c, r, b, g, px, py, x, y, offset;
    for(i = 0; i < ncols; ++i)xExtent[i] = 0;
    for(i = 0; i < nrows; ++i)yExtent[i] = 0; // determine offsets for each group
    for(i = 0; i < n; ++i){
        g = groups[i];
        b = boxes[i] = bbox(g);
        g.x = g.x || 0;
        dx[i] = 0;
        g.y = g.y || 0;
        dy[i] = 0;
        c = i % ncols;
        r = ~~(i / ncols);
        xMax = Math.max(xMax, px = Math.ceil(b.x2));
        yMax = Math.max(yMax, py = Math.ceil(b.y2));
        xExtent[c] = Math.max(xExtent[c], px);
        yExtent[r] = Math.max(yExtent[r], py);
        xOffset[i] = padCol + offsetValue(b.x1);
        yOffset[i] = padRow + offsetValue(b.y1);
        if (dirty) view.dirty(groups[i]);
    } // set initial alignment offsets
    for(i = 0; i < n; ++i){
        if (i % ncols === 0) xOffset[i] = 0;
        if (i < ncols) yOffset[i] = 0;
    } // enforce column alignment constraints
    if (alignCol === Each) for(c = 1; c < ncols; ++c){
        for(offset = 0, i = c; i < n; i += ncols)if (offset < xOffset[i]) offset = xOffset[i];
        for(i = c; i < n; i += ncols)xOffset[i] = offset + xExtent[c - 1];
    }
    else if (alignCol === All) {
        for(offset = 0, i = 0; i < n; ++i)if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
        for(i = 0; i < n; ++i)if (i % ncols) xOffset[i] = offset + xMax;
    } else {
        for(alignCol = false, c = 1; c < ncols; ++c)for(i = c; i < n; i += ncols)xOffset[i] += xExtent[c - 1];
    } // enforce row alignment constraints
    if (alignRow === Each) for(r = 1; r < nrows; ++r){
        for(offset = 0, i = r * ncols, m = i + ncols; i < m; ++i)if (offset < yOffset[i]) offset = yOffset[i];
        for(i = r * ncols; i < m; ++i)yOffset[i] = offset + yExtent[r - 1];
    }
    else if (alignRow === All) {
        for(offset = 0, i = ncols; i < n; ++i)if (offset < yOffset[i]) offset = yOffset[i];
        for(i = ncols; i < n; ++i)yOffset[i] = offset + yMax;
    } else {
        for(alignRow = false, r = 1; r < nrows; ++r)for(i = r * ncols, m = i + ncols; i < m; ++i)yOffset[i] += yExtent[r - 1];
    } // perform horizontal grid layout
    for(x = 0, i = 0; i < n; ++i){
        x = xOffset[i] + (i % ncols ? x : 0);
        dx[i] += x - groups[i].x;
    } // perform vertical grid layout
    for(c = 0; c < ncols; ++c)for(y = 0, i = c; i < n; i += ncols){
        y += yOffset[i];
        dy[i] += y - groups[i].y;
    }
     // perform horizontal centering
    if (alignCol && get(opt.center, Column) && nrows > 1) for(i = 0; i < n; ++i){
        b = alignCol === All ? xMax : xExtent[i % ncols];
        x = b - boxes[i].x2 - groups[i].x - dx[i];
        if (x > 0) dx[i] += x / 2;
    }
     // perform vertical centering
    if (alignRow && get(opt.center, Row) && ncols !== 1) for(i = 0; i < n; ++i){
        b = alignRow === All ? yMax : yExtent[~~(i / ncols)];
        y = b - boxes[i].y2 - groups[i].y - dy[i];
        if (y > 0) dy[i] += y / 2;
    }
     // position grid relative to anchor
    for(i = 0; i < n; ++i)bounds.union(boxes[i].translate(dx[i], dy[i]));
    x = get(opt.anchor, X);
    y = get(opt.anchor, Y);
    switch(get(opt.anchor, Column)){
        case End:
            x -= bounds.width();
            break;
        case Middle:
            x -= bounds.width() / 2;
    }
    switch(get(opt.anchor, Row)){
        case End:
            y -= bounds.height();
            break;
        case Middle:
            y -= bounds.height() / 2;
    }
    x = Math.round(x);
    y = Math.round(y); // update mark positions, bounds, dirty
    bounds.clear();
    for(i = 0; i < n; ++i)groups[i].mark.bounds.clear();
    for(i = 0; i < n; ++i){
        g = groups[i];
        g.x += dx[i] += x;
        g.y += dy[i] += y;
        bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
        if (dirty) view.dirty(g);
    }
    return bounds;
}
function trellisLayout(view, group, opt) {
    var views = gridLayoutGroups(group), groups = views.marks, bbox = opt.bounds === Flush ? boundFlush : boundFull, off = opt.offset, ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), cells = nrows * ncols, x, y, x2, y2, anchor, band, offset; // -- initial grid layout
    const bounds = gridLayout(view, groups, opt);
    if (bounds.empty()) bounds.set(0, 0, 0, 0); // empty grid
    // -- layout grid headers and footers --
    // perform row header layout
    if (views.rowheaders) {
        band = get(opt.headerBand, Row, null);
        x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get(off, "rowHeader"), min, 0, bbox, "x1", 0, ncols, 1, band);
    } // perform column header layout
    if (views.colheaders) {
        band = get(opt.headerBand, Column, null);
        y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get(off, "columnHeader"), min, 1, bbox, "y1", 0, 1, ncols, band);
    } // perform row footer layout
    if (views.rowfooters) {
        band = get(opt.footerBand, Row, null);
        x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, get(off, "rowFooter"), max, 0, bbox, "x2", ncols - 1, ncols, 1, band);
    } // perform column footer layout
    if (views.colfooters) {
        band = get(opt.footerBand, Column, null);
        y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, get(off, "columnFooter"), max, 1, bbox, "y2", cells - ncols, 1, ncols, band);
    } // perform row title layout
    if (views.rowtitle) {
        anchor = get(opt.titleAnchor, Row);
        offset = get(off, "rowTitle");
        offset = anchor === End ? x2 + offset : x - offset;
        band = get(opt.titleBand, Row, 0.5);
        layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
    } // perform column title layout
    if (views.coltitle) {
        anchor = get(opt.titleAnchor, Column);
        offset = get(off, "columnTitle");
        offset = anchor === End ? y2 + offset : y - offset;
        band = get(opt.titleBand, Column, 0.5);
        layoutTitle(view, views.coltitle, offset, 1, bounds, band);
    }
}
function boundFlush(item, field) {
    return field === "x1" ? item.x || 0 : field === "y1" ? item.y || 0 : field === "x2" ? (item.x || 0) + (item.width || 0) : field === "y2" ? (item.y || 0) + (item.height || 0) : undefined;
}
function boundFull(item, field) {
    return item.bounds[field];
}
function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
    var n = groups.length, init = 0, edge = 0, i, j, k, m, b, h, g, x, y; // if no groups, early exit and return 0
    if (!n) return init; // compute margin
    for(i = start; i < n; i += stride)if (groups[i]) init = agg(init, bound(groups[i], bf));
     // if no headers, return margin calculation
    if (!headers.length) return init; // check if number of headers exceeds number of rows or columns
    if (headers.length > limit) {
        view.warn("Grid headers exceed limit: " + limit);
        headers = headers.slice(0, limit);
    } // apply offset
    init += offset; // clear mark bounds for all headers
    for(j = 0, m = headers.length; j < m; ++j){
        view.dirty(headers[j]);
        headers[j].mark.bounds.clear();
    } // layout each header
    for(i = start, j = 0, m = headers.length; j < m; ++j, i += stride){
        h = headers[j];
        b = h.mark.bounds; // search for nearest group to align to
        // necessary if table has empty cells
        for(k = i; k >= 0 && (g = groups[k]) == null; k -= back); // assign coordinates and update bounds
        if (isX) {
            x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
            y = init;
        } else {
            x = init;
            y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
        }
        b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
        h.x = x;
        h.y = y;
        view.dirty(h); // update current edge of layout bounds
        edge = agg(edge, b[bf]);
    }
    return edge;
}
function layoutTitle(view, g, offset, isX, bounds, band) {
    if (!g) return;
    view.dirty(g); // compute title coordinates
    var x = offset, y = offset;
    isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height()); // assign coordinates and update bounds
    g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
    g.mark.bounds.clear().union(g.bounds);
    g.x = x;
    g.y = y; // queue title for redraw
    view.dirty(g);
}
function lookup$1(config, orient) {
    const opt = config[orient] || {};
    return (key, d)=>opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;
} // if legends specify offset directly, use the maximum specified value
function offsets(legends, value) {
    let max = -Infinity;
    legends.forEach((item)=>{
        if (item.offset != null) max = Math.max(max, item.offset);
    });
    return max > -Infinity ? max : value;
}
function legendParams(g, orient, config, xb, yb, w, h) {
    const _ = lookup$1(config, orient), offset = offsets(g, _("offset", 0)), anchor = _("anchor", Start), mult = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;
    const p = {
        align: Each,
        bounds: _("bounds", Flush),
        columns: _("direction") === "vertical" ? 1 : g.length,
        padding: _("margin", 8),
        center: _("center"),
        nodirty: true
    };
    switch(orient){
        case Left:
            p.anchor = {
                x: Math.floor(xb.x1) - offset,
                column: End,
                y: mult * (h || xb.height() + 2 * xb.y1),
                row: anchor
            };
            break;
        case Right:
            p.anchor = {
                x: Math.ceil(xb.x2) + offset,
                y: mult * (h || xb.height() + 2 * xb.y1),
                row: anchor
            };
            break;
        case Top:
            p.anchor = {
                y: Math.floor(yb.y1) - offset,
                row: End,
                x: mult * (w || yb.width() + 2 * yb.x1),
                column: anchor
            };
            break;
        case Bottom:
            p.anchor = {
                y: Math.ceil(yb.y2) + offset,
                x: mult * (w || yb.width() + 2 * yb.x1),
                column: anchor
            };
            break;
        case TopLeft:
            p.anchor = {
                x: offset,
                y: offset
            };
            break;
        case TopRight:
            p.anchor = {
                x: w - offset,
                y: offset,
                column: End
            };
            break;
        case BottomLeft:
            p.anchor = {
                x: offset,
                y: h - offset,
                row: End
            };
            break;
        case BottomRight:
            p.anchor = {
                x: w - offset,
                y: h - offset,
                column: End,
                row: End
            };
            break;
    }
    return p;
}
function legendLayout(view, legend) {
    var item = legend.items[0], datum = item.datum, orient = item.orient, bounds = item.bounds, x = item.x, y = item.y, w, h; // cache current bounds for later comparison
    item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();
    bounds.clear(); // adjust legend to accommodate padding and title
    legendGroupLayout(view, item, item.items[0].items[0]); // aggregate bounds to determine size, and include origin
    bounds = legendBounds(item, bounds);
    w = 2 * item.padding;
    h = 2 * item.padding;
    if (!bounds.empty()) {
        w = Math.ceil(bounds.width() + w);
        h = Math.ceil(bounds.height() + h);
    }
    if (datum.type === Symbols) legendEntryLayout(item.items[0].items[0].items[0].items);
    if (orient !== None) {
        item.x = x = 0;
        item.y = y = 0;
    }
    item.width = w;
    item.height = h;
    (0, _vegaScenegraph.boundStroke)(bounds.set(x, y, x + w, y + h), item);
    item.mark.bounds.clear().union(bounds);
    return item;
}
function legendBounds(item, b) {
    // aggregate item bounds
    item.items.forEach((_)=>b.union(_.bounds)); // anchor to legend origin
    b.x1 = item.padding;
    b.y1 = item.padding;
    return b;
}
function legendGroupLayout(view, item, entry) {
    var pad = item.padding, ex = pad - entry.x, ey = pad - entry.y;
    if (!item.datum.title) {
        if (ex || ey) translate(view, entry, ex, ey);
    } else {
        var title = item.items[1].items[0], anchor = title.anchor, tpad = item.titlePadding || 0, tx = pad - title.x, ty = pad - title.y;
        switch(title.orient){
            case Left:
                ex += Math.ceil(title.bounds.width()) + tpad;
                break;
            case Right:
            case Bottom:
                break;
            default:
                ey += title.bounds.height() + tpad;
        }
        if (ex || ey) translate(view, entry, ex, ey);
        switch(title.orient){
            case Left:
                ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
                break;
            case Right:
                tx += legendTitleOffset(item, entry, title, End, 0, 0) + tpad;
                ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
                break;
            case Bottom:
                tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
                ty += legendTitleOffset(item, entry, title, End, -1, 0, 1) + tpad;
                break;
            default:
                tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
        }
        if (tx || ty) translate(view, title, tx, ty); // translate legend if title pushes into negative coordinates
        if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
            translate(view, entry, -tx, 0);
            translate(view, title, -tx, 0);
        }
    }
}
function legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {
    const grad = item.datum.type !== "symbol", vgrad = title.datum.vgrad, e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry, s = e.bounds[y ? "y2" : "x2"] - item.padding, u = vgrad && lr ? s : 0, v = vgrad && lr ? 0 : s, o = y <= 0 ? 0 : (0, _vegaScenegraph.multiLineOffset)(title);
    return Math.round(anchor === Start ? u : anchor === End ? v - o : 0.5 * (s - o));
}
function translate(view, item, dx, dy) {
    item.x += dx;
    item.y += dy;
    item.bounds.translate(dx, dy);
    item.mark.bounds.translate(dx, dy);
    view.dirty(item);
}
function legendEntryLayout(entries) {
    // get max widths for each column
    const widths = entries.reduce((w, g)=>{
        w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
        return w;
    }, {}); // set dimensions of legend entry groups
    entries.forEach((g)=>{
        g.width = widths[g.column];
        g.height = g.bounds.y2 - g.y;
    });
}
function titleLayout(view, mark, width, height, viewBounds) {
    var group = mark.items[0], frame = group.frame, orient = group.orient, anchor = group.anchor, offset = group.offset, padding = group.padding, title = group.items[0].items[0], subtitle = group.items[1] && group.items[1].items[0], end = orient === Left || orient === Right ? height : width, start = 0, x = 0, y = 0, sx = 0, sy = 0, pos;
    if (frame !== Group) orient === Left ? (start = viewBounds.y2, end = viewBounds.y1) : orient === Right ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);
    else if (orient === Left) start = height, end = 0;
    pos = anchor === Start ? start : anchor === End ? end : (start + end) / 2;
    if (subtitle && subtitle.text) {
        // position subtitle
        switch(orient){
            case Top:
            case Bottom:
                sy = title.bounds.height() + padding;
                break;
            case Left:
                sx = title.bounds.width() + padding;
                break;
            case Right:
                sx = -title.bounds.width() - padding;
                break;
        }
        tempBounds.clear().union(subtitle.bounds);
        tempBounds.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));
        if (set(subtitle, "x", sx) | set(subtitle, "y", sy)) {
            view.dirty(subtitle);
            subtitle.bounds.clear().union(tempBounds);
            subtitle.mark.bounds.clear().union(tempBounds);
            view.dirty(subtitle);
        }
        tempBounds.clear().union(subtitle.bounds);
    } else tempBounds.clear();
    tempBounds.union(title.bounds); // position title group
    switch(orient){
        case Top:
            x = pos;
            y = viewBounds.y1 - tempBounds.height() - offset;
            break;
        case Left:
            x = viewBounds.x1 - tempBounds.width() - offset;
            y = pos;
            break;
        case Right:
            x = viewBounds.x2 + tempBounds.width() + offset;
            y = pos;
            break;
        case Bottom:
            x = pos;
            y = viewBounds.y2 + offset;
            break;
        default:
            x = group.x;
            y = group.y;
    }
    if (set(group, "x", x) | set(group, "y", y)) {
        tempBounds.translate(x, y);
        view.dirty(group);
        group.bounds.clear().union(tempBounds);
        mark.bounds.clear().union(tempBounds);
        view.dirty(group);
    }
    return group.bounds;
}
/**
 * Layout view elements such as axes and legends.
 * Also performs size adjustments.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - Scenegraph mark of groups to layout.
 */ function ViewLayout(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(ViewLayout, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const view = pulse.dataflow;
        _.mark.items.forEach((group)=>{
            if (_.layout) trellisLayout(view, group, _.layout);
            layoutGroup(view, group, _);
        });
        return shouldReflow(_.mark.group) ? pulse.reflow() : pulse;
    }
});
function shouldReflow(group) {
    // We typically should reflow if layout is invoked (#2568), as child items
    // may have resized and reflow ensures group bounds are re-calculated.
    // However, legend entries have a special exception to avoid instability.
    // For example, if a selected legend symbol gains a stroke on hover,
    // we don't want to re-position subsequent elements in the legend.
    return group && group.mark.role !== "legend-entry";
}
function layoutGroup(view, group, _) {
    var items = group.items, width = Math.max(0, group.width || 0), height = Math.max(0, group.height || 0), viewBounds = new (0, _vegaScenegraph.Bounds)().set(0, 0, width, height), xBounds = viewBounds.clone(), yBounds = viewBounds.clone(), legends = [], title, mark, orient, b, i, n; // layout axes, gather legends, collect bounds
    for(i = 0, n = items.length; i < n; ++i){
        mark = items[i];
        switch(mark.role){
            case AxisRole:
                b = isYAxis(mark) ? xBounds : yBounds;
                b.union(axisLayout(view, mark, width, height));
                break;
            case TitleRole:
                title = mark;
                break;
            case LegendRole:
                legends.push(legendLayout(view, mark));
                break;
            case FrameRole:
            case ScopeRole:
            case RowHeader:
            case RowFooter:
            case RowTitle:
            case ColHeader:
            case ColFooter:
            case ColTitle:
                xBounds.union(mark.bounds);
                yBounds.union(mark.bounds);
                break;
            default:
                viewBounds.union(mark.bounds);
        }
    } // layout legends, adjust viewBounds
    if (legends.length) {
        // group legends by orient
        const l = {};
        legends.forEach((item)=>{
            orient = item.orient || Right;
            if (orient !== None) (l[orient] || (l[orient] = [])).push(item);
        }); // perform grid layout for each orient group
        for(const orient1 in l){
            const g = l[orient1];
            gridLayout(view, g, legendParams(g, orient1, _.legends, xBounds, yBounds, width, height));
        } // update view bounds
        legends.forEach((item)=>{
            const b = item.bounds;
            if (!b.equals(item._bounds)) {
                item.bounds = item._bounds;
                view.dirty(item); // dirty previous location
                item.bounds = b;
                view.dirty(item);
            }
            if (_.autosize && _.autosize.type === Fit) // For autosize fit, incorporate the orthogonal dimension only.
            // Legends that overrun the chart area will then be clipped;
            // otherwise the chart area gets reduced to nothing!
            switch(item.orient){
                case Left:
                case Right:
                    viewBounds.add(b.x1, 0).add(b.x2, 0);
                    break;
                case Top:
                case Bottom:
                    viewBounds.add(0, b.y1).add(0, b.y2);
            }
            else viewBounds.union(b);
        });
    } // combine bounding boxes
    viewBounds.union(xBounds).union(yBounds); // layout title, adjust bounds
    if (title) viewBounds.union(titleLayout(view, title, width, height, viewBounds));
     // override aggregated view bounds if content is clipped
    if (group.clip) viewBounds.set(0, 0, group.width || 0, group.height || 0);
     // perform size adjustment
    viewSizeLayout(view, group, viewBounds, _);
}
function viewSizeLayout(view, group, viewBounds, _) {
    const auto = _.autosize || {}, type = auto.type;
    if (view._autosize < 1 || !type) return;
    let viewWidth = view._width, viewHeight = view._height, width = Math.max(0, group.width || 0), left = Math.max(0, Math.ceil(-viewBounds.x1)), height = Math.max(0, group.height || 0), top = Math.max(0, Math.ceil(-viewBounds.y1));
    const right = Math.max(0, Math.ceil(viewBounds.x2 - width)), bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));
    if (auto.contains === Padding) {
        const padding = view.padding();
        viewWidth -= padding.left + padding.right;
        viewHeight -= padding.top + padding.bottom;
    }
    if (type === None) {
        left = 0;
        top = 0;
        width = viewWidth;
        height = viewHeight;
    } else if (type === Fit) {
        width = Math.max(0, viewWidth - left - right);
        height = Math.max(0, viewHeight - top - bottom);
    } else if (type === FitX) {
        width = Math.max(0, viewWidth - left - right);
        viewHeight = height + top + bottom;
    } else if (type === FitY) {
        viewWidth = width + left + right;
        height = Math.max(0, viewHeight - top - bottom);
    } else if (type === Pad) {
        viewWidth = width + left + right;
        viewHeight = height + top + bottom;
    }
    view._resizeView(viewWidth, viewHeight, width, height, [
        left,
        top
    ], auto.resize);
}

},{"vega-dataflow":"3NitK","vega-scenegraph":"jattk","vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jattk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Bounds", ()=>Bounds);
parcelHelpers.export(exports, "CanvasHandler", ()=>CanvasHandler);
parcelHelpers.export(exports, "CanvasRenderer", ()=>CanvasRenderer);
parcelHelpers.export(exports, "Gradient", ()=>Gradient);
parcelHelpers.export(exports, "GroupItem", ()=>GroupItem);
parcelHelpers.export(exports, "Handler", ()=>Handler);
parcelHelpers.export(exports, "Item", ()=>Item);
parcelHelpers.export(exports, "Marks", ()=>Marks);
parcelHelpers.export(exports, "RenderType", ()=>RenderType);
parcelHelpers.export(exports, "Renderer", ()=>Renderer);
parcelHelpers.export(exports, "ResourceLoader", ()=>ResourceLoader);
parcelHelpers.export(exports, "SVGHandler", ()=>SVGHandler);
parcelHelpers.export(exports, "SVGRenderer", ()=>SVGRenderer);
parcelHelpers.export(exports, "SVGStringRenderer", ()=>SVGStringRenderer);
parcelHelpers.export(exports, "Scenegraph", ()=>Scenegraph);
parcelHelpers.export(exports, "boundClip", ()=>boundClip);
parcelHelpers.export(exports, "boundContext", ()=>boundContext);
parcelHelpers.export(exports, "boundItem", ()=>boundItem);
parcelHelpers.export(exports, "boundMark", ()=>boundMark);
parcelHelpers.export(exports, "boundStroke", ()=>boundStroke);
parcelHelpers.export(exports, "domChild", ()=>domChild);
parcelHelpers.export(exports, "domClear", ()=>domClear);
parcelHelpers.export(exports, "domCreate", ()=>domCreate);
parcelHelpers.export(exports, "domFind", ()=>domFind);
parcelHelpers.export(exports, "font", ()=>font);
parcelHelpers.export(exports, "fontFamily", ()=>fontFamily);
parcelHelpers.export(exports, "fontSize", ()=>fontSize);
parcelHelpers.export(exports, "intersect", ()=>intersect);
parcelHelpers.export(exports, "intersectBoxLine", ()=>intersectBoxLine);
parcelHelpers.export(exports, "intersectPath", ()=>intersectPath);
parcelHelpers.export(exports, "intersectPoint", ()=>intersectPoint);
parcelHelpers.export(exports, "intersectRule", ()=>intersectRule);
parcelHelpers.export(exports, "lineHeight", ()=>lineHeight);
parcelHelpers.export(exports, "markup", ()=>markup);
parcelHelpers.export(exports, "multiLineOffset", ()=>multiLineOffset);
parcelHelpers.export(exports, "pathCurves", ()=>curves);
parcelHelpers.export(exports, "pathEqual", ()=>pathEqual);
parcelHelpers.export(exports, "pathParse", ()=>pathParse);
parcelHelpers.export(exports, "pathRectangle", ()=>vg_rect);
parcelHelpers.export(exports, "pathRender", ()=>pathRender);
parcelHelpers.export(exports, "pathSymbols", ()=>symbols);
parcelHelpers.export(exports, "pathTrail", ()=>vg_trail);
parcelHelpers.export(exports, "point", ()=>point);
parcelHelpers.export(exports, "renderModule", ()=>renderModule);
parcelHelpers.export(exports, "resetSVGClipId", ()=>resetSVGClipId);
parcelHelpers.export(exports, "resetSVGDefIds", ()=>resetSVGDefIds);
parcelHelpers.export(exports, "sceneEqual", ()=>sceneEqual);
parcelHelpers.export(exports, "sceneFromJSON", ()=>sceneFromJSON);
parcelHelpers.export(exports, "scenePickVisit", ()=>pickVisit);
parcelHelpers.export(exports, "sceneToJSON", ()=>sceneToJSON);
parcelHelpers.export(exports, "sceneVisit", ()=>visit);
parcelHelpers.export(exports, "sceneZOrder", ()=>zorder);
parcelHelpers.export(exports, "serializeXML", ()=>serializeXML);
parcelHelpers.export(exports, "textMetrics", ()=>textMetrics);
var _vegaUtil = require("vega-util");
var _d3Shape = require("d3-shape");
var _d3Path = require("d3-path");
var _vegaCanvas = require("vega-canvas");
var _vegaLoader = require("vega-loader");
var _vegaScale = require("vega-scale");
let gradient_id = 0;
function resetSVGGradientId() {
    gradient_id = 0;
}
const patternPrefix = "p_";
function isGradient(value) {
    return value && value.gradient;
}
function gradientRef(g, defs, base) {
    const type = g.gradient;
    let id = g.id, prefix = type === "radial" ? patternPrefix : ""; // check id, assign default values as needed
    if (!id) {
        id = g.id = "gradient_" + gradient_id++;
        if (type === "radial") {
            g.x1 = get(g.x1, 0.5);
            g.y1 = get(g.y1, 0.5);
            g.r1 = get(g.r1, 0);
            g.x2 = get(g.x2, 0.5);
            g.y2 = get(g.y2, 0.5);
            g.r2 = get(g.r2, 0.5);
            prefix = patternPrefix;
        } else {
            g.x1 = get(g.x1, 0);
            g.y1 = get(g.y1, 0);
            g.x2 = get(g.x2, 1);
            g.y2 = get(g.y2, 0);
        }
    } // register definition
    defs[id] = g; // return url reference
    return "url(" + (base || "") + "#" + prefix + id + ")";
}
function get(val, def) {
    return val != null ? val : def;
}
function Gradient(p0, p1) {
    var stops = [], gradient;
    return gradient = {
        gradient: "linear",
        x1: p0 ? p0[0] : 0,
        y1: p0 ? p0[1] : 0,
        x2: p1 ? p1[0] : 1,
        y2: p1 ? p1[1] : 0,
        stops: stops,
        stop: function(offset, color) {
            stops.push({
                offset: offset,
                color: color
            });
            return gradient;
        }
    };
}
const lookup = {
    "basis": {
        curve: (0, _d3Shape.curveBasis)
    },
    "basis-closed": {
        curve: (0, _d3Shape.curveBasisClosed)
    },
    "basis-open": {
        curve: (0, _d3Shape.curveBasisOpen)
    },
    "bundle": {
        curve: (0, _d3Shape.curveBundle),
        tension: "beta",
        value: 0.85
    },
    "cardinal": {
        curve: (0, _d3Shape.curveCardinal),
        tension: "tension",
        value: 0
    },
    "cardinal-open": {
        curve: (0, _d3Shape.curveCardinalOpen),
        tension: "tension",
        value: 0
    },
    "cardinal-closed": {
        curve: (0, _d3Shape.curveCardinalClosed),
        tension: "tension",
        value: 0
    },
    "catmull-rom": {
        curve: (0, _d3Shape.curveCatmullRom),
        tension: "alpha",
        value: 0.5
    },
    "catmull-rom-closed": {
        curve: (0, _d3Shape.curveCatmullRomClosed),
        tension: "alpha",
        value: 0.5
    },
    "catmull-rom-open": {
        curve: (0, _d3Shape.curveCatmullRomOpen),
        tension: "alpha",
        value: 0.5
    },
    "linear": {
        curve: (0, _d3Shape.curveLinear)
    },
    "linear-closed": {
        curve: (0, _d3Shape.curveLinearClosed)
    },
    "monotone": {
        horizontal: (0, _d3Shape.curveMonotoneY),
        vertical: (0, _d3Shape.curveMonotoneX)
    },
    "natural": {
        curve: (0, _d3Shape.curveNatural)
    },
    "step": {
        curve: (0, _d3Shape.curveStep)
    },
    "step-after": {
        curve: (0, _d3Shape.curveStepAfter)
    },
    "step-before": {
        curve: (0, _d3Shape.curveStepBefore)
    }
};
function curves(type, orientation, tension) {
    var entry = (0, _vegaUtil.hasOwnProperty)(lookup, type) && lookup[type], curve = null;
    if (entry) {
        curve = entry.curve || entry[orientation || "vertical"];
        if (entry.tension && tension != null) curve = curve[entry.tension](tension);
    }
    return curve;
}
// Path parsing and rendering code adapted from fabric.js -- Thanks!
const cmdlen = {
    m: 2,
    l: 2,
    h: 1,
    v: 1,
    c: 6,
    s: 4,
    q: 4,
    t: 2,
    a: 7
}, regexp = [
    /([MLHVCSQTAZmlhvcsqtaz])/g,
    /###/,
    /(\.\d+)(\.\d)/g,
    /(\d)([-+])/g,
    /\s|,|###/
];
function pathParse(pathstr) {
    const result = [];
    let curr, chunks, parsed, param, cmd, len, i, j, n, m; // First, break path into command sequence
    const path = pathstr.slice().replace(regexp[0], "###$1").split(regexp[1]).slice(1); // Next, parse each command in turn
    for(i = 0, n = path.length; i < n; ++i){
        curr = path[i];
        chunks = curr.slice(1).trim().replace(regexp[2], "$1###$2").replace(regexp[3], "$1###$2").split(regexp[4]);
        cmd = curr.charAt(0);
        parsed = [
            cmd
        ];
        for(j = 0, m = chunks.length; j < m; ++j)if ((param = +chunks[j]) === param) // not NaN
        parsed.push(param);
        len = cmdlen[cmd.toLowerCase()];
        if (parsed.length - 1 > len) {
            const m1 = parsed.length;
            j = 1;
            result.push([
                cmd
            ].concat(parsed.slice(j, j += len))); // handle implicit lineTo (#2803)
            cmd = cmd === "M" ? "L" : cmd === "m" ? "l" : cmd;
            for(; j < m1; j += len)result.push([
                cmd
            ].concat(parsed.slice(j, j + len)));
        } else result.push(parsed);
    }
    return result;
}
const DegToRad = Math.PI / 180;
const Epsilon = 1e-14;
const HalfPi = Math.PI / 2;
const Tau = Math.PI * 2;
const HalfSqrt3 = Math.sqrt(3) / 2;
var segmentCache = {};
var bezierCache = {};
var join = [].join; // Copied from Inkscape svgtopdf, thanks!
function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
    const key = join.call(arguments);
    if (segmentCache[key]) return segmentCache[key];
    const th = rotateX * DegToRad;
    const sin_th = Math.sin(th);
    const cos_th = Math.cos(th);
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    const px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
    const py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
    let pl = px * px / (rx * rx) + py * py / (ry * ry);
    if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
    }
    const a00 = cos_th / rx;
    const a01 = sin_th / rx;
    const a10 = -sin_th / ry;
    const a11 = cos_th / ry;
    const x0 = a00 * ox + a01 * oy;
    const y0 = a10 * ox + a11 * oy;
    const x1 = a00 * x + a01 * y;
    const y1 = a10 * x + a11 * y;
    const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
    let sfactor_sq = 1 / d - 0.25;
    if (sfactor_sq < 0) sfactor_sq = 0;
    let sfactor = Math.sqrt(sfactor_sq);
    if (sweep == large) sfactor = -sfactor;
    const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
    const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
    const th0 = Math.atan2(y0 - yc, x0 - xc);
    const th1 = Math.atan2(y1 - yc, x1 - xc);
    let th_arc = th1 - th0;
    if (th_arc < 0 && sweep === 1) th_arc += Tau;
    else if (th_arc > 0 && sweep === 0) th_arc -= Tau;
    const segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));
    const result = [];
    for(let i = 0; i < segs; ++i){
        const th2 = th0 + i * th_arc / segs;
        const th3 = th0 + (i + 1) * th_arc / segs;
        result[i] = [
            xc,
            yc,
            th2,
            th3,
            rx,
            ry,
            sin_th,
            cos_th
        ];
    }
    return segmentCache[key] = result;
}
function bezier(params) {
    const key = join.call(params);
    if (bezierCache[key]) return bezierCache[key];
    var cx = params[0], cy = params[1], th0 = params[2], th1 = params[3], rx = params[4], ry = params[5], sin_th = params[6], cos_th = params[7];
    const a00 = cos_th * rx;
    const a01 = -sin_th * ry;
    const a10 = sin_th * rx;
    const a11 = cos_th * ry;
    const cos_th0 = Math.cos(th0);
    const sin_th0 = Math.sin(th0);
    const cos_th1 = Math.cos(th1);
    const sin_th1 = Math.sin(th1);
    const th_half = 0.5 * (th1 - th0);
    const sin_th_h2 = Math.sin(th_half * 0.5);
    const t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
    const x1 = cx + cos_th0 - t * sin_th0;
    const y1 = cy + sin_th0 + t * cos_th0;
    const x3 = cx + cos_th1;
    const y3 = cy + sin_th1;
    const x2 = x3 + t * sin_th1;
    const y2 = y3 - t * cos_th1;
    return bezierCache[key] = [
        a00 * x1 + a01 * y1,
        a10 * x1 + a11 * y1,
        a00 * x2 + a01 * y2,
        a10 * x2 + a11 * y2,
        a00 * x3 + a01 * y3,
        a10 * x3 + a11 * y3
    ];
}
const temp = [
    "l",
    0,
    0,
    0,
    0,
    0,
    0,
    0
];
function scale$1(current, sX, sY) {
    const c = temp[0] = current[0];
    if (c === "a" || c === "A") {
        temp[1] = sX * current[1];
        temp[2] = sY * current[2];
        temp[3] = current[3];
        temp[4] = current[4];
        temp[5] = current[5];
        temp[6] = sX * current[6];
        temp[7] = sY * current[7];
    } else if (c === "h" || c === "H") temp[1] = sX * current[1];
    else if (c === "v" || c === "V") temp[1] = sY * current[1];
    else for(var i = 1, n = current.length; i < n; ++i)temp[i] = (i % 2 == 1 ? sX : sY) * current[i];
    return temp;
}
function pathRender(context, path, l, t, sX, sY) {
    var current, // current instruction
    previous = null, x = 0, // current x
    y = 0, // current y
    controlX = 0, // current control point x
    controlY = 0, // current control point y
    tempX, tempY, tempControlX, tempControlY;
    if (l == null) l = 0;
    if (t == null) t = 0;
    if (sX == null) sX = 1;
    if (sY == null) sY = sX;
    if (context.beginPath) context.beginPath();
    for(var i = 0, len = path.length; i < len; ++i){
        current = path[i];
        if (sX !== 1 || sY !== 1) current = scale$1(current, sX, sY);
        switch(current[0]){
            // first letter
            case "l":
                // lineto, relative
                x += current[1];
                y += current[2];
                context.lineTo(x + l, y + t);
                break;
            case "L":
                // lineto, absolute
                x = current[1];
                y = current[2];
                context.lineTo(x + l, y + t);
                break;
            case "h":
                // horizontal lineto, relative
                x += current[1];
                context.lineTo(x + l, y + t);
                break;
            case "H":
                // horizontal lineto, absolute
                x = current[1];
                context.lineTo(x + l, y + t);
                break;
            case "v":
                // vertical lineto, relative
                y += current[1];
                context.lineTo(x + l, y + t);
                break;
            case "V":
                // verical lineto, absolute
                y = current[1];
                context.lineTo(x + l, y + t);
                break;
            case "m":
                // moveTo, relative
                x += current[1];
                y += current[2];
                context.moveTo(x + l, y + t);
                break;
            case "M":
                // moveTo, absolute
                x = current[1];
                y = current[2];
                context.moveTo(x + l, y + t);
                break;
            case "c":
                // bezierCurveTo, relative
                tempX = x + current[5];
                tempY = y + current[6];
                controlX = x + current[3];
                controlY = y + current[4];
                context.bezierCurveTo(x + current[1] + l, y + current[2] + t, controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                break;
            case "C":
                // bezierCurveTo, absolute
                x = current[5];
                y = current[6];
                controlX = current[3];
                controlY = current[4];
                context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
                break;
            case "s":
                // shorthand cubic bezierCurveTo, relative
                // transform to absolute x,y
                tempX = x + current[3];
                tempY = y + current[4]; // calculate reflection of previous control points
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
                context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t); // set control point to 2nd one of this command
                // the first control point is assumed to be the reflection of
                // the second control point on the previous command relative
                // to the current point.
                controlX = x + current[1];
                controlY = y + current[2];
                x = tempX;
                y = tempY;
                break;
            case "S":
                // shorthand cubic bezierCurveTo, absolute
                tempX = current[3];
                tempY = current[4]; // calculate reflection of previous control points
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
                context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY; // set control point to 2nd one of this command
                // the first control point is assumed to be the reflection of
                // the second control point on the previous command relative
                // to the current point.
                controlX = current[1];
                controlY = current[2];
                break;
            case "q":
                // quadraticCurveTo, relative
                // transform to absolute x,y
                tempX = x + current[3];
                tempY = y + current[4];
                controlX = x + current[1];
                controlY = y + current[2];
                context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                break;
            case "Q":
                // quadraticCurveTo, absolute
                tempX = current[3];
                tempY = current[4];
                context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                controlX = current[1];
                controlY = current[2];
                break;
            case "t":
                // shorthand quadraticCurveTo, relative
                // transform to absolute x,y
                tempX = x + current[1];
                tempY = y + current[2];
                if (previous[0].match(/[QqTt]/) === null) {
                    // If there is no previous command or if the previous command was not a Q, q, T or t,
                    // assume the control point is coincident with the current point
                    controlX = x;
                    controlY = y;
                } else if (previous[0] === "t") {
                    // calculate reflection of previous control points for t
                    controlX = 2 * x - tempControlX;
                    controlY = 2 * y - tempControlY;
                } else if (previous[0] === "q") {
                    // calculate reflection of previous control points for q
                    controlX = 2 * x - controlX;
                    controlY = 2 * y - controlY;
                }
                tempControlX = controlX;
                tempControlY = controlY;
                context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                controlX = x + current[1];
                controlY = y + current[2];
                break;
            case "T":
                tempX = current[1];
                tempY = current[2]; // calculate reflection of previous control points
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
                context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                break;
            case "a":
                drawArc(context, x + l, y + t, [
                    current[1],
                    current[2],
                    current[3],
                    current[4],
                    current[5],
                    current[6] + x + l,
                    current[7] + y + t
                ]);
                x += current[6];
                y += current[7];
                break;
            case "A":
                drawArc(context, x + l, y + t, [
                    current[1],
                    current[2],
                    current[3],
                    current[4],
                    current[5],
                    current[6] + l,
                    current[7] + t
                ]);
                x = current[6];
                y = current[7];
                break;
            case "z":
            case "Z":
                context.closePath();
                break;
        }
        previous = current;
    }
}
function drawArc(context, x, y, coords) {
    const seg = segments(coords[5], coords[6], coords[0], coords[1], coords[3], coords[4], coords[2], x, y);
    for(let i = 0; i < seg.length; ++i){
        const bez = bezier(seg[i]);
        context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
    }
}
const Tan30 = 0.5773502691896257;
const builtins = {
    "circle": {
        draw: function(context, size) {
            const r = Math.sqrt(size) / 2;
            context.moveTo(r, 0);
            context.arc(0, 0, r, 0, Tau);
        }
    },
    "cross": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, s = r / 2.5;
            context.moveTo(-r, -s);
            context.lineTo(-r, s);
            context.lineTo(-s, s);
            context.lineTo(-s, r);
            context.lineTo(s, r);
            context.lineTo(s, s);
            context.lineTo(r, s);
            context.lineTo(r, -s);
            context.lineTo(s, -s);
            context.lineTo(s, -r);
            context.lineTo(-s, -r);
            context.lineTo(-s, -s);
            context.closePath();
        }
    },
    "diamond": {
        draw: function(context, size) {
            const r = Math.sqrt(size) / 2;
            context.moveTo(-r, 0);
            context.lineTo(0, -r);
            context.lineTo(r, 0);
            context.lineTo(0, r);
            context.closePath();
        }
    },
    "square": {
        draw: function(context, size) {
            var w = Math.sqrt(size), x = -w / 2;
            context.rect(x, x, w, w);
        }
    },
    "arrow": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, s = r / 7, t = r / 2.5, v = r / 8;
            context.moveTo(-s, r);
            context.lineTo(s, r);
            context.lineTo(s, -v);
            context.lineTo(t, -v);
            context.lineTo(0, -r);
            context.lineTo(-t, -v);
            context.lineTo(-s, -v);
            context.closePath();
        }
    },
    "wedge": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r, o = h - r * Tan30, b = r / 4;
            context.moveTo(0, -h - o);
            context.lineTo(-b, h - o);
            context.lineTo(b, h - o);
            context.closePath();
        }
    },
    "triangle": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r, o = h - r * Tan30;
            context.moveTo(0, -h - o);
            context.lineTo(-r, h - o);
            context.lineTo(r, h - o);
            context.closePath();
        }
    },
    "triangle-up": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
            context.moveTo(0, -h);
            context.lineTo(-r, h);
            context.lineTo(r, h);
            context.closePath();
        }
    },
    "triangle-down": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
            context.moveTo(0, h);
            context.lineTo(-r, -h);
            context.lineTo(r, -h);
            context.closePath();
        }
    },
    "triangle-right": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
            context.moveTo(h, 0);
            context.lineTo(-h, -r);
            context.lineTo(-h, r);
            context.closePath();
        }
    },
    "triangle-left": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
            context.moveTo(-h, 0);
            context.lineTo(h, -r);
            context.lineTo(h, r);
            context.closePath();
        }
    },
    "stroke": {
        draw: function(context, size) {
            const r = Math.sqrt(size) / 2;
            context.moveTo(-r, 0);
            context.lineTo(r, 0);
        }
    }
};
function symbols(_) {
    return (0, _vegaUtil.hasOwnProperty)(builtins, _) ? builtins[_] : customSymbol(_);
}
var custom = {};
function customSymbol(path) {
    if (!(0, _vegaUtil.hasOwnProperty)(custom, path)) {
        const parsed = pathParse(path);
        custom[path] = {
            draw: function(context, size) {
                pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);
            }
        };
    }
    return custom[path];
}
const C = 0.448084975506; // C = 1 - c
function rectangleX(d) {
    return d.x;
}
function rectangleY(d) {
    return d.y;
}
function rectangleWidth(d) {
    return d.width;
}
function rectangleHeight(d) {
    return d.height;
}
function number(_) {
    return typeof _ === "function" ? _ : ()=>+_;
}
function clamp(value, min, max) {
    return Math.max(min, Math.min(value, max));
}
function vg_rect() {
    var x = rectangleX, y = rectangleY, width = rectangleWidth, height = rectangleHeight, crTL = number(0), crTR = crTL, crBL = crTL, crBR = crTL, context = null;
    function rectangle(_, x0, y0) {
        var buffer, x1 = x0 != null ? x0 : +x.call(this, _), y1 = y0 != null ? y0 : +y.call(this, _), w = +width.call(this, _), h = +height.call(this, _), s = Math.min(w, h) / 2, tl = clamp(+crTL.call(this, _), 0, s), tr = clamp(+crTR.call(this, _), 0, s), bl = clamp(+crBL.call(this, _), 0, s), br = clamp(+crBR.call(this, _), 0, s);
        if (!context) context = buffer = (0, _d3Path.path)();
        if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) context.rect(x1, y1, w, h);
        else {
            var x2 = x1 + w, y2 = y1 + h;
            context.moveTo(x1 + tl, y1);
            context.lineTo(x2 - tr, y1);
            context.bezierCurveTo(x2 - C * tr, y1, x2, y1 + C * tr, x2, y1 + tr);
            context.lineTo(x2, y2 - br);
            context.bezierCurveTo(x2, y2 - C * br, x2 - C * br, y2, x2 - br, y2);
            context.lineTo(x1 + bl, y2);
            context.bezierCurveTo(x1 + C * bl, y2, x1, y2 - C * bl, x1, y2 - bl);
            context.lineTo(x1, y1 + tl);
            context.bezierCurveTo(x1, y1 + C * tl, x1 + C * tl, y1, x1 + tl, y1);
            context.closePath();
        }
        if (buffer) {
            context = null;
            return buffer + "" || null;
        }
    }
    rectangle.x = function(_) {
        if (arguments.length) {
            x = number(_);
            return rectangle;
        } else return x;
    };
    rectangle.y = function(_) {
        if (arguments.length) {
            y = number(_);
            return rectangle;
        } else return y;
    };
    rectangle.width = function(_) {
        if (arguments.length) {
            width = number(_);
            return rectangle;
        } else return width;
    };
    rectangle.height = function(_) {
        if (arguments.length) {
            height = number(_);
            return rectangle;
        } else return height;
    };
    rectangle.cornerRadius = function(tl, tr, br, bl) {
        if (arguments.length) {
            crTL = number(tl);
            crTR = tr != null ? number(tr) : crTL;
            crBR = br != null ? number(br) : crTL;
            crBL = bl != null ? number(bl) : crTR;
            return rectangle;
        } else return crTL;
    };
    rectangle.context = function(_) {
        if (arguments.length) {
            context = _ == null ? null : _;
            return rectangle;
        } else return context;
    };
    return rectangle;
}
function vg_trail() {
    var x, y, size, defined, context = null, ready, x1, y1, r1;
    function point(x2, y2, w2) {
        const r2 = w2 / 2;
        if (ready) {
            var ux = y1 - y2, uy = x2 - x1;
            if (ux || uy) {
                // get normal vector
                var ud = Math.sqrt(ux * ux + uy * uy), rx = (ux /= ud) * r1, ry = (uy /= ud) * r1, t = Math.atan2(uy, ux); // draw segment
                context.moveTo(x1 - rx, y1 - ry);
                context.lineTo(x2 - ux * r2, y2 - uy * r2);
                context.arc(x2, y2, r2, t - Math.PI, t);
                context.lineTo(x1 + rx, y1 + ry);
                context.arc(x1, y1, r1, t, t + Math.PI);
            } else context.arc(x2, y2, r2, 0, Tau);
            context.closePath();
        } else ready = 1;
        x1 = x2;
        y1 = y2;
        r1 = r2;
    }
    function trail(data) {
        var i, n = data.length, d, defined0 = false, buffer;
        if (context == null) context = buffer = (0, _d3Path.path)();
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) ready = 0;
            }
            if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
        }
        if (buffer) {
            context = null;
            return buffer + "" || null;
        }
    }
    trail.x = function(_) {
        if (arguments.length) {
            x = _;
            return trail;
        } else return x;
    };
    trail.y = function(_) {
        if (arguments.length) {
            y = _;
            return trail;
        } else return y;
    };
    trail.size = function(_) {
        if (arguments.length) {
            size = _;
            return trail;
        } else return size;
    };
    trail.defined = function(_) {
        if (arguments.length) {
            defined = _;
            return trail;
        } else return defined;
    };
    trail.context = function(_) {
        if (arguments.length) {
            if (_ == null) context = null;
            else context = _;
            return trail;
        } else return context;
    };
    return trail;
}
function value$1(a, b) {
    return a != null ? a : b;
}
const x = (item)=>item.x || 0, y = (item)=>item.y || 0, w = (item)=>item.width || 0, h = (item)=>item.height || 0, xw = (item)=>(item.x || 0) + (item.width || 0), yh = (item)=>(item.y || 0) + (item.height || 0), sa = (item)=>item.startAngle || 0, ea = (item)=>item.endAngle || 0, pa = (item)=>item.padAngle || 0, ir = (item)=>item.innerRadius || 0, or = (item)=>item.outerRadius || 0, cr = (item)=>item.cornerRadius || 0, tl = (item)=>value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0, tr = (item)=>value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0, br = (item)=>value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0, bl = (item)=>value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0, sz = (item)=>value$1(item.size, 64), ts = (item)=>item.size || 1, def = (item)=>!(item.defined === false), type = (item)=>symbols(item.shape || "circle");
const arcShape = (0, _d3Shape.arc)().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr), areavShape = (0, _d3Shape.area)().x(x).y1(y).y0(yh).defined(def), areahShape = (0, _d3Shape.area)().y(y).x1(x).x0(xw).defined(def), lineShape = (0, _d3Shape.line)().x(x).y(y).defined(def), rectShape = vg_rect().x(x).y(y).width(w).height(h).cornerRadius(tl, tr, br, bl), symbolShape = (0, _d3Shape.symbol)().type(type).size(sz), trailShape = vg_trail().x(x).y(y).defined(def).size(ts);
function hasCornerRadius(item) {
    return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
}
function arc$1(context, item) {
    return arcShape.context(context)(item);
}
function area$1(context, items) {
    const item = items[0], interp = item.interpolate || "linear";
    return (item.orient === "horizontal" ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context)(items);
}
function line$1(context, items) {
    const item = items[0], interp = item.interpolate || "linear";
    return lineShape.curve(curves(interp, item.orient, item.tension)).context(context)(items);
}
function rectangle(context, item, x, y) {
    return rectShape.context(context)(item, x, y);
}
function shape$1(context, item) {
    return (item.mark.shape || item.shape).context(context)(item);
}
function symbol$1(context, item) {
    return symbolShape.context(context)(item);
}
function trail$1(context, items) {
    return trailShape.context(context)(items);
}
var clip_id = 1;
function resetSVGClipId() {
    clip_id = 1;
}
function clip$1(renderer, item, size) {
    var clip = item.clip, defs = renderer._defs, id = item.clip_id || (item.clip_id = "clip" + clip_id++), c = defs.clipping[id] || (defs.clipping[id] = {
        id: id
    });
    if ((0, _vegaUtil.isFunction)(clip)) c.path = clip(null);
    else if (hasCornerRadius(size)) c.path = rectangle(null, size, 0, 0);
    else {
        c.width = size.width || 0;
        c.height = size.height || 0;
    }
    return "url(#" + id + ")";
}
function Bounds(b) {
    this.clear();
    if (b) this.union(b);
}
Bounds.prototype = {
    clone () {
        return new Bounds(this);
    },
    clear () {
        this.x1 = +Number.MAX_VALUE;
        this.y1 = +Number.MAX_VALUE;
        this.x2 = -Number.MAX_VALUE;
        this.y2 = -Number.MAX_VALUE;
        return this;
    },
    empty () {
        return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
    },
    equals (b) {
        return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;
    },
    set (x1, y1, x2, y2) {
        if (x2 < x1) {
            this.x2 = x1;
            this.x1 = x2;
        } else {
            this.x1 = x1;
            this.x2 = x2;
        }
        if (y2 < y1) {
            this.y2 = y1;
            this.y1 = y2;
        } else {
            this.y1 = y1;
            this.y2 = y2;
        }
        return this;
    },
    add (x, y) {
        if (x < this.x1) this.x1 = x;
        if (y < this.y1) this.y1 = y;
        if (x > this.x2) this.x2 = x;
        if (y > this.y2) this.y2 = y;
        return this;
    },
    expand (d) {
        this.x1 -= d;
        this.y1 -= d;
        this.x2 += d;
        this.y2 += d;
        return this;
    },
    round () {
        this.x1 = Math.floor(this.x1);
        this.y1 = Math.floor(this.y1);
        this.x2 = Math.ceil(this.x2);
        this.y2 = Math.ceil(this.y2);
        return this;
    },
    scale (s) {
        this.x1 *= s;
        this.y1 *= s;
        this.x2 *= s;
        this.y2 *= s;
        return this;
    },
    translate (dx, dy) {
        this.x1 += dx;
        this.x2 += dx;
        this.y1 += dy;
        this.y2 += dy;
        return this;
    },
    rotate (angle, x, y) {
        const p = this.rotatedPoints(angle, x, y);
        return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
    },
    rotatedPoints (angle, x, y) {
        var { x1 , y1 , x2 , y2  } = this, cos = Math.cos(angle), sin = Math.sin(angle), cx = x - x * cos + y * sin, cy = y - x * sin - y * cos;
        return [
            cos * x1 - sin * y1 + cx,
            sin * x1 + cos * y1 + cy,
            cos * x1 - sin * y2 + cx,
            sin * x1 + cos * y2 + cy,
            cos * x2 - sin * y1 + cx,
            sin * x2 + cos * y1 + cy,
            cos * x2 - sin * y2 + cx,
            sin * x2 + cos * y2 + cy
        ];
    },
    union (b) {
        if (b.x1 < this.x1) this.x1 = b.x1;
        if (b.y1 < this.y1) this.y1 = b.y1;
        if (b.x2 > this.x2) this.x2 = b.x2;
        if (b.y2 > this.y2) this.y2 = b.y2;
        return this;
    },
    intersect (b) {
        if (b.x1 > this.x1) this.x1 = b.x1;
        if (b.y1 > this.y1) this.y1 = b.y1;
        if (b.x2 < this.x2) this.x2 = b.x2;
        if (b.y2 < this.y2) this.y2 = b.y2;
        return this;
    },
    encloses (b) {
        return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;
    },
    alignsWith (b) {
        return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);
    },
    intersects (b) {
        return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
    },
    contains (x, y) {
        return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);
    },
    width () {
        return this.x2 - this.x1;
    },
    height () {
        return this.y2 - this.y1;
    }
};
function Item(mark) {
    this.mark = mark;
    this.bounds = this.bounds || new Bounds();
}
function GroupItem(mark) {
    Item.call(this, mark);
    this.items = this.items || [];
}
(0, _vegaUtil.inherits)(GroupItem, Item);
function ResourceLoader(customLoader) {
    this._pending = 0;
    this._loader = customLoader || (0, _vegaLoader.loader)();
}
function increment(loader) {
    loader._pending += 1;
}
function decrement(loader) {
    loader._pending -= 1;
}
ResourceLoader.prototype = {
    pending () {
        return this._pending;
    },
    sanitizeURL (uri) {
        const loader = this;
        increment(loader);
        return loader._loader.sanitize(uri, {
            context: "href"
        }).then((opt)=>{
            decrement(loader);
            return opt;
        }).catch(()=>{
            decrement(loader);
            return null;
        });
    },
    loadImage (uri) {
        const loader = this, Image = (0, _vegaCanvas.image)();
        increment(loader);
        return loader._loader.sanitize(uri, {
            context: "image"
        }).then((opt)=>{
            const url = opt.href;
            if (!url || !Image) throw {
                url: url
            };
            const img = new Image(); // set crossOrigin only if cors is defined; empty string sets anonymous mode
            // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin
            const cors = (0, _vegaUtil.hasOwnProperty)(opt, "crossOrigin") ? opt.crossOrigin : "anonymous";
            if (cors != null) img.crossOrigin = cors; // attempt to load image resource
            img.onload = ()=>decrement(loader);
            img.onerror = ()=>decrement(loader);
            img.src = url;
            return img;
        }).catch((e)=>{
            decrement(loader);
            return {
                complete: false,
                width: 0,
                height: 0,
                src: e && e.url || ""
            };
        });
    },
    ready () {
        const loader = this;
        return new Promise((accept)=>{
            function poll(value) {
                if (!loader.pending()) accept(value);
                else setTimeout(()=>{
                    poll(true);
                }, 10);
            }
            poll(false);
        });
    }
};
function boundStroke(bounds, item, miter) {
    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
        const sw = item.strokeWidth != null ? +item.strokeWidth : 1;
        bounds.expand(sw + (miter ? miterAdjustment(item, sw) : 0));
    }
    return bounds;
}
function miterAdjustment(item, strokeWidth) {
    // TODO: more sophisticated adjustment? Or miter support in boundContext?
    return item.strokeJoin && item.strokeJoin !== "miter" ? 0 : strokeWidth;
}
const circleThreshold = Tau - 1e-8;
let bounds, lx, ly, rot, ma, mb, mc, md;
const add = (x, y)=>bounds.add(x, y);
const addL = (x, y)=>add(lx = x, ly = y);
const addX = (x)=>add(x, bounds.y1);
const addY = (y)=>add(bounds.x1, y);
const px = (x, y)=>ma * x + mc * y;
const py = (x, y)=>mb * x + md * y;
const addp = (x, y)=>add(px(x, y), py(x, y));
const addpL = (x, y)=>addL(px(x, y), py(x, y));
function boundContext(_, deg) {
    bounds = _;
    if (deg) {
        rot = deg * DegToRad;
        ma = md = Math.cos(rot);
        mb = Math.sin(rot);
        mc = -mb;
    } else {
        ma = md = 1;
        rot = mb = mc = 0;
    }
    return context$1;
}
const context$1 = {
    beginPath () {},
    closePath () {},
    moveTo: addpL,
    lineTo: addpL,
    rect (x, y, w, h) {
        if (rot) {
            addp(x + w, y);
            addp(x + w, y + h);
            addp(x, y + h);
            addpL(x, y);
        } else {
            add(x + w, y + h);
            addL(x, y);
        }
    },
    quadraticCurveTo (x1, y1, x2, y2) {
        const px1 = px(x1, y1), py1 = py(x1, y1), px2 = px(x2, y2), py2 = py(x2, y2);
        quadExtrema(lx, px1, px2, addX);
        quadExtrema(ly, py1, py2, addY);
        addL(px2, py2);
    },
    bezierCurveTo (x1, y1, x2, y2, x3, y3) {
        const px1 = px(x1, y1), py1 = py(x1, y1), px2 = px(x2, y2), py2 = py(x2, y2), px3 = px(x3, y3), py3 = py(x3, y3);
        cubicExtrema(lx, px1, px2, px3, addX);
        cubicExtrema(ly, py1, py2, py3, addY);
        addL(px3, py3);
    },
    arc (cx, cy, r, sa, ea, ccw) {
        sa += rot;
        ea += rot; // store last point on path
        lx = r * Math.cos(ea) + cx;
        ly = r * Math.sin(ea) + cy;
        if (Math.abs(ea - sa) > circleThreshold) {
            // treat as full circle
            add(cx - r, cy - r);
            add(cx + r, cy + r);
        } else {
            const update = (a)=>add(r * Math.cos(a) + cx, r * Math.sin(a) + cy);
            let s, i; // sample end points
            update(sa);
            update(ea); // sample interior points aligned with 90 degrees
            if (ea !== sa) {
                sa = sa % Tau;
                if (sa < 0) sa += Tau;
                ea = ea % Tau;
                if (ea < 0) ea += Tau;
                if (ea < sa) {
                    ccw = !ccw; // flip direction
                    s = sa;
                    sa = ea;
                    ea = s; // swap end-points
                }
                if (ccw) {
                    ea -= Tau;
                    s = sa - sa % HalfPi;
                    for(i = 0; i < 4 && s > ea; ++i, s -= HalfPi)update(s);
                } else {
                    s = sa - sa % HalfPi + HalfPi;
                    for(i = 0; i < 4 && s < ea; ++i, s = s + HalfPi)update(s);
                }
            }
        }
    }
};
function quadExtrema(x0, x1, x2, cb) {
    const t = (x0 - x1) / (x0 + x2 - 2 * x1);
    if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);
}
function cubicExtrema(x0, x1, x2, x3, cb) {
    const a = x3 - x0 + 3 * x1 - 3 * x2, b = x0 + x2 - 2 * x1, c = x0 - x1;
    let t0 = 0, t1 = 0, r; // solve for parameter t
    if (Math.abs(a) > Epsilon) {
        // quadratic equation
        r = b * b + c * a;
        if (r >= 0) {
            r = Math.sqrt(r);
            t0 = (-b + r) / a;
            t1 = (-b - r) / a;
        }
    } else // linear equation
    t0 = 0.5 * c / b;
     // calculate position
    if (0 < t0 && t0 < 1) cb(cubic(t0, x0, x1, x2, x3));
    if (0 < t1 && t1 < 1) cb(cubic(t1, x0, x1, x2, x3));
}
function cubic(t, x0, x1, x2, x3) {
    const s = 1 - t, s2 = s * s, t2 = t * t;
    return s2 * s * x0 + 3 * s2 * t * x1 + 3 * s * t2 * x2 + t2 * t * x3;
}
var context = (context = (0, _vegaCanvas.canvas)(1, 1)) ? context.getContext("2d") : null;
const b = new Bounds();
function intersectPath(draw) {
    return function(item, brush) {
        // rely on (inaccurate) bounds intersection if no context
        if (!context) return true; // add path to offscreen graphics context
        draw(context, item); // get bounds intersection region
        b.clear().union(item.bounds).intersect(brush).round();
        const { x1 , y1 , x2 , y2  } = b; // iterate over intersection region
        // perform fine grained inclusion test
        for(let y = y1; y <= y2; ++y)for(let x = x1; x <= x2; ++x){
            if (context.isPointInPath(x, y)) return true;
        }
         // false if no hits in intersection region
        return false;
    };
}
function intersectPoint(item, box) {
    return box.contains(item.x || 0, item.y || 0);
}
function intersectRect(item, box) {
    const x = item.x || 0, y = item.y || 0, w = item.width || 0, h = item.height || 0;
    return box.intersects(b.set(x, y, x + w, y + h));
}
function intersectRule(item, box) {
    const x = item.x || 0, y = item.y || 0, x2 = item.x2 != null ? item.x2 : x, y2 = item.y2 != null ? item.y2 : y;
    return intersectBoxLine(box, x, y, x2, y2);
}
function intersectBoxLine(box, x, y, u, v) {
    const { x1 , y1 , x2 , y2  } = box, dx = u - x, dy = v - y;
    let t0 = 0, t1 = 1, p, q, r, e;
    for(e = 0; e < 4; ++e){
        if (e === 0) {
            p = -dx;
            q = -(x1 - x);
        }
        if (e === 1) {
            p = dx;
            q = x2 - x;
        }
        if (e === 2) {
            p = -dy;
            q = -(y1 - y);
        }
        if (e === 3) {
            p = dy;
            q = y2 - y;
        }
        if (Math.abs(p) < 1e-10 && q < 0) return false;
        r = q / p;
        if (p < 0) {
            if (r > t1) return false;
            else if (r > t0) t0 = r;
        } else if (p > 0) {
            if (r < t0) return false;
            else if (r < t1) t1 = r;
        }
    }
    return true;
}
function blend(context, item) {
    context.globalCompositeOperation = item.blend || "source-over";
}
function value(value, dflt) {
    return value == null ? dflt : value;
}
function addStops(gradient, stops) {
    const n = stops.length;
    for(let i = 0; i < n; ++i)gradient.addColorStop(stops[i].offset, stops[i].color);
    return gradient;
}
function gradient(context, spec, bounds) {
    const w = bounds.width(), h = bounds.height();
    let gradient;
    if (spec.gradient === "radial") gradient = context.createRadialGradient(bounds.x1 + value(spec.x1, 0.5) * w, bounds.y1 + value(spec.y1, 0.5) * h, Math.max(w, h) * value(spec.r1, 0), bounds.x1 + value(spec.x2, 0.5) * w, bounds.y1 + value(spec.y2, 0.5) * h, Math.max(w, h) * value(spec.r2, 0.5));
    else {
        // linear gradient
        const x1 = value(spec.x1, 0), y1 = value(spec.y1, 0), x2 = value(spec.x2, 1), y2 = value(spec.y2, 0);
        if (x1 === x2 || y1 === y2 || w === h) // axis aligned: use normal gradient
        gradient = context.createLinearGradient(bounds.x1 + x1 * w, bounds.y1 + y1 * h, bounds.x1 + x2 * w, bounds.y1 + y2 * h);
        else {
            // not axis aligned: render gradient into a pattern (#2365)
            // this allows us to use normalized bounding box coordinates
            const image = (0, _vegaCanvas.canvas)(Math.ceil(w), Math.ceil(h)), ictx = image.getContext("2d");
            ictx.scale(w, h);
            ictx.fillStyle = addStops(ictx.createLinearGradient(x1, y1, x2, y2), spec.stops);
            ictx.fillRect(0, 0, w, h);
            return context.createPattern(image, "no-repeat");
        }
    }
    return addStops(gradient, spec.stops);
}
function color(context, item, value) {
    return isGradient(value) ? gradient(context, value, item.bounds) : value;
}
function fill(context, item, opacity) {
    opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;
    if (opacity > 0) {
        context.globalAlpha = opacity;
        context.fillStyle = color(context, item, item.fill);
        return true;
    } else return false;
}
var Empty = [];
function stroke(context, item, opacity) {
    var lw = (lw = item.strokeWidth) != null ? lw : 1;
    if (lw <= 0) return false;
    opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;
    if (opacity > 0) {
        context.globalAlpha = opacity;
        context.strokeStyle = color(context, item, item.stroke);
        context.lineWidth = lw;
        context.lineCap = item.strokeCap || "butt";
        context.lineJoin = item.strokeJoin || "miter";
        context.miterLimit = item.strokeMiterLimit || 10;
        if (context.setLineDash) {
            context.setLineDash(item.strokeDash || Empty);
            context.lineDashOffset = item.strokeDashOffset || 0;
        }
        return true;
    } else return false;
}
function compare(a, b) {
    return a.zindex - b.zindex || a.index - b.index;
}
function zorder(scene) {
    if (!scene.zdirty) return scene.zitems;
    var items = scene.items, output = [], item, i, n;
    for(i = 0, n = items.length; i < n; ++i){
        item = items[i];
        item.index = i;
        if (item.zindex) output.push(item);
    }
    scene.zdirty = false;
    return scene.zitems = output.sort(compare);
}
function visit(scene, visitor) {
    var items = scene.items, i, n;
    if (!items || !items.length) return;
    const zitems = zorder(scene);
    if (zitems && zitems.length) {
        for(i = 0, n = items.length; i < n; ++i)if (!items[i].zindex) visitor(items[i]);
        items = zitems;
    }
    for(i = 0, n = items.length; i < n; ++i)visitor(items[i]);
}
function pickVisit(scene, visitor) {
    var items = scene.items, hit, i;
    if (!items || !items.length) return null;
    const zitems = zorder(scene);
    if (zitems && zitems.length) items = zitems;
    for(i = items.length; --i >= 0;){
        if (hit = visitor(items[i])) return hit;
    }
    if (items === zitems) {
        for(items = scene.items, i = items.length; --i >= 0;)if (!items[i].zindex) {
            if (hit = visitor(items[i])) return hit;
        }
    }
    return null;
}
function drawAll(path) {
    return function(context, scene, bounds) {
        visit(scene, (item)=>{
            if (!bounds || bounds.intersects(item.bounds)) drawPath(path, context, item, item);
        });
    };
}
function drawOne(path) {
    return function(context, scene, bounds) {
        if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) drawPath(path, context, scene.items[0], scene.items);
    };
}
function drawPath(path, context, item, items) {
    var opacity = item.opacity == null ? 1 : item.opacity;
    if (opacity === 0) return;
    if (path(context, items)) return;
    blend(context, item);
    if (item.fill && fill(context, item, opacity)) context.fill();
    if (item.stroke && stroke(context, item, opacity)) context.stroke();
}
function pick$1(test) {
    test = test || (0, _vegaUtil.truthy);
    return function(context, scene, x, y, gx, gy) {
        x *= context.pixelRatio;
        y *= context.pixelRatio;
        return pickVisit(scene, (item)=>{
            const b = item.bounds; // first hit test against bounding box
            if (b && !b.contains(gx, gy) || !b) return; // if in bounding box, perform more careful test
            if (test(context, item, x, y, gx, gy)) return item;
        });
    };
}
function hitPath(path, filled) {
    return function(context, o, x, y) {
        var item = Array.isArray(o) ? o[0] : o, fill = filled == null ? item.fill : filled, stroke = item.stroke && context.isPointInStroke, lw, lc;
        if (stroke) {
            lw = item.strokeWidth;
            lc = item.strokeCap;
            context.lineWidth = lw != null ? lw : 1;
            context.lineCap = lc != null ? lc : "butt";
        }
        return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);
    };
}
function pickPath(path) {
    return pick$1(hitPath(path));
}
function translate(x, y) {
    return "translate(" + x + "," + y + ")";
}
function rotate(a) {
    return "rotate(" + a + ")";
}
function scale(scaleX, scaleY) {
    return "scale(" + scaleX + "," + scaleY + ")";
}
function translateItem(item) {
    return translate(item.x || 0, item.y || 0);
}
function rotateItem(item) {
    return translate(item.x || 0, item.y || 0) + (item.angle ? " " + rotate(item.angle) : "");
}
function transformItem(item) {
    return translate(item.x || 0, item.y || 0) + (item.angle ? " " + rotate(item.angle) : "") + (item.scaleX || item.scaleY ? " " + scale(item.scaleX || 1, item.scaleY || 1) : "");
}
function markItemPath(type, shape, isect) {
    function attr(emit, item) {
        emit("transform", rotateItem(item));
        emit("d", shape(null, item));
    }
    function bound(bounds, item) {
        shape(boundContext(bounds, item.angle), item);
        return boundStroke(bounds, item).translate(item.x || 0, item.y || 0);
    }
    function draw(context, item) {
        var x = item.x || 0, y = item.y || 0, a = item.angle || 0;
        context.translate(x, y);
        if (a) context.rotate(a *= DegToRad);
        context.beginPath();
        shape(context, item);
        if (a) context.rotate(-a);
        context.translate(-x, -y);
    }
    return {
        type: type,
        tag: "path",
        nested: false,
        attr: attr,
        bound: bound,
        draw: drawAll(draw),
        pick: pickPath(draw),
        isect: isect || intersectPath(draw)
    };
}
var arc = markItemPath("arc", arc$1);
function pickArea(a, p) {
    var v = a[0].orient === "horizontal" ? p[1] : p[0], z = a[0].orient === "horizontal" ? "y" : "x", i = a.length, min = Infinity, hit, d;
    while(--i >= 0){
        if (a[i].defined === false) continue;
        d = Math.abs(a[i][z] - v);
        if (d < min) {
            min = d;
            hit = a[i];
        }
    }
    return hit;
}
function pickLine(a, p) {
    var t = Math.pow(a[0].strokeWidth || 1, 2), i = a.length, dx, dy, dd;
    while(--i >= 0){
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        if (dd < t) return a[i];
    }
    return null;
}
function pickTrail(a, p) {
    var i = a.length, dx, dy, dd;
    while(--i >= 0){
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        dx = a[i].size || 1;
        if (dd < dx * dx) return a[i];
    }
    return null;
}
function markMultiItemPath(type, shape, tip) {
    function attr(emit, item) {
        var items = item.mark.items;
        if (items.length) emit("d", shape(null, items));
    }
    function bound(bounds, mark) {
        var items = mark.items;
        if (items.length === 0) return bounds;
        else {
            shape(boundContext(bounds), items);
            return boundStroke(bounds, items[0]);
        }
    }
    function draw(context, items) {
        context.beginPath();
        shape(context, items);
    }
    const hit = hitPath(draw);
    function pick(context, scene, x, y, gx, gy) {
        var items = scene.items, b = scene.bounds;
        if (!items || !items.length || b && !b.contains(gx, gy)) return null;
        x *= context.pixelRatio;
        y *= context.pixelRatio;
        return hit(context, items, x, y) ? items[0] : null;
    }
    return {
        type: type,
        tag: "path",
        nested: true,
        attr: attr,
        bound: bound,
        draw: drawOne(draw),
        pick: pick,
        isect: intersectPoint,
        tip: tip
    };
}
var area = markMultiItemPath("area", area$1, pickArea);
function clip(context, scene) {
    var clip = scene.clip;
    context.save();
    if ((0, _vegaUtil.isFunction)(clip)) {
        context.beginPath();
        clip(context);
        context.clip();
    } else clipGroup(context, scene.group);
}
function clipGroup(context, group) {
    context.beginPath();
    hasCornerRadius(group) ? rectangle(context, group, 0, 0) : context.rect(0, 0, group.width || 0, group.height || 0);
    context.clip();
}
function offset$1(item) {
    const sw = value(item.strokeWidth, 1);
    return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
}
function attr$5(emit, item) {
    emit("transform", translateItem(item));
}
function emitRectangle(emit, item) {
    const off = offset$1(item);
    emit("d", rectangle(null, item, off, off));
}
function background(emit, item) {
    emit("class", "background");
    emit("aria-hidden", true);
    emitRectangle(emit, item);
}
function foreground(emit, item) {
    emit("class", "foreground");
    emit("aria-hidden", true);
    if (item.strokeForeground) emitRectangle(emit, item);
    else emit("d", "");
}
function content(emit, item, renderer) {
    const url = item.clip ? clip$1(renderer, item, item) : null;
    emit("clip-path", url);
}
function bound$5(bounds, group) {
    if (!group.clip && group.items) {
        const items = group.items, m = items.length;
        for(let j = 0; j < m; ++j)bounds.union(items[j].bounds);
    }
    if ((group.clip || group.width || group.height) && !group.noBound) bounds.add(0, 0).add(group.width || 0, group.height || 0);
    boundStroke(bounds, group);
    return bounds.translate(group.x || 0, group.y || 0);
}
function rectanglePath(context, group, x, y) {
    const off = offset$1(group);
    context.beginPath();
    rectangle(context, group, (x || 0) + off, (y || 0) + off);
}
const hitBackground = hitPath(rectanglePath);
const hitForeground = hitPath(rectanglePath, false);
const hitCorner = hitPath(rectanglePath, true);
function draw$4(context, scene, bounds) {
    visit(scene, (group)=>{
        const gx = group.x || 0, gy = group.y || 0, fore = group.strokeForeground, opacity = group.opacity == null ? 1 : group.opacity; // draw group background
        if ((group.stroke || group.fill) && opacity) {
            rectanglePath(context, group, gx, gy);
            blend(context, group);
            if (group.fill && fill(context, group, opacity)) context.fill();
            if (group.stroke && !fore && stroke(context, group, opacity)) context.stroke();
        } // setup graphics context, set clip and bounds
        context.save();
        context.translate(gx, gy);
        if (group.clip) clipGroup(context, group);
        if (bounds) bounds.translate(-gx, -gy); // draw group contents
        visit(group, (item)=>{
            this.draw(context, item, bounds);
        }); // restore graphics context
        if (bounds) bounds.translate(gx, gy);
        context.restore(); // draw group foreground
        if (fore && group.stroke && opacity) {
            rectanglePath(context, group, gx, gy);
            blend(context, group);
            if (stroke(context, group, opacity)) context.stroke();
        }
    });
}
function pick(context, scene, x, y, gx, gy) {
    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) return null;
    const cx = x * context.pixelRatio, cy = y * context.pixelRatio;
    return pickVisit(scene, (group)=>{
        let hit, dx, dy; // first hit test bounding box
        const b = group.bounds;
        if (b && !b.contains(gx, gy)) return; // passed bounds check, test rectangular clip
        dx = group.x || 0;
        dy = group.y || 0;
        const dw = dx + (group.width || 0), dh = dy + (group.height || 0), c = group.clip;
        if (c && (gx < dx || gx > dw || gy < dy || gy > dh)) return; // adjust coordinate system
        context.save();
        context.translate(dx, dy);
        dx = gx - dx;
        dy = gy - dy; // test background for rounded corner clip
        if (c && hasCornerRadius(group) && !hitCorner(context, group, cx, cy)) {
            context.restore();
            return null;
        }
        const fore = group.strokeForeground, ix = scene.interactive !== false; // hit test against group foreground
        if (ix && fore && group.stroke && hitForeground(context, group, cx, cy)) {
            context.restore();
            return group;
        } // hit test against contained marks
        hit = pickVisit(group, (mark)=>pickMark(mark, dx, dy) ? this.pick(mark, x, y, dx, dy) : null); // hit test against group background
        if (!hit && ix && (group.fill || !fore && group.stroke) && hitBackground(context, group, cx, cy)) hit = group;
         // restore state and return
        context.restore();
        return hit || null;
    });
}
function pickMark(mark, x, y) {
    return (mark.interactive !== false || mark.marktype === "group") && mark.bounds && mark.bounds.contains(x, y);
}
var group = {
    type: "group",
    tag: "g",
    nested: false,
    attr: attr$5,
    bound: bound$5,
    draw: draw$4,
    pick: pick,
    isect: intersectRect,
    content: content,
    background: background,
    foreground: foreground
};
var metadata = {
    "xmlns": "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    "version": "1.1"
};
function getImage(item, renderer) {
    var image = item.image;
    if (!image || item.url && item.url !== image.url) {
        image = {
            complete: false,
            width: 0,
            height: 0
        };
        renderer.loadImage(item.url).then((image)=>{
            item.image = image;
            item.image.url = item.url;
        });
    }
    return image;
}
function imageWidth(item, image) {
    return item.width != null ? item.width : !image || !image.width ? 0 : item.aspect !== false && item.height ? item.height * image.width / image.height : image.width;
}
function imageHeight(item, image) {
    return item.height != null ? item.height : !image || !image.height ? 0 : item.aspect !== false && item.width ? item.width * image.height / image.width : image.height;
}
function imageXOffset(align, w) {
    return align === "center" ? w / 2 : align === "right" ? w : 0;
}
function imageYOffset(baseline, h) {
    return baseline === "middle" ? h / 2 : baseline === "bottom" ? h : 0;
}
function attr$4(emit, item, renderer) {
    const img = getImage(item, renderer), w = imageWidth(item, img), h = imageHeight(item, img), x = (item.x || 0) - imageXOffset(item.align, w), y = (item.y || 0) - imageYOffset(item.baseline, h), i = !img.src && img.toDataURL ? img.toDataURL() : img.src || "";
    emit("href", i, metadata["xmlns:xlink"], "xlink:href");
    emit("transform", translate(x, y));
    emit("width", w);
    emit("height", h);
    emit("preserveAspectRatio", item.aspect === false ? "none" : "xMidYMid");
}
function bound$4(bounds, item) {
    const img = item.image, w = imageWidth(item, img), h = imageHeight(item, img), x = (item.x || 0) - imageXOffset(item.align, w), y = (item.y || 0) - imageYOffset(item.baseline, h);
    return bounds.set(x, y, x + w, y + h);
}
function draw$3(context, scene, bounds) {
    visit(scene, (item)=>{
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        const img = getImage(item, this);
        let w = imageWidth(item, img);
        let h = imageHeight(item, img);
        if (w === 0 || h === 0) return; // early exit
        let x = (item.x || 0) - imageXOffset(item.align, w), y = (item.y || 0) - imageYOffset(item.baseline, h), opacity, ar0, ar1, t;
        if (item.aspect !== false) {
            ar0 = img.width / img.height;
            ar1 = item.width / item.height;
            if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
                if (ar1 < ar0) {
                    t = w / ar0;
                    y += (h - t) / 2;
                    h = t;
                } else {
                    t = h * ar0;
                    x += (w - t) / 2;
                    w = t;
                }
            }
        }
        if (img.complete || img.toDataURL) {
            blend(context, item);
            context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
            context.imageSmoothingEnabled = item.smooth !== false;
            context.drawImage(img, x, y, w, h);
        }
    });
}
var image = {
    type: "image",
    tag: "image",
    nested: false,
    attr: attr$4,
    bound: bound$4,
    draw: draw$3,
    pick: pick$1(),
    isect: (0, _vegaUtil.truthy),
    // bounds check is sufficient
    get: getImage,
    xOffset: imageXOffset,
    yOffset: imageYOffset
};
var line = markMultiItemPath("line", line$1, pickLine);
function attr$3(emit, item) {
    var sx = item.scaleX || 1, sy = item.scaleY || 1;
    if (sx !== 1 || sy !== 1) emit("vector-effect", "non-scaling-stroke");
    emit("transform", transformItem(item));
    emit("d", item.path);
}
function path$1(context, item) {
    var path = item.path;
    if (path == null) return true;
    var x = item.x || 0, y = item.y || 0, sx = item.scaleX || 1, sy = item.scaleY || 1, a = (item.angle || 0) * DegToRad, cache = item.pathCache;
    if (!cache || cache.path !== path) (item.pathCache = cache = pathParse(path)).path = path;
    if (a && context.rotate && context.translate) {
        context.translate(x, y);
        context.rotate(a);
        pathRender(context, cache, 0, 0, sx, sy);
        context.rotate(-a);
        context.translate(-x, -y);
    } else pathRender(context, cache, x, y, sx, sy);
}
function bound$3(bounds, item) {
    return path$1(boundContext(bounds, item.angle), item) ? bounds.set(0, 0, 0, 0) : boundStroke(bounds, item, true);
}
var path$2 = {
    type: "path",
    tag: "path",
    nested: false,
    attr: attr$3,
    bound: bound$3,
    draw: drawAll(path$1),
    pick: pickPath(path$1),
    isect: intersectPath(path$1)
};
function attr$2(emit, item) {
    emit("d", rectangle(null, item));
}
function bound$2(bounds, item) {
    var x, y;
    return boundStroke(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);
}
function draw$2(context, item) {
    context.beginPath();
    rectangle(context, item);
}
var rect = {
    type: "rect",
    tag: "path",
    nested: false,
    attr: attr$2,
    bound: bound$2,
    draw: drawAll(draw$2),
    pick: pickPath(draw$2),
    isect: intersectRect
};
function attr$1(emit, item) {
    emit("transform", translateItem(item));
    emit("x2", item.x2 != null ? item.x2 - (item.x || 0) : 0);
    emit("y2", item.y2 != null ? item.y2 - (item.y || 0) : 0);
}
function bound$1(bounds, item) {
    var x1, y1;
    return boundStroke(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);
}
function path(context, item, opacity) {
    var x1, y1, x2, y2;
    if (item.stroke && stroke(context, item, opacity)) {
        x1 = item.x || 0;
        y1 = item.y || 0;
        x2 = item.x2 != null ? item.x2 : x1;
        y2 = item.y2 != null ? item.y2 : y1;
        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        return true;
    }
    return false;
}
function draw$1(context, scene, bounds) {
    visit(scene, (item)=>{
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        var opacity = item.opacity == null ? 1 : item.opacity;
        if (opacity && path(context, item, opacity)) {
            blend(context, item);
            context.stroke();
        }
    });
}
function hit$1(context, item, x, y) {
    if (!context.isPointInStroke) return false;
    return path(context, item, 1) && context.isPointInStroke(x, y);
}
var rule = {
    type: "rule",
    tag: "line",
    nested: false,
    attr: attr$1,
    bound: bound$1,
    draw: draw$1,
    pick: pick$1(hit$1),
    isect: intersectRule
};
var shape = markItemPath("shape", shape$1);
var symbol = markItemPath("symbol", symbol$1, intersectPoint);
const widthCache = (0, _vegaUtil.lruCache)();
var textMetrics = {
    height: fontSize,
    measureWidth: measureWidth,
    estimateWidth: estimateWidth,
    width: estimateWidth,
    canvas: useCanvas
};
useCanvas(true);
function useCanvas(use) {
    textMetrics.width = use && context ? measureWidth : estimateWidth;
} // make simple estimate if no canvas is available
function estimateWidth(item, text) {
    return _estimateWidth(textValue(item, text), fontSize(item));
}
function _estimateWidth(text, currentFontHeight) {
    return ~~(0.8 * text.length * currentFontHeight);
} // measure text width if canvas is available
function measureWidth(item, text) {
    return fontSize(item) <= 0 || !(text = textValue(item, text)) ? 0 : _measureWidth(text, font(item));
}
function _measureWidth(text, currentFont) {
    const key = `(${currentFont}) ${text}`;
    let width = widthCache.get(key);
    if (width === undefined) {
        context.font = currentFont;
        width = context.measureText(text).width;
        widthCache.set(key, width);
    }
    return width;
}
function fontSize(item) {
    return item.fontSize != null ? +item.fontSize || 0 : 11;
}
function lineHeight(item) {
    return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
}
function lineArray(_) {
    return (0, _vegaUtil.isArray)(_) ? _.length > 1 ? _ : _[0] : _;
}
function textLines(item) {
    return lineArray(item.lineBreak && item.text && !(0, _vegaUtil.isArray)(item.text) ? item.text.split(item.lineBreak) : item.text);
}
function multiLineOffset(item) {
    const tl = textLines(item);
    return ((0, _vegaUtil.isArray)(tl) ? tl.length - 1 : 0) * lineHeight(item);
}
function textValue(item, line) {
    const text = line == null ? "" : (line + "").trim();
    return item.limit > 0 && text.length ? truncate(item, text) : text;
}
function widthGetter(item) {
    if (textMetrics.width === measureWidth) {
        // we are using canvas
        const currentFont = font(item);
        return (text)=>_measureWidth(text, currentFont);
    } else {
        // we are relying on estimates
        const currentFontHeight = fontSize(item);
        return (text)=>_estimateWidth(text, currentFontHeight);
    }
}
function truncate(item, text) {
    var limit = +item.limit, width = widthGetter(item);
    if (width(text) < limit) return text;
    var ellipsis = item.ellipsis || "…", rtl = item.dir === "rtl", lo = 0, hi = text.length, mid;
    limit -= width(ellipsis);
    if (rtl) {
        while(lo < hi){
            mid = lo + hi >>> 1;
            if (width(text.slice(mid)) > limit) lo = mid + 1;
            else hi = mid;
        }
        return ellipsis + text.slice(lo);
    } else {
        while(lo < hi){
            mid = 1 + (lo + hi >>> 1);
            if (width(text.slice(0, mid)) < limit) lo = mid;
            else hi = mid - 1;
        }
        return text.slice(0, lo) + ellipsis;
    }
}
function fontFamily(item, quote) {
    var font = item.font;
    return (quote && font ? String(font).replace(/"/g, "'") : font) || "sans-serif";
}
function font(item, quote) {
    return "" + (item.fontStyle ? item.fontStyle + " " : "") + (item.fontVariant ? item.fontVariant + " " : "") + (item.fontWeight ? item.fontWeight + " " : "") + fontSize(item) + "px " + fontFamily(item, quote);
}
function offset(item) {
    // perform our own font baseline calculation
    // why? not all browsers support SVG 1.1 'alignment-baseline' :(
    // this also ensures consistent layout across renderers
    var baseline = item.baseline, h = fontSize(item);
    return Math.round(baseline === "top" ? 0.79 * h : baseline === "middle" ? 0.30 * h : baseline === "bottom" ? -0.21 * h : baseline === "line-top" ? 0.29 * h + 0.5 * lineHeight(item) : baseline === "line-bottom" ? 0.29 * h - 0.5 * lineHeight(item) : 0);
}
const textAlign = {
    "left": "start",
    "center": "middle",
    "right": "end"
};
const tempBounds = new Bounds();
function anchorPoint(item) {
    var x = item.x || 0, y = item.y || 0, r = item.radius || 0, t;
    if (r) {
        t = (item.theta || 0) - HalfPi;
        x += r * Math.cos(t);
        y += r * Math.sin(t);
    }
    tempBounds.x1 = x;
    tempBounds.y1 = y;
    return tempBounds;
}
function attr(emit, item) {
    var dx = item.dx || 0, dy = (item.dy || 0) + offset(item), p = anchorPoint(item), x = p.x1, y = p.y1, a = item.angle || 0, t;
    emit("text-anchor", textAlign[item.align] || "start");
    if (a) {
        t = translate(x, y) + " " + rotate(a);
        if (dx || dy) t += " " + translate(dx, dy);
    } else t = translate(x + dx, y + dy);
    emit("transform", t);
}
function bound(bounds, item, mode) {
    var h = textMetrics.height(item), a = item.align, p = anchorPoint(item), x = p.x1, y = p.y1, dx = item.dx || 0, dy = (item.dy || 0) + offset(item) - Math.round(0.8 * h), // use 4/5 offset
    tl = textLines(item), w; // get dimensions
    if ((0, _vegaUtil.isArray)(tl)) {
        // multi-line text
        h += lineHeight(item) * (tl.length - 1);
        w = tl.reduce((w, t)=>Math.max(w, textMetrics.width(item, t)), 0);
    } else // single-line text
    w = textMetrics.width(item, tl);
     // horizontal alignment
    if (a === "center") dx -= w / 2;
    else if (a === "right") dx -= w;
    bounds.set(dx += x, dy += y, dx + w, dy + h);
    if (item.angle && !mode) bounds.rotate(item.angle * DegToRad, x, y);
    else if (mode === 2) return bounds.rotatedPoints(item.angle * DegToRad, x, y);
    return bounds;
}
function draw(context, scene, bounds) {
    visit(scene, (item)=>{
        var opacity = item.opacity == null ? 1 : item.opacity, p, x, y, i, lh, tl, str;
        if (bounds && !bounds.intersects(item.bounds) || opacity === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;
        context.font = font(item);
        context.textAlign = item.align || "left";
        p = anchorPoint(item);
        x = p.x1, y = p.y1;
        if (item.angle) {
            context.save();
            context.translate(x, y);
            context.rotate(item.angle * DegToRad);
            x = y = 0; // reset x, y
        }
        x += item.dx || 0;
        y += (item.dy || 0) + offset(item);
        tl = textLines(item);
        blend(context, item);
        if ((0, _vegaUtil.isArray)(tl)) {
            lh = lineHeight(item);
            for(i = 0; i < tl.length; ++i){
                str = textValue(item, tl[i]);
                if (item.fill && fill(context, item, opacity)) context.fillText(str, x, y);
                if (item.stroke && stroke(context, item, opacity)) context.strokeText(str, x, y);
                y += lh;
            }
        } else {
            str = textValue(item, tl);
            if (item.fill && fill(context, item, opacity)) context.fillText(str, x, y);
            if (item.stroke && stroke(context, item, opacity)) context.strokeText(str, x, y);
        }
        if (item.angle) context.restore();
    });
}
function hit(context, item, x, y, gx, gy) {
    if (item.fontSize <= 0) return false;
    if (!item.angle) return true; // bounds sufficient if no rotation
    // project point into space of unrotated bounds
    var p = anchorPoint(item), ax = p.x1, ay = p.y1, b = bound(tempBounds, item, 1), a = -item.angle * DegToRad, cos = Math.cos(a), sin = Math.sin(a), px = cos * gx - sin * gy + (ax - cos * ax + sin * ay), py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);
    return b.contains(px, py);
}
function intersectText(item, box) {
    const p = bound(tempBounds, item, 2);
    return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
}
var text = {
    type: "text",
    tag: "text",
    nested: false,
    attr: attr,
    bound: bound,
    draw: draw,
    pick: pick$1(hit),
    isect: intersectText
};
var trail = markMultiItemPath("trail", trail$1, pickTrail);
var Marks = {
    arc: arc,
    area: area,
    group: group,
    image: image,
    line: line,
    path: path$2,
    rect: rect,
    rule: rule,
    shape: shape,
    symbol: symbol,
    text: text,
    trail: trail
};
function boundItem(item, func, opt) {
    var type = Marks[item.mark.marktype], bound = func || type.bound;
    if (type.nested) item = item.mark;
    return bound(item.bounds || (item.bounds = new Bounds()), item, opt);
}
var DUMMY = {
    mark: null
};
function boundMark(mark, bounds, opt) {
    var type = Marks[mark.marktype], bound = type.bound, items = mark.items, hasItems = items && items.length, i, n, item, b;
    if (type.nested) {
        if (hasItems) item = items[0];
        else {
            // no items, fake it
            DUMMY.mark = mark;
            item = DUMMY;
        }
        b = boundItem(item, bound, opt);
        bounds = bounds && bounds.union(b) || b;
        return bounds;
    }
    bounds = bounds || mark.bounds && mark.bounds.clear() || new Bounds();
    if (hasItems) for(i = 0, n = items.length; i < n; ++i)bounds.union(boundItem(items[i], bound, opt));
    return mark.bounds = bounds;
}
const keys = [
    "marktype",
    "name",
    "role",
    "interactive",
    "clip",
    "items",
    "zindex",
    "x",
    "y",
    "width",
    "height",
    "align",
    "baseline",
    "fill",
    "fillOpacity",
    "opacity",
    "blend",
    "stroke",
    "strokeOpacity",
    "strokeWidth",
    "strokeCap",
    "strokeDash",
    "strokeDashOffset",
    "strokeForeground",
    "strokeOffset",
    "startAngle",
    "endAngle",
    "innerRadius",
    "outerRadius",
    "cornerRadius",
    "padAngle",
    "cornerRadiusTopLeft",
    "cornerRadiusTopRight",
    "cornerRadiusBottomLeft",
    "cornerRadiusBottomRight",
    "interpolate",
    "tension",
    "orient",
    "defined",
    "url",
    "aspect",
    "smooth",
    "path",
    "scaleX",
    "scaleY",
    "x2",
    "y2",
    "size",
    "shape",
    "text",
    "angle",
    "theta",
    "radius",
    "dir",
    "dx",
    "dy",
    "ellipsis",
    "limit",
    "lineBreak",
    "lineHeight",
    "font",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "fontVariant",
    "description",
    "aria",
    "ariaRole",
    "ariaRoleDescription" // aria
];
function sceneToJSON(scene, indent) {
    return JSON.stringify(scene, keys, indent);
}
function sceneFromJSON(json) {
    const scene = typeof json === "string" ? JSON.parse(json) : json;
    return initialize(scene);
}
function initialize(scene) {
    var type = scene.marktype, items = scene.items, parent, i, n;
    if (items) for(i = 0, n = items.length; i < n; ++i){
        parent = type ? "mark" : "group";
        items[i][parent] = scene;
        if (items[i].zindex) items[i][parent].zdirty = true;
        if ("group" === (type || parent)) initialize(items[i]);
    }
    if (type) boundMark(scene);
    return scene;
}
function Scenegraph(scene) {
    if (arguments.length) this.root = sceneFromJSON(scene);
    else {
        this.root = createMark({
            marktype: "group",
            name: "root",
            role: "frame"
        });
        this.root.items = [
            new GroupItem(this.root)
        ];
    }
}
Scenegraph.prototype = {
    toJSON (indent) {
        return sceneToJSON(this.root, indent || 0);
    },
    mark (markdef, group, index) {
        group = group || this.root.items[0];
        const mark = createMark(markdef, group);
        group.items[index] = mark;
        if (mark.zindex) mark.group.zdirty = true;
        return mark;
    }
};
function createMark(def, group) {
    const mark = {
        bounds: new Bounds(),
        clip: !!def.clip,
        group: group,
        interactive: def.interactive === false ? false : true,
        items: [],
        marktype: def.marktype,
        name: def.name || undefined,
        role: def.role || undefined,
        zindex: def.zindex || 0
    }; // add accessibility properties if defined
    if (def.aria != null) mark.aria = def.aria;
    if (def.description) mark.description = def.description;
    return mark;
}
// create a new DOM element
function domCreate(doc, tag, ns) {
    if (!doc && typeof document !== "undefined" && document.createElement) doc = document;
    return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
} // find first child element with matching tag
function domFind(el, tag) {
    tag = tag.toLowerCase();
    var nodes = el.childNodes, i = 0, n = nodes.length;
    for(; i < n; ++i)if (nodes[i].tagName.toLowerCase() === tag) return nodes[i];
} // retrieve child element at given index
// create & insert if doesn't exist or if tags do not match
function domChild(el, index, tag, ns) {
    var a = el.childNodes[index], b;
    if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
        b = a || null;
        a = domCreate(el.ownerDocument, tag, ns);
        el.insertBefore(a, b);
    }
    return a;
} // remove all child elements at or above the given index
function domClear(el, index) {
    var nodes = el.childNodes, curr = nodes.length;
    while(curr > index)el.removeChild(nodes[--curr]);
    return el;
} // generate css class name for mark
function cssClass(mark) {
    return "mark-" + mark.marktype + (mark.role ? " role-" + mark.role : "") + (mark.name ? " " + mark.name : "");
}
function point(event, el) {
    const rect = el.getBoundingClientRect();
    return [
        event.clientX - rect.left - (el.clientLeft || 0),
        event.clientY - rect.top - (el.clientTop || 0)
    ];
}
function resolveItem(item, event, el, origin) {
    var mark = item && item.mark, mdef, p;
    if (mark && (mdef = Marks[mark.marktype]).tip) {
        p = point(event, el);
        p[0] -= origin[0];
        p[1] -= origin[1];
        while(item = item.mark.group){
            p[0] -= item.x || 0;
            p[1] -= item.y || 0;
        }
        item = mdef.tip(mark.items, p);
    }
    return item;
}
/**
 * Create a new Handler instance.
 * @param {object} [customLoader] - Optional loader instance for
 *   href URL sanitization. If not specified, a standard loader
 *   instance will be generated.
 * @param {function} [customTooltip] - Optional tooltip handler
 *   function for custom tooltip display.
 * @constructor
 */ function Handler(customLoader, customTooltip) {
    this._active = null;
    this._handlers = {};
    this._loader = customLoader || (0, _vegaLoader.loader)();
    this._tooltip = customTooltip || defaultTooltip;
} // The default tooltip display handler.
// Sets the HTML title attribute on the visualization container.
function defaultTooltip(handler, event, item, value) {
    handler.element().setAttribute("title", value || "");
}
Handler.prototype = {
    /**
   * Initialize a new Handler instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {object} [obj] - Optional context object that should serve as
   *   the "this" context for event callbacks.
   * @return {Handler} - This handler instance.
   */ initialize (el, origin, obj) {
        this._el = el;
        this._obj = obj || null;
        return this.origin(origin);
    },
    /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */ element () {
        return this._el;
    },
    /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */ canvas () {
        return this._el && this._el.firstChild;
    },
    /**
   * Get / set the origin coordinates of the visualization.
   */ origin (origin) {
        if (arguments.length) {
            this._origin = origin || [
                0,
                0
            ];
            return this;
        } else return this._origin.slice();
    },
    /**
   * Get / set the scenegraph root.
   */ scene (scene) {
        if (!arguments.length) return this._scene;
        this._scene = scene;
        return this;
    },
    /**
   * Add an event handler. Subclasses should override this method.
   */ on () /*type, handler*/ {},
    /**
   * Remove an event handler. Subclasses should override this method.
   */ off () /*type, handler*/ {},
    /**
   * Utility method for finding the array index of an event handler.
   * @param {Array} h - An array of registered event handlers.
   * @param {string} type - The event type.
   * @param {function} handler - The event handler instance to find.
   * @return {number} - The handler's array index or -1 if not registered.
   */ _handlerIndex (h, type, handler) {
        for(let i = h ? h.length : 0; --i >= 0;){
            if (h[i].type === type && (!handler || h[i].handler === handler)) return i;
        }
        return -1;
    },
    /**
   * Returns an array with registered event handlers.
   * @param {string} [type] - The event type to query. Any annotations
   *   are ignored; for example, for the argument "click.foo", ".foo" will
   *   be ignored and the method returns all "click" handlers. If type is
   *   null or unspecified, this method returns handlers for all types.
   * @return {Array} - A new array containing all registered event handlers.
   */ handlers (type) {
        const h = this._handlers, a = [];
        if (type) a.push(...h[this.eventName(type)]);
        else for(const k in h)a.push(...h[k]);
        return a;
    },
    /**
   * Parses an event name string to return the specific event type.
   * For example, given "click.foo" returns "click"
   * @param {string} name - The input event type string.
   * @return {string} - A string with the event type only.
   */ eventName (name) {
        const i = name.indexOf(".");
        return i < 0 ? name : name.slice(0, i);
    },
    /**
   * Handle hyperlink navigation in response to an item.href value.
   * @param {Event} event - The event triggering hyperlink navigation.
   * @param {Item} item - The scenegraph item.
   * @param {string} href - The URL to navigate to.
   */ handleHref (event, item, href) {
        this._loader.sanitize(href, {
            context: "href"
        }).then((opt)=>{
            const e = new MouseEvent(event.type, event), a = domCreate(null, "a");
            for(const name in opt)a.setAttribute(name, opt[name]);
            a.dispatchEvent(e);
        }).catch(()=>{
        /* do nothing */ });
    },
    /**
   * Handle tooltip display in response to an item.tooltip value.
   * @param {Event} event - The event triggering tooltip display.
   * @param {Item} item - The scenegraph item.
   * @param {boolean} show - A boolean flag indicating whether
   *   to show or hide a tooltip for the given item.
   */ handleTooltip (event, item, show) {
        if (item && item.tooltip != null) {
            item = resolveItem(item, event, this.canvas(), this._origin);
            const value = show && item && item.tooltip || null;
            this._tooltip.call(this._obj, this, event, item, value);
        }
    },
    /**
   * Returns the size of a scenegraph item and its position relative
   * to the viewport.
   * @param {Item} item - The scenegraph item.
   * @return {object} - A bounding box object (compatible with the
   *   DOMRect type) consisting of x, y, width, heigh, top, left,
   *   right, and bottom properties.
   */ getItemBoundingClientRect (item) {
        const el = this.canvas();
        if (!el) return;
        const rect = el.getBoundingClientRect(), origin = this._origin, bounds = item.bounds, width = bounds.width(), height = bounds.height();
        let x = bounds.x1 + origin[0] + rect.left, y = bounds.y1 + origin[1] + rect.top; // translate coordinate for each parent group
        while(item.mark && (item = item.mark.group)){
            x += item.x || 0;
            y += item.y || 0;
        } // return DOMRect-compatible bounding box
        return {
            x,
            y,
            width,
            height,
            left: x,
            top: y,
            right: x + width,
            bottom: y + height
        };
    }
};
/**
 * Create a new Renderer instance.
 * @param {object} [loader] - Optional loader instance for
 *   image and href URL sanitization. If not specified, a
 *   standard loader instance will be generated.
 * @constructor
 */ function Renderer(loader) {
    this._el = null;
    this._bgcolor = null;
    this._loader = new ResourceLoader(loader);
}
Renderer.prototype = {
    /**
   * Initialize a new Renderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance.
   */ initialize (el, width, height, origin, scaleFactor) {
        this._el = el;
        return this.resize(width, height, origin, scaleFactor);
    },
    /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */ element () {
        return this._el;
    },
    /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */ canvas () {
        return this._el && this._el.firstChild;
    },
    /**
   * Get / set the background color.
   */ background (bgcolor) {
        if (arguments.length === 0) return this._bgcolor;
        this._bgcolor = bgcolor;
        return this;
    },
    /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance;
   */ resize (width, height, origin, scaleFactor) {
        this._width = width;
        this._height = height;
        this._origin = origin || [
            0,
            0
        ];
        this._scale = scaleFactor || 1;
        return this;
    },
    /**
   * Report a dirty item whose bounds should be redrawn.
   * This base class method does nothing. Subclasses that perform
   * incremental should implement this method.
   * @param {Item} item - The dirty item whose bounds should be redrawn.
   */ dirty () /*item*/ {},
    /**
   * Render an input scenegraph, potentially with a set of dirty items.
   * This method will perform an immediate rendering with available resources.
   * The renderer may also need to perform image loading to perform a complete
   * render. This process can lead to asynchronous re-rendering of the scene
   * after this method returns. To receive notification when rendering is
   * complete, use the renderAsync method instead.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Renderer} - This renderer instance.
   */ render (scene) {
        const r = this; // bind arguments into a render call, and cache it
        // this function may be subsequently called for async redraw
        r._call = function() {
            r._render(scene);
        }; // invoke the renderer
        r._call(); // clear the cached call for garbage collection
        // async redraws will stash their own copy
        r._call = null;
        return r;
    },
    /**
   * Internal rendering method. Renderer subclasses should override this
   * method to actually perform rendering.
   * @param {object} scene - The root mark of a scenegraph to render.
   */ _render () /*scene*/ {},
    /**
   * Asynchronous rendering method. Similar to render, but returns a Promise
   * that resolves when all rendering is completed. Sometimes a renderer must
   * perform image loading to get a complete rendering. The returned
   * Promise will not resolve until this process completes.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Promise} - A Promise that resolves when rendering is complete.
   */ renderAsync (scene) {
        const r = this.render(scene);
        return this._ready ? this._ready.then(()=>r) : Promise.resolve(r);
    },
    /**
   * Internal method for asynchronous resource loading.
   * Proxies method calls to the ImageLoader, and tracks loading
   * progress to invoke a re-render once complete.
   * @param {string} method - The method name to invoke on the ImageLoader.
   * @param {string} uri - The URI for the requested resource.
   * @return {Promise} - A Promise that resolves to the requested resource.
   */ _load (method, uri) {
        var r = this, p = r._loader[method](uri);
        if (!r._ready) {
            // re-render the scene when loading completes
            const call = r._call;
            r._ready = r._loader.ready().then((redraw)=>{
                if (redraw) call();
                r._ready = null;
            });
        }
        return p;
    },
    /**
   * Sanitize a URL to include as a hyperlink in the rendered scene.
   * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string to sanitize.
   * @return {Promise} - A Promise that resolves to the sanitized URL.
   */ sanitizeURL (uri) {
        return this._load("sanitizeURL", uri);
    },
    /**
   * Requests an image to include in the rendered scene.
   * This method proxies a call to ImageLoader.loadImage, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string of the image.
   * @return {Promise} - A Promise that resolves to the loaded Image.
   */ loadImage (uri) {
        return this._load("loadImage", uri);
    }
};
const KeyDownEvent = "keydown";
const KeyPressEvent = "keypress";
const KeyUpEvent = "keyup";
const DragEnterEvent = "dragenter";
const DragLeaveEvent = "dragleave";
const DragOverEvent = "dragover";
const MouseDownEvent = "mousedown";
const MouseUpEvent = "mouseup";
const MouseMoveEvent = "mousemove";
const MouseOutEvent = "mouseout";
const MouseOverEvent = "mouseover";
const ClickEvent = "click";
const DoubleClickEvent = "dblclick";
const WheelEvent = "wheel";
const MouseWheelEvent = "mousewheel";
const TouchStartEvent = "touchstart";
const TouchMoveEvent = "touchmove";
const TouchEndEvent = "touchend";
const Events = [
    KeyDownEvent,
    KeyPressEvent,
    KeyUpEvent,
    DragEnterEvent,
    DragLeaveEvent,
    DragOverEvent,
    MouseDownEvent,
    MouseUpEvent,
    MouseMoveEvent,
    MouseOutEvent,
    MouseOverEvent,
    ClickEvent,
    DoubleClickEvent,
    WheelEvent,
    MouseWheelEvent,
    TouchStartEvent,
    TouchMoveEvent,
    TouchEndEvent
];
const TooltipShowEvent = MouseMoveEvent;
const TooltipHideEvent = MouseOutEvent;
const HrefEvent = ClickEvent;
function CanvasHandler(loader, tooltip) {
    Handler.call(this, loader, tooltip);
    this._down = null;
    this._touch = null;
    this._first = true;
    this._events = {};
}
const eventBundle = (type)=>type === TouchStartEvent || type === TouchMoveEvent || type === TouchEndEvent ? [
        TouchStartEvent,
        TouchMoveEvent,
        TouchEndEvent
    ] : [
        type
    ]; // lazily add listeners to the canvas as needed
function eventListenerCheck(handler, type) {
    eventBundle(type).forEach((_)=>addEventListener(handler, _));
}
function addEventListener(handler, type) {
    const canvas = handler.canvas();
    if (canvas && !handler._events[type]) {
        handler._events[type] = 1;
        canvas.addEventListener(type, handler[type] ? (evt)=>handler[type](evt) : (evt)=>handler.fire(type, evt));
    }
}
function move(moveEvent, overEvent, outEvent) {
    return function(evt) {
        const a = this._active, p = this.pickEvent(evt);
        if (p === a) // active item and picked item are the same
        this.fire(moveEvent, evt); // fire move
        else {
            // active item and picked item are different
            if (!a || !a.exit) // fire out for prior active item
            // suppress if active item was removed from scene
            this.fire(outEvent, evt);
            this._active = p; // set new active item
            this.fire(overEvent, evt); // fire over for new active item
            this.fire(moveEvent, evt); // fire move for new active item
        }
    };
}
function inactive(type) {
    return function(evt) {
        this.fire(type, evt);
        this._active = null;
    };
}
(0, _vegaUtil.inherits)(CanvasHandler, Handler, {
    initialize (el, origin, obj) {
        this._canvas = el && domFind(el, "canvas"); // add minimal events required for proper state management
        [
            ClickEvent,
            MouseDownEvent,
            MouseMoveEvent,
            MouseOutEvent,
            DragLeaveEvent
        ].forEach((type)=>eventListenerCheck(this, type));
        return Handler.prototype.initialize.call(this, el, origin, obj);
    },
    // return the backing canvas instance
    canvas () {
        return this._canvas;
    },
    // retrieve the current canvas context
    context () {
        return this._canvas.getContext("2d");
    },
    // supported events
    events: Events,
    // to keep old versions of firefox happy
    DOMMouseScroll (evt) {
        this.fire(MouseWheelEvent, evt);
    },
    mousemove: move(MouseMoveEvent, MouseOverEvent, MouseOutEvent),
    dragover: move(DragOverEvent, DragEnterEvent, DragLeaveEvent),
    mouseout: inactive(MouseOutEvent),
    dragleave: inactive(DragLeaveEvent),
    mousedown (evt) {
        this._down = this._active;
        this.fire(MouseDownEvent, evt);
    },
    click (evt) {
        if (this._down === this._active) {
            this.fire(ClickEvent, evt);
            this._down = null;
        }
    },
    touchstart (evt) {
        this._touch = this.pickEvent(evt.changedTouches[0]);
        if (this._first) {
            this._active = this._touch;
            this._first = false;
        }
        this.fire(TouchStartEvent, evt, true);
    },
    touchmove (evt) {
        this.fire(TouchMoveEvent, evt, true);
    },
    touchend (evt) {
        this.fire(TouchEndEvent, evt, true);
        this._touch = null;
    },
    // fire an event
    fire (type, evt, touch) {
        const a = touch ? this._touch : this._active, h = this._handlers[type]; // set event type relative to scenegraph items
        evt.vegaType = type; // handle hyperlinks and tooltips first
        if (type === HrefEvent && a && a.href) this.handleHref(evt, a, a.href);
        else if (type === TooltipShowEvent || type === TooltipHideEvent) this.handleTooltip(evt, a, type !== TooltipHideEvent);
         // invoke all registered handlers
        if (h) for(let i = 0, len = h.length; i < len; ++i)h[i].handler.call(this._obj, evt, a);
    },
    // add an event handler
    on (type, handler) {
        const name = this.eventName(type), h = this._handlers, i = this._handlerIndex(h[name], type, handler);
        if (i < 0) {
            eventListenerCheck(this, type);
            (h[name] || (h[name] = [])).push({
                type: type,
                handler: handler
            });
        }
        return this;
    },
    // remove an event handler
    off (type, handler) {
        const name = this.eventName(type), h = this._handlers[name], i = this._handlerIndex(h, type, handler);
        if (i >= 0) h.splice(i, 1);
        return this;
    },
    pickEvent (evt) {
        const p = point(evt, this._canvas), o = this._origin;
        return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
    },
    // find the scenegraph item at the current mouse position
    // x, y -- the absolute x, y mouse coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    pick (scene, x, y, gx, gy) {
        const g = this.context(), mark = Marks[scene.marktype];
        return mark.pick.call(this, g, scene, x, y, gx, gy);
    }
});
function devicePixelRatio() {
    return typeof window !== "undefined" ? window.devicePixelRatio || 1 : 1;
}
var pixelRatio = devicePixelRatio();
function resize(canvas, width, height, origin, scaleFactor, opt) {
    const inDOM = typeof HTMLElement !== "undefined" && canvas instanceof HTMLElement && canvas.parentNode != null, context = canvas.getContext("2d"), ratio = inDOM ? pixelRatio : scaleFactor;
    canvas.width = width * ratio;
    canvas.height = height * ratio;
    for(const key in opt)context[key] = opt[key];
    if (inDOM && ratio !== 1) {
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
    }
    context.pixelRatio = ratio;
    context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
    return canvas;
}
function CanvasRenderer(loader) {
    Renderer.call(this, loader);
    this._options = {};
    this._redraw = false;
    this._dirty = new Bounds();
    this._tempb = new Bounds();
}
const base$1 = Renderer.prototype;
const viewBounds = (origin, width, height)=>new Bounds().set(0, 0, width, height).translate(-origin[0], -origin[1]);
function clipToBounds(g, b, origin) {
    // expand bounds by 1 pixel, then round to pixel boundaries
    b.expand(1).round(); // align to base pixel grid in case of non-integer scaling (#2425)
    if (g.pixelRatio % 1) b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
     // to avoid artifacts translate if origin has fractional pixels
    b.translate(-(origin[0] % 1), -(origin[1] % 1)); // set clip path
    g.beginPath();
    g.rect(b.x1, b.y1, b.width(), b.height());
    g.clip();
    return b;
}
(0, _vegaUtil.inherits)(CanvasRenderer, Renderer, {
    initialize (el, width, height, origin, scaleFactor, options) {
        this._options = options || {};
        this._canvas = this._options.externalContext ? null : (0, _vegaCanvas.canvas)(1, 1, this._options.type); // instantiate a small canvas
        if (el && this._canvas) {
            domClear(el, 0).appendChild(this._canvas);
            this._canvas.setAttribute("class", "marks");
        } // this method will invoke resize to size the canvas appropriately
        return base$1.initialize.call(this, el, width, height, origin, scaleFactor);
    },
    resize (width, height, origin, scaleFactor) {
        base$1.resize.call(this, width, height, origin, scaleFactor);
        if (this._canvas) // configure canvas size and transform
        resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);
        else {
            // external context needs to be scaled and positioned to origin
            const ctx = this._options.externalContext;
            if (!ctx) (0, _vegaUtil.error)("CanvasRenderer is missing a valid canvas or context");
            ctx.scale(this._scale, this._scale);
            ctx.translate(this._origin[0], this._origin[1]);
        }
        this._redraw = true;
        return this;
    },
    canvas () {
        return this._canvas;
    },
    context () {
        return this._options.externalContext || (this._canvas ? this._canvas.getContext("2d") : null);
    },
    dirty (item) {
        const b = this._tempb.clear().union(item.bounds);
        let g = item.mark.group;
        while(g){
            b.translate(g.x || 0, g.y || 0);
            g = g.mark.group;
        }
        this._dirty.union(b);
    },
    _render (scene) {
        const g = this.context(), o = this._origin, w = this._width, h = this._height, db = this._dirty, vb = viewBounds(o, w, h); // setup
        g.save();
        const b = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : clipToBounds(g, vb.intersect(db), o);
        this.clear(-o[0], -o[1], w, h); // render
        this.draw(g, scene, b); // takedown
        g.restore();
        db.clear();
        return this;
    },
    draw (ctx, scene, bounds) {
        const mark = Marks[scene.marktype];
        if (scene.clip) clip(ctx, scene);
        mark.draw.call(this, ctx, scene, bounds);
        if (scene.clip) ctx.restore();
    },
    clear (x, y, w, h) {
        const opt = this._options, g = this.context();
        if (opt.type !== "pdf" && !opt.externalContext) // calling clear rect voids vector output in pdf mode
        // and could remove external context content (#2615)
        g.clearRect(x, y, w, h);
        if (this._bgcolor != null) {
            g.fillStyle = this._bgcolor;
            g.fillRect(x, y, w, h);
        }
    }
});
function SVGHandler(loader, tooltip) {
    Handler.call(this, loader, tooltip);
    const h = this;
    h._hrefHandler = listener(h, (evt, item)=>{
        if (item && item.href) h.handleHref(evt, item, item.href);
    });
    h._tooltipHandler = listener(h, (evt, item)=>{
        h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
    });
} // wrap an event listener for the SVG DOM
const listener = (context, handler)=>(evt)=>{
        let item = evt.target.__data__;
        item = Array.isArray(item) ? item[0] : item;
        evt.vegaType = evt.type;
        handler.call(context._obj, evt, item);
    };
(0, _vegaUtil.inherits)(SVGHandler, Handler, {
    initialize (el, origin, obj) {
        let svg = this._svg;
        if (svg) {
            svg.removeEventListener(HrefEvent, this._hrefHandler);
            svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
            svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
        }
        this._svg = svg = el && domFind(el, "svg");
        if (svg) {
            svg.addEventListener(HrefEvent, this._hrefHandler);
            svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
            svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
        }
        return Handler.prototype.initialize.call(this, el, origin, obj);
    },
    canvas () {
        return this._svg;
    },
    // add an event handler
    on (type, handler) {
        const name = this.eventName(type), h = this._handlers, i = this._handlerIndex(h[name], type, handler);
        if (i < 0) {
            const x = {
                type,
                handler,
                listener: listener(this, handler)
            };
            (h[name] || (h[name] = [])).push(x);
            if (this._svg) this._svg.addEventListener(name, x.listener);
        }
        return this;
    },
    // remove an event handler
    off (type, handler) {
        const name = this.eventName(type), h = this._handlers[name], i = this._handlerIndex(h, type, handler);
        if (i >= 0) {
            if (this._svg) this._svg.removeEventListener(name, h[i].listener);
            h.splice(i, 1);
        }
        return this;
    }
});
const ARIA_HIDDEN = "aria-hidden";
const ARIA_LABEL = "aria-label";
const ARIA_ROLE = "role";
const ARIA_ROLEDESCRIPTION = "aria-roledescription";
const GRAPHICS_OBJECT = "graphics-object";
const GRAPHICS_SYMBOL = "graphics-symbol";
const bundle = (role, roledesc, label)=>({
        [ARIA_ROLE]: role,
        [ARIA_ROLEDESCRIPTION]: roledesc,
        [ARIA_LABEL]: label || undefined
    }); // these roles are covered by related roles
// we can ignore them, no need to generate attributes
const AriaIgnore = (0, _vegaUtil.toSet)([
    "axis-domain",
    "axis-grid",
    "axis-label",
    "axis-tick",
    "axis-title",
    "legend-band",
    "legend-entry",
    "legend-gradient",
    "legend-label",
    "legend-title",
    "legend-symbol",
    "title"
]); // aria attribute generators for guide roles
const AriaGuides = {
    "axis": {
        desc: "axis",
        caption: axisCaption
    },
    "legend": {
        desc: "legend",
        caption: legendCaption
    },
    "title-text": {
        desc: "title",
        caption: (item)=>`Title text '${titleCaption(item)}'`
    },
    "title-subtitle": {
        desc: "subtitle",
        caption: (item)=>`Subtitle text '${titleCaption(item)}'`
    }
}; // aria properties generated for mark item encoding channels
const AriaEncode = {
    ariaRole: ARIA_ROLE,
    ariaRoleDescription: ARIA_ROLEDESCRIPTION,
    description: ARIA_LABEL
};
function ariaItemAttributes(emit, item) {
    const hide = item.aria === false;
    emit(ARIA_HIDDEN, hide || undefined);
    if (hide || item.description == null) for(const prop in AriaEncode)emit(AriaEncode[prop], undefined);
    else {
        const type = item.mark.marktype;
        emit(ARIA_LABEL, item.description);
        emit(ARIA_ROLE, item.ariaRole || (type === "group" ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL));
        emit(ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || `${type} mark`);
    }
}
function ariaMarkAttributes(mark) {
    return mark.aria === false ? {
        [ARIA_HIDDEN]: true
    } : AriaIgnore[mark.role] ? null : AriaGuides[mark.role] ? ariaGuide(mark, AriaGuides[mark.role]) : ariaMark(mark);
}
function ariaMark(mark) {
    const type = mark.marktype;
    const recurse = type === "group" || type === "text" || mark.items.some((_)=>_.description != null && _.aria !== false);
    return bundle(recurse ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL, `${type} mark container`, mark.description);
}
function ariaGuide(mark, opt) {
    try {
        const item = mark.items[0], caption = opt.caption || (()=>"");
        return bundle(opt.role || GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));
    } catch (err) {
        return null;
    }
}
function titleCaption(item) {
    return (0, _vegaUtil.array)(item.text).join(" ");
}
function axisCaption(item) {
    const datum = item.datum, orient = item.orient, title = datum.title ? extractTitle(item) : null, ctx = item.context, scale = ctx.scales[datum.scale].value, locale = ctx.dataflow.locale(), type = scale.type, xy = orient === "left" || orient === "right" ? "Y" : "X";
    return `${xy}-axis` + (title ? ` titled '${title}'` : "") + ` for a ${(0, _vegaScale.isDiscrete)(type) ? "discrete" : type} scale` + ` with ${(0, _vegaScale.domainCaption)(locale, scale, item)}`;
}
function legendCaption(item) {
    const datum = item.datum, title = datum.title ? extractTitle(item) : null, type = `${datum.type || ""} legend`.trim(), scales = datum.scales, props = Object.keys(scales), ctx = item.context, scale = ctx.scales[scales[props[0]]].value, locale = ctx.dataflow.locale();
    return capitalize(type) + (title ? ` titled '${title}'` : "") + ` for ${channelCaption(props)}` + ` with ${(0, _vegaScale.domainCaption)(locale, scale, item)}`;
}
function extractTitle(item) {
    try {
        return (0, _vegaUtil.array)((0, _vegaUtil.peek)(item.items).items[0].text).join(" ");
    } catch (err) {
        return null;
    }
}
function channelCaption(props) {
    props = props.map((p)=>p + (p === "fill" || p === "stroke" ? " color" : ""));
    return props.length < 2 ? props[0] : props.slice(0, -1).join(", ") + " and " + (0, _vegaUtil.peek)(props);
}
function capitalize(s) {
    return s.length ? s[0].toUpperCase() + s.slice(1) : s;
}
const innerText = (val)=>(val + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
const attrText = (val)=>innerText(val).replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
function markup() {
    let buf = "", outer = "", inner = "";
    const stack = [], clear = ()=>outer = inner = "", push = (tag)=>{
        if (outer) {
            buf += `${outer}>${inner}`;
            clear();
        }
        stack.push(tag);
    }, attr = (name, value)=>{
        if (value != null) outer += ` ${name}="${attrText(value)}"`;
        return m;
    }, m = {
        open (tag, ...attrs) {
            push(tag);
            outer = "<" + tag;
            for (const set of attrs)for(const key in set)attr(key, set[key]);
            return m;
        },
        close () {
            const tag = stack.pop();
            if (outer) buf += outer + (inner ? `>${inner}</${tag}>` : "/>");
            else buf += `</${tag}>`;
            clear();
            return m;
        },
        attr,
        text: (t)=>(inner += innerText(t), m),
        toString: ()=>buf
    };
    return m;
}
const serializeXML = (node)=>_serialize(markup(), node) + "";
function _serialize(m, node) {
    m.open(node.tagName);
    if (node.hasAttributes()) {
        const attrs = node.attributes, n = attrs.length;
        for(let i = 0; i < n; ++i)m.attr(attrs[i].name, attrs[i].value);
    }
    if (node.hasChildNodes()) {
        const children = node.childNodes, n1 = children.length;
        for(let i1 = 0; i1 < n1; i1++){
            const child = children[i1];
            child.nodeType === 3 // text node
             ? m.text(child.nodeValue) : _serialize(m, child);
        }
    }
    return m.close();
}
const styles = {
    fill: "fill",
    fillOpacity: "fill-opacity",
    stroke: "stroke",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    strokeCap: "stroke-linecap",
    strokeJoin: "stroke-linejoin",
    strokeDash: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeMiterLimit: "stroke-miterlimit",
    opacity: "opacity",
    blend: "mix-blend-mode"
}; // ensure miter limit default is consistent with canvas (#2498)
const rootAttributes = {
    "fill": "none",
    "stroke-miterlimit": 10
};
const RootIndex = 0, xmlns = "http://www.w3.org/2000/xmlns/", svgns = metadata.xmlns;
function SVGRenderer(loader) {
    Renderer.call(this, loader);
    this._dirtyID = 0;
    this._dirty = [];
    this._svg = null;
    this._root = null;
    this._defs = null;
}
const base = Renderer.prototype;
(0, _vegaUtil.inherits)(SVGRenderer, Renderer, {
    /**
   * Initialize a new SVGRenderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {SVGRenderer} - This renderer instance.
   */ initialize (el, width, height, origin, scaleFactor) {
        // create the svg definitions cache
        this._defs = {};
        this._clearDefs();
        if (el) {
            this._svg = domChild(el, 0, "svg", svgns);
            this._svg.setAttributeNS(xmlns, "xmlns", svgns);
            this._svg.setAttributeNS(xmlns, "xmlns:xlink", metadata["xmlns:xlink"]);
            this._svg.setAttribute("version", metadata["version"]);
            this._svg.setAttribute("class", "marks");
            domClear(el, 1); // set the svg root group
            this._root = domChild(this._svg, RootIndex, "g", svgns);
            setAttributes(this._root, rootAttributes); // ensure no additional child elements
            domClear(this._svg, RootIndex + 1);
        } // set background color if defined
        this.background(this._bgcolor);
        return base.initialize.call(this, el, width, height, origin, scaleFactor);
    },
    /**
   * Get / set the background color.
   */ background (bgcolor) {
        if (arguments.length && this._svg) this._svg.style.setProperty("background-color", bgcolor);
        return base.background.apply(this, arguments);
    },
    /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {SVGRenderer} - This renderer instance;
   */ resize (width, height, origin, scaleFactor) {
        base.resize.call(this, width, height, origin, scaleFactor);
        if (this._svg) {
            setAttributes(this._svg, {
                width: this._width * this._scale,
                height: this._height * this._scale,
                viewBox: `0 0 ${this._width} ${this._height}`
            });
            this._root.setAttribute("transform", `translate(${this._origin})`);
        }
        this._dirty = [];
        return this;
    },
    /**
   * Returns the SVG element of the visualization.
   * @return {DOMElement} - The SVG element.
   */ canvas () {
        return this._svg;
    },
    /**
   * Returns an SVG text string for the rendered content,
   * or null if this renderer is currently headless.
   */ svg () {
        const svg = this._svg, bg = this._bgcolor;
        if (!svg) return null;
        let node;
        if (bg) {
            svg.removeAttribute("style");
            node = domChild(svg, RootIndex, "rect", svgns);
            setAttributes(node, {
                width: this._width,
                height: this._height,
                fill: bg
            });
        }
        const text = serializeXML(svg);
        if (bg) {
            svg.removeChild(node);
            this._svg.style.setProperty("background-color", bg);
        }
        return text;
    },
    /**
   * Internal rendering method.
   * @param {object} scene - The root mark of a scenegraph to render.
   */ _render (scene) {
        // perform spot updates and re-render markup
        if (this._dirtyCheck()) {
            if (this._dirtyAll) this._clearDefs();
            this.mark(this._root, scene);
            domClear(this._root, 1);
        }
        this.defs();
        this._dirty = [];
        ++this._dirtyID;
        return this;
    },
    // -- Manage rendering of items marked as dirty --
    /**
   * Flag a mark item as dirty.
   * @param {Item} item - The mark item.
   */ dirty (item) {
        if (item.dirty !== this._dirtyID) {
            item.dirty = this._dirtyID;
            this._dirty.push(item);
        }
    },
    /**
   * Check if a mark item is considered dirty.
   * @param {Item} item - The mark item.
   */ isDirty (item) {
        return this._dirtyAll || !item._svg || item.dirty === this._dirtyID;
    },
    /**
   * Internal method to check dirty status and, if possible,
   * make targetted updates without a full rendering pass.
   */ _dirtyCheck () {
        this._dirtyAll = true;
        const items = this._dirty;
        if (!items.length || !this._dirtyID) return true;
        const id = ++this._dirtyID;
        let item, mark, type, mdef, i, n, o;
        for(i = 0, n = items.length; i < n; ++i){
            item = items[i];
            mark = item.mark;
            if (mark.marktype !== type) {
                // memoize mark instance lookup
                type = mark.marktype;
                mdef = Marks[type];
            }
            if (mark.zdirty && mark.dirty !== id) {
                this._dirtyAll = false;
                dirtyParents(item, id);
                mark.items.forEach((i)=>{
                    i.dirty = id;
                });
            }
            if (mark.zdirty) continue; // handle in standard drawing pass
            if (item.exit) {
                // EXIT
                if (mdef.nested && mark.items.length) {
                    // if nested mark with remaining points, update instead
                    o = mark.items[0];
                    if (o._svg) this._update(mdef, o._svg, o);
                } else if (item._svg) {
                    // otherwise remove from DOM
                    o = item._svg.parentNode;
                    if (o) o.removeChild(item._svg);
                }
                item._svg = null;
                continue;
            }
            item = mdef.nested ? mark.items[0] : item;
            if (item._update === id) continue; // already visited
            if (!item._svg || !item._svg.ownerSVGElement) {
                // ENTER
                this._dirtyAll = false;
                dirtyParents(item, id);
            } else // IN-PLACE UPDATE
            this._update(mdef, item._svg, item);
            item._update = id;
        }
        return !this._dirtyAll;
    },
    // -- Construct & maintain scenegraph to SVG mapping ---
    /**
   * Render a set of mark items.
   * @param {SVGElement} el - The parent element in the SVG tree.
   * @param {object} scene - The mark parent to render.
   * @param {SVGElement} prev - The previous sibling in the SVG tree.
   */ mark (el, scene, prev) {
        if (!this.isDirty(scene)) return scene._svg;
        const svg = this._svg, mdef = Marks[scene.marktype], events = scene.interactive === false ? "none" : null, isGroup = mdef.tag === "g";
        let sibling = null, i = 0;
        const parent = bind(scene, el, prev, "g", svg);
        parent.setAttribute("class", cssClass(scene)); // apply aria attributes to parent container element
        const aria = ariaMarkAttributes(scene);
        for(const key in aria)setAttribute(parent, key, aria[key]);
        if (!isGroup) setAttribute(parent, "pointer-events", events);
        setAttribute(parent, "clip-path", scene.clip ? clip$1(this, scene, scene.group) : null);
        const process = (item)=>{
            const dirty = this.isDirty(item), node = bind(item, parent, sibling, mdef.tag, svg);
            if (dirty) {
                this._update(mdef, node, item);
                if (isGroup) recurse(this, node, item);
            }
            sibling = node;
            ++i;
        };
        if (mdef.nested) {
            if (scene.items.length) process(scene.items[0]);
        } else visit(scene, process);
        domClear(parent, i);
        return parent;
    },
    /**
   * Update the attributes of an SVG element for a mark item.
   * @param {object} mdef - The mark definition object
   * @param {SVGElement} el - The SVG element.
   * @param {Item} item - The mark item.
   */ _update (mdef, el, item) {
        // set dom element and values cache
        // provides access to emit method
        element = el;
        values = el.__values__; // apply aria-specific properties
        ariaItemAttributes(emit, item); // apply svg attributes
        mdef.attr(emit, item, this); // some marks need special treatment
        const extra = mark_extras[mdef.type];
        if (extra) extra.call(this, mdef, el, item); // apply svg style attributes
        // note: element state may have been modified by 'extra' method
        if (element) this.style(element, item);
    },
    /**
   * Update the presentation attributes of an SVG element for a mark item.
   * @param {SVGElement} el - The SVG element.
   * @param {Item} item - The mark item.
   */ style (el, item) {
        if (item == null) return;
        for(const prop in styles){
            let value = prop === "font" ? fontFamily(item) : item[prop];
            if (value === values[prop]) continue;
            const name = styles[prop];
            if (value == null) el.removeAttribute(name);
            else {
                if (isGradient(value)) value = gradientRef(value, this._defs.gradient, href());
                el.setAttribute(name, value + "");
            }
            values[prop] = value;
        }
    },
    /**
   * Render SVG defs, as needed.
   * Must be called *after* marks have been processed to ensure the
   * collected state is current and accurate.
   */ defs () {
        const svg = this._svg, defs = this._defs;
        let el = defs.el, index = 0;
        for(const id in defs.gradient){
            if (!el) defs.el = el = domChild(svg, RootIndex + 1, "defs", svgns);
            index = updateGradient(el, defs.gradient[id], index);
        }
        for(const id1 in defs.clipping){
            if (!el) defs.el = el = domChild(svg, RootIndex + 1, "defs", svgns);
            index = updateClipping(el, defs.clipping[id1], index);
        } // clean-up
        if (el) index === 0 ? (svg.removeChild(el), defs.el = null) : domClear(el, index);
    },
    /**
   * Clear defs caches.
   */ _clearDefs () {
        const def = this._defs;
        def.gradient = {};
        def.clipping = {};
    }
}); // mark ancestor chain with a dirty id
function dirtyParents(item, id) {
    for(; item && item.dirty !== id; item = item.mark.group){
        item.dirty = id;
        if (item.mark && item.mark.dirty !== id) item.mark.dirty = id;
        else return;
    }
} // update gradient definitions
function updateGradient(el, grad, index) {
    let i, n, stop;
    if (grad.gradient === "radial") {
        // SVG radial gradients automatically transform to normalized bbox
        // coordinates, in a way that is cumbersome to replicate in canvas.
        // We wrap the radial gradient in a pattern element, allowing us to
        // maintain a circular gradient that matches what canvas provides.
        let pt = domChild(el, index++, "pattern", svgns);
        setAttributes(pt, {
            id: patternPrefix + grad.id,
            viewBox: "0,0,1,1",
            width: "100%",
            height: "100%",
            preserveAspectRatio: "xMidYMid slice"
        });
        pt = domChild(pt, 0, "rect", svgns);
        setAttributes(pt, {
            width: 1,
            height: 1,
            fill: `url(${href()}#${grad.id})`
        });
        el = domChild(el, index++, "radialGradient", svgns);
        setAttributes(el, {
            id: grad.id,
            fx: grad.x1,
            fy: grad.y1,
            fr: grad.r1,
            cx: grad.x2,
            cy: grad.y2,
            r: grad.r2
        });
    } else {
        el = domChild(el, index++, "linearGradient", svgns);
        setAttributes(el, {
            id: grad.id,
            x1: grad.x1,
            x2: grad.x2,
            y1: grad.y1,
            y2: grad.y2
        });
    }
    for(i = 0, n = grad.stops.length; i < n; ++i){
        stop = domChild(el, i, "stop", svgns);
        stop.setAttribute("offset", grad.stops[i].offset);
        stop.setAttribute("stop-color", grad.stops[i].color);
    }
    domClear(el, i);
    return index;
} // update clipping path definitions
function updateClipping(el, clip, index) {
    let mask;
    el = domChild(el, index, "clipPath", svgns);
    el.setAttribute("id", clip.id);
    if (clip.path) {
        mask = domChild(el, 0, "path", svgns);
        mask.setAttribute("d", clip.path);
    } else {
        mask = domChild(el, 0, "rect", svgns);
        setAttributes(mask, {
            x: 0,
            y: 0,
            width: clip.width,
            height: clip.height
        });
    }
    domClear(el, 1);
    return index + 1;
} // Recursively process group contents.
function recurse(renderer, el, group) {
    el = el.lastChild.previousSibling;
    let prev, idx = 0;
    visit(group, (item)=>{
        prev = renderer.mark(el, item, prev);
        ++idx;
    }); // remove any extraneous DOM elements
    domClear(el, 1 + idx);
} // Bind a scenegraph item to an SVG DOM element.
// Create new SVG elements as needed.
function bind(item, el, sibling, tag, svg) {
    let node = item._svg, doc; // create a new dom node if needed
    if (!node) {
        doc = el.ownerDocument;
        node = domCreate(doc, tag, svgns);
        item._svg = node;
        if (item.mark) {
            node.__data__ = item;
            node.__values__ = {
                fill: "default"
            }; // if group, create background, content, and foreground elements
            if (tag === "g") {
                const bg = domCreate(doc, "path", svgns);
                node.appendChild(bg);
                bg.__data__ = item;
                const cg = domCreate(doc, "g", svgns);
                node.appendChild(cg);
                cg.__data__ = item;
                const fg = domCreate(doc, "path", svgns);
                node.appendChild(fg);
                fg.__data__ = item;
                fg.__values__ = {
                    fill: "default"
                };
            }
        }
    } // (re-)insert if (a) not contained in SVG or (b) sibling order has changed
    if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
    return node;
} // check if two nodes are ordered siblings
function siblingCheck(node, sibling) {
    return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling; // treat null/undefined the same
} // -- Set attributes & styles on SVG elements ---
let element = null, // temp var for current SVG element
values = null; // temp var for current values hash
// Extra configuration for certain mark types
const mark_extras = {
    group (mdef, el, item) {
        const fg = element = el.childNodes[2];
        values = fg.__values__;
        mdef.foreground(emit, item, this);
        values = el.__values__; // use parent's values hash
        element = el.childNodes[1];
        mdef.content(emit, item, this);
        const bg = element = el.childNodes[0];
        mdef.background(emit, item, this);
        const value = item.mark.interactive === false ? "none" : null;
        if (value !== values.events) {
            setAttribute(fg, "pointer-events", value);
            setAttribute(bg, "pointer-events", value);
            values.events = value;
        }
        if (item.strokeForeground && item.stroke) {
            const fill = item.fill;
            setAttribute(fg, "display", null); // set style of background
            this.style(bg, item);
            setAttribute(bg, "stroke", null); // set style of foreground
            if (fill) item.fill = null;
            values = fg.__values__;
            this.style(fg, item);
            if (fill) item.fill = fill; // leave element null to prevent downstream styling
            element = null;
        } else // ensure foreground is ignored
        setAttribute(fg, "display", "none");
    },
    image (mdef, el, item) {
        if (item.smooth === false) {
            setStyle(el, "image-rendering", "optimizeSpeed");
            setStyle(el, "image-rendering", "pixelated");
        } else setStyle(el, "image-rendering", null);
    },
    text (mdef, el, item) {
        const tl = textLines(item);
        let key, value, doc, lh;
        if ((0, _vegaUtil.isArray)(tl)) {
            // multi-line text
            value = tl.map((_)=>textValue(item, _));
            key = value.join("\n"); // content cache key
            if (key !== values.text) {
                domClear(el, 0);
                doc = el.ownerDocument;
                lh = lineHeight(item);
                value.forEach((t, i)=>{
                    const ts = domCreate(doc, "tspan", svgns);
                    ts.__data__ = item; // data binding
                    ts.textContent = t;
                    if (i) {
                        ts.setAttribute("x", 0);
                        ts.setAttribute("dy", lh);
                    }
                    el.appendChild(ts);
                });
                values.text = key;
            }
        } else {
            // single-line text
            value = textValue(item, tl);
            if (value !== values.text) {
                el.textContent = value;
                values.text = value;
            }
        }
        setAttribute(el, "font-family", fontFamily(item));
        setAttribute(el, "font-size", fontSize(item) + "px");
        setAttribute(el, "font-style", item.fontStyle);
        setAttribute(el, "font-variant", item.fontVariant);
        setAttribute(el, "font-weight", item.fontWeight);
    }
};
function emit(name, value, ns) {
    // early exit if value is unchanged
    if (value === values[name]) return; // use appropriate method given namespace (ns)
    if (ns) setAttributeNS(element, name, value, ns);
    else setAttribute(element, name, value);
     // note current value for future comparison
    values[name] = value;
}
function setStyle(el, name, value) {
    if (value !== values[name]) {
        if (value == null) el.style.removeProperty(name);
        else el.style.setProperty(name, value + "");
        values[name] = value;
    }
}
function setAttributes(el, attrs) {
    for(const key in attrs)setAttribute(el, key, attrs[key]);
}
function setAttribute(el, name, value) {
    if (value != null) // if value is provided, update DOM attribute
    el.setAttribute(name, value);
    else // else remove DOM attribute
    el.removeAttribute(name);
}
function setAttributeNS(el, name, value, ns) {
    if (value != null) // if value is provided, update DOM attribute
    el.setAttributeNS(ns, name, value);
    else // else remove DOM attribute
    el.removeAttributeNS(ns, name);
}
function href() {
    let loc;
    return typeof window === "undefined" ? "" : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
}
function SVGStringRenderer(loader) {
    Renderer.call(this, loader);
    this._text = null;
    this._defs = {
        gradient: {},
        clipping: {}
    };
}
(0, _vegaUtil.inherits)(SVGStringRenderer, Renderer, {
    /**
   * Returns the rendered SVG text string,
   * or null if rendering has not yet occurred.
   */ svg () {
        return this._text;
    },
    /**
   * Internal rendering method.
   * @param {object} scene - The root mark of a scenegraph to render.
   */ _render (scene) {
        const m = markup(); // svg tag
        m.open("svg", (0, _vegaUtil.extend)({}, metadata, {
            class: "marks",
            width: this._width * this._scale,
            height: this._height * this._scale,
            viewBox: `0 0 ${this._width} ${this._height}`
        })); // background, if defined
        const bg = this._bgcolor;
        if (bg && bg !== "transparent" && bg !== "none") m.open("rect", {
            width: this._width,
            height: this._height,
            fill: bg
        }).close();
         // root content group
        m.open("g", rootAttributes, {
            transform: "translate(" + this._origin + ")"
        });
        this.mark(m, scene);
        m.close(); // </g>
        // defs
        this.defs(m); // get SVG text string
        this._text = m.close() + "";
        return this;
    },
    /**
   * Render a set of mark items.
   * @param {object} m - The markup context.
   * @param {object} scene - The mark parent to render.
   */ mark (m, scene) {
        const mdef = Marks[scene.marktype], tag = mdef.tag, attrList = [
            ariaItemAttributes,
            mdef.attr
        ]; // render opening group tag
        m.open("g", {
            "class": cssClass(scene),
            "clip-path": scene.clip ? clip$1(this, scene, scene.group) : null
        }, ariaMarkAttributes(scene), {
            "pointer-events": tag !== "g" && scene.interactive === false ? "none" : null
        }); // render contained elements
        const process = (item)=>{
            const href = this.href(item);
            if (href) m.open("a", href);
            m.open(tag, this.attr(scene, item, attrList, tag !== "g" ? tag : null));
            if (tag === "text") {
                const tl = textLines(item);
                if ((0, _vegaUtil.isArray)(tl)) {
                    // multi-line text
                    const attrs = {
                        x: 0,
                        dy: lineHeight(item)
                    };
                    for(let i = 0; i < tl.length; ++i)m.open("tspan", i ? attrs : null).text(textValue(item, tl[i])).close();
                } else // single-line text
                m.text(textValue(item, tl));
            } else if (tag === "g") {
                const fore = item.strokeForeground, fill = item.fill, stroke = item.stroke;
                if (fore && stroke) item.stroke = null;
                m.open("path", this.attr(scene, item, mdef.background, "bgrect")).close(); // recurse for group content
                m.open("g", this.attr(scene, item, mdef.content));
                visit(item, (scene)=>this.mark(m, scene));
                m.close();
                if (fore && stroke) {
                    if (fill) item.fill = null;
                    item.stroke = stroke;
                    m.open("path", this.attr(scene, item, mdef.foreground, "bgrect")).close();
                    if (fill) item.fill = fill;
                } else m.open("path", this.attr(scene, item, mdef.foreground, "bgfore")).close();
            }
            m.close(); // </tag>
            if (href) m.close(); // </a>
        };
        if (mdef.nested) {
            if (scene.items && scene.items.length) process(scene.items[0]);
        } else visit(scene, process);
         // render closing group tag
        return m.close(); // </g>
    },
    /**
   * Get href attributes for a hyperlinked mark item.
   * @param {Item} item - The mark item.
   */ href (item) {
        const href = item.href;
        let attr;
        if (href) {
            if (attr = this._hrefs && this._hrefs[href]) return attr;
            else this.sanitizeURL(href).then((attr)=>{
                // rewrite to use xlink namespace
                attr["xlink:href"] = attr.href;
                attr.href = null;
                (this._hrefs || (this._hrefs = {}))[href] = attr;
            });
        }
        return null;
    },
    /**
   * Get an object of SVG attributes for a mark item.
   * @param {object} scene - The mark parent.
   * @param {Item} item - The mark item.
   * @param {array|function} attrs - One or more attribute emitters.
   * @param {string} tag - The tag being rendered.
   */ attr (scene, item, attrs, tag) {
        const object = {}, emit = (name, value, ns, prefixed)=>{
            object[prefixed || name] = value;
        }; // apply mark specific attributes
        if (Array.isArray(attrs)) attrs.forEach((fn)=>fn(emit, item, this));
        else attrs(emit, item, this);
         // apply style attributes
        if (tag) style(object, item, scene, tag, this._defs);
        return object;
    },
    /**
   * Render SVG defs, as needed.
   * Must be called *after* marks have been processed to ensure the
   * collected state is current and accurate.
   * @param {object} m - The markup context.
   */ defs (m) {
        const gradient = this._defs.gradient, clipping = this._defs.clipping, count = Object.keys(gradient).length + Object.keys(clipping).length;
        if (count === 0) return; // nothing to do
        m.open("defs");
        for(const id in gradient){
            const def = gradient[id], stops = def.stops;
            if (def.gradient === "radial") {
                // SVG radial gradients automatically transform to normalized bbox
                // coordinates, in a way that is cumbersome to replicate in canvas.
                // We wrap the radial gradient in a pattern element, allowing us to
                // maintain a circular gradient that matches what canvas provides.
                m.open("pattern", {
                    id: patternPrefix + id,
                    viewBox: "0,0,1,1",
                    width: "100%",
                    height: "100%",
                    preserveAspectRatio: "xMidYMid slice"
                });
                m.open("rect", {
                    width: "1",
                    height: "1",
                    fill: "url(#" + id + ")"
                }).close();
                m.close(); // </pattern>
                m.open("radialGradient", {
                    id: id,
                    fx: def.x1,
                    fy: def.y1,
                    fr: def.r1,
                    cx: def.x2,
                    cy: def.y2,
                    r: def.r2
                });
            } else m.open("linearGradient", {
                id: id,
                x1: def.x1,
                x2: def.x2,
                y1: def.y1,
                y2: def.y2
            });
            for(let i = 0; i < stops.length; ++i)m.open("stop", {
                offset: stops[i].offset,
                "stop-color": stops[i].color
            }).close();
            m.close();
        }
        for(const id1 in clipping){
            const def1 = clipping[id1];
            m.open("clipPath", {
                id: id1
            });
            if (def1.path) m.open("path", {
                d: def1.path
            }).close();
            else m.open("rect", {
                x: 0,
                y: 0,
                width: def1.width,
                height: def1.height
            }).close();
            m.close();
        }
        m.close();
    }
}); // Helper function for attr for style presentation attributes
function style(s, item, scene, tag, defs) {
    if (item == null) return s;
    if (tag === "bgrect" && scene.interactive === false) s["pointer-events"] = "none";
    if (tag === "bgfore") {
        if (scene.interactive === false) s["pointer-events"] = "none";
        s.display = "none";
        if (item.fill !== null) return s;
    }
    if (tag === "image" && item.smooth === false) s.style = "image-rendering: optimizeSpeed; image-rendering: pixelated;";
    if (tag === "text") {
        s["font-family"] = fontFamily(item);
        s["font-size"] = fontSize(item) + "px";
        s["font-style"] = item.fontStyle;
        s["font-variant"] = item.fontVariant;
        s["font-weight"] = item.fontWeight;
    }
    for(const prop in styles){
        let value = item[prop];
        const name = styles[prop];
        if (value === "transparent" && (name === "fill" || name === "stroke")) ;
        else if (value != null) {
            if (isGradient(value)) value = gradientRef(value, defs.gradient, "");
            s[name] = value;
        }
    }
    return s;
}
const Canvas = "canvas";
const PNG = "png";
const SVG = "svg";
const None = "none";
const RenderType = {
    Canvas: Canvas,
    PNG: PNG,
    SVG: SVG,
    None: None
};
const modules = {};
modules[Canvas] = modules[PNG] = {
    renderer: CanvasRenderer,
    headless: CanvasRenderer,
    handler: CanvasHandler
};
modules[SVG] = {
    renderer: SVGRenderer,
    headless: SVGStringRenderer,
    handler: SVGHandler
};
modules[None] = {};
function renderModule(name, _) {
    name = String(name || "").toLowerCase();
    if (arguments.length > 1) {
        modules[name] = _;
        return this;
    } else return modules[name];
}
function intersect(scene, bounds, filter) {
    const hits = [], // intersection results
    box = new Bounds().union(bounds), // defensive copy
    type = scene.marktype;
    return type ? intersectMark(scene, box, filter, hits) : type === "group" ? intersectGroup(scene, box, filter, hits) : (0, _vegaUtil.error)("Intersect scene must be mark node or group item.");
}
function intersectMark(mark, box, filter, hits) {
    if (visitMark(mark, box, filter)) {
        const items = mark.items, type = mark.marktype, n = items.length;
        let i = 0;
        if (type === "group") for(; i < n; ++i)intersectGroup(items[i], box, filter, hits);
        else for(const test = Marks[type].isect; i < n; ++i){
            const item = items[i];
            if (intersectItem(item, box, test)) hits.push(item);
        }
    }
    return hits;
}
function visitMark(mark, box, filter) {
    // process if bounds intersect and if
    // (1) mark is a group mark (so we must recurse), or
    // (2) mark is interactive and passes filter
    return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === "group" || mark.interactive !== false && (!filter || filter(mark)));
}
function intersectGroup(group, box, filter, hits) {
    // test intersect against group
    // skip groups by default unless filter says otherwise
    if (filter && filter(group.mark) && intersectItem(group, box, Marks.group.isect)) hits.push(group);
     // recursively test children marks
    // translate box to group coordinate space
    const marks = group.items, n = marks && marks.length;
    if (n) {
        const x = group.x || 0, y = group.y || 0;
        box.translate(-x, -y);
        for(let i = 0; i < n; ++i)intersectMark(marks[i], box, filter, hits);
        box.translate(x, y);
    }
    return hits;
}
function intersectItem(item, box, test) {
    // test bounds enclosure, bounds intersection, then detailed test
    const bounds = item.bounds;
    return box.encloses(bounds) || box.intersects(bounds) && test(item, box);
}
const clipBounds = new Bounds();
function boundClip(mark) {
    const clip = mark.clip;
    if ((0, _vegaUtil.isFunction)(clip)) clip(boundContext(clipBounds.clear()));
    else if (clip) clipBounds.set(0, 0, mark.group.width, mark.group.height);
    else return;
    mark.bounds.intersect(clipBounds);
}
const TOLERANCE = 1e-9;
function sceneEqual(a, b, key) {
    return a === b ? true : key === "path" ? pathEqual(a, b) : a instanceof Date && b instanceof Date ? +a === +b : (0, _vegaUtil.isNumber)(a) && (0, _vegaUtil.isNumber)(b) ? Math.abs(a - b) <= TOLERANCE : !a || !b || !(0, _vegaUtil.isObject)(a) && !(0, _vegaUtil.isObject)(b) ? a == b : objectEqual(a, b);
}
function pathEqual(a, b) {
    return sceneEqual(pathParse(a), pathParse(b));
}
function objectEqual(a, b) {
    var ka = Object.keys(a), kb = Object.keys(b), key, i;
    if (ka.length !== kb.length) return false;
    ka.sort();
    kb.sort();
    for(i = ka.length - 1; i >= 0; i--){
        if (ka[i] != kb[i]) return false;
    }
    for(i = ka.length - 1; i >= 0; i--){
        key = ka[i];
        if (!sceneEqual(a[key], b[key], key)) return false;
    }
    return typeof a === typeof b;
}
function resetSVGDefIds() {
    resetSVGClipId();
    resetSVGGradientId();
}

},{"vega-util":"bApja","d3-shape":"8QPYO","d3-path":"cRa94","vega-canvas":"f0yaA","vega-loader":"gmbOr","vega-scale":"bEydG","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8QPYO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arc", ()=>(0, _arcJsDefault.default));
parcelHelpers.export(exports, "area", ()=>(0, _areaJsDefault.default));
parcelHelpers.export(exports, "line", ()=>(0, _lineJsDefault.default));
parcelHelpers.export(exports, "pie", ()=>(0, _pieJsDefault.default));
parcelHelpers.export(exports, "areaRadial", ()=>(0, _areaRadialJsDefault.default)) // Note: radialArea is deprecated!
;
parcelHelpers.export(exports, "radialArea", ()=>(0, _areaRadialJsDefault.default));
parcelHelpers.export(exports, "lineRadial", ()=>(0, _lineRadialJsDefault.default)) // Note: radialLine is deprecated!
;
parcelHelpers.export(exports, "radialLine", ()=>(0, _lineRadialJsDefault.default));
parcelHelpers.export(exports, "pointRadial", ()=>(0, _pointRadialJsDefault.default));
parcelHelpers.export(exports, "linkHorizontal", ()=>(0, _indexJs.linkHorizontal));
parcelHelpers.export(exports, "linkVertical", ()=>(0, _indexJs.linkVertical));
parcelHelpers.export(exports, "linkRadial", ()=>(0, _indexJs.linkRadial));
parcelHelpers.export(exports, "symbol", ()=>(0, _symbolJsDefault.default));
parcelHelpers.export(exports, "symbols", ()=>(0, _symbolJs.symbols));
parcelHelpers.export(exports, "symbolCircle", ()=>(0, _circleJsDefault.default));
parcelHelpers.export(exports, "symbolCross", ()=>(0, _crossJsDefault.default));
parcelHelpers.export(exports, "symbolDiamond", ()=>(0, _diamondJsDefault.default));
parcelHelpers.export(exports, "symbolSquare", ()=>(0, _squareJsDefault.default));
parcelHelpers.export(exports, "symbolStar", ()=>(0, _starJsDefault.default));
parcelHelpers.export(exports, "symbolTriangle", ()=>(0, _triangleJsDefault.default));
parcelHelpers.export(exports, "symbolWye", ()=>(0, _wyeJsDefault.default));
parcelHelpers.export(exports, "curveBasisClosed", ()=>(0, _basisClosedJsDefault.default));
parcelHelpers.export(exports, "curveBasisOpen", ()=>(0, _basisOpenJsDefault.default));
parcelHelpers.export(exports, "curveBasis", ()=>(0, _basisJsDefault.default));
parcelHelpers.export(exports, "curveBumpX", ()=>(0, _bumpJs.bumpX));
parcelHelpers.export(exports, "curveBumpY", ()=>(0, _bumpJs.bumpY));
parcelHelpers.export(exports, "curveBundle", ()=>(0, _bundleJsDefault.default));
parcelHelpers.export(exports, "curveCardinalClosed", ()=>(0, _cardinalClosedJsDefault.default));
parcelHelpers.export(exports, "curveCardinalOpen", ()=>(0, _cardinalOpenJsDefault.default));
parcelHelpers.export(exports, "curveCardinal", ()=>(0, _cardinalJsDefault.default));
parcelHelpers.export(exports, "curveCatmullRomClosed", ()=>(0, _catmullRomClosedJsDefault.default));
parcelHelpers.export(exports, "curveCatmullRomOpen", ()=>(0, _catmullRomOpenJsDefault.default));
parcelHelpers.export(exports, "curveCatmullRom", ()=>(0, _catmullRomJsDefault.default));
parcelHelpers.export(exports, "curveLinearClosed", ()=>(0, _linearClosedJsDefault.default));
parcelHelpers.export(exports, "curveLinear", ()=>(0, _linearJsDefault.default));
parcelHelpers.export(exports, "curveMonotoneX", ()=>(0, _monotoneJs.monotoneX));
parcelHelpers.export(exports, "curveMonotoneY", ()=>(0, _monotoneJs.monotoneY));
parcelHelpers.export(exports, "curveNatural", ()=>(0, _naturalJsDefault.default));
parcelHelpers.export(exports, "curveStep", ()=>(0, _stepJsDefault.default));
parcelHelpers.export(exports, "curveStepAfter", ()=>(0, _stepJs.stepAfter));
parcelHelpers.export(exports, "curveStepBefore", ()=>(0, _stepJs.stepBefore));
parcelHelpers.export(exports, "stack", ()=>(0, _stackJsDefault.default));
parcelHelpers.export(exports, "stackOffsetExpand", ()=>(0, _expandJsDefault.default));
parcelHelpers.export(exports, "stackOffsetDiverging", ()=>(0, _divergingJsDefault.default));
parcelHelpers.export(exports, "stackOffsetNone", ()=>(0, _noneJsDefault.default));
parcelHelpers.export(exports, "stackOffsetSilhouette", ()=>(0, _silhouetteJsDefault.default));
parcelHelpers.export(exports, "stackOffsetWiggle", ()=>(0, _wiggleJsDefault.default));
parcelHelpers.export(exports, "stackOrderAppearance", ()=>(0, _appearanceJsDefault.default));
parcelHelpers.export(exports, "stackOrderAscending", ()=>(0, _ascendingJsDefault.default));
parcelHelpers.export(exports, "stackOrderDescending", ()=>(0, _descendingJsDefault.default));
parcelHelpers.export(exports, "stackOrderInsideOut", ()=>(0, _insideOutJsDefault.default));
parcelHelpers.export(exports, "stackOrderNone", ()=>(0, _noneJsDefault1.default));
parcelHelpers.export(exports, "stackOrderReverse", ()=>(0, _reverseJsDefault.default));
var _arcJs = require("./arc.js");
var _arcJsDefault = parcelHelpers.interopDefault(_arcJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _pieJs = require("./pie.js");
var _pieJsDefault = parcelHelpers.interopDefault(_pieJs);
var _areaRadialJs = require("./areaRadial.js");
var _areaRadialJsDefault = parcelHelpers.interopDefault(_areaRadialJs);
var _lineRadialJs = require("./lineRadial.js");
var _lineRadialJsDefault = parcelHelpers.interopDefault(_lineRadialJs);
var _pointRadialJs = require("./pointRadial.js");
var _pointRadialJsDefault = parcelHelpers.interopDefault(_pointRadialJs);
var _indexJs = require("./link/index.js");
var _symbolJs = require("./symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _circleJs = require("./symbol/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _crossJs = require("./symbol/cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _diamondJs = require("./symbol/diamond.js");
var _diamondJsDefault = parcelHelpers.interopDefault(_diamondJs);
var _squareJs = require("./symbol/square.js");
var _squareJsDefault = parcelHelpers.interopDefault(_squareJs);
var _starJs = require("./symbol/star.js");
var _starJsDefault = parcelHelpers.interopDefault(_starJs);
var _triangleJs = require("./symbol/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _wyeJs = require("./symbol/wye.js");
var _wyeJsDefault = parcelHelpers.interopDefault(_wyeJs);
var _basisClosedJs = require("./curve/basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _basisOpenJs = require("./curve/basisOpen.js");
var _basisOpenJsDefault = parcelHelpers.interopDefault(_basisOpenJs);
var _basisJs = require("./curve/basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _bumpJs = require("./curve/bump.js");
var _bundleJs = require("./curve/bundle.js");
var _bundleJsDefault = parcelHelpers.interopDefault(_bundleJs);
var _cardinalClosedJs = require("./curve/cardinalClosed.js");
var _cardinalClosedJsDefault = parcelHelpers.interopDefault(_cardinalClosedJs);
var _cardinalOpenJs = require("./curve/cardinalOpen.js");
var _cardinalOpenJsDefault = parcelHelpers.interopDefault(_cardinalOpenJs);
var _cardinalJs = require("./curve/cardinal.js");
var _cardinalJsDefault = parcelHelpers.interopDefault(_cardinalJs);
var _catmullRomClosedJs = require("./curve/catmullRomClosed.js");
var _catmullRomClosedJsDefault = parcelHelpers.interopDefault(_catmullRomClosedJs);
var _catmullRomOpenJs = require("./curve/catmullRomOpen.js");
var _catmullRomOpenJsDefault = parcelHelpers.interopDefault(_catmullRomOpenJs);
var _catmullRomJs = require("./curve/catmullRom.js");
var _catmullRomJsDefault = parcelHelpers.interopDefault(_catmullRomJs);
var _linearClosedJs = require("./curve/linearClosed.js");
var _linearClosedJsDefault = parcelHelpers.interopDefault(_linearClosedJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _monotoneJs = require("./curve/monotone.js");
var _naturalJs = require("./curve/natural.js");
var _naturalJsDefault = parcelHelpers.interopDefault(_naturalJs);
var _stepJs = require("./curve/step.js");
var _stepJsDefault = parcelHelpers.interopDefault(_stepJs);
var _stackJs = require("./stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _expandJs = require("./offset/expand.js");
var _expandJsDefault = parcelHelpers.interopDefault(_expandJs);
var _divergingJs = require("./offset/diverging.js");
var _divergingJsDefault = parcelHelpers.interopDefault(_divergingJs);
var _noneJs = require("./offset/none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
var _silhouetteJs = require("./offset/silhouette.js");
var _silhouetteJsDefault = parcelHelpers.interopDefault(_silhouetteJs);
var _wiggleJs = require("./offset/wiggle.js");
var _wiggleJsDefault = parcelHelpers.interopDefault(_wiggleJs);
var _appearanceJs = require("./order/appearance.js");
var _appearanceJsDefault = parcelHelpers.interopDefault(_appearanceJs);
var _ascendingJs = require("./order/ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _descendingJs = require("./order/descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _insideOutJs = require("./order/insideOut.js");
var _insideOutJsDefault = parcelHelpers.interopDefault(_insideOutJs);
var _noneJs1 = require("./order/none.js");
var _noneJsDefault1 = parcelHelpers.interopDefault(_noneJs1);
var _reverseJs = require("./order/reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);

},{"./arc.js":"c3ptb","./area.js":"lblzF","./line.js":"jVTJi","./pie.js":false,"./areaRadial.js":false,"./lineRadial.js":false,"./pointRadial.js":false,"./link/index.js":false,"./symbol.js":"bcejp","./symbol/circle.js":"7RXTA","./symbol/cross.js":"4cmA2","./symbol/diamond.js":"1gK3j","./symbol/square.js":"fXRAH","./symbol/star.js":"8nJiq","./symbol/triangle.js":"bClaq","./symbol/wye.js":"2D9bg","./curve/basisClosed.js":"3uf9r","./curve/basisOpen.js":"4LPKP","./curve/basis.js":"gNfFM","./curve/bump.js":false,"./curve/bundle.js":"7Gw48","./curve/cardinalClosed.js":"e0Ty2","./curve/cardinalOpen.js":"4cTvH","./curve/cardinal.js":"i0afA","./curve/catmullRomClosed.js":"kfNnJ","./curve/catmullRomOpen.js":"amodp","./curve/catmullRom.js":"8d6GP","./curve/linearClosed.js":"gpcM0","./curve/linear.js":"huz8f","./curve/monotone.js":"kghkb","./curve/natural.js":"4f94Q","./curve/step.js":"l5kmS","./stack.js":false,"./offset/expand.js":false,"./offset/diverging.js":false,"./offset/none.js":false,"./offset/silhouette.js":false,"./offset/wiggle.js":false,"./order/appearance.js":false,"./order/ascending.js":false,"./order/descending.js":false,"./order/insideOut.js":false,"./order/none.js":false,"./order/reverse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"c3ptb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Path = require("d3-path");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _mathJs = require("./math.js");
function arcInnerRadius(d) {
    return d.innerRadius;
}
function arcOuterRadius(d) {
    return d.outerRadius;
}
function arcStartAngle(d) {
    return d.startAngle;
}
function arcEndAngle(d) {
    return d.endAngle;
}
function arcPadAngle(d) {
    return d && d.padAngle; // Note: optional!
}
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
    if (t * t < (0, _mathJs.epsilon)) return;
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
    return [
        x0 + t * x10,
        y0 + t * y10
    ];
}
// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / (0, _mathJs.sqrt)(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * (0, _mathJs.sqrt)((0, _mathJs.max)(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
    };
}
exports.default = function() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = (0, _constantJsDefault.default)(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
    function arc() {
        var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - (0, _mathJs.halfPi), a1 = endAngle.apply(this, arguments) - (0, _mathJs.halfPi), da = (0, _mathJs.abs)(a1 - a0), cw = a1 > a0;
        if (!context) context = buffer = (0, _d3Path.path)();
        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;
        // Is it a point?
        if (!(r1 > (0, _mathJs.epsilon))) context.moveTo(0, 0);
        else if (da > (0, _mathJs.tau) - (0, _mathJs.epsilon)) {
            context.moveTo(r1 * (0, _mathJs.cos)(a0), r1 * (0, _mathJs.sin)(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > (0, _mathJs.epsilon)) {
                context.moveTo(r0 * (0, _mathJs.cos)(a1), r0 * (0, _mathJs.sin)(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        } else {
            var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > (0, _mathJs.epsilon) && (padRadius ? +padRadius.apply(this, arguments) : (0, _mathJs.sqrt)(r0 * r0 + r1 * r1)), rc = (0, _mathJs.min)((0, _mathJs.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
            // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
            if (rp > (0, _mathJs.epsilon)) {
                var p0 = (0, _mathJs.asin)(rp / r0 * (0, _mathJs.sin)(ap)), p1 = (0, _mathJs.asin)(rp / r1 * (0, _mathJs.sin)(ap));
                if ((da0 -= p0 * 2) > (0, _mathJs.epsilon)) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                if ((da1 -= p1 * 2) > (0, _mathJs.epsilon)) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                else da1 = 0, a01 = a11 = (a0 + a1) / 2;
            }
            var x01 = r1 * (0, _mathJs.cos)(a01), y01 = r1 * (0, _mathJs.sin)(a01), x10 = r0 * (0, _mathJs.cos)(a10), y10 = r0 * (0, _mathJs.sin)(a10);
            // Apply rounded corners?
            if (rc > (0, _mathJs.epsilon)) {
                var x11 = r1 * (0, _mathJs.cos)(a11), y11 = r1 * (0, _mathJs.sin)(a11), x00 = r0 * (0, _mathJs.cos)(a00), y00 = r0 * (0, _mathJs.sin)(a00), oc;
                // Restrict the corner radius according to the sector angle.
                if (da < (0, _mathJs.pi) && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
                    var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / (0, _mathJs.sin)((0, _mathJs.acos)((ax * bx + ay * by) / ((0, _mathJs.sqrt)(ax * ax + ay * ay) * (0, _mathJs.sqrt)(bx * bx + by * by))) / 2), lc = (0, _mathJs.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = (0, _mathJs.min)(rc, (r0 - lc) / (kc - 1));
                    rc1 = (0, _mathJs.min)(rc, (r1 - lc) / (kc + 1));
                }
            }
            // Is the sector collapsed to a line?
            if (!(da1 > (0, _mathJs.epsilon))) context.moveTo(x01, y01);
            else if (rc1 > (0, _mathJs.epsilon)) {
                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _mathJs.atan2)(t0.y01, t0.x01), (0, _mathJs.atan2)(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc1, (0, _mathJs.atan2)(t0.y01, t0.x01), (0, _mathJs.atan2)(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, (0, _mathJs.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _mathJs.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, (0, _mathJs.atan2)(t1.y11, t1.x11), (0, _mathJs.atan2)(t1.y01, t1.x01), !cw);
                }
            } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
            // Is there no inner ring, and it’s a circular sector?
            // Or perhaps it’s an annular sector collapsed due to padding?
            if (!(r0 > (0, _mathJs.epsilon)) || !(da0 > (0, _mathJs.epsilon))) context.lineTo(x10, y10);
            else if (rc0 > (0, _mathJs.epsilon)) {
                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _mathJs.atan2)(t0.y01, t0.x01), (0, _mathJs.atan2)(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc0, (0, _mathJs.atan2)(t0.y01, t0.x01), (0, _mathJs.atan2)(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, (0, _mathJs.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _mathJs.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, (0, _mathJs.atan2)(t1.y11, t1.x11), (0, _mathJs.atan2)(t1.y01, t1.x01), !cw);
                }
            } else context.arc(0, 0, r0, a10, a00, cw);
        }
        context.closePath();
        if (buffer) return context = null, buffer + "" || null;
    }
    arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - (0, _mathJs.pi) / 2;
        return [
            (0, _mathJs.cos)(a) * r,
            (0, _mathJs.sin)(a) * r
        ];
    };
    arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : innerRadius;
    };
    arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : cornerRadius;
    };
    arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : padRadius;
    };
    arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : startAngle;
    };
    arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : endAngle;
    };
    arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), arc) : padAngle;
    };
    arc.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
};

},{"d3-path":"cRa94","./constant.js":"12DQf","./math.js":"OHDSf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cRa94":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "path", ()=>(0, _pathJsDefault.default));
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);

},{"./path.js":"6vvkL","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6vvkL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
    this._ = "";
}
function path() {
    return new Path;
}
Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    },
    lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);
        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        else if (!(l01_2 > epsilon)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        else {
            var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > epsilon) this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
    },
    arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);
        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) this._ += "M" + x0 + "," + y0;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
        // Is this arc empty? We’re done.
        if (!r) return;
        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau + tau;
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        else if (da > epsilon) this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    },
    rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function() {
        return this._;
    }
};
exports.default = path;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"12DQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function constant() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"OHDSf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "epsilon", ()=>epsilon);
parcelHelpers.export(exports, "pi", ()=>pi);
parcelHelpers.export(exports, "halfPi", ()=>halfPi);
parcelHelpers.export(exports, "tau", ()=>tau);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "asin", ()=>asin);
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lblzF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Path = require("d3-path");
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _pointJs = require("./point.js");
exports.default = function(x0, y0, y1) {
    var x1 = null, defined = (0, _constantJsDefault.default)(true), context = null, curve = (0, _linearJsDefault.default), output = null;
    x0 = typeof x0 === "function" ? x0 : x0 === undefined ? (0, _pointJs.x) : (0, _constantJsDefault.default)(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === undefined ? (0, _constantJsDefault.default)(0) : (0, _constantJsDefault.default)(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === undefined ? (0, _pointJs.y) : (0, _constantJsDefault.default)(+y1);
    function area(data) {
        var i, j, k, n = (data = (0, _arrayJsDefault.default)(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
        if (context == null) output = curve(buffer = (0, _d3Path.path)());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) {
                    j = i;
                    output.areaStart();
                    output.lineStart();
                } else {
                    output.lineEnd();
                    output.lineStart();
                    for(k = i - 1; k >= j; --k)output.point(x0z[k], y0z[k]);
                    output.lineEnd();
                    output.areaEnd();
                }
            }
            if (defined0) {
                x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
            }
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    function arealine() {
        return (0, _lineJsDefault.default)().defined(defined).curve(curve).context(context);
    }
    area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : x0;
    };
    area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : x1;
    };
    area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : y0;
    };
    area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
        return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
        return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
        return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), area) : defined;
    };
    area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
};

},{"d3-path":"cRa94","./array.js":"gwBAX","./constant.js":"12DQf","./curve/linear.js":"huz8f","./line.js":"jVTJi","./point.js":"1IQGj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gwBAX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
var slice = Array.prototype.slice;
exports.default = function(x) {
    return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
     : Array.from(x); // Map, Set, iterable, string, or anything else
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"huz8f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function Linear(context) {
    this._context = context;
}
Linear.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // proceed
            default:
                this._context.lineTo(x, y);
                break;
        }
    }
};
exports.default = function(context) {
    return new Linear(context);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jVTJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Path = require("d3-path");
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _pointJs = require("./point.js");
exports.default = function(x, y) {
    var defined = (0, _constantJsDefault.default)(true), context = null, curve = (0, _linearJsDefault.default), output = null;
    x = typeof x === "function" ? x : x === undefined ? (0, _pointJs.x) : (0, _constantJsDefault.default)(x);
    y = typeof y === "function" ? y : y === undefined ? (0, _pointJs.y) : (0, _constantJsDefault.default)(y);
    function line(data) {
        var i, n = (data = (0, _arrayJsDefault.default)(data)).length, d, defined0 = false, buffer;
        if (context == null) output = curve(buffer = (0, _d3Path.path)());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) output.lineStart();
                else output.lineEnd();
            }
            if (defined0) output.point(+x(d, i, data), +y(d, i, data));
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    line.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), line) : x;
    };
    line.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), line) : y;
    };
    line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), line) : defined;
    };
    line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
};

},{"d3-path":"cRa94","./array.js":"gwBAX","./constant.js":"12DQf","./curve/linear.js":"huz8f","./point.js":"1IQGj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1IQGj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "x", ()=>x);
parcelHelpers.export(exports, "y", ()=>y);
function x(p) {
    return p[0];
}
function y(p) {
    return p[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bcejp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symbols", ()=>symbols);
var _d3Path = require("d3-path");
var _circleJs = require("./symbol/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _crossJs = require("./symbol/cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _diamondJs = require("./symbol/diamond.js");
var _diamondJsDefault = parcelHelpers.interopDefault(_diamondJs);
var _starJs = require("./symbol/star.js");
var _starJsDefault = parcelHelpers.interopDefault(_starJs);
var _squareJs = require("./symbol/square.js");
var _squareJsDefault = parcelHelpers.interopDefault(_squareJs);
var _triangleJs = require("./symbol/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _wyeJs = require("./symbol/wye.js");
var _wyeJsDefault = parcelHelpers.interopDefault(_wyeJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var symbols = [
    (0, _circleJsDefault.default),
    (0, _crossJsDefault.default),
    (0, _diamondJsDefault.default),
    (0, _squareJsDefault.default),
    (0, _starJsDefault.default),
    (0, _triangleJsDefault.default),
    (0, _wyeJsDefault.default)
];
exports.default = function(type, size) {
    var context = null;
    type = typeof type === "function" ? type : (0, _constantJsDefault.default)(type || (0, _circleJsDefault.default));
    size = typeof size === "function" ? size : (0, _constantJsDefault.default)(size === undefined ? 64 : +size);
    function symbol() {
        var buffer;
        if (!context) context = buffer = (0, _d3Path.path)();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(_), symbol) : type;
    };
    symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), symbol) : size;
    };
    symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
};

},{"d3-path":"cRa94","./symbol/circle.js":"7RXTA","./symbol/cross.js":"4cmA2","./symbol/diamond.js":"1gK3j","./symbol/star.js":"8nJiq","./symbol/square.js":"fXRAH","./symbol/triangle.js":"bClaq","./symbol/wye.js":"2D9bg","./constant.js":"12DQf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7RXTA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw: function(context, size) {
        var r = Math.sqrt(size / (0, _mathJs.pi));
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, (0, _mathJs.tau));
    }
};

},{"../math.js":"OHDSf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4cmA2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    draw: function(context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1gK3j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var tan30 = Math.sqrt(1 / 3), tan30_2 = tan30 * 2;
exports.default = {
    draw: function(context, size) {
        var y = Math.sqrt(size / tan30_2), x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8nJiq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var ka = 0.89081309152928522810, kr = Math.sin((0, _mathJs.pi) / 10) / Math.sin(7 * (0, _mathJs.pi) / 10), kx = Math.sin((0, _mathJs.tau) / 10) * kr, ky = -Math.cos((0, _mathJs.tau) / 10) * kr;
exports.default = {
    draw: function(context, size) {
        var r = Math.sqrt(size * ka), x = kx * r, y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for(var i = 1; i < 5; ++i){
            var a = (0, _mathJs.tau) * i / 5, c = Math.cos(a), s = Math.sin(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};

},{"../math.js":"OHDSf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fXRAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    draw: function(context, size) {
        var w = Math.sqrt(size), x = -w / 2;
        context.rect(x, x, w, w);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bClaq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var sqrt3 = Math.sqrt(3);
exports.default = {
    draw: function(context, size) {
        var y = -Math.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3 * y, -y);
        context.lineTo(sqrt3 * y, -y);
        context.closePath();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2D9bg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var c = -0.5, s = Math.sqrt(3) / 2, k = 1 / Math.sqrt(12), a = (k / 2 + 1) * 3;
exports.default = {
    draw: function(context, size) {
        var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3uf9r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _basisJs = require("./basis.js");
function BasisClosed(context) {
    this._context = context;
}
BasisClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
            case 2:
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x2 = x, this._y2 = y;
                break;
            case 1:
                this._point = 2;
                this._x3 = x, this._y3 = y;
                break;
            case 2:
                this._point = 3;
                this._x4 = x, this._y4 = y;
                this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                break;
            default:
                (0, _basisJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
exports.default = function(context) {
    return new BasisClosed(context);
};

},{"../noop.js":"9n7oj","./basis.js":"gNfFM","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9n7oj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gNfFM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point);
parcelHelpers.export(exports, "Basis", ()=>Basis);
function point(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}
function Basis(context) {
    this._context = context;
}
Basis.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 3:
                point(this, this._x1, this._y1); // proceed
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
            default:
                point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
exports.default = function(context) {
    return new Basis(context);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4LPKP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
function BasisOpen(context) {
    this._context = context;
}
BasisOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                break;
            case 3:
                this._point = 4; // proceed
            default:
                (0, _basisJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
exports.default = function(context) {
    return new BasisOpen(context);
};

},{"./basis.js":"gNfFM","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7Gw48":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
function Bundle(context, beta) {
    this._basis = new (0, _basisJs.Basis)(context);
    this._beta = beta;
}
Bundle.prototype = {
    lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
    },
    lineEnd: function() {
        var x = this._x, y = this._y, j = x.length - 1;
        if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while(++i <= j){
                t = i / j;
                this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
            }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
exports.default = function custom(beta) {
    function bundle(context) {
        return beta === 1 ? new (0, _basisJs.Basis)(context) : new Bundle(context, beta);
    }
    bundle.beta = function(beta) {
        return custom(+beta);
    };
    return bundle;
}(0.85);

},{"./basis.js":"gNfFM","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"e0Ty2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardinalClosed", ()=>CardinalClosed);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _cardinalJs = require("./cardinal.js");
function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, _cardinalJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension) {
    function cardinal(context) {
        return new CardinalClosed(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"../noop.js":"9n7oj","./cardinal.js":"i0afA","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i0afA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point);
parcelHelpers.export(exports, "Cardinal", ()=>Cardinal);
function point(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                point(this, this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                this._x1 = x, this._y1 = y;
                break;
            case 2:
                this._point = 3; // proceed
            default:
                point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension) {
    function cardinal(context) {
        return new Cardinal(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4cTvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardinalOpen", ()=>CardinalOpen);
var _cardinalJs = require("./cardinal.js");
function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // proceed
            default:
                (0, _cardinalJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension) {
    function cardinal(context) {
        return new CardinalOpen(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"./cardinal.js":"i0afA","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kfNnJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cardinalClosedJs = require("./cardinalClosed.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _catmullRomJs = require("./catmullRom.js");
function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRomClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, _catmullRomJs.point)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new (0, _cardinalClosedJs.CardinalClosed)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"./cardinalClosed.js":"e0Ty2","../noop.js":"9n7oj","./catmullRom.js":"8d6GP","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8d6GP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point);
var _mathJs = require("../math.js");
var _cardinalJs = require("./cardinal.js");
function point(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > (0, _mathJs.epsilon)) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > (0, _mathJs.epsilon)) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRom.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                this.point(this._x2, this._y2);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3; // proceed
            default:
                point(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new (0, _cardinalJs.Cardinal)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"../math.js":"OHDSf","./cardinal.js":"i0afA","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"amodp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cardinalOpenJs = require("./cardinalOpen.js");
var _catmullRomJs = require("./catmullRom.js");
function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRomOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // proceed
            default:
                (0, _catmullRomJs.point)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new (0, _cardinalOpenJs.CardinalOpen)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"./cardinalOpen.js":"4cTvH","./catmullRom.js":"8d6GP","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gpcM0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
function LinearClosed(context) {
    this._context = context;
}
LinearClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._point) this._context.closePath();
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
    }
};
exports.default = function(context) {
    return new LinearClosed(context);
};

},{"../noop.js":"9n7oj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kghkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "monotoneX", ()=>monotoneX);
parcelHelpers.export(exports, "monotoneY", ()=>monotoneY);
function sign(x) {
    return x < 0 ? -1 : 1;
}
// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
// Calculate a one-sided slope.
function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
function MonotoneX(context) {
    this._context = context;
}
MonotoneX.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
            case 3:
                point(this, this._t0, slope2(this, this._t0));
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                point(this, slope2(this, t1 = slope3(this, x, y)), t1);
                break;
            default:
                point(this, this._t0, t1 = slope3(this, x, y));
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
    }
};
function MonotoneY(context) {
    this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
    MonotoneX.prototype.point.call(this, y, x);
};
function ReflectContext(context) {
    this._context = context;
}
ReflectContext.prototype = {
    moveTo: function(x, y) {
        this._context.moveTo(y, x);
    },
    closePath: function() {
        this._context.closePath();
    },
    lineTo: function(x, y) {
        this._context.lineTo(y, x);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
};
function monotoneX(context) {
    return new MonotoneX(context);
}
function monotoneY(context) {
    return new MonotoneY(context);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4f94Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function Natural(context) {
    this._context = context;
}
Natural.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = [];
        this._y = [];
    },
    lineEnd: function() {
        var x = this._x, y = this._y, n = x.length;
        if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) this._context.lineTo(x[1], y[1]);
            else {
                var px = controlPoints(x), py = controlPoints(y);
                for(var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1)this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
        }
        if (this._line || this._line !== 0 && n === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for(i = 1; i < n - 1; ++i)a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for(i = 1; i < n; ++i)m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for(i = n - 2; i >= 0; --i)a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for(i = 0; i < n - 1; ++i)b[i] = 2 * x[i + 1] - a[i + 1];
    return [
        a,
        b
    ];
}
exports.default = function(context) {
    return new Natural(context);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"l5kmS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stepBefore", ()=>stepBefore);
parcelHelpers.export(exports, "stepAfter", ()=>stepAfter);
function Step(context, t) {
    this._context = context;
    this._t = t;
}
Step.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // proceed
            default:
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y);
                    this._context.lineTo(x, y);
                } else {
                    var x1 = this._x * (1 - this._t) + x * this._t;
                    this._context.lineTo(x1, this._y);
                    this._context.lineTo(x1, y);
                }
                break;
        }
        this._x = x, this._y = y;
    }
};
exports.default = function(context) {
    return new Step(context, 0.5);
};
function stepBefore(context) {
    return new Step(context, 0);
}
function stepAfter(context) {
    return new Step(context, 1);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"f0yaA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "domCanvas", ()=>(0, _domCanvas.domCanvas));
parcelHelpers.export(exports, "canvas", ()=>(0, _domCanvas.domCanvas));
parcelHelpers.export(exports, "image", ()=>(0, _domCanvas.domImage));
var _domCanvas = require("./src/domCanvas");

},{"./src/domCanvas":"druMr","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"druMr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "domCanvas", ()=>domCanvas);
parcelHelpers.export(exports, "domImage", ()=>domImage);
function domCanvas(w, h) {
    if (typeof document !== "undefined" && document.createElement) {
        const c = document.createElement("canvas");
        if (c && c.getContext) {
            c.width = w;
            c.height = h;
            return c;
        }
    }
    return null;
}
const domImage = ()=>typeof Image !== "undefined" ? Image : null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bEydG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scaleImplicit", ()=>(0, _d3Scale.scaleImplicit));
parcelHelpers.export(exports, "Band", ()=>Band);
parcelHelpers.export(exports, "BinOrdinal", ()=>BinOrdinal);
parcelHelpers.export(exports, "DiscreteLegend", ()=>DiscreteLegend);
parcelHelpers.export(exports, "Diverging", ()=>Diverging);
parcelHelpers.export(exports, "GradientLegend", ()=>GradientLegend);
parcelHelpers.export(exports, "Identity", ()=>Identity);
parcelHelpers.export(exports, "Linear", ()=>Linear);
parcelHelpers.export(exports, "Log", ()=>Log);
parcelHelpers.export(exports, "Ordinal", ()=>Ordinal);
parcelHelpers.export(exports, "Point", ()=>Point);
parcelHelpers.export(exports, "Pow", ()=>Pow);
parcelHelpers.export(exports, "Quantile", ()=>Quantile);
parcelHelpers.export(exports, "Quantize", ()=>Quantize);
parcelHelpers.export(exports, "Sequential", ()=>Sequential);
parcelHelpers.export(exports, "Sqrt", ()=>Sqrt);
parcelHelpers.export(exports, "SymbolLegend", ()=>SymbolLegend);
parcelHelpers.export(exports, "Symlog", ()=>Symlog);
parcelHelpers.export(exports, "Threshold", ()=>Threshold);
parcelHelpers.export(exports, "Time", ()=>Time);
parcelHelpers.export(exports, "UTC", ()=>UTC);
parcelHelpers.export(exports, "bandSpace", ()=>bandSpace);
parcelHelpers.export(exports, "domainCaption", ()=>domainCaption);
parcelHelpers.export(exports, "interpolate", ()=>interpolate);
parcelHelpers.export(exports, "interpolateColors", ()=>interpolateColors);
parcelHelpers.export(exports, "interpolateRange", ()=>interpolateRange);
parcelHelpers.export(exports, "isContinuous", ()=>isContinuous);
parcelHelpers.export(exports, "isDiscrete", ()=>isDiscrete);
parcelHelpers.export(exports, "isDiscretizing", ()=>isDiscretizing);
parcelHelpers.export(exports, "isInterpolating", ()=>isInterpolating);
parcelHelpers.export(exports, "isLogarithmic", ()=>isLogarithmic);
parcelHelpers.export(exports, "isQuantile", ()=>isQuantile);
parcelHelpers.export(exports, "isTemporal", ()=>isTemporal);
parcelHelpers.export(exports, "isValidScaleType", ()=>isValidScaleType);
parcelHelpers.export(exports, "labelFormat", ()=>labelFormat);
parcelHelpers.export(exports, "labelFraction", ()=>labelFraction);
parcelHelpers.export(exports, "labelValues", ()=>labelValues);
parcelHelpers.export(exports, "quantizeInterpolator", ()=>quantizeInterpolator);
parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "scaleCopy", ()=>scaleCopy);
parcelHelpers.export(exports, "scaleFraction", ()=>scaleFraction);
parcelHelpers.export(exports, "scheme", ()=>scheme);
parcelHelpers.export(exports, "tickCount", ()=>tickCount);
parcelHelpers.export(exports, "tickFormat", ()=>tickFormat);
parcelHelpers.export(exports, "tickValues", ()=>tickValues);
parcelHelpers.export(exports, "validTicks", ()=>validTicks);
var _vegaUtil = require("vega-util");
var _d3Array = require("d3-array");
var _d3Scale = require("d3-scale");
var _d3Interpolate = require("d3-interpolate");
var _vegaTime = require("vega-time");
function bandSpace(count, paddingInner, paddingOuter) {
    const space = count - paddingInner + paddingOuter * 2;
    return count ? space > 0 ? space : 1 : 0;
}
const Identity = "identity";
const Linear = "linear";
const Log = "log";
const Pow = "pow";
const Sqrt = "sqrt";
const Symlog = "symlog";
const Time = "time";
const UTC = "utc";
const Sequential = "sequential";
const Diverging = "diverging";
const Quantile = "quantile";
const Quantize = "quantize";
const Threshold = "threshold";
const Ordinal = "ordinal";
const Point = "point";
const Band = "band";
const BinOrdinal = "bin-ordinal"; // categories
const Continuous = "continuous";
const Discrete = "discrete";
const Discretizing = "discretizing";
const Interpolating = "interpolating";
const Temporal = "temporal";
function invertRange(scale) {
    return function(_) {
        let lo = _[0], hi = _[1], t;
        if (hi < lo) {
            t = lo;
            lo = hi;
            hi = t;
        }
        return [
            scale.invert(lo),
            scale.invert(hi)
        ];
    };
}
function invertRangeExtent(scale) {
    return function(_) {
        const range = scale.range();
        let lo = _[0], hi = _[1], min = -1, max, t, i, n;
        if (hi < lo) {
            t = lo;
            lo = hi;
            hi = t;
        }
        for(i = 0, n = range.length; i < n; ++i)if (range[i] >= lo && range[i] <= hi) {
            if (min < 0) min = i;
            max = i;
        }
        if (min < 0) return undefined;
        lo = scale.invertExtent(range[min]);
        hi = scale.invertExtent(range[max]);
        return [
            lo[0] === undefined ? lo[1] : lo[0],
            hi[1] === undefined ? hi[0] : hi[1]
        ];
    };
}
function band() {
    const scale = (0, _d3Scale.scaleOrdinal)().unknown(undefined), domain = scale.domain, ordinalRange = scale.range;
    let range$1 = [
        0,
        1
    ], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
        const n = domain().length, reverse = range$1[1] < range$1[0], stop = range$1[1 - reverse], space = bandSpace(n, paddingInner, paddingOuter);
        let start = range$1[reverse - 0];
        step = (stop - start) / (space || 1);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) {
            start = Math.round(start);
            bandwidth = Math.round(bandwidth);
        }
        const values = (0, _d3Array.range)(n).map((i)=>start + step * i);
        return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function(_) {
        if (arguments.length) {
            domain(_);
            return rescale();
        } else return domain();
    };
    scale.range = function(_) {
        if (arguments.length) {
            range$1 = [
                +_[0],
                +_[1]
            ];
            return rescale();
        } else return range$1.slice();
    };
    scale.rangeRound = function(_) {
        range$1 = [
            +_[0],
            +_[1]
        ];
        round = true;
        return rescale();
    };
    scale.bandwidth = function() {
        return bandwidth;
    };
    scale.step = function() {
        return step;
    };
    scale.round = function(_) {
        if (arguments.length) {
            round = !!_;
            return rescale();
        } else return round;
    };
    scale.padding = function(_) {
        if (arguments.length) {
            paddingOuter = Math.max(0, Math.min(1, _));
            paddingInner = paddingOuter;
            return rescale();
        } else return paddingInner;
    };
    scale.paddingInner = function(_) {
        if (arguments.length) {
            paddingInner = Math.max(0, Math.min(1, _));
            return rescale();
        } else return paddingInner;
    };
    scale.paddingOuter = function(_) {
        if (arguments.length) {
            paddingOuter = Math.max(0, Math.min(1, _));
            return rescale();
        } else return paddingOuter;
    };
    scale.align = function(_) {
        if (arguments.length) {
            align = Math.max(0, Math.min(1, _));
            return rescale();
        } else return align;
    };
    scale.invertRange = function(_) {
        // bail if range has null or undefined values
        if (_[0] == null || _[1] == null) return;
        const reverse = range$1[1] < range$1[0], values = reverse ? ordinalRange().reverse() : ordinalRange(), n = values.length - 1;
        let lo = +_[0], hi = +_[1], a, b, t; // bail if either range endpoint is invalid
        if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range
        if (hi < lo) {
            t = lo;
            lo = hi;
            hi = t;
        }
        if (hi < values[0] || lo > range$1[1 - reverse]) return; // binary search to index into scale range
        a = Math.max(0, (0, _d3Array.bisectRight)(values, lo) - 1);
        b = lo === hi ? a : (0, _d3Array.bisectRight)(values, hi) - 1; // increment index a if lo is within padding gap
        if (lo - values[a] > bandwidth + 1e-10) ++a;
        if (reverse) {
            // map + swap
            t = a;
            a = n - b;
            b = n - t;
        }
        return a > b ? undefined : domain().slice(a, b + 1);
    };
    scale.invert = function(_) {
        const value = scale.invertRange([
            _,
            _
        ]);
        return value ? value[0] : value;
    };
    scale.copy = function() {
        return band().domain(domain()).range(range$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return rescale();
}
function pointish(scale) {
    const copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    scale.copy = function() {
        return pointish(copy());
    };
    return scale;
}
function point() {
    return pointish(band().paddingInner(1));
}
var map = Array.prototype.map;
function numbers(_) {
    return map.call(_, (0, _vegaUtil.toNumber));
}
const slice = Array.prototype.slice;
function scaleBinOrdinal() {
    let domain = [], range = [];
    function scale(x) {
        return x == null || x !== x ? undefined : range[((0, _d3Array.bisect)(domain, x) - 1) % range.length];
    }
    scale.domain = function(_) {
        if (arguments.length) {
            domain = numbers(_);
            return scale;
        } else return domain.slice();
    };
    scale.range = function(_) {
        if (arguments.length) {
            range = slice.call(_);
            return scale;
        } else return range.slice();
    };
    scale.tickFormat = function(count, specifier) {
        return (0, _d3Scale.tickFormat)(domain[0], (0, _vegaUtil.peek)(domain), count == null ? 10 : count, specifier);
    };
    scale.copy = function() {
        return scaleBinOrdinal().domain(scale.domain()).range(scale.range());
    };
    return scale;
}
const scales = {};
/**
 * Augment scales with their type and needed inverse methods.
 */ function create(type, constructor, metadata) {
    const ctr = function scale() {
        const s = constructor();
        if (!s.invertRange) s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;
        s.type = type;
        return s;
    };
    ctr.metadata = (0, _vegaUtil.toSet)((0, _vegaUtil.array)(metadata));
    return ctr;
}
function scale(type, scale, metadata) {
    if (arguments.length > 1) {
        scales[type] = create(type, scale, metadata);
        return this;
    } else return isValidScaleType(type) ? scales[type] : undefined;
} // identity scale
scale(Identity, (0, _d3Scale.scaleIdentity)); // continuous scales
scale(Linear, (0, _d3Scale.scaleLinear), Continuous);
scale(Log, (0, _d3Scale.scaleLog), [
    Continuous,
    Log
]);
scale(Pow, (0, _d3Scale.scalePow), Continuous);
scale(Sqrt, (0, _d3Scale.scaleSqrt), Continuous);
scale(Symlog, (0, _d3Scale.scaleSymlog), Continuous);
scale(Time, (0, _d3Scale.scaleTime), [
    Continuous,
    Temporal
]);
scale(UTC, (0, _d3Scale.scaleUtc), [
    Continuous,
    Temporal
]); // sequential scales
scale(Sequential, (0, _d3Scale.scaleSequential), [
    Continuous,
    Interpolating
]); // backwards compat
scale("".concat(Sequential, "-").concat(Linear), (0, _d3Scale.scaleSequential), [
    Continuous,
    Interpolating
]);
scale("".concat(Sequential, "-").concat(Log), (0, _d3Scale.scaleSequentialLog), [
    Continuous,
    Interpolating,
    Log
]);
scale("".concat(Sequential, "-").concat(Pow), (0, _d3Scale.scaleSequentialPow), [
    Continuous,
    Interpolating
]);
scale("".concat(Sequential, "-").concat(Sqrt), (0, _d3Scale.scaleSequentialSqrt), [
    Continuous,
    Interpolating
]);
scale("".concat(Sequential, "-").concat(Symlog), (0, _d3Scale.scaleSequentialSymlog), [
    Continuous,
    Interpolating
]); // diverging scales
scale("".concat(Diverging, "-").concat(Linear), (0, _d3Scale.scaleDiverging), [
    Continuous,
    Interpolating
]);
scale("".concat(Diverging, "-").concat(Log), (0, _d3Scale.scaleDivergingLog), [
    Continuous,
    Interpolating,
    Log
]);
scale("".concat(Diverging, "-").concat(Pow), (0, _d3Scale.scaleDivergingPow), [
    Continuous,
    Interpolating
]);
scale("".concat(Diverging, "-").concat(Sqrt), (0, _d3Scale.scaleDivergingSqrt), [
    Continuous,
    Interpolating
]);
scale("".concat(Diverging, "-").concat(Symlog), (0, _d3Scale.scaleDivergingSymlog), [
    Continuous,
    Interpolating
]); // discretizing scales
scale(Quantile, (0, _d3Scale.scaleQuantile), [
    Discretizing,
    Quantile
]);
scale(Quantize, (0, _d3Scale.scaleQuantize), Discretizing);
scale(Threshold, (0, _d3Scale.scaleThreshold), Discretizing); // discrete scales
scale(BinOrdinal, scaleBinOrdinal, [
    Discrete,
    Discretizing
]);
scale(Ordinal, (0, _d3Scale.scaleOrdinal), Discrete);
scale(Band, band, Discrete);
scale(Point, point, Discrete);
function isValidScaleType(type) {
    return (0, _vegaUtil.hasOwnProperty)(scales, type);
}
function hasType(key, type) {
    const s = scales[key];
    return s && s.metadata[type];
}
function isContinuous(key) {
    return hasType(key, Continuous);
}
function isDiscrete(key) {
    return hasType(key, Discrete);
}
function isDiscretizing(key) {
    return hasType(key, Discretizing);
}
function isLogarithmic(key) {
    return hasType(key, Log);
}
function isTemporal(key) {
    return hasType(key, Temporal);
}
function isInterpolating(key) {
    return hasType(key, Interpolating);
}
function isQuantile(key) {
    return hasType(key, Quantile);
}
const scaleProps = [
    "clamp",
    "base",
    "constant",
    "exponent"
];
function interpolateRange(interpolator, range) {
    const start = range[0], span = (0, _vegaUtil.peek)(range) - start;
    return function(i) {
        return interpolator(start + i * span);
    };
}
function interpolateColors(colors, type, gamma) {
    return (0, _d3Interpolate.piecewise)(interpolate(type || "rgb", gamma), colors);
}
function quantizeInterpolator(interpolator, count) {
    const samples = new Array(count), n = count + 1;
    for(let i = 0; i < count;)samples[i] = interpolator(++i / n);
    return samples;
}
function scaleCopy(scale) {
    const t = scale.type, s = scale.copy();
    s.type = t;
    return s;
}
function scaleFraction(scale$1, min, max) {
    const delta = max - min;
    let i, t, s;
    if (!delta || !Number.isFinite(delta)) return (0, _vegaUtil.constant)(0.5);
    else {
        i = (t = scale$1.type).indexOf("-");
        t = i < 0 ? t : t.slice(i + 1);
        s = scale(t)().domain([
            min,
            max
        ]).range([
            0,
            1
        ]);
        scaleProps.forEach((m)=>scale$1[m] ? s[m](scale$1[m]()) : 0);
        return s;
    }
}
function interpolate(type, gamma) {
    const interp = _d3Interpolate[method(type)];
    return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;
}
function method(type) {
    return "interpolate" + type.toLowerCase().split("-").map((s)=>s[0].toUpperCase() + s.slice(1)).join("");
}
const continuous = {
    blues: "cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",
    greens: "d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",
    greys: "e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",
    oranges: "fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",
    purples: "e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",
    reds: "fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",
    blueGreen: "d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",
    bluePurple: "ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",
    greenBlue: "d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",
    orangeRed: "fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",
    purpleBlue: "dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",
    purpleBlueGreen: "dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",
    purpleRed: "dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",
    redPurple: "fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",
    yellowGreen: "e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",
    yellowOrangeBrown: "feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",
    yellowOrangeRed: "fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",
    blueOrange: "134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",
    brownBlueGreen: "704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",
    purpleGreen: "5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",
    purpleOrange: "4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",
    redBlue: "8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",
    redGrey: "8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",
    yellowGreenBlue: "eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",
    redYellowBlue: "a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",
    redYellowGreen: "a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",
    pinkYellowGreen: "8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",
    spectral: "9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",
    viridis: "440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",
    magma: "0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",
    inferno: "0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",
    plasma: "0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",
    cividis: "00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647",
    rainbow: "6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",
    sinebow: "ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",
    turbo: "23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00",
    browns: "eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",
    tealBlues: "bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",
    teals: "bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",
    warmGreys: "dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",
    goldGreen: "f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",
    goldOrange: "f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",
    goldRed: "f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",
    lightGreyRed: "efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",
    lightGreyTeal: "e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",
    lightMulti: "e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",
    lightOrange: "f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",
    lightTealBlue: "e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",
    darkBlue: "3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",
    darkGold: "3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",
    darkGreen: "3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",
    darkMulti: "3737371f5287197d8c29a86995ce3fffe800ffffff",
    darkRed: "3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"
};
const discrete = {
    category10: "1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf",
    category20: "1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",
    category20b: "393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",
    category20c: "3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",
    tableau10: "4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",
    tableau20: "4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5",
    accent: "7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666",
    dark2: "1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666",
    paired: "a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928",
    pastel1: "fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2",
    pastel2: "b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc",
    set1: "e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999",
    set2: "66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3",
    set3: "8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"
};
function colors(palette) {
    const n = palette.length / 6 | 0, c = new Array(n);
    for(let i = 0; i < n;)c[i] = "#" + palette.slice(i * 6, ++i * 6);
    return c;
}
function apply(_, f) {
    for(const k in _)scheme(k, f(_[k]));
}
const schemes = {};
apply(discrete, colors);
apply(continuous, (_)=>interpolateColors(colors(_)));
function scheme(name, scheme) {
    name = name && name.toLowerCase();
    if (arguments.length > 1) {
        schemes[name] = scheme;
        return this;
    } else return schemes[name];
}
const SymbolLegend = "symbol";
const DiscreteLegend = "discrete";
const GradientLegend = "gradient";
const defaultFormatter = (value)=>(0, _vegaUtil.isArray)(value) ? value.map((v)=>String(v)) : String(value);
const ascending = (a, b)=>a[1] - b[1];
const descending = (a, b)=>b[1] - a[1];
/**
 * Determine the tick count or interval function.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} count - The desired tick count or interval specifier.
 * @param {number} minStep - The desired minimum step between tick values.
 * @return {*} - The tick count or interval function.
 */ function tickCount(scale, count, minStep) {
    let step;
    if ((0, _vegaUtil.isNumber)(count)) {
        if (scale.bins) count = Math.max(count, scale.bins.length);
        if (minStep != null) count = Math.min(count, Math.floor((0, _vegaUtil.span)(scale.domain()) / minStep || 1));
    }
    if ((0, _vegaUtil.isObject)(count)) {
        step = count.step;
        count = count.interval;
    }
    if ((0, _vegaUtil.isString)(count)) {
        count = scale.type === Time ? (0, _vegaTime.timeInterval)(count) : scale.type == UTC ? (0, _vegaTime.utcInterval)(count) : (0, _vegaUtil.error)("Only time and utc scales accept interval strings.");
        if (step) count = count.every(step);
    }
    return count;
}
/**
 * Filter a set of candidate tick values, ensuring that only tick values
 * that lie within the scale range are included.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {Array<*>} ticks - The candidate tick values.
 * @param {*} count - The tick count or interval function.
 * @return {Array<*>} - The filtered tick values.
 */ function validTicks(scale, ticks, count) {
    let range = scale.range(), lo = range[0], hi = (0, _vegaUtil.peek)(range), cmp = ascending;
    if (lo > hi) {
        range = hi;
        hi = lo;
        lo = range;
        cmp = descending;
    }
    lo = Math.floor(lo);
    hi = Math.ceil(hi); // filter ticks to valid values within the range
    // additionally sort ticks in range order (#2579)
    ticks = ticks.map((v)=>[
            v,
            scale(v)
        ]).filter((_)=>lo <= _[1] && _[1] <= hi).sort(cmp).map((_)=>_[0]);
    if (count > 0 && ticks.length > 1) {
        const endpoints = [
            ticks[0],
            (0, _vegaUtil.peek)(ticks)
        ];
        while(ticks.length > count && ticks.length >= 3)ticks = ticks.filter((_, i)=>!(i % 2));
        if (ticks.length < 3) ticks = endpoints;
    }
    return ticks;
}
/**
 * Generate tick values for the given scale and approximate tick count or
 * interval value. If the scale has a 'ticks' method, it will be used to
 * generate the ticks, with the count argument passed as a parameter. If the
 * scale lacks a 'ticks' method, the full scale domain will be returned.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} [count] - The approximate number of desired ticks.
 * @return {Array<*>} - The generated tick values.
 */ function tickValues(scale, count) {
    return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();
}
/**
 * Generate a label format function for a scale. If the scale has a
 * 'tickFormat' method, it will be used to generate the formatter, with the
 * count and specifier arguments passed as parameters. If the scale lacks a
 * 'tickFormat' method, the returned formatter performs simple string coercion.
 * If the input scale is a logarithmic scale and the format specifier does not
 * indicate a desired decimal precision, a special variable precision formatter
 * that automatically trims trailing zeroes will be generated.
 * @param {Scale} scale - The scale for which to generate the label formatter.
 * @param {*} [count] - The approximate number of desired ticks.
 * @param {string} [specifier] - The format specifier. Must be a legal d3
 *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or
 *   time multi-format specifier object.
 * @return {function(*):string} - The generated label formatter.
 */ function tickFormat(locale, scale, count, specifier, formatType, noSkip) {
    const type = scale.type;
    let format = defaultFormatter;
    if (type === Time || formatType === Time) format = locale.timeFormat(specifier);
    else if (type === UTC || formatType === UTC) format = locale.utcFormat(specifier);
    else if (isLogarithmic(type)) {
        const varfmt = locale.formatFloat(specifier);
        if (noSkip || scale.bins) format = varfmt;
        else {
            const test = tickLog(scale, count, false);
            format = (_)=>test(_) ? varfmt(_) : "";
        }
    } else if (scale.tickFormat) {
        // if d3 scale has tickFormat, it must be continuous
        const d = scale.domain();
        format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);
    } else if (specifier) format = locale.format(specifier);
    return format;
}
function tickLog(scale, count, values) {
    const ticks = tickValues(scale, count), base = scale.base(), logb = Math.log(base), k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria
    const test = (d)=>{
        let i = d / Math.pow(base, Math.round(Math.log(d) / logb));
        if (i * base < base - 0.5) i *= base;
        return i <= k;
    };
    return values ? ticks.filter(test) : test;
}
const symbols = {
    [Quantile]: "quantiles",
    [Quantize]: "thresholds",
    [Threshold]: "domain"
};
const formats = {
    [Quantile]: "quantiles",
    [Quantize]: "domain"
};
function labelValues(scale, count) {
    return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);
}
function thresholdFormat(locale, scale, specifier) {
    const _ = scale[formats[scale.type]](), n = _.length;
    let d = n > 1 ? _[1] - _[0] : _[0], i;
    for(i = 1; i < n; ++i)d = Math.min(d, _[i] - _[i - 1]);
     // tickCount = 3 ticks times 10 for increased resolution
    return locale.formatSpan(0, d, 30, specifier);
}
function thresholdValues(thresholds) {
    const values = [
        -Infinity
    ].concat(thresholds);
    values.max = Infinity;
    return values;
}
function binValues(bins) {
    const values = bins.slice(0, -1);
    values.max = (0, _vegaUtil.peek)(bins);
    return values;
}
const isDiscreteRange = (scale)=>symbols[scale.type] || scale.bins;
function labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {
    const format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : tickFormat(locale, scale, count, specifier, formatType, noSkip);
    return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);
}
const formatRange = (format)=>(value, index, array)=>{
        const limit = get(array[index + 1], get(array.max, Infinity)), lo = formatValue(value, format), hi = formatValue(limit, format);
        return lo && hi ? lo + " – " + hi : hi ? "< " + hi : "≥ " + lo;
    };
const get = (value, dflt)=>value != null ? value : dflt;
const formatDiscrete = (format)=>(value, index)=>index ? format(value) : null;
const formatPoint = (format)=>(value)=>format(value);
const formatValue = (value, format)=>Number.isFinite(value) ? format(value) : null;
function labelFraction(scale) {
    const domain = scale.domain(), count = domain.length - 1;
    let lo = +domain[0], hi = +(0, _vegaUtil.peek)(domain), span = hi - lo;
    if (scale.type === Threshold) {
        const adjust = count ? span / count : 0.1;
        lo -= adjust;
        hi += adjust;
        span = hi - lo;
    }
    return (value)=>(value - lo) / span;
}
function format(locale, scale, specifier, formatType) {
    const type = formatType || scale.type; // replace abbreviated time specifiers to improve screen reader experience
    if ((0, _vegaUtil.isString)(specifier) && isTemporal(type)) specifier = specifier.replace(/%a/g, "%A").replace(/%b/g, "%B");
    return !specifier && type === Time ? locale.timeFormat("%A, %d %B %Y, %X") : !specifier && type === UTC ? locale.utcFormat("%A, %d %B %Y, %X UTC") : labelFormat(locale, scale, 5, null, specifier, formatType, true);
}
function domainCaption(locale, scale, opt) {
    opt = opt || {};
    const max = Math.max(3, opt.maxlen || 7), fmt = format(locale, scale, opt.format, opt.formatType); // if scale breaks domain into bins, describe boundaries
    if (isDiscretizing(scale.type)) {
        const v = labelValues(scale).slice(1).map(fmt), n = v.length;
        return "".concat(n, " boundar").concat(n === 1 ? "y" : "ies", ": ").concat(v.join(", "));
    } else if (isDiscrete(scale.type)) {
        const d = scale.domain(), n1 = d.length, v1 = n1 > max ? d.slice(0, max - 2).map(fmt).join(", ") + ", ending with " + d.slice(-1).map(fmt) : d.map(fmt).join(", ");
        return "".concat(n1, " value").concat(n1 === 1 ? "" : "s", ": ").concat(v1);
    } else {
        const d1 = scale.domain();
        return "values from ".concat(fmt(d1[0]), " to ").concat(fmt((0, _vegaUtil.peek)(d1)));
    }
}

},{"vega-util":"bApja","d3-array":"6IwJG","d3-scale":"9G9pz","d3-interpolate":"6gbPP","vega-time":"27kpp","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9G9pz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scaleBand", ()=>(0, _bandJsDefault.default));
parcelHelpers.export(exports, "scalePoint", ()=>(0, _bandJs.point));
parcelHelpers.export(exports, "scaleIdentity", ()=>(0, _identityJsDefault.default));
parcelHelpers.export(exports, "scaleLinear", ()=>(0, _linearJsDefault.default));
parcelHelpers.export(exports, "scaleLog", ()=>(0, _logJsDefault.default));
parcelHelpers.export(exports, "scaleSymlog", ()=>(0, _symlogJsDefault.default));
parcelHelpers.export(exports, "scaleOrdinal", ()=>(0, _ordinalJsDefault.default));
parcelHelpers.export(exports, "scaleImplicit", ()=>(0, _ordinalJs.implicit));
parcelHelpers.export(exports, "scalePow", ()=>(0, _powJsDefault.default));
parcelHelpers.export(exports, "scaleSqrt", ()=>(0, _powJs.sqrt));
parcelHelpers.export(exports, "scaleRadial", ()=>(0, _radialJsDefault.default));
parcelHelpers.export(exports, "scaleQuantile", ()=>(0, _quantileJsDefault.default));
parcelHelpers.export(exports, "scaleQuantize", ()=>(0, _quantizeJsDefault.default));
parcelHelpers.export(exports, "scaleThreshold", ()=>(0, _thresholdJsDefault.default));
parcelHelpers.export(exports, "scaleTime", ()=>(0, _timeJsDefault.default));
parcelHelpers.export(exports, "scaleUtc", ()=>(0, _utcTimeJsDefault.default));
parcelHelpers.export(exports, "scaleSequential", ()=>(0, _sequentialJsDefault.default));
parcelHelpers.export(exports, "scaleSequentialLog", ()=>(0, _sequentialJs.sequentialLog));
parcelHelpers.export(exports, "scaleSequentialPow", ()=>(0, _sequentialJs.sequentialPow));
parcelHelpers.export(exports, "scaleSequentialSqrt", ()=>(0, _sequentialJs.sequentialSqrt));
parcelHelpers.export(exports, "scaleSequentialSymlog", ()=>(0, _sequentialJs.sequentialSymlog));
parcelHelpers.export(exports, "scaleSequentialQuantile", ()=>(0, _sequentialQuantileJsDefault.default));
parcelHelpers.export(exports, "scaleDiverging", ()=>(0, _divergingJsDefault.default));
parcelHelpers.export(exports, "scaleDivergingLog", ()=>(0, _divergingJs.divergingLog));
parcelHelpers.export(exports, "scaleDivergingPow", ()=>(0, _divergingJs.divergingPow));
parcelHelpers.export(exports, "scaleDivergingSqrt", ()=>(0, _divergingJs.divergingSqrt));
parcelHelpers.export(exports, "scaleDivergingSymlog", ()=>(0, _divergingJs.divergingSymlog));
parcelHelpers.export(exports, "tickFormat", ()=>(0, _tickFormatJsDefault.default));
var _bandJs = require("./band.js");
var _bandJsDefault = parcelHelpers.interopDefault(_bandJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _linearJs = require("./linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _logJs = require("./log.js");
var _logJsDefault = parcelHelpers.interopDefault(_logJs);
var _symlogJs = require("./symlog.js");
var _symlogJsDefault = parcelHelpers.interopDefault(_symlogJs);
var _ordinalJs = require("./ordinal.js");
var _ordinalJsDefault = parcelHelpers.interopDefault(_ordinalJs);
var _powJs = require("./pow.js");
var _powJsDefault = parcelHelpers.interopDefault(_powJs);
var _radialJs = require("./radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);
var _thresholdJs = require("./threshold.js");
var _thresholdJsDefault = parcelHelpers.interopDefault(_thresholdJs);
var _timeJs = require("./time.js");
var _timeJsDefault = parcelHelpers.interopDefault(_timeJs);
var _utcTimeJs = require("./utcTime.js");
var _utcTimeJsDefault = parcelHelpers.interopDefault(_utcTimeJs);
var _sequentialJs = require("./sequential.js");
var _sequentialJsDefault = parcelHelpers.interopDefault(_sequentialJs);
var _sequentialQuantileJs = require("./sequentialQuantile.js");
var _sequentialQuantileJsDefault = parcelHelpers.interopDefault(_sequentialQuantileJs);
var _divergingJs = require("./diverging.js");
var _divergingJsDefault = parcelHelpers.interopDefault(_divergingJs);
var _tickFormatJs = require("./tickFormat.js");
var _tickFormatJsDefault = parcelHelpers.interopDefault(_tickFormatJs);

},{"./band.js":false,"./identity.js":"le9d2","./linear.js":"5CETT","./log.js":"2gcSE","./symlog.js":"iUUr7","./ordinal.js":"1j3zZ","./pow.js":"i4lyo","./radial.js":false,"./quantile.js":"aAURo","./quantize.js":"jjcn6","./threshold.js":"8ndX3","./time.js":"cjAqm","./utcTime.js":"cM5gE","./sequential.js":"f1sM1","./sequentialQuantile.js":false,"./diverging.js":"9Qcq3","./tickFormat.js":"dksn9","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"le9d2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _linearJs = require("./linear.js");
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
function identity(domain) {
    var unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, _numberJsDefault.default)), scale) : domain.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return identity(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, (0, _numberJsDefault.default)) : [
        0,
        1
    ];
    return (0, _linearJs.linearish)(scale);
}
exports.default = identity;

},{"./linear.js":"5CETT","./number.js":"bOzsY","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5CETT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linearish", ()=>linearish);
var _d3Array = require("d3-array");
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _tickFormatJs = require("./tickFormat.js");
var _tickFormatJsDefault = parcelHelpers.interopDefault(_tickFormatJs);
function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
        var d = domain();
        return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
        var d = domain();
        return (0, _tickFormatJsDefault.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
        if (count == null) count = 10;
        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
            step = start, start = stop, stop = step;
            step = i0, i0 = i1, i1 = step;
        }
        while(maxIter-- > 0){
            step = (0, _d3Array.tickIncrement)(start, stop, count);
            if (step === prestep) {
                d[i0] = start;
                d[i1] = stop;
                return domain(d);
            } else if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
            } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
            } else break;
            prestep = step;
        }
        return scale;
    };
    return scale;
}
function linear() {
    var scale = (0, _continuousJsDefault.default)();
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, linear());
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return linearish(scale);
}
exports.default = linear;

},{"d3-array":"6IwJG","./continuous.js":"it8xE","./init.js":"kLKEv","./tickFormat.js":"dksn9","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"it8xE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "transformer", ()=>transformer);
var _d3Array = require("d3-array");
var _d3Interpolate = require("d3-interpolate");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var unit = [
    0,
    1
];
function identity(x) {
    return x;
}
function normalize(a, b) {
    return (b -= a = +a) ? function(x) {
        return (x - a) / b;
    } : (0, _constantJsDefault.default)(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function(x) {
        return Math.max(a, Math.min(b, x));
    };
}
// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x) {
        return r0(d0(x));
    };
}
function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    // Reverse descending domains.
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
    }
    while(++i < j){
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
    }
    return function(x) {
        var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
        return r[i](d[i](x));
    };
}
function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
    var domain = unit, range = unit, interpolate = (0, _d3Interpolate.interpolate), transform, untransform, unknown, clamp = identity, piecewise, output, input;
    function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }
    scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), (0, _d3Interpolate.interpolateNumber))))(y)));
    };
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, _numberJsDefault.default)), rescale()) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = (0, _d3Interpolate.interpolateRound), rescale();
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
    };
    scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u) {
        transform = t, untransform = u;
        return rescale();
    };
}
function continuous() {
    return transformer()(identity, identity);
}
exports.default = continuous;

},{"d3-array":"6IwJG","d3-interpolate":"6gbPP","./constant.js":"9JgB5","./number.js":"bOzsY","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6gbPP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolate", ()=>(0, _valueJsDefault.default));
parcelHelpers.export(exports, "interpolateArray", ()=>(0, _arrayJsDefault.default));
parcelHelpers.export(exports, "interpolateBasis", ()=>(0, _basisJsDefault.default));
parcelHelpers.export(exports, "interpolateBasisClosed", ()=>(0, _basisClosedJsDefault.default));
parcelHelpers.export(exports, "interpolateDate", ()=>(0, _dateJsDefault.default));
parcelHelpers.export(exports, "interpolateDiscrete", ()=>(0, _discreteJsDefault.default));
parcelHelpers.export(exports, "interpolateHue", ()=>(0, _hueJsDefault.default));
parcelHelpers.export(exports, "interpolateNumber", ()=>(0, _numberJsDefault.default));
parcelHelpers.export(exports, "interpolateNumberArray", ()=>(0, _numberArrayJsDefault.default));
parcelHelpers.export(exports, "interpolateObject", ()=>(0, _objectJsDefault.default));
parcelHelpers.export(exports, "interpolateRound", ()=>(0, _roundJsDefault.default));
parcelHelpers.export(exports, "interpolateString", ()=>(0, _stringJsDefault.default));
parcelHelpers.export(exports, "interpolateTransformCss", ()=>(0, _indexJs.interpolateTransformCss));
parcelHelpers.export(exports, "interpolateTransformSvg", ()=>(0, _indexJs.interpolateTransformSvg));
parcelHelpers.export(exports, "interpolateZoom", ()=>(0, _zoomJsDefault.default));
parcelHelpers.export(exports, "interpolateRgb", ()=>(0, _rgbJsDefault.default));
parcelHelpers.export(exports, "interpolateRgbBasis", ()=>(0, _rgbJs.rgbBasis));
parcelHelpers.export(exports, "interpolateRgbBasisClosed", ()=>(0, _rgbJs.rgbBasisClosed));
parcelHelpers.export(exports, "interpolateHsl", ()=>(0, _hslJsDefault.default));
parcelHelpers.export(exports, "interpolateHslLong", ()=>(0, _hslJs.hslLong));
parcelHelpers.export(exports, "interpolateLab", ()=>(0, _labJsDefault.default));
parcelHelpers.export(exports, "interpolateHcl", ()=>(0, _hclJsDefault.default));
parcelHelpers.export(exports, "interpolateHclLong", ()=>(0, _hclJs.hclLong));
parcelHelpers.export(exports, "interpolateCubehelix", ()=>(0, _cubehelixJsDefault.default));
parcelHelpers.export(exports, "interpolateCubehelixLong", ()=>(0, _cubehelixJs.cubehelixLong));
parcelHelpers.export(exports, "piecewise", ()=>(0, _piecewiseJsDefault.default));
parcelHelpers.export(exports, "quantize", ()=>(0, _quantizeJsDefault.default));
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _basisJs = require("./basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _basisClosedJs = require("./basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _discreteJs = require("./discrete.js");
var _discreteJsDefault = parcelHelpers.interopDefault(_discreteJs);
var _hueJs = require("./hue.js");
var _hueJsDefault = parcelHelpers.interopDefault(_hueJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _indexJs = require("./transform/index.js");
var _zoomJs = require("./zoom.js");
var _zoomJsDefault = parcelHelpers.interopDefault(_zoomJs);
var _rgbJs = require("./rgb.js");
var _rgbJsDefault = parcelHelpers.interopDefault(_rgbJs);
var _hslJs = require("./hsl.js");
var _hslJsDefault = parcelHelpers.interopDefault(_hslJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _hclJs = require("./hcl.js");
var _hclJsDefault = parcelHelpers.interopDefault(_hclJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);
var _piecewiseJs = require("./piecewise.js");
var _piecewiseJsDefault = parcelHelpers.interopDefault(_piecewiseJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);

},{"./value.js":"j390F","./array.js":"ak2mg","./basis.js":"aODfz","./basisClosed.js":"iMwsl","./date.js":"5kKci","./discrete.js":"kwucC","./hue.js":"l0WHx","./number.js":"e4PyF","./numberArray.js":"erlaq","./object.js":"4rZkd","./round.js":"l8dm5","./string.js":"5Q7tf","./transform/index.js":"ccQ0p","./zoom.js":"hXWwx","./rgb.js":"bXjD7","./hsl.js":"2r5a3","./lab.js":"4EvaS","./hcl.js":"CZyDl","./cubehelix.js":"1wxKY","./piecewise.js":"dHOj6","./quantize.js":"7aRYJ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"j390F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _rgbJs = require("./rgb.js");
var _rgbJsDefault = parcelHelpers.interopDefault(_rgbJs);
var _arrayJs = require("./array.js");
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
exports.default = function(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? (0, _constantJsDefault.default)(b) : (t === "number" ? (0, _numberJsDefault.default) : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgbJsDefault.default) : (0, _stringJsDefault.default) : b instanceof (0, _d3Color.color) ? (0, _rgbJsDefault.default) : b instanceof Date ? (0, _dateJsDefault.default) : (0, _numberArrayJs.isNumberArray)(b) ? (0, _numberArrayJsDefault.default) : Array.isArray(b) ? (0, _arrayJs.genericArray) : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? (0, _objectJsDefault.default) : (0, _numberJsDefault.default))(a, b);
};

},{"d3-color":"7SCp9","./rgb.js":"bXjD7","./array.js":"ak2mg","./date.js":"5kKci","./number.js":"e4PyF","./object.js":"4rZkd","./string.js":"5Q7tf","./constant.js":"3lDJx","./numberArray.js":"erlaq","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7SCp9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>(0, _colorJsDefault.default));
parcelHelpers.export(exports, "rgb", ()=>(0, _colorJs.rgb));
parcelHelpers.export(exports, "hsl", ()=>(0, _colorJs.hsl));
parcelHelpers.export(exports, "lab", ()=>(0, _labJsDefault.default));
parcelHelpers.export(exports, "hcl", ()=>(0, _labJs.hcl));
parcelHelpers.export(exports, "lch", ()=>(0, _labJs.lch));
parcelHelpers.export(exports, "gray", ()=>(0, _labJs.gray));
parcelHelpers.export(exports, "cubehelix", ()=>(0, _cubehelixJsDefault.default));
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);

},{"./color.js":"cJlE6","./lab.js":"3FaCQ","./cubehelix.js":"6YqvJ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cJlE6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "darker", ()=>darker);
parcelHelpers.export(exports, "brighter", ()=>brighter);
parcelHelpers.export(exports, "rgbConvert", ()=>rgbConvert);
parcelHelpers.export(exports, "rgb", ()=>rgb);
parcelHelpers.export(exports, "Rgb", ()=>Rgb);
parcelHelpers.export(exports, "hslConvert", ()=>hslConvert);
parcelHelpers.export(exports, "hsl", ()=>hsl);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp("^rgb\\(" + [
    reI,
    reI,
    reI
] + "\\)$"), reRgbPercent = new RegExp("^rgb\\(" + [
    reP,
    reP,
    reP
] + "\\)$"), reRgbaInteger = new RegExp("^rgba\\(" + [
    reI,
    reI,
    reI,
    reN
] + "\\)$"), reRgbaPercent = new RegExp("^rgba\\(" + [
    reP,
    reP,
    reP,
    reN
] + "\\)$"), reHslPercent = new RegExp("^hsl\\(" + [
    reN,
    reP,
    reP
] + "\\)$"), reHslaPercent = new RegExp("^hsla\\(" + [
    reN,
    reP,
    reP,
    reN
] + "\\)$");
var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
};
(0, _defineJsDefault.default)(Color, color, {
    copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
    },
    displayable: function() {
        return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
});
function color_formatHex() {
    return this.rgb().formatHex();
}
function color_formatHsl() {
    return hslConvert(this).formatHsl();
}
function color_formatRgb() {
    return this.rgb().formatRgb();
}
function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
     : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
     : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
     : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
     : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
     : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
     : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
     : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
     : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
     : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
     : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
     : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
exports.default = color;
function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}
function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Rgb, rgb, (0, _defineJs.extend)(Color, {
    brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function() {
        return this;
    },
    displayable: function() {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
}));
function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}
function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
}
function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else s = l > 0 && l < 1 ? 0 : h;
    return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Hsl, hsl, (0, _defineJs.extend)(Color, {
    brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl: function() {
        var a = this.opacity;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
    }
}));
/* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

},{"./define.js":"fa5me","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fa5me":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extend", ()=>extend);
exports.default = function(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
};
function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for(var key in definition)prototype[key] = definition[key];
    return prototype;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3FaCQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gray", ()=>gray);
parcelHelpers.export(exports, "Lab", ()=>Lab);
parcelHelpers.export(exports, "lch", ()=>lch);
parcelHelpers.export(exports, "hcl", ()=>hcl);
parcelHelpers.export(exports, "Hcl", ()=>Hcl);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
// https://observablehq.com/@mbostock/lab-and-rgb
const K = 18, Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) return hcl2lab(o);
    if (!(o instanceof (0, _colorJs.Rgb))) o = (0, _colorJs.rgbConvert)(o);
    var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
    if (r === g && g === b) x = z = y;
    else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
    }
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function gray(l, opacity) {
    return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}
function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
exports.default = lab;
function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Lab, lab, (0, _defineJs.extend)((0, _colorJs.Color), {
    brighter: function(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker: function(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb: function() {
        var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new (0, _colorJs.Rgb)(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
}));
function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * (0, _mathJs.degrees);
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function lch(l, c, h, opacity) {
    return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function hcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
}
function hcl2lab(o) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * (0, _mathJs.radians);
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
(0, _defineJsDefault.default)(Hcl, hcl, (0, _defineJs.extend)((0, _colorJs.Color), {
    brighter: function(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
    },
    darker: function(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
    },
    rgb: function() {
        return hcl2lab(this).rgb();
    }
}));

},{"./define.js":"fa5me","./color.js":"cJlE6","./math.js":"2h5K4","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2h5K4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radians", ()=>radians);
parcelHelpers.export(exports, "degrees", ()=>degrees);
const radians = Math.PI / 180;
const degrees = 180 / Math.PI;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6YqvJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cubehelix", ()=>Cubehelix);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
var A = -0.14861, B = 1.78277, C = -0.29227, D = -0.90649, E = 1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof (0, _colorJs.Rgb))) o = (0, _colorJs.rgbConvert)(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * (0, _mathJs.degrees) - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
exports.default = cubehelix;
function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Cubehelix, cubehelix, (0, _defineJs.extend)((0, _colorJs.Color), {
    brighter: function(k) {
        k = k == null ? (0, _colorJs.brighter) : Math.pow((0, _colorJs.brighter), k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function(k) {
        k = k == null ? (0, _colorJs.darker) : Math.pow((0, _colorJs.darker), k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * (0, _mathJs.radians), l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new (0, _colorJs.Rgb)(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
    }
}));

},{"./define.js":"fa5me","./color.js":"cJlE6","./math.js":"2h5K4","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bXjD7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rgbBasis", ()=>rgbBasis);
parcelHelpers.export(exports, "rgbBasisClosed", ()=>rgbBasisClosed);
var _d3Color = require("d3-color");
var _basisJs = require("./basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _basisClosedJs = require("./basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
exports.default = function rgbGamma(y) {
    var color = (0, _colorJs.gamma)(y);
    function rgb(start, end) {
        var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
        return function(t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
        };
    }
    rgb.gamma = rgbGamma;
    return rgb;
}(1);
function rgbSpline(spline) {
    return function(colors) {
        var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
        for(i = 0; i < n; ++i){
            color = (0, _d3Color.rgb)(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + "";
        };
    };
}
var rgbBasis = rgbSpline((0, _basisJsDefault.default));
var rgbBasisClosed = rgbSpline((0, _basisClosedJsDefault.default));

},{"d3-color":"7SCp9","./basis.js":"aODfz","./basisClosed.js":"iMwsl","./color.js":"9VtCQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aODfz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "basis", ()=>basis);
function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
exports.default = function(values) {
    var n = values.length - 1;
    return function(t) {
        var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis((t - i / n) * n, v0, v1, v2, v3);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iMwsl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
exports.default = function(values) {
    var n = values.length;
    return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
        return (0, _basisJs.basis)((t - i / n) * n, v0, v1, v2, v3);
    };
};

},{"./basis.js":"aODfz","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9VtCQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hue", ()=>hue);
parcelHelpers.export(exports, "gamma", ()=>gamma);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
function linear(a, d) {
    return function(t) {
        return a + t * d;
    };
}
function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
    };
}
function hue(a, b) {
    var d = b - a;
    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constantJsDefault.default)(isNaN(a) ? b : a);
}
function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : (0, _constantJsDefault.default)(isNaN(a) ? b : a);
    };
}
function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : (0, _constantJsDefault.default)(isNaN(a) ? b : a);
}
exports.default = nogamma;

},{"./constant.js":"3lDJx","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3lDJx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ak2mg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "genericArray", ()=>genericArray);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
exports.default = function(a, b) {
    return ((0, _numberArrayJs.isNumberArray)(b) ? (0, _numberArrayJsDefault.default) : genericArray)(a, b);
};
function genericArray(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for(i = 0; i < na; ++i)x[i] = (0, _valueJsDefault.default)(a[i], b[i]);
    for(; i < nb; ++i)c[i] = b[i];
    return function(t) {
        for(i = 0; i < na; ++i)c[i] = x[i](t);
        return c;
    };
}

},{"./value.js":"j390F","./numberArray.js":"erlaq","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"erlaq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumberArray", ()=>isNumberArray);
exports.default = function(a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
    return function(t) {
        for(i = 0; i < n; ++i)c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
    };
};
function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5kKci":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    var d = new Date;
    return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"e4PyF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4rZkd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
exports.default = function(a, b) {
    var i = {}, c = {}, k;
    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};
    for(k in b)if (k in a) i[k] = (0, _valueJsDefault.default)(a[k], b[k]);
    else c[k] = b[k];
    return function(t) {
        for(k in i)c[k] = i[k](t);
        return c;
    };
};

},{"./value.js":"j390F","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5Q7tf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
function zero(b) {
    return function() {
        return b;
    };
}
function one(b) {
    return function(t) {
        return b(t) + "";
    };
}
exports.default = function(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = []; // number interpolators
    // Coerce inputs to strings.
    a = a + "", b = b + "";
    // Interpolate pairs of numbers in a & b.
    while((am = reA.exec(a)) && (bm = reB.exec(b))){
        if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
            if (s[i]) s[i] += bm; // coalesce with previous string
            else s[++i] = bm;
        } else {
            s[++i] = null;
            q.push({
                i: i,
                x: (0, _numberJsDefault.default)(am, bm)
            });
        }
        bi = reB.lastIndex;
    }
    // Add remains of b.
    if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
    }
    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
        for(var i = 0, o; i < b; ++i)s[(o = q[i]).i] = o.x(t);
        return s.join("");
    });
};

},{"./number.js":"e4PyF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kwucC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(range) {
    var n = range.length;
    return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"l0WHx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("./color.js");
exports.default = function(a, b) {
    var i = (0, _colorJs.hue)(+a, +b);
    return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
    };
};

},{"./color.js":"9VtCQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"l8dm5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ccQ0p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolateTransformCss", ()=>interpolateTransformCss);
parcelHelpers.export(exports, "interpolateTransformSvg", ()=>interpolateTransformSvg);
var _numberJs = require("../number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _parseJs = require("./parse.js");
function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
        return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push("translate(", null, pxComma, null, pxParen);
            q.push({
                i: i - 4,
                x: (0, _numberJsDefault.default)(xa, xb)
            }, {
                i: i - 2,
                x: (0, _numberJsDefault.default)(ya, yb)
            });
        } else if (xb || yb) s.push("translate(" + xb + pxComma + yb + pxParen);
    }
    function rotate(a, b, s, q) {
        if (a !== b) {
            if (a - b > 180) b += 360;
            else if (b - a > 180) a += 360; // shortest path
            q.push({
                i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                x: (0, _numberJsDefault.default)(a, b)
            });
        } else if (b) s.push(pop(s) + "rotate(" + b + degParen);
    }
    function skewX(a, b, s, q) {
        if (a !== b) q.push({
            i: s.push(pop(s) + "skewX(", null, degParen) - 2,
            x: (0, _numberJsDefault.default)(a, b)
        });
        else if (b) s.push(pop(s) + "skewX(" + b + degParen);
    }
    function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
            q.push({
                i: i - 4,
                x: (0, _numberJsDefault.default)(xa, xb)
            }, {
                i: i - 2,
                x: (0, _numberJsDefault.default)(ya, yb)
            });
        } else if (xb !== 1 || yb !== 1) s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
    return function(a, b) {
        var s = [], q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
            var i = -1, n = q.length, o;
            while(++i < n)s[(o = q[i]).i] = o.x(t);
            return s.join("");
        };
    };
}
var interpolateTransformCss = interpolateTransform((0, _parseJs.parseCss), "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform((0, _parseJs.parseSvg), ", ", ")", ")");

},{"../number.js":"e4PyF","./parse.js":"fyjJk","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fyjJk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-undef */ parcelHelpers.export(exports, "parseCss", ()=>parseCss);
parcelHelpers.export(exports, "parseSvg", ()=>parseSvg);
var _decomposeJs = require("./decompose.js");
var _decomposeJsDefault = parcelHelpers.interopDefault(_decomposeJs);
var svgNode;
function parseCss(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? (0, _decomposeJs.identity) : (0, _decomposeJsDefault.default)(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
    if (value == null) return 0, _decomposeJs.identity;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return 0, _decomposeJs.identity;
    value = value.matrix;
    return (0, _decomposeJsDefault.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}

},{"./decompose.js":"kD3Jv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kD3Jv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
var degrees = 180 / Math.PI;
var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
};
exports.default = function(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees,
        skewX: Math.atan(skewX) * degrees,
        scaleX: scaleX,
        scaleY: scaleY
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hXWwx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var epsilon2 = 1e-12;
function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
exports.default = function zoomRho(rho, rho2, rho4) {
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
            S = Math.log(w1 / w0) / rho;
            i = function(t) {
                return [
                    ux0 + t * dx,
                    uy0 + t * dy,
                    w0 * Math.exp(rho * t * S)
                ];
            };
        } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function(t) {
                var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                return [
                    ux0 + u * dx,
                    uy0 + u * dy,
                    w0 * coshr0 / cosh(rho * s + r0)
                ];
            };
        }
        i.duration = S * 1000 * rho / Math.SQRT2;
        return i;
    }
    zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
    };
    return zoom;
}(Math.SQRT2, 2, 4);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2r5a3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hslLong", ()=>hslLong);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function hsl(hue) {
    return function(start, end) {
        var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h), s = (0, _colorJsDefault.default)(start.s, end.s), l = (0, _colorJsDefault.default)(start.l, end.l), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
exports.default = hsl((0, _colorJs.hue));
var hslLong = hsl((0, _colorJsDefault.default));

},{"d3-color":"7SCp9","./color.js":"9VtCQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4EvaS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function lab(start, end) {
    var l = (0, _colorJsDefault.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l), a = (0, _colorJsDefault.default)(start.a, end.a), b = (0, _colorJsDefault.default)(start.b, end.b), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
    return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
    };
}
exports.default = lab;

},{"d3-color":"7SCp9","./color.js":"9VtCQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"CZyDl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hclLong", ()=>hclLong);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function hcl(hue) {
    return function(start, end) {
        var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h), c = (0, _colorJsDefault.default)(start.c, end.c), l = (0, _colorJsDefault.default)(start.l, end.l), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
exports.default = hcl((0, _colorJs.hue));
var hclLong = hcl((0, _colorJsDefault.default));

},{"d3-color":"7SCp9","./color.js":"9VtCQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1wxKY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubehelixLong", ()=>cubehelixLong);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function cubehelix(hue) {
    return function cubehelixGamma(y) {
        y = +y;
        function cubehelix(start, end) {
            var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h), s = (0, _colorJsDefault.default)(start.s, end.s), l = (0, _colorJsDefault.default)(start.l, end.l), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + "";
            };
        }
        cubehelix.gamma = cubehelixGamma;
        return cubehelix;
    }(1);
}
exports.default = cubehelix((0, _colorJs.hue));
var cubehelixLong = cubehelix((0, _colorJsDefault.default));

},{"d3-color":"7SCp9","./color.js":"9VtCQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dHOj6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
function piecewise(interpolate, values) {
    if (values === undefined) values = interpolate, interpolate = (0, _valueJsDefault.default);
    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while(i < n)I[i] = interpolate(v, v = values[++i]);
    return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
    };
}
exports.default = piecewise;

},{"./value.js":"j390F","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7aRYJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(interpolator, n) {
    var samples = new Array(n);
    for(var i = 0; i < n; ++i)samples[i] = interpolator(i / (n - 1));
    return samples;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9JgB5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function constants(x) {
    return function() {
        return x;
    };
}
exports.default = constants;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bOzsY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function number(x) {
    return +x;
}
exports.default = number;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kLKEv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initRange", ()=>initRange);
parcelHelpers.export(exports, "initInterpolator", ()=>initInterpolator);
function initRange(domain, range) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            this.range(domain);
            break;
        default:
            this.range(range).domain(domain);
            break;
    }
    return this;
}
function initInterpolator(domain, interpolator) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            if (typeof domain === "function") this.interpolator(domain);
            else this.range(domain);
            break;
        default:
            this.domain(domain);
            if (typeof interpolator === "function") this.interpolator(interpolator);
            else this.range(interpolator);
            break;
    }
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dksn9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
function tickFormat(start, stop, count, specifier) {
    var step = (0, _d3Array.tickStep)(start, stop, count), precision;
    specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);
    switch(specifier.type){
        case "s":
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
            return (0, _d3Format.formatPrefix)(specifier, value);
        case "":
        case "e":
        case "g":
        case "p":
        case "r":
            if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
            break;
        case "f":
        case "%":
            if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
            break;
    }
    return (0, _d3Format.format)(specifier);
}
exports.default = tickFormat;

},{"d3-array":"6IwJG","d3-format":"8dYFL","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2gcSE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggish", ()=>loggish);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformLog(x) {
    return Math.log(x);
}
function transformExp(x) {
    return Math.exp(x);
}
function transformLogn(x) {
    return -Math.log(-x);
}
function transformExpn(x) {
    return -Math.exp(-x);
}
function pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x) {
        return Math.pow(base, x);
    };
}
function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x) {
        return Math.log(x) / base;
    });
}
function reflect(f) {
    return function(x) {
        return -f(-x);
    };
}
function loggish(transform) {
    var scale = transform(transformLog, transformExp), domain = scale.domain, base = 10, logs, pows;
    function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
            logs = reflect(logs), pows = reflect(pows);
            transform(transformLogn, transformExpn);
        } else transform(transformLog, transformExp);
        return scale;
    }
    scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = function(count) {
        var d = domain(), u = d[0], v = d[d.length - 1], r;
        if (r = v < u) i = u, u = v, v = i;
        var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
        if (!(base % 1) && j - i < n) {
            i = Math.floor(i), j = Math.ceil(j);
            if (u > 0) for(; i <= j; ++i)for(k = 1, p = pows(i); k < base; ++k){
                t = p * k;
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            else for(; i <= j; ++i)for(k = base - 1, p = pows(i); k >= 1; --k){
                t = p * k;
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            if (z.length * 2 < n) z = (0, _d3Array.ticks)(u, v, n);
        } else z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
        return r ? z.reverse() : z;
    };
    scale.tickFormat = function(count, specifier) {
        if (specifier == null) specifier = base === 10 ? ".0e" : ",";
        if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
        if (count === Infinity) return specifier;
        if (count == null) count = 10;
        var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return function(d) {
            var i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5) i *= base;
            return i <= k ? specifier(d) : "";
        };
    };
    scale.nice = function() {
        return domain((0, _niceJsDefault.default)(domain(), {
            floor: function(x) {
                return pows(Math.floor(logs(x)));
            },
            ceil: function(x) {
                return pows(Math.ceil(logs(x)));
            }
        }));
    };
    return scale;
}
function log() {
    var scale = loggish((0, _continuousJs.transformer)()).domain([
        1,
        10
    ]);
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, log()).base(scale.base());
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return scale;
}
exports.default = log;

},{"d3-array":"6IwJG","d3-format":"8dYFL","./nice.js":"dC4tu","./continuous.js":"it8xE","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dC4tu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
}
exports.default = nice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iUUr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symlogish", ()=>symlogish);
var _linearJs = require("./linear.js");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformSymlog(c) {
    return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
}
function transformSymexp(c) {
    return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
}
function symlogish(transform) {
    var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
    scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
    };
    return (0, _linearJs.linearish)(scale);
}
function symlog() {
    var scale = symlogish((0, _continuousJs.transformer)());
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, symlog()).constant(scale.constant());
    };
    return (0, _initJs.initRange).apply(scale, arguments);
}
exports.default = symlog;

},{"./linear.js":"5CETT","./continuous.js":"it8xE","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1j3zZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "implicit", ()=>implicit);
var _initJs = require("./init.js");
const implicit = Symbol("implicit");
function ordinal() {
    var index = new Map(), domain = [], range = [], unknown = implicit;
    function scale(d) {
        var key = d + "", i = index.get(key);
        if (!i) {
            if (unknown !== implicit) return unknown;
            index.set(key, i = domain.push(d));
        }
        return range[(i - 1) % range.length];
    }
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new Map();
        for (const value of _){
            const key = value + "";
            if (index.has(key)) continue;
            index.set(key, domain.push(value));
        }
        return scale;
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return scale;
}
exports.default = ordinal;

},{"./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i4lyo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powish", ()=>powish);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
var _linearJs = require("./linear.js");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformPow(exponent) {
    return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
}
function transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function transformSquare(x) {
    return x < 0 ? -x * x : x * x;
}
function powish(transform) {
    var scale = transform((0, _continuousJs.identity), (0, _continuousJs.identity)), exponent = 1;
    function rescale() {
        return exponent === 1 ? transform((0, _continuousJs.identity), (0, _continuousJs.identity)) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return (0, _linearJs.linearish)(scale);
}
function pow() {
    var scale = powish((0, _continuousJs.transformer)());
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, pow()).exponent(scale.exponent());
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return scale;
}
exports.default = pow;
function sqrt() {
    return pow.apply(null, arguments).exponent(0.5);
}

},{"./linear.js":"5CETT","./continuous.js":"it8xE","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aAURo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
function quantile() {
    var domain = [], range = [], thresholds = [], unknown;
    function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while(++i < n)thresholds[i - 1] = (0, _d3Array.quantileSorted)(domain, i / n);
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
    }
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : [
            i > 0 ? thresholds[i - 1] : domain[0],
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
    };
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _)if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort((0, _d3Array.ascending));
        return rescale();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
        return thresholds.slice();
    };
    scale.copy = function() {
        return quantile().domain(domain).range(range).unknown(unknown);
    };
    return (0, _initJs.initRange).apply(scale, arguments);
}
exports.default = quantile;

},{"d3-array":"6IwJG","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jjcn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _linearJs = require("./linear.js");
var _initJs = require("./init.js");
function quantize() {
    var x0 = 0, x1 = 1, n = 1, domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown;
    function scale(x) {
        return x != null && x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
    }
    function rescale() {
        var i = -1;
        domain = new Array(n);
        while(++i < n)domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [
            x0,
            x1
        ];
    };
    scale.range = function(_) {
        return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : i < 1 ? [
            x0,
            domain[0]
        ] : i >= n ? [
            domain[n - 1],
            x1
        ] : [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function() {
        return domain.slice();
    };
    scale.copy = function() {
        return quantize().domain([
            x0,
            x1
        ]).range(range).unknown(unknown);
    };
    return (0, _initJs.initRange).apply((0, _linearJs.linearish)(scale), arguments);
}
exports.default = quantize;

},{"d3-array":"6IwJG","./linear.js":"5CETT","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8ndX3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
function threshold() {
    var domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown, n = 1;
    function scale(x) {
        return x != null && x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
    }
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return threshold().domain(domain).range(range).unknown(unknown);
    };
    return (0, _initJs.initRange).apply(scale, arguments);
}
exports.default = threshold;

},{"d3-array":"6IwJG","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cjAqm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calendar", ()=>calendar);
var _d3Time = require("d3-time");
var _d3TimeFormat = require("d3-time-format");
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
function date(t) {
    return new Date(t);
}
function number(t) {
    return t instanceof Date ? +t : +new Date(+t);
}
function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
    var scale = (0, _continuousJsDefault.default)(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear = format("%Y");
    function tickFormat(date) {
        return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
    }
    scale.invert = function(y) {
        return new Date(invert(y));
    };
    scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
    };
    scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
    };
    scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain((0, _niceJsDefault.default)(d, interval)) : scale;
    };
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
    };
    return scale;
}
function time() {
    return (0, _initJs.initRange).apply(calendar((0, _d3Time.timeTicks), (0, _d3Time.timeTickInterval), (0, _d3Time.timeYear), (0, _d3Time.timeMonth), (0, _d3Time.timeWeek), (0, _d3Time.timeDay), (0, _d3Time.timeHour), (0, _d3Time.timeMinute), (0, _d3Time.timeSecond), (0, _d3TimeFormat.timeFormat)).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2)
    ]), arguments);
}
exports.default = time;

},{"d3-time":"8e7eR","d3-time-format":"242jH","./continuous.js":"it8xE","./init.js":"kLKEv","./nice.js":"dC4tu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cM5gE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Time = require("d3-time");
var _d3TimeFormat = require("d3-time-format");
var _timeJs = require("./time.js");
var _initJs = require("./init.js");
function utcTime() {
    return (0, _initJs.initRange).apply((0, _timeJs.calendar)((0, _d3Time.utcTicks), (0, _d3Time.utcTickInterval), (0, _d3Time.utcYear), (0, _d3Time.utcMonth), (0, _d3Time.utcWeek), (0, _d3Time.utcDay), (0, _d3Time.utcHour), (0, _d3Time.utcMinute), (0, _d3Time.utcSecond), (0, _d3TimeFormat.utcFormat)).domain([
        Date.UTC(2000, 0, 1),
        Date.UTC(2000, 0, 2)
    ]), arguments);
}
exports.default = utcTime;

},{"d3-time":"8e7eR","d3-time-format":"242jH","./time.js":"cjAqm","./init.js":"kLKEv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"f1sM1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "sequentialLog", ()=>sequentialLog);
parcelHelpers.export(exports, "sequentialSymlog", ()=>sequentialSymlog);
parcelHelpers.export(exports, "sequentialPow", ()=>sequentialPow);
parcelHelpers.export(exports, "sequentialSqrt", ()=>sequentialSqrt);
var _d3Interpolate = require("d3-interpolate");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _logJs = require("./log.js");
var _symlogJs = require("./symlog.js");
var _powJs = require("./pow.js");
function transformer() {
    var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = (0, _continuousJs.identity), clamp = false, unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [
            x0,
            x1
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1;
            return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [
                interpolator(0),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, _d3Interpolate.interpolate));
    scale.rangeRound = range((0, _d3Interpolate.interpolateRound));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
    };
}
function copy(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
    var scale = (0, _linearJs.linearish)(transformer()((0, _continuousJs.identity)));
    scale.copy = function() {
        return copy(scale, sequential());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
exports.default = sequential;
function sequentialLog() {
    var scale = (0, _logJs.loggish)(transformer()).domain([
        1,
        10
    ]);
    scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialSymlog() {
    var scale = (0, _symlogJs.symlogish)(transformer());
    scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialPow() {
    var scale = (0, _powJs.powish)(transformer());
    scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
}

},{"d3-interpolate":"6gbPP","./continuous.js":"it8xE","./init.js":"kLKEv","./linear.js":"5CETT","./log.js":"2gcSE","./symlog.js":"iUUr7","./pow.js":"i4lyo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9Qcq3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divergingLog", ()=>divergingLog);
parcelHelpers.export(exports, "divergingSymlog", ()=>divergingSymlog);
parcelHelpers.export(exports, "divergingPow", ()=>divergingPow);
parcelHelpers.export(exports, "divergingSqrt", ()=>divergingSqrt);
var _d3Interpolate = require("d3-interpolate");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _logJs = require("./log.js");
var _sequentialJs = require("./sequential.js");
var _symlogJs = require("./symlog.js");
var _powJs = require("./pow.js");
function transformer() {
    var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t0, t1, t2, k10, k21, interpolator = (0, _continuousJs.identity), transform, clamp = false, unknown;
    function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [
            x0,
            x1,
            x2
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1, r2;
            return arguments.length ? ([r0, r1, r2] = _, interpolator = (0, _d3Interpolate.piecewise)(interpolate, [
                r0,
                r1,
                r2
            ]), scale) : [
                interpolator(0),
                interpolator(0.5),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, _d3Interpolate.interpolate));
    scale.rangeRound = range((0, _d3Interpolate.interpolateRound));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
    };
}
function diverging() {
    var scale = (0, _linearJs.linearish)(transformer()((0, _continuousJs.identity)));
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, diverging());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
exports.default = diverging;
function divergingLog() {
    var scale = (0, _logJs.loggish)(transformer()).domain([
        0.1,
        1,
        10
    ]);
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, divergingLog()).base(scale.base());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingSymlog() {
    var scale = (0, _symlogJs.symlogish)(transformer());
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, divergingSymlog()).constant(scale.constant());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingPow() {
    var scale = (0, _powJs.powish)(transformer());
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, divergingPow()).exponent(scale.exponent());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
}

},{"d3-interpolate":"6gbPP","./continuous.js":"it8xE","./init.js":"kLKEv","./linear.js":"5CETT","./log.js":"2gcSE","./sequential.js":"f1sM1","./symlog.js":"iUUr7","./pow.js":"i4lyo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fpesP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axisticks", ()=>AxisTicks);
parcelHelpers.export(exports, "datajoin", ()=>DataJoin);
parcelHelpers.export(exports, "encode", ()=>Encode);
parcelHelpers.export(exports, "legendentries", ()=>LegendEntries);
parcelHelpers.export(exports, "linkpath", ()=>LinkPath);
parcelHelpers.export(exports, "pie", ()=>Pie);
parcelHelpers.export(exports, "scale", ()=>Scale);
parcelHelpers.export(exports, "sortitems", ()=>SortItems);
parcelHelpers.export(exports, "stack", ()=>Stack);
var _vegaDataflow = require("vega-dataflow");
var _vegaScale = require("vega-scale");
var _vegaUtil = require("vega-util");
var _d3Array = require("d3-array");
var _d3Interpolate = require("d3-interpolate");
/**
 * Generates axis ticks for visualizing a spatial scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate ticks for.
 * @param {*} [params.count=10] - The approximate number of ticks, or
 *   desired tick interval, to use.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {function(*):string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid d3 4.0 format specifier.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */ function AxisTicks(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(AxisTicks, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value && !_.modified()) return pulse.StopPropagation;
        var locale = pulse.dataflow.locale(), out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), ticks = this.value, scale = _.scale, tally = _.count == null ? _.values ? _.values.length : 10 : _.count, count = (0, _vegaScale.tickCount)(scale, tally, _.minstep), format = _.format || (0, _vegaScale.tickFormat)(locale, scale, count, _.formatSpecifier, _.formatType, !!_.values), values = _.values ? (0, _vegaScale.validTicks)(scale, _.values, count) : (0, _vegaScale.tickValues)(scale, count);
        if (ticks) out.rem = ticks;
        ticks = values.map((value, i)=>(0, _vegaDataflow.ingest)({
                index: i / (values.length - 1 || 1),
                value: value,
                label: format(value)
            }));
        if (_.extra && ticks.length) // add an extra tick pegged to the initial domain value
        // this is used to generate axes with 'binned' domains
        ticks.push((0, _vegaDataflow.ingest)({
            index: -1,
            extra: {
                value: ticks[0].value
            },
            label: ""
        }));
        out.source = ticks;
        out.add = ticks;
        this.value = ticks;
        return out;
    }
});
/**
 * Joins a set of data elements against a set of visual items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): object} [params.item] - An item generator function.
 * @param {function(object): *} [params.key] - The key field associating data and visual items.
 */ function DataJoin(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
function defaultItemCreate() {
    return (0, _vegaDataflow.ingest)({});
}
function newMap(key) {
    const map = (0, _vegaUtil.fastmap)().test((t)=>t.exit);
    map.lookup = (t)=>map.get(key(t));
    return map;
}
(0, _vegaUtil.inherits)(DataJoin, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var df = pulse.dataflow, out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), item = _.item || defaultItemCreate, key = _.key || (0, _vegaDataflow.tupleid), map = this.value; // prevent transient (e.g., hover) requests from
        // cascading across marks derived from marks
        if ((0, _vegaUtil.isArray)(out.encode)) out.encode = null;
        if (map && (_.modified("key") || pulse.modified(key))) (0, _vegaUtil.error)("DataJoin does not support modified key function or fields.");
        if (!map) {
            pulse = pulse.addAll();
            this.value = map = newMap(key);
        }
        pulse.visit(pulse.ADD, (t)=>{
            const k = key(t);
            let x = map.get(k);
            if (x) {
                if (x.exit) {
                    map.empty--;
                    out.add.push(x);
                } else out.mod.push(x);
            } else {
                x = item(t);
                map.set(k, x);
                out.add.push(x);
            }
            x.datum = t;
            x.exit = false;
        });
        pulse.visit(pulse.MOD, (t)=>{
            const k = key(t), x = map.get(k);
            if (x) {
                x.datum = t;
                out.mod.push(x);
            }
        });
        pulse.visit(pulse.REM, (t)=>{
            const k = key(t), x = map.get(k);
            if (t === x.datum && !x.exit) {
                out.rem.push(x);
                x.exit = true;
                ++map.empty;
            }
        });
        if (pulse.changed(pulse.ADD_MOD)) out.modifies("datum");
        if (pulse.clean() || _.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);
        return out;
    }
});
/**
 * Invokes encoding functions for visual items.
 * @constructor
 * @param {object} params - The parameters to the encoding functions. This
 *   parameter object will be passed through to all invoked encoding functions.
 * @param {object} [params.mod=false] - Flag indicating if tuples in the input
 *   mod set that are unmodified by encoders should be included in the output.
 * @param {object} param.encoders - The encoding functions
 * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
 * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
 * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
 */ function Encode(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(Encode, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ADD_REM), fmod = _.mod || false, encoders = _.encoders, encode = pulse.encode; // if an array, the encode directive includes additional sets
        // that must be defined in order for the primary set to be invoked
        // e.g., only run the update set if the hover set is defined
        if ((0, _vegaUtil.isArray)(encode)) {
            if (out.changed() || encode.every((e)=>encoders[e])) {
                encode = encode[0];
                out.encode = null; // consume targeted encode directive
            } else return pulse.StopPropagation;
        } // marshall encoder functions
        var reenter = encode === "enter", update = encoders.update || (0, _vegaUtil.falsy), enter = encoders.enter || (0, _vegaUtil.falsy), exit = encoders.exit || (0, _vegaUtil.falsy), set = (encode && !reenter ? encoders[encode] : update) || (0, _vegaUtil.falsy);
        if (pulse.changed(pulse.ADD)) {
            pulse.visit(pulse.ADD, (t)=>{
                enter(t, _);
                update(t, _);
            });
            out.modifies(enter.output);
            out.modifies(update.output);
            if (set !== (0, _vegaUtil.falsy) && set !== update) {
                pulse.visit(pulse.ADD, (t)=>{
                    set(t, _);
                });
                out.modifies(set.output);
            }
        }
        if (pulse.changed(pulse.REM) && exit !== (0, _vegaUtil.falsy)) {
            pulse.visit(pulse.REM, (t)=>{
                exit(t, _);
            });
            out.modifies(exit.output);
        }
        if (reenter || set !== (0, _vegaUtil.falsy)) {
            const flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);
            if (reenter) {
                pulse.visit(flag, (t)=>{
                    const mod = enter(t, _) || fmod;
                    if (set(t, _) || mod) out.mod.push(t);
                });
                if (out.mod.length) out.modifies(enter.output);
            } else pulse.visit(flag, (t)=>{
                if (set(t, _) || fmod) out.mod.push(t);
            });
            if (out.mod.length) out.modifies(set.output);
        }
        return out.changed() ? out : pulse.StopPropagation;
    }
});
/**
 * Generates legend entries for visualizing a scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate items for.
 * @param {*} [params.count=5] - The approximate number of items, or
 *   desired tick interval, to use.
 * @param {*} [params.limit] - The maximum number of entries to
 *   include in a symbol legend.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid D3 format specifier string.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */ function LegendEntries(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
(0, _vegaUtil.inherits)(LegendEntries, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value != null && !_.modified()) return pulse.StopPropagation;
        var locale = pulse.dataflow.locale(), out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), items = this.value, type = _.type || (0, _vegaScale.SymbolLegend), scale = _.scale, limit = +_.limit, count = (0, _vegaScale.tickCount)(scale, _.count == null ? 5 : _.count, _.minstep), lskip = !!_.values || type === (0, _vegaScale.SymbolLegend), format = _.format || (0, _vegaScale.labelFormat)(locale, scale, count, type, _.formatSpecifier, _.formatType, lskip), values = _.values || (0, _vegaScale.labelValues)(scale, count), domain, fraction, size, offset, ellipsis;
        if (items) out.rem = items;
        if (type === (0, _vegaScale.SymbolLegend)) {
            if (limit && values.length > limit) {
                pulse.dataflow.warn("Symbol legend count exceeds limit, filtering items.");
                items = values.slice(0, limit - 1);
                ellipsis = true;
            } else items = values;
            if ((0, _vegaUtil.isFunction)(size = _.size)) {
                // if first value maps to size zero, remove from list (vega#717)
                if (!_.values && scale(items[0]) === 0) items = items.slice(1);
                 // compute size offset for legend entries
                offset = items.reduce((max, value)=>Math.max(max, size(value, _)), 0);
            } else size = (0, _vegaUtil.constant)(offset = size || 8);
            items = items.map((value, index)=>(0, _vegaDataflow.ingest)({
                    index: index,
                    label: format(value, index, items),
                    value: value,
                    offset: offset,
                    size: size(value, _)
                }));
            if (ellipsis) {
                ellipsis = values[items.length];
                items.push((0, _vegaDataflow.ingest)({
                    index: items.length,
                    label: "…".concat(values.length - items.length, " entries"),
                    value: ellipsis,
                    offset: offset,
                    size: size(ellipsis, _)
                }));
            }
        } else if (type === (0, _vegaScale.GradientLegend)) {
            domain = scale.domain(), fraction = (0, _vegaScale.scaleFraction)(scale, domain[0], (0, _vegaUtil.peek)(domain)); // if automatic label generation produces 2 or fewer values,
            // use the domain end points instead (fixes vega/vega#1364)
            if (values.length < 3 && !_.values && domain[0] !== (0, _vegaUtil.peek)(domain)) values = [
                domain[0],
                (0, _vegaUtil.peek)(domain)
            ];
            items = values.map((value, index)=>(0, _vegaDataflow.ingest)({
                    index: index,
                    label: format(value, index, values),
                    value: value,
                    perc: fraction(value)
                }));
        } else {
            size = values.length - 1;
            fraction = (0, _vegaScale.labelFraction)(scale);
            items = values.map((value, index)=>(0, _vegaDataflow.ingest)({
                    index: index,
                    label: format(value, index, values),
                    value: value,
                    perc: index ? fraction(value) : 0,
                    perc2: index === size ? 1 : fraction(values[index + 1])
                }));
        }
        out.source = items;
        out.add = items;
        this.value = items;
        return out;
    }
});
const sourceX = (t)=>t.source.x;
const sourceY = (t)=>t.source.y;
const targetX = (t)=>t.target.x;
const targetY = (t)=>t.target.y;
/**
 * Layout paths linking source and target elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function LinkPath(params) {
    (0, _vegaDataflow.Transform).call(this, {}, params);
}
LinkPath.Definition = {
    "type": "LinkPath",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "sourceX",
            "type": "field",
            "default": "source.x"
        },
        {
            "name": "sourceY",
            "type": "field",
            "default": "source.y"
        },
        {
            "name": "targetX",
            "type": "field",
            "default": "target.x"
        },
        {
            "name": "targetY",
            "type": "field",
            "default": "target.y"
        },
        {
            "name": "orient",
            "type": "enum",
            "default": "vertical",
            "values": [
                "horizontal",
                "vertical",
                "radial"
            ]
        },
        {
            "name": "shape",
            "type": "enum",
            "default": "line",
            "values": [
                "line",
                "arc",
                "curve",
                "diagonal",
                "orthogonal"
            ]
        },
        {
            "name": "require",
            "type": "signal"
        },
        {
            "name": "as",
            "type": "string",
            "default": "path"
        }
    ]
};
(0, _vegaUtil.inherits)(LinkPath, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var sx = _.sourceX || sourceX, sy = _.sourceY || sourceY, tx = _.targetX || targetX, ty = _.targetY || targetY, as = _.as || "path", orient = _.orient || "vertical", shape = _.shape || "line", path = Paths.get(shape + "-" + orient) || Paths.get(shape);
        if (!path) (0, _vegaUtil.error)("LinkPath unsupported type: " + _.shape + (_.orient ? "-" + _.orient : ""));
        pulse.visit(pulse.SOURCE, (t)=>{
            t[as] = path(sx(t), sy(t), tx(t), ty(t));
        });
        return pulse.reflow(_.modified()).modifies(as);
    }
});
const line = (sx, sy, tx, ty)=>"M" + sx + "," + sy + "L" + tx + "," + ty;
const lineR = (sa, sr, ta, tr)=>line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
const arc = (sx, sy, tx, ty)=>{
    var dx = tx - sx, dy = ty - sy, rr = Math.sqrt(dx * dx + dy * dy) / 2, ra = 180 * Math.atan2(dy, dx) / Math.PI;
    return "M" + sx + "," + sy + "A" + rr + "," + rr + " " + ra + " 0 1" + " " + tx + "," + ty;
};
const arcR = (sa, sr, ta, tr)=>arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
const curve = (sx, sy, tx, ty)=>{
    const dx = tx - sx, dy = ty - sy, ix = 0.2 * (dx + dy), iy = 0.2 * (dy - dx);
    return "M" + sx + "," + sy + "C" + (sx + ix) + "," + (sy + iy) + " " + (tx + iy) + "," + (ty - ix) + " " + tx + "," + ty;
};
const curveR = (sa, sr, ta, tr)=>curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
const orthoX = (sx, sy, tx, ty)=>"M" + sx + "," + sy + "V" + ty + "H" + tx;
const orthoY = (sx, sy, tx, ty)=>"M" + sx + "," + sy + "H" + tx + "V" + ty;
const orthoR = (sa, sr, ta, tr)=>{
    const sc = Math.cos(sa), ss = Math.sin(sa), tc = Math.cos(ta), ts = Math.sin(ta), sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
    return "M" + sr * sc + "," + sr * ss + "A" + sr + "," + sr + " 0 0," + (sf ? 1 : 0) + " " + sr * tc + "," + sr * ts + "L" + tr * tc + "," + tr * ts;
};
const diagonalX = (sx, sy, tx, ty)=>{
    const m = (sx + tx) / 2;
    return "M" + sx + "," + sy + "C" + m + "," + sy + " " + m + "," + ty + " " + tx + "," + ty;
};
const diagonalY = (sx, sy, tx, ty)=>{
    const m = (sy + ty) / 2;
    return "M" + sx + "," + sy + "C" + sx + "," + m + " " + tx + "," + m + " " + tx + "," + ty;
};
const diagonalR = (sa, sr, ta, tr)=>{
    const sc = Math.cos(sa), ss = Math.sin(sa), tc = Math.cos(ta), ts = Math.sin(ta), mr = (sr + tr) / 2;
    return "M" + sr * sc + "," + sr * ss + "C" + mr * sc + "," + mr * ss + " " + mr * tc + "," + mr * ts + " " + tr * tc + "," + tr * ts;
};
const Paths = (0, _vegaUtil.fastmap)({
    "line": line,
    "line-radial": lineR,
    "arc": arc,
    "arc-radial": arcR,
    "curve": curve,
    "curve-radial": curveR,
    "orthogonal-horizontal": orthoX,
    "orthogonal-vertical": orthoY,
    "orthogonal-radial": orthoR,
    "diagonal-horizontal": diagonalX,
    "diagonal-vertical": diagonalY,
    "diagonal-radial": diagonalR
});
/**
 * Pie and donut chart layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size pie segments.
 * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
 * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
 * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
 */ function Pie(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Pie.Definition = {
    "type": "Pie",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "startAngle",
            "type": "number",
            "default": 0
        },
        {
            "name": "endAngle",
            "type": "number",
            "default": 6.283185307179586
        },
        {
            "name": "sort",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "startAngle",
                "endAngle"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(Pie, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var as = _.as || [
            "startAngle",
            "endAngle"
        ], startAngle = as[0], endAngle = as[1], field = _.field || (0, _vegaUtil.one), start = _.startAngle || 0, stop = _.endAngle != null ? _.endAngle : 2 * Math.PI, data = pulse.source, values = data.map(field), n = values.length, a = start, k = (stop - start) / (0, _d3Array.sum)(values), index = (0, _d3Array.range)(n), i, t, v;
        if (_.sort) index.sort((a, b)=>values[a] - values[b]);
        for(i = 0; i < n; ++i){
            v = values[index[i]];
            t = data[index[i]];
            t[startAngle] = a;
            t[endAngle] = a += v * k;
        }
        this.value = values;
        return pulse.reflow(_.modified()).modifies(as);
    }
});
const DEFAULT_COUNT = 5;
function includeZero(scale) {
    const type = scale.type;
    return !scale.bins && (type === (0, _vegaScale.Linear) || type === (0, _vegaScale.Pow) || type === (0, _vegaScale.Sqrt));
}
function includePad(type) {
    return (0, _vegaScale.isContinuous)(type) && type !== (0, _vegaScale.Sequential);
}
const SKIP = (0, _vegaUtil.toSet)([
    "set",
    "modified",
    "clear",
    "type",
    "scheme",
    "schemeExtent",
    "schemeCount",
    "domain",
    "domainMin",
    "domainMid",
    "domainMax",
    "domainRaw",
    "domainImplicit",
    "nice",
    "zero",
    "bins",
    "range",
    "rangeStep",
    "round",
    "reverse",
    "interpolate",
    "interpolateGamma"
]);
/**
 * Maintains a scale function mapping data values to visual channels.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function Scale(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
    this.modified(true); // always treat as modified
}
(0, _vegaUtil.inherits)(Scale, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var df = pulse.dataflow, scale$1 = this.value, key = scaleKey(_);
        if (!scale$1 || key !== scale$1.type) this.value = scale$1 = (0, _vegaScale.scale)(key)();
        for(key in _)if (!SKIP[key]) {
            // padding is a scale property for band/point but not others
            if (key === "padding" && includePad(scale$1.type)) continue; // invoke scale property setter, raise warning if not found
            (0, _vegaUtil.isFunction)(scale$1[key]) ? scale$1[key](_[key]) : df.warn("Unsupported scale property: " + key);
        }
        configureRange(scale$1, _, configureBins(scale$1, _, configureDomain(scale$1, _, df)));
        return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
});
function scaleKey(_) {
    var t = _.type, d = "", n; // backwards compatibility pre Vega 5.
    if (t === (0, _vegaScale.Sequential)) return (0, _vegaScale.Sequential) + "-" + (0, _vegaScale.Linear);
    if (isContinuousColor(_)) {
        n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
        d = n === 2 ? (0, _vegaScale.Sequential) + "-" : n === 3 ? (0, _vegaScale.Diverging) + "-" : "";
    }
    return (d + t || (0, _vegaScale.Linear)).toLowerCase();
}
function isContinuousColor(_) {
    const t = _.type;
    return (0, _vegaScale.isContinuous)(t) && t !== (0, _vegaScale.Time) && t !== (0, _vegaScale.UTC) && (_.scheme || _.range && _.range.length && _.range.every((0, _vegaUtil.isString)));
}
function configureDomain(scale, _, df) {
    // check raw domain, if provided use that and exit early
    const raw = rawDomain(scale, _.domainRaw, df);
    if (raw > -1) return raw;
    var domain = _.domain, type = scale.type, zero = _.zero || _.zero === undefined && includeZero(scale), n, mid;
    if (!domain) return 0; // adjust continuous domain for minimum pixel padding
    if (includePad(type) && _.padding && domain[0] !== (0, _vegaUtil.peek)(domain)) domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
     // adjust domain based on zero, min, max settings
    if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
        n = (domain = domain.slice()).length - 1 || 1;
        if (zero) {
            if (domain[0] > 0) domain[0] = 0;
            if (domain[n] < 0) domain[n] = 0;
        }
        if (_.domainMin != null) domain[0] = _.domainMin;
        if (_.domainMax != null) domain[n] = _.domainMax;
        if (_.domainMid != null) {
            mid = _.domainMid;
            const i = mid > domain[n] ? n + 1 : mid < domain[0] ? 0 : n;
            if (i !== n) df.warn("Scale domainMid exceeds domain min or max.", mid);
            domain.splice(i, 0, mid);
        }
    } // set the scale domain
    scale.domain(domainCheck(type, domain, df)); // if ordinal scale domain is defined, prevent implicit
    // domain construction as side-effect of scale lookup
    if (type === (0, _vegaScale.Ordinal)) scale.unknown(_.domainImplicit ? (0, _vegaScale.scaleImplicit) : undefined);
     // perform 'nice' adjustment as requested
    if (_.nice && scale.nice) scale.nice(_.nice !== true && (0, _vegaScale.tickCount)(scale, _.nice) || null);
     // return the cardinality of the domain
    return domain.length;
}
function rawDomain(scale, raw, df) {
    if (raw) {
        scale.domain(domainCheck(scale.type, raw, df));
        return raw.length;
    } else return -1;
}
function padDomain(type, domain, range, pad, exponent, constant) {
    var span = Math.abs((0, _vegaUtil.peek)(range) - range[0]), frac = span / (span - 2 * pad), d = type === (0, _vegaScale.Log) ? (0, _vegaUtil.zoomLog)(domain, null, frac) : type === (0, _vegaScale.Sqrt) ? (0, _vegaUtil.zoomPow)(domain, null, frac, 0.5) : type === (0, _vegaScale.Pow) ? (0, _vegaUtil.zoomPow)(domain, null, frac, exponent || 1) : type === (0, _vegaScale.Symlog) ? (0, _vegaUtil.zoomSymlog)(domain, null, frac, constant || 1) : (0, _vegaUtil.zoomLinear)(domain, null, frac);
    domain = domain.slice();
    domain[0] = d[0];
    domain[domain.length - 1] = d[1];
    return domain;
}
function domainCheck(type, domain, df) {
    if ((0, _vegaScale.isLogarithmic)(type)) {
        // sum signs of domain values
        // if all pos or all neg, abs(sum) === domain.length
        var s = Math.abs(domain.reduce((s, v)=>s + (v < 0 ? -1 : v > 0 ? 1 : 0), 0));
        if (s !== domain.length) df.warn("Log scale domain includes zero: " + (0, _vegaUtil.stringValue)(domain));
    }
    return domain;
}
function configureBins(scale, _, count) {
    let bins = _.bins;
    if (bins && !(0, _vegaUtil.isArray)(bins)) {
        // generate bin boundary array
        const domain = scale.domain(), lo = domain[0], hi = (0, _vegaUtil.peek)(domain), step = bins.step;
        let start = bins.start == null ? lo : bins.start, stop = bins.stop == null ? hi : bins.stop;
        if (!step) (0, _vegaUtil.error)("Scale bins parameter missing step property.");
        if (start < lo) start = step * Math.ceil(lo / step);
        if (stop > hi) stop = step * Math.floor(hi / step);
        bins = (0, _d3Array.range)(start, stop + step / 2, step);
    }
    if (bins) // assign bin boundaries to scale instance
    scale.bins = bins;
    else if (scale.bins) // no current bins, remove bins if previously set
    delete scale.bins;
     // special handling for bin-ordinal scales
    if (scale.type === (0, _vegaScale.BinOrdinal)) {
        if (!bins) // the domain specifies the bins
        scale.bins = scale.domain();
        else if (!_.domain && !_.domainRaw) {
            // the bins specify the domain
            scale.domain(bins);
            count = bins.length;
        }
    } // return domain cardinality
    return count;
}
function configureRange(scale, _, count) {
    var type = scale.type, round = _.round || false, range = _.range; // if range step specified, calculate full range extent
    if (_.rangeStep != null) range = configureRangeStep(type, _, count);
    else if (_.scheme) {
        range = configureScheme(type, _, count);
        if ((0, _vegaUtil.isFunction)(range)) {
            if (scale.interpolator) return scale.interpolator(range);
            else (0, _vegaUtil.error)("Scale type ".concat(type, " does not support interpolating color schemes."));
        }
    } // given a range array for an interpolating scale, convert to interpolator
    if (range && (0, _vegaScale.isInterpolating)(type)) return scale.interpolator((0, _vegaScale.interpolateColors)(flip(range, _.reverse), _.interpolate, _.interpolateGamma));
     // configure rounding / interpolation
    if (range && _.interpolate && scale.interpolate) scale.interpolate((0, _vegaScale.interpolate)(_.interpolate, _.interpolateGamma));
    else if ((0, _vegaUtil.isFunction)(scale.round)) scale.round(round);
    else if ((0, _vegaUtil.isFunction)(scale.rangeRound)) scale.interpolate(round ? (0, _d3Interpolate.interpolateRound) : (0, _d3Interpolate.interpolate));
    if (range) scale.range(flip(range, _.reverse));
}
function configureRangeStep(type, _, count) {
    if (type !== (0, _vegaScale.Band) && type !== (0, _vegaScale.Point)) (0, _vegaUtil.error)("Only band and point scales support rangeStep.");
     // calculate full range based on requested step size and padding
    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0, inner = type === (0, _vegaScale.Point) ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
    return [
        0,
        _.rangeStep * (0, _vegaScale.bandSpace)(count, inner, outer)
    ];
}
function configureScheme(type, _, count) {
    var extent = _.schemeExtent, name, scheme$1;
    if ((0, _vegaUtil.isArray)(_.scheme)) scheme$1 = (0, _vegaScale.interpolateColors)(_.scheme, _.interpolate, _.interpolateGamma);
    else {
        name = _.scheme.toLowerCase();
        scheme$1 = (0, _vegaScale.scheme)(name);
        if (!scheme$1) (0, _vegaUtil.error)("Unrecognized scheme name: ".concat(_.scheme));
    } // determine size for potential discrete range
    count = type === (0, _vegaScale.Threshold) ? count + 1 : type === (0, _vegaScale.BinOrdinal) ? count - 1 : type === (0, _vegaScale.Quantile) || type === (0, _vegaScale.Quantize) ? +_.schemeCount || DEFAULT_COUNT : count; // adjust and/or quantize scheme as appropriate
    return (0, _vegaScale.isInterpolating)(type) ? adjustScheme(scheme$1, extent, _.reverse) : (0, _vegaUtil.isFunction)(scheme$1) ? (0, _vegaScale.quantizeInterpolator)(adjustScheme(scheme$1, extent), count) : type === (0, _vegaScale.Ordinal) ? scheme$1 : scheme$1.slice(0, count);
}
function adjustScheme(scheme, extent, reverse) {
    return (0, _vegaUtil.isFunction)(scheme) && (extent || reverse) ? (0, _vegaScale.interpolateRange)(scheme, flip(extent || [
        0,
        1
    ], reverse)) : scheme;
}
function flip(array, reverse) {
    return reverse ? array.slice().reverse() : array;
}
/**
 * Sorts scenegraph items in the pulse source array.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting tuples.
 */ function SortItems(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
(0, _vegaUtil.inherits)(SortItems, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const mod = _.modified("sort") || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified("datum");
        if (mod) pulse.source.sort((0, _vegaDataflow.stableCompare)(_.sort));
        this.modified(mod);
        return pulse;
    }
});
const Zero = "zero", Center = "center", Normalize = "normalize", DefOutput = [
    "y0",
    "y1"
];
/**
 * Stack layout for visualization elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to stack.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
 * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.
 */ function Stack(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Stack.Definition = {
    "type": "Stack",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "offset",
            "type": "enum",
            "default": Zero,
            "values": [
                Zero,
                Center,
                Normalize
            ]
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": DefOutput
        }
    ]
};
(0, _vegaUtil.inherits)(Stack, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var as = _.as || DefOutput, y0 = as[0], y1 = as[1], sort = (0, _vegaDataflow.stableCompare)(_.sort), field = _.field || (0, _vegaUtil.one), stack = _.offset === Center ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero, groups, i, n, max; // partition, sum, and sort the stack groups
        groups = partition(pulse.source, _.groupby, sort, field); // compute stack layouts per group
        for(i = 0, n = groups.length, max = groups.max; i < n; ++i)stack(groups[i], max, field, y0, y1);
        return pulse.reflow(_.modified()).modifies(as);
    }
});
function stackCenter(group, max, field, y0, y1) {
    var last = (max - group.sum) / 2, m = group.length, j = 0, t;
    for(; j < m; ++j){
        t = group[j];
        t[y0] = last;
        t[y1] = last += Math.abs(field(t));
    }
}
function stackNormalize(group, max, field, y0, y1) {
    var scale = 1 / group.sum, last = 0, m = group.length, j = 0, v = 0, t;
    for(; j < m; ++j){
        t = group[j];
        t[y0] = last;
        t[y1] = last = scale * (v += Math.abs(field(t)));
    }
}
function stackZero(group, max, field, y0, y1) {
    var lastPos = 0, lastNeg = 0, m = group.length, j = 0, v, t;
    for(; j < m; ++j){
        t = group[j];
        v = +field(t);
        if (v < 0) {
            t[y0] = lastNeg;
            t[y1] = lastNeg += v;
        } else {
            t[y0] = lastPos;
            t[y1] = lastPos += v;
        }
    }
}
function partition(data, groupby, sort, field) {
    var groups = [], get = (f)=>f(t), map, i, n, m, t, k, g, s, max; // partition data points into stack groups
    if (groupby == null) groups.push(data.slice());
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            groups.push(g);
        }
        g.push(t);
    }
     // compute sums of groups, sort groups as needed
    for(k = 0, max = 0, m = groups.length; k < m; ++k){
        g = groups[k];
        for(i = 0, s = 0, n = g.length; i < n; ++i)s += Math.abs(field(g[i]));
        g.sum = s;
        if (s > max) max = s;
        if (sort) g.sort(sort);
    }
    groups.max = max;
    return groups;
}

},{"vega-dataflow":"3NitK","vega-scale":"bEydG","vega-util":"bApja","d3-array":"6IwJG","d3-interpolate":"6gbPP","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3rF9B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contour", ()=>Contour);
parcelHelpers.export(exports, "geojson", ()=>GeoJSON);
parcelHelpers.export(exports, "geopath", ()=>GeoPath);
parcelHelpers.export(exports, "geopoint", ()=>GeoPoint);
parcelHelpers.export(exports, "geoshape", ()=>GeoShape);
parcelHelpers.export(exports, "graticule", ()=>Graticule);
parcelHelpers.export(exports, "heatmap", ()=>Heatmap);
parcelHelpers.export(exports, "isocontour", ()=>Isocontour);
parcelHelpers.export(exports, "kde2d", ()=>KDE2D);
parcelHelpers.export(exports, "projection", ()=>Projection);
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
var _d3Array = require("d3-array");
var _vegaStatistics = require("vega-statistics");
var _vegaProjection = require("vega-projection");
var _d3Geo = require("d3-geo");
var _d3Color = require("d3-color");
var _vegaCanvas = require("vega-canvas");
function noop() {}
const cases = [
    [],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                0.5,
                1.0
            ]
        ],
        [
            [
                1.0,
                0.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ],
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    []
]; // Implementation adapted from d3/d3-contour. Thanks!
function contours() {
    var dx = 1, dy = 1, smooth = smoothLinear;
    function contours(values, tz) {
        return tz.map((value)=>contour(values, value));
    } // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
    function contour(values, value) {
        var polygons = [], holes = [];
        isorings(values, value, (ring)=>{
            smooth(ring, values, value);
            if (area(ring) > 0) polygons.push([
                ring
            ]);
            else holes.push(ring);
        });
        holes.forEach((hole)=>{
            for(var i = 0, n = polygons.length, polygon; i < n; ++i)if (contains((polygon = polygons[i])[0], hole) !== -1) {
                polygon.push(hole);
                return;
            }
        });
        return {
            type: "MultiPolygon",
            value: value,
            coordinates: polygons
        };
    } // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
    function isorings(values, value, callback) {
        var fragmentByStart = new Array(), fragmentByEnd = new Array(), x, y, t0, t1, t2, t3; // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = values[0] >= value;
        cases[t1 << 1].forEach(stitch);
        while(++x < dx - 1){
            t0 = t1, t1 = values[x + 1] >= value;
            cases[t0 | t1 << 1].forEach(stitch);
        }
        cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.
        while(++y < dy - 1){
            x = -1;
            t1 = values[y * dx + dx] >= value;
            t2 = values[y * dx] >= value;
            cases[t1 << 1 | t2 << 2].forEach(stitch);
            while(++x < dx - 1){
                t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
                t3 = t2, t2 = values[y * dx + x + 1] >= value;
                cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
            }
            cases[t1 | t2 << 3].forEach(stitch);
        } // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        cases[t2 << 2].forEach(stitch);
        while(++x < dx - 1){
            t3 = t2, t2 = values[y * dx + x + 1] >= value;
            cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t2 << 3].forEach(stitch);
        function stitch(line) {
            var start = [
                line[0][0] + x,
                line[0][1] + y
            ], end = [
                line[1][0] + x,
                line[1][1] + y
            ], startIndex = index(start), endIndex = index(end), f, g;
            if (f = fragmentByEnd[startIndex]) {
                if (g = fragmentByStart[endIndex]) {
                    delete fragmentByEnd[f.end];
                    delete fragmentByStart[g.start];
                    if (f === g) {
                        f.ring.push(end);
                        callback(f.ring);
                    } else fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                        start: f.start,
                        end: g.end,
                        ring: f.ring.concat(g.ring)
                    };
                } else {
                    delete fragmentByEnd[f.end];
                    f.ring.push(end);
                    fragmentByEnd[f.end = endIndex] = f;
                }
            } else if (f = fragmentByStart[endIndex]) {
                if (g = fragmentByEnd[startIndex]) {
                    delete fragmentByStart[f.start];
                    delete fragmentByEnd[g.end];
                    if (f === g) {
                        f.ring.push(end);
                        callback(f.ring);
                    } else fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                        start: g.start,
                        end: f.end,
                        ring: g.ring.concat(f.ring)
                    };
                } else {
                    delete fragmentByStart[f.start];
                    f.ring.unshift(start);
                    fragmentByStart[f.start = startIndex] = f;
                }
            } else fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
                start: startIndex,
                end: endIndex,
                ring: [
                    start,
                    end
                ]
            };
        }
    }
    function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
    }
    function smoothLinear(ring, values, value) {
        ring.forEach((point)=>{
            var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v0, v1 = values[yt * dx + xt];
            if (x > 0 && x < dx && xt === x) {
                v0 = values[yt * dx + xt - 1];
                point[0] = x + (value - v0) / (v1 - v0) - 0.5;
            }
            if (y > 0 && y < dy && yt === y) {
                v0 = values[(yt - 1) * dx + xt];
                point[1] = y + (value - v0) / (v1 - v0) - 0.5;
            }
        });
    }
    contours.contour = contour;
    contours.size = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
        if (!(_0 >= 0 && _1 >= 0)) (0, _vegaUtil.error)("invalid size");
        return dx = _0, dy = _1, contours;
    };
    contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
    };
    return contours;
}
function area(ring) {
    var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while(++i < n)area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    return area;
}
function contains(ring, hole) {
    var i = -1, n = hole.length, c;
    while(++i < n)if (c = ringContains(ring, hole[i])) return c;
    return 0;
}
function ringContains(ring, point) {
    var x = point[0], y = point[1], contains = -1;
    for(var i = 0, n = ring.length, j = n - 1; i < n; j = i++){
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }
    return contains;
}
function segmentContains(a, b, c) {
    var i;
    return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}
function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}
function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
}
function quantize(k, nice, zero) {
    return function(values) {
        var ex = (0, _vegaUtil.extent)(values), start = zero ? Math.min(ex[0], 0) : ex[0], stop = ex[1], span = stop - start, step = nice ? (0, _d3Array.tickStep)(start, stop, k) : span / (k + 1);
        return (0, _d3Array.range)(start + step, stop, step);
    };
}
/**
 * Generate isocontours (level sets) based on input raster grid data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} [params.field] - The field with raster grid
 *   data. If unspecified, the tuple itself is interpreted as a raster grid.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   specified, the levels, nice, resolve, and zero parameters are ignored.
 * @param {number} [params.levels] - The desired number of contour levels.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified levels.
 * @param {string} [params.resolve] - The method for resolving thresholds
 *   across multiple input grids. If 'independent' (the default), threshold
 *   calculation will be performed separately for each grid. If 'shared', a
 *   single set of threshold values will be used for all input grids.
 * @param {boolean} [params.zero] - Boolean flag indicating if the contour
 *   threshold values should include zero.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 * @param {boolean} [params.scale] - Optional numerical value by which to
 *   scale the output isocontour coordinates. This parameter can be useful
 *   to scale the contours to match a desired output resolution.
 * @param {string} [params.as='contour'] - The output field in which to store
 *   the generated isocontour data (default 'contour').
 */ function Isocontour(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Isocontour.Definition = {
    "type": "Isocontour",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "thresholds",
            "type": "number",
            "array": true
        },
        {
            "name": "levels",
            "type": "number"
        },
        {
            "name": "nice",
            "type": "boolean",
            "default": false
        },
        {
            "name": "resolve",
            "type": "enum",
            "values": [
                "shared",
                "independent"
            ],
            "default": "independent"
        },
        {
            "name": "zero",
            "type": "boolean",
            "default": true
        },
        {
            "name": "smooth",
            "type": "boolean",
            "default": true
        },
        {
            "name": "scale",
            "type": "number",
            "expr": true
        },
        {
            "name": "translate",
            "type": "number",
            "array": true,
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "default": "contour"
        }
    ]
};
(0, _vegaUtil.inherits)(Isocontour, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), source = pulse.materialize(pulse.SOURCE).source, field = _.field || (0, _vegaUtil.identity), contour = contours().smooth(_.smooth !== false), tz = _.thresholds || levels(source, field, _), as = _.as === null ? null : _.as || "contour", values = [];
        source.forEach((t)=>{
            const grid = field(t); // generate contour paths in GeoJSON format
            const paths = contour.size([
                grid.width,
                grid.height
            ])(grid.values, (0, _vegaUtil.isArray)(tz) ? tz : tz(grid.values)); // adjust contour path coordinates as needed
            transformPaths(paths, grid, t, _); // ingest; copy source data properties to output
            paths.forEach((p)=>{
                values.push((0, _vegaDataflow.rederive)(t, (0, _vegaDataflow.ingest)(as != null ? {
                    [as]: p
                } : p)));
            });
        });
        if (this.value) out.rem = this.value;
        this.value = out.source = out.add = values;
        return out;
    }
});
function levels(values, f, _) {
    const q = quantize(_.levels || 10, _.nice, _.zero !== false);
    return _.resolve !== "shared" ? q : q(values.map((t)=>(0, _d3Array.max)(f(t).values)));
}
function transformPaths(paths, grid, datum, _) {
    let s = _.scale || grid.scale, t = _.translate || grid.translate;
    if ((0, _vegaUtil.isFunction)(s)) s = s(datum, _);
    if ((0, _vegaUtil.isFunction)(t)) t = t(datum, _);
    if ((s === 1 || s == null) && !t) return;
    const sx = ((0, _vegaUtil.isNumber)(s) ? s : s[0]) || 1, sy = ((0, _vegaUtil.isNumber)(s) ? s : s[1]) || 1, tx = t && t[0] || 0, ty = t && t[1] || 0;
    paths.forEach(transform(grid, sx, sy, tx, ty));
}
function transform(grid, sx, sy, tx, ty) {
    const x1 = grid.x1 || 0, y1 = grid.y1 || 0, flip = sx * sy < 0;
    function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
    }
    function transformRing(coordinates) {
        if (flip) coordinates.reverse(); // maintain winding order
        coordinates.forEach(transformPoint);
    }
    function transformPoint(coordinates) {
        coordinates[0] = (coordinates[0] - x1) * sx + tx;
        coordinates[1] = (coordinates[1] - y1) * sy + ty;
    }
    return function(geometry) {
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
    };
}
function radius(bw, data, f) {
    const v = bw >= 0 ? bw : (0, _vegaStatistics.bandwidthNRD)(data, f);
    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);
}
function number(_) {
    return (0, _vegaUtil.isFunction)(_) ? _ : (0, _vegaUtil.constant)(+_);
} // Implementation adapted from d3/d3-contour. Thanks!
function density2D() {
    var x = (d)=>d[0], y = (d)=>d[1], weight = (0, _vegaUtil.one), bandwidth = [
        -1,
        -1
    ], dx = 960, dy = 500, k = 2; // log2(cellSize)
    function density(data, counts) {
        const rx = radius(bandwidth[0], data, x) >> k, // blur x-radius
        ry = radius(bandwidth[1], data, y) >> k, // blur y-radius
        ox = rx ? rx + 2 : 0, // x-offset padding for blur
        oy = ry ? ry + 2 : 0, // y-offset padding for blur
        n = 2 * ox + (dx >> k), // grid width
        m = 2 * oy + (dy >> k), // grid height
        values0 = new Float32Array(n * m), values1 = new Float32Array(n * m);
        let values = values0;
        data.forEach((d)=>{
            const xi = ox + (+x(d) >> k), yi = oy + (+y(d) >> k);
            if (xi >= 0 && xi < n && yi >= 0 && yi < m) values0[xi + yi * n] += +weight(d);
        });
        if (rx > 0 && ry > 0) {
            blurX(n, m, values0, values1, rx);
            blurY(n, m, values1, values0, ry);
            blurX(n, m, values0, values1, rx);
            blurY(n, m, values1, values0, ry);
            blurX(n, m, values0, values1, rx);
            blurY(n, m, values1, values0, ry);
        } else if (rx > 0) {
            blurX(n, m, values0, values1, rx);
            blurX(n, m, values1, values0, rx);
            blurX(n, m, values0, values1, rx);
            values = values1;
        } else if (ry > 0) {
            blurY(n, m, values0, values1, ry);
            blurY(n, m, values1, values0, ry);
            blurY(n, m, values0, values1, ry);
            values = values1;
        } // scale density estimates
        // density in points per square pixel or probability density
        const s = counts ? Math.pow(2, -2 * k) : 1 / (0, _d3Array.sum)(values);
        for(let i = 0, sz = n * m; i < sz; ++i)values[i] *= s;
        return {
            values: values,
            scale: 1 << k,
            width: n,
            height: m,
            x1: ox,
            y1: oy,
            x2: ox + (dx >> k),
            y2: oy + (dy >> k)
        };
    }
    density.x = function(_) {
        return arguments.length ? (x = number(_), density) : x;
    };
    density.y = function(_) {
        return arguments.length ? (y = number(_), density) : y;
    };
    density.weight = function(_) {
        return arguments.length ? (weight = number(_), density) : weight;
    };
    density.size = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        var _0 = +_[0], _1 = +_[1];
        if (!(_0 >= 0 && _1 >= 0)) (0, _vegaUtil.error)("invalid size");
        return dx = _0, dy = _1, density;
    };
    density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) (0, _vegaUtil.error)("invalid cell size");
        k = Math.floor(Math.log(_) / Math.LN2);
        return density;
    };
    density.bandwidth = function(_) {
        if (!arguments.length) return bandwidth;
        _ = (0, _vegaUtil.array)(_);
        if (_.length === 1) _ = [
            +_[0],
            +_[0]
        ];
        if (_.length !== 2) (0, _vegaUtil.error)("invalid bandwidth");
        return bandwidth = _, density;
    };
    return density;
}
function blurX(n, m, source, target, r) {
    const w = (r << 1) + 1;
    for(let j = 0; j < m; ++j)for(let i = 0, sr = 0; i < n + r; ++i){
        if (i < n) sr += source[i + j * n];
        if (i >= r) {
            if (i >= w) sr -= source[i - w + j * n];
            target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
        }
    }
}
function blurY(n, m, source, target, r) {
    const w = (r << 1) + 1;
    for(let i = 0; i < n; ++i)for(let j = 0, sr = 0; j < m + r; ++j){
        if (j < m) sr += source[i + j * n];
        if (j >= r) {
            if (j >= w) sr -= source[i + (j - w) * n];
            target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
        }
    }
}
/**
 * Perform 2D kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The [width, height] extent (in
 *   units of input pixels) over which to perform density estimation.
 * @param {function(object): number} params.x - The x-coordinate accessor.
 * @param {function(object): number} params.y - The y-coordinate accessor.
 * @param {function(object): number} [params.weight] - The weight accessor.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 *   This parameter determines the level of spatial approximation. For example,
 *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.
 *   A value of 1 will result in an output raster grid whose dimensions exactly
 *   matches the size parameter.
 * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,
 *   in pixels. The input can be a two-element array specifying separate
 *   x and y bandwidths, or a single-element array specifying both. If the
 *   bandwidth is unspecified or less than zero, the bandwidth will be
 *   automatically determined.
 * @param {boolean} [params.counts=false] - A boolean flag indicating if the
 *   output values should be probability estimates (false, default) or
 *   smoothed counts (true).
 * @param {string} [params.as='grid'] - The output field in which to store
 *   the generated raster grid (default 'grid').
 */ function KDE2D(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
KDE2D.Definition = {
    "type": "KDE2D",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2,
            "required": true
        },
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "weight",
            "type": "field"
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "cellSize",
            "type": "number"
        },
        {
            "name": "bandwidth",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "counts",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "default": "grid"
        }
    ]
};
const PARAMS = [
    "x",
    "y",
    "weight",
    "size",
    "cellSize",
    "bandwidth"
];
function params(obj, _) {
    PARAMS.forEach((param)=>_[param] != null ? obj[param](_[param]) : 0);
    return obj;
}
(0, _vegaUtil.inherits)(KDE2D, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), source = pulse.materialize(pulse.SOURCE).source, groups = partition(source, _.groupby), names = (_.groupby || []).map((0, _vegaUtil.accessorName)), kde = params(density2D(), _), as = _.as || "grid", values = [];
        function set(t, vals) {
            for(let i = 0; i < names.length; ++i)t[names[i]] = vals[i];
            return t;
        } // generate density raster grids
        values = groups.map((g)=>(0, _vegaDataflow.ingest)(set({
                [as]: kde(g, _.counts)
            }, g.dims)));
        if (this.value) out.rem = this.value;
        this.value = out.source = out.add = values;
        return out;
    }
});
function partition(data, groupby) {
    var groups = [], get = (f)=>f(t), map, i, n, t, k, g; // partition data points into groups
    if (groupby == null) groups.push(data);
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            g.dims = k;
            groups.push(g);
        }
        g.push(t);
    }
    return groups;
}
/**
 * Generate contours based on kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
 *  If the values parameter is provided, this must be the dimensions of the input data.
 *  If density estimation is performed, this is the output view dimensions in pixels.
 * @param {Array<number>} [params.values] - An array of numeric values representing an
 *  width x height grid of values over which to compute contours. If unspecified, this
 *  transform will instead attempt to compute contours for the kernel density estimate
 *  using values drawn from data tuples in the input pulse.
 * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
 * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
 * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   this parameter is set, the count and nice parameters will be ignored.
 * @param {number} [params.count] - The desired number of contours.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified count.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 */ function Contour(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Contour.Definition = {
    "type": "Contour",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2,
            "required": true
        },
        {
            "name": "values",
            "type": "number",
            "array": true
        },
        {
            "name": "x",
            "type": "field"
        },
        {
            "name": "y",
            "type": "field"
        },
        {
            "name": "weight",
            "type": "field"
        },
        {
            "name": "cellSize",
            "type": "number"
        },
        {
            "name": "bandwidth",
            "type": "number"
        },
        {
            "name": "count",
            "type": "number"
        },
        {
            "name": "nice",
            "type": "boolean",
            "default": false
        },
        {
            "name": "thresholds",
            "type": "number",
            "array": true
        },
        {
            "name": "smooth",
            "type": "boolean",
            "default": true
        }
    ]
};
(0, _vegaUtil.inherits)(Contour, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), contour = contours().smooth(_.smooth !== false), values = _.values, thresh = _.thresholds || quantize(_.count || 10, _.nice, !!values), size = _.size, grid, post;
        if (!values) {
            values = pulse.materialize(pulse.SOURCE).source;
            grid = params(density2D(), _)(values, true);
            post = transform(grid, grid.scale || 1, grid.scale || 1, 0, 0);
            size = [
                grid.width,
                grid.height
            ];
            values = grid.values;
        }
        thresh = (0, _vegaUtil.isArray)(thresh) ? thresh : thresh(values);
        values = contour.size(size)(values, thresh);
        if (post) values.forEach(post);
        if (this.value) out.rem = this.value;
        this.value = out.source = out.add = (values || []).map((0, _vegaDataflow.ingest));
        return out;
    }
});
const Feature = "Feature";
const FeatureCollection = "FeatureCollection";
const MultiPoint = "MultiPoint";
/**
 * Consolidate an array of [longitude, latitude] points or GeoJSON features
 * into a combined GeoJSON object. This transform is particularly useful for
 * combining geo data for a Projection's fit argument. The resulting GeoJSON
 * data is available as this transform's value. Input pulses are unchanged.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.fields] - A two-element array
 *   of field accessors for the longitude and latitude values.
 * @param {function(object): *} params.geojson - A field accessor for
 *   retrieving GeoJSON feature data.
 */ function GeoJSON(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
GeoJSON.Definition = {
    "type": "GeoJSON",
    "metadata": {},
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "length": 2
        },
        {
            "name": "geojson",
            "type": "field"
        }
    ]
};
(0, _vegaUtil.inherits)(GeoJSON, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var features = this._features, points = this._points, fields = _.fields, lon = fields && fields[0], lat = fields && fields[1], geojson = _.geojson || !fields && (0, _vegaUtil.identity), flag = pulse.ADD, mod;
        mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified((0, _vegaUtil.accessorFields)(geojson)) || lon && pulse.modified((0, _vegaUtil.accessorFields)(lon)) || lat && pulse.modified((0, _vegaUtil.accessorFields)(lat));
        if (!this.value || mod) {
            flag = pulse.SOURCE;
            this._features = features = [];
            this._points = points = [];
        }
        if (geojson) pulse.visit(flag, (t)=>features.push(geojson(t)));
        if (lon && lat) {
            pulse.visit(flag, (t)=>{
                var x = lon(t), y = lat(t);
                if (x != null && y != null && (x = +x) === x && (y = +y) === y) points.push([
                    x,
                    y
                ]);
            });
            features = features.concat({
                type: Feature,
                geometry: {
                    type: MultiPoint,
                    coordinates: points
                }
            });
        }
        this.value = {
            type: FeatureCollection,
            features: features
        };
    }
});
/**
 * Map GeoJSON data to an SVG path string.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='path'] - The output field in which to store
 *   the generated path data (default 'path').
 */ function GeoPath(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
GeoPath.Definition = {
    "type": "GeoPath",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "projection",
            "type": "projection"
        },
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "pointRadius",
            "type": "number",
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "default": "path"
        }
    ]
};
(0, _vegaUtil.inherits)(GeoPath, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ALL), path = this.value, field = _.field || (0, _vegaUtil.identity), as = _.as || "path", flag = out.SOURCE;
        if (!path || _.modified()) {
            // parameters updated, reset and reflow
            this.value = path = (0, _vegaProjection.getProjectionPath)(_.projection);
            out.materialize().reflow();
        } else flag = field === (0, _vegaUtil.identity) || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;
        const prev = initPath(path, _.pointRadius);
        out.visit(flag, (t)=>t[as] = path(field(t)));
        path.pointRadius(prev);
        return out.modifies(as);
    }
});
function initPath(path, pointRadius) {
    const prev = path.pointRadius();
    path.context(null);
    if (pointRadius != null) path.pointRadius(pointRadius);
    return prev;
}
/**
 * Geo-code a longitude/latitude point to an x/y coordinate.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {Array<function(object): *>} params.fields - A two-element array of
 *   field accessors for the longitude and latitude values.
 * @param {Array<string>} [params.as] - A two-element array of field names
 *   under which to store the result. Defaults to ['x','y'].
 */ function GeoPoint(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
GeoPoint.Definition = {
    "type": "GeoPoint",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "projection",
            "type": "projection",
            "required": true
        },
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "x",
                "y"
            ]
        }
    ]
};
(0, _vegaUtil.inherits)(GeoPoint, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var proj = _.projection, lon = _.fields[0], lat = _.fields[1], as = _.as || [
            "x",
            "y"
        ], x = as[0], y = as[1], mod;
        function set(t) {
            const xy = proj([
                lon(t),
                lat(t)
            ]);
            if (xy) {
                t[x] = xy[0];
                t[y] = xy[1];
            } else {
                t[x] = undefined;
                t[y] = undefined;
            }
        }
        if (_.modified()) // parameters updated, reflow
        pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
        else {
            mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
            pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
        }
        return pulse.modifies(as);
    }
});
/**
 * Annotate items with a geopath shape generator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='shape'] - The output field in which to store
 *   the generated path data (default 'shape').
 */ function GeoShape(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
GeoShape.Definition = {
    "type": "GeoShape",
    "metadata": {
        "modifies": true,
        "nomod": true
    },
    "params": [
        {
            "name": "projection",
            "type": "projection"
        },
        {
            "name": "field",
            "type": "field",
            "default": "datum"
        },
        {
            "name": "pointRadius",
            "type": "number",
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "default": "shape"
        }
    ]
};
(0, _vegaUtil.inherits)(GeoShape, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ALL), shape = this.value, as = _.as || "shape", flag = out.ADD;
        if (!shape || _.modified()) {
            // parameters updated, reset and reflow
            this.value = shape = shapeGenerator((0, _vegaProjection.getProjectionPath)(_.projection), _.field || (0, _vegaUtil.field)("datum"), _.pointRadius);
            out.materialize().reflow();
            flag = out.SOURCE;
        }
        out.visit(flag, (t)=>t[as] = shape);
        return out.modifies(as);
    }
});
function shapeGenerator(path, field, pointRadius) {
    const shape = pointRadius == null ? (_)=>path(field(_)) : (_)=>{
        var prev = path.pointRadius(), value = path.pointRadius(pointRadius)(field(_));
        path.pointRadius(prev);
        return value;
    };
    shape.context = (_)=>{
        path.context(_);
        return shape;
    };
    return shape;
}
/**
 * GeoJSON feature generator for creating graticules.
 * @constructor
 */ function Graticule(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
    this.generator = (0, _d3Geo.geoGraticule)();
}
Graticule.Definition = {
    "type": "Graticule",
    "metadata": {
        "changes": true,
        "generates": true
    },
    "params": [
        {
            "name": "extent",
            "type": "array",
            "array": true,
            "length": 2,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "extentMajor",
            "type": "array",
            "array": true,
            "length": 2,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "extentMinor",
            "type": "array",
            "array": true,
            "length": 2,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "step",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "stepMajor",
            "type": "number",
            "array": true,
            "length": 2,
            "default": [
                90,
                360
            ]
        },
        {
            "name": "stepMinor",
            "type": "number",
            "array": true,
            "length": 2,
            "default": [
                10,
                10
            ]
        },
        {
            "name": "precision",
            "type": "number",
            "default": 2.5
        }
    ]
};
(0, _vegaUtil.inherits)(Graticule, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var src = this.value, gen = this.generator, t;
        if (!src.length || _.modified()) {
            for(const prop in _)if ((0, _vegaUtil.isFunction)(gen[prop])) gen[prop](_[prop]);
        }
        t = gen();
        if (src.length) pulse.mod.push((0, _vegaDataflow.replace)(src[0], t));
        else pulse.add.push((0, _vegaDataflow.ingest)(t));
        src[0] = t;
        return pulse;
    }
});
/**
 * Render a heatmap image for input raster grid data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} [params.field] - The field with raster grid
 *   data. If unspecified, the tuple itself is interpreted as a raster grid.
 * @param {string} [params.color] - A constant color value or function for
 *   individual pixel color. If a function, it will be invoked with an input
 *   object that includes $x, $y, $value, and $max fields for the grid.
 * @param {number} [params.opacity] - A constant opacity value or function for
 *   individual pixel opacity. If a function, it will be invoked with an input
 *   object that includes $x, $y, $value, and $max fields for the grid.
 * @param {string} [params.resolve] - The method for resolving maximum values
 *   across multiple input grids. If 'independent' (the default), maximum
 *   calculation will be performed separately for each grid. If 'shared',
 *   a single global maximum will be used for all input grids.
 * @param {string} [params.as='image'] - The output field in which to store
 *   the generated bitmap canvas images (default 'image').
 */ function Heatmap(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Heatmap.Definition = {
    "type": "heatmap",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "color",
            "type": "string",
            "expr": true
        },
        {
            "name": "opacity",
            "type": "number",
            "expr": true
        },
        {
            "name": "resolve",
            "type": "enum",
            "values": [
                "shared",
                "independent"
            ],
            "default": "independent"
        },
        {
            "name": "as",
            "type": "string",
            "default": "image"
        }
    ]
};
(0, _vegaUtil.inherits)(Heatmap, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (!pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var source = pulse.materialize(pulse.SOURCE).source, shared = _.resolve === "shared", field = _.field || (0, _vegaUtil.identity), opacity = opacity_(_.opacity, _), color = color_(_.color, _), as = _.as || "image", obj = {
            $x: 0,
            $y: 0,
            $value: 0,
            $max: shared ? (0, _d3Array.max)(source.map((t)=>(0, _d3Array.max)(field(t).values))) : 0
        };
        source.forEach((t)=>{
            const v = field(t); // build proxy data object
            const o = (0, _vegaUtil.extend)({}, t, obj); // set maximum value if not globally shared
            if (!shared) o.$max = (0, _d3Array.max)(v.values || []); // generate canvas image
            // optimize color/opacity if not pixel-dependent
            t[as] = toCanvas(v, o, color.dep ? color : (0, _vegaUtil.constant)(color(o)), opacity.dep ? opacity : (0, _vegaUtil.constant)(opacity(o)));
        });
        return pulse.reflow(true).modifies(as);
    }
}); // get image color function
function color_(color, _) {
    let f;
    if ((0, _vegaUtil.isFunction)(color)) {
        f = (obj)=>(0, _d3Color.rgb)(color(obj, _));
        f.dep = dependency(color);
    } else // default to mid-grey
    f = (0, _vegaUtil.constant)((0, _d3Color.rgb)(color || "#888"));
    return f;
} // get image opacity function
function opacity_(opacity, _) {
    let f;
    if ((0, _vegaUtil.isFunction)(opacity)) {
        f = (obj)=>opacity(obj, _);
        f.dep = dependency(opacity);
    } else if (opacity) f = (0, _vegaUtil.constant)(opacity);
    else {
        // default to [0, max] opacity gradient
        f = (obj)=>obj.$value / obj.$max || 0;
        f.dep = true;
    }
    return f;
} // check if function depends on individual pixel data
function dependency(f) {
    if (!(0, _vegaUtil.isFunction)(f)) return false;
    const set = (0, _vegaUtil.toSet)((0, _vegaUtil.accessorFields)(f));
    return set.$x || set.$y || set.$value || set.$max;
} // render raster grid to canvas
function toCanvas(grid, obj, color, opacity) {
    const n = grid.width, m = grid.height, x1 = grid.x1 || 0, y1 = grid.y1 || 0, x2 = grid.x2 || n, y2 = grid.y2 || m, val = grid.values, value = val ? (i)=>val[i] : (0, _vegaUtil.zero), can = (0, _vegaCanvas.canvas)(x2 - x1, y2 - y1), ctx = can.getContext("2d"), img = ctx.getImageData(0, 0, x2 - x1, y2 - y1), pix = img.data;
    for(let j = y1, k = 0; j < y2; ++j){
        obj.$y = j - y1;
        for(let i = x1, r = j * n; i < x2; ++i, k += 4){
            obj.$x = i - x1;
            obj.$value = value(i + r);
            const v = color(obj);
            pix[k + 0] = v.r;
            pix[k + 1] = v.g;
            pix[k + 2] = v.b;
            pix[k + 3] = ~~(255 * opacity(obj));
        }
    }
    ctx.putImageData(img, 0, 0);
    return can;
}
/**
 * Maintains a cartographic projection.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function Projection(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
    this.modified(true); // always treat as modified
}
(0, _vegaUtil.inherits)(Projection, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        let proj = this.value;
        if (!proj || _.modified("type")) {
            this.value = proj = create(_.type);
            (0, _vegaProjection.projectionProperties).forEach((prop)=>{
                if (_[prop] != null) set(proj, prop, _[prop]);
            });
        } else (0, _vegaProjection.projectionProperties).forEach((prop)=>{
            if (_.modified(prop)) set(proj, prop, _[prop]);
        });
        if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
        if (_.fit) fit(proj, _);
        return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
});
function fit(proj, _) {
    const data = collectGeoJSON(_.fit);
    _.extent ? proj.fitExtent(_.extent, data) : _.size && proj.fitSize(_.size, data);
}
function create(type) {
    const constructor = (0, _vegaProjection.projection)((type || "mercator").toLowerCase());
    if (!constructor) (0, _vegaUtil.error)("Unrecognized projection type: " + type);
    return constructor();
}
function set(proj, key, value) {
    if ((0, _vegaUtil.isFunction)(proj[key])) proj[key](value);
}
function collectGeoJSON(data) {
    data = (0, _vegaUtil.array)(data);
    return data.length === 1 ? data[0] : {
        type: FeatureCollection,
        features: data.reduce((a, f)=>a.concat(featurize(f)), [])
    };
}
function featurize(f) {
    return f.type === FeatureCollection ? f.features : (0, _vegaUtil.array)(f).filter((d)=>d != null).map((d)=>d.type === Feature ? d : {
            type: Feature,
            geometry: d
        });
}

},{"vega-dataflow":"3NitK","vega-util":"bApja","d3-array":"6IwJG","vega-statistics":"5ncfv","vega-projection":"4wv4C","d3-geo":"lY61T","d3-color":"7SCp9","vega-canvas":"f0yaA","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4wv4C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getProjectionPath", ()=>getProjectionPath);
parcelHelpers.export(exports, "projection", ()=>projection);
parcelHelpers.export(exports, "projectionProperties", ()=>projectionProperties);
var _d3Geo = require("d3-geo");
var _d3GeoProjection = require("d3-geo-projection");
const defaultPath = (0, _d3Geo.geoPath)();
const projectionProperties = [
    "clipAngle",
    "clipExtent",
    "scale",
    "translate",
    "center",
    "rotate",
    "parallels",
    "precision",
    "reflectX",
    "reflectY",
    "coefficient",
    "distance",
    "fraction",
    "lobes",
    "parallel",
    "radius",
    "ratio",
    "spacing",
    "tilt"
];
/**
 * Augment projections with their type and a copy method.
 */ function create(type, constructor) {
    return function projection() {
        const p = constructor();
        p.type = type;
        p.path = (0, _d3Geo.geoPath)().projection(p);
        p.copy = p.copy || function() {
            const c = projection();
            projectionProperties.forEach((prop)=>{
                if (p[prop]) c[prop](p[prop]());
            });
            c.path.pointRadius(p.path.pointRadius());
            return c;
        };
        return p;
    };
}
function projection(type, proj) {
    if (!type || typeof type !== "string") throw new Error("Projection type must be a name string.");
    type = type.toLowerCase();
    if (arguments.length > 1) {
        projections[type] = create(type, proj);
        return this;
    } else return projections[type] || null;
}
function getProjectionPath(proj) {
    return proj && proj.path || defaultPath;
}
const projections = {
    // base d3-geo projection types
    albers: (0, _d3Geo.geoAlbers),
    albersusa: (0, _d3Geo.geoAlbersUsa),
    azimuthalequalarea: (0, _d3Geo.geoAzimuthalEqualArea),
    azimuthalequidistant: (0, _d3Geo.geoAzimuthalEquidistant),
    conicconformal: (0, _d3Geo.geoConicConformal),
    conicequalarea: (0, _d3Geo.geoConicEqualArea),
    conicequidistant: (0, _d3Geo.geoConicEquidistant),
    equalEarth: (0, _d3Geo.geoEqualEarth),
    equirectangular: (0, _d3Geo.geoEquirectangular),
    gnomonic: (0, _d3Geo.geoGnomonic),
    identity: (0, _d3Geo.geoIdentity),
    mercator: (0, _d3Geo.geoMercator),
    mollweide: (0, _d3GeoProjection.geoMollweide),
    naturalEarth1: (0, _d3Geo.geoNaturalEarth1),
    orthographic: (0, _d3Geo.geoOrthographic),
    stereographic: (0, _d3Geo.geoStereographic),
    transversemercator: (0, _d3Geo.geoTransverseMercator)
};
for(const key in projections)projection(key, projections[key]);

},{"d3-geo":"lY61T","d3-geo-projection":"ixW8K","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lY61T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "geoArea", ()=>(0, _areaJsDefault.default));
parcelHelpers.export(exports, "geoBounds", ()=>(0, _boundsJsDefault.default));
parcelHelpers.export(exports, "geoCentroid", ()=>(0, _centroidJsDefault.default));
parcelHelpers.export(exports, "geoCircle", ()=>(0, _circleJsDefault.default));
parcelHelpers.export(exports, "geoClipAntimeridian", ()=>(0, _antimeridianJsDefault.default));
parcelHelpers.export(exports, "geoClipCircle", ()=>(0, _circleJsDefault1.default));
parcelHelpers.export(exports, "geoClipExtent", ()=>(0, _extentJsDefault.default)) // DEPRECATED! Use d3.geoIdentity().clipExtent(…).
;
parcelHelpers.export(exports, "geoClipRectangle", ()=>(0, _rectangleJsDefault.default));
parcelHelpers.export(exports, "geoContains", ()=>(0, _containsJsDefault.default));
parcelHelpers.export(exports, "geoDistance", ()=>(0, _distanceJsDefault.default));
parcelHelpers.export(exports, "geoGraticule", ()=>(0, _graticuleJsDefault.default));
parcelHelpers.export(exports, "geoGraticule10", ()=>(0, _graticuleJs.graticule10));
parcelHelpers.export(exports, "geoInterpolate", ()=>(0, _interpolateJsDefault.default));
parcelHelpers.export(exports, "geoLength", ()=>(0, _lengthJsDefault.default));
parcelHelpers.export(exports, "geoPath", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "geoAlbers", ()=>(0, _albersJsDefault.default));
parcelHelpers.export(exports, "geoAlbersUsa", ()=>(0, _albersUsaJsDefault.default));
parcelHelpers.export(exports, "geoAzimuthalEqualArea", ()=>(0, _azimuthalEqualAreaJsDefault.default));
parcelHelpers.export(exports, "geoAzimuthalEqualAreaRaw", ()=>(0, _azimuthalEqualAreaJs.azimuthalEqualAreaRaw));
parcelHelpers.export(exports, "geoAzimuthalEquidistant", ()=>(0, _azimuthalEquidistantJsDefault.default));
parcelHelpers.export(exports, "geoAzimuthalEquidistantRaw", ()=>(0, _azimuthalEquidistantJs.azimuthalEquidistantRaw));
parcelHelpers.export(exports, "geoConicConformal", ()=>(0, _conicConformalJsDefault.default));
parcelHelpers.export(exports, "geoConicConformalRaw", ()=>(0, _conicConformalJs.conicConformalRaw));
parcelHelpers.export(exports, "geoConicEqualArea", ()=>(0, _conicEqualAreaJsDefault.default));
parcelHelpers.export(exports, "geoConicEqualAreaRaw", ()=>(0, _conicEqualAreaJs.conicEqualAreaRaw));
parcelHelpers.export(exports, "geoConicEquidistant", ()=>(0, _conicEquidistantJsDefault.default));
parcelHelpers.export(exports, "geoConicEquidistantRaw", ()=>(0, _conicEquidistantJs.conicEquidistantRaw));
parcelHelpers.export(exports, "geoEqualEarth", ()=>(0, _equalEarthJsDefault.default));
parcelHelpers.export(exports, "geoEqualEarthRaw", ()=>(0, _equalEarthJs.equalEarthRaw));
parcelHelpers.export(exports, "geoEquirectangular", ()=>(0, _equirectangularJsDefault.default));
parcelHelpers.export(exports, "geoEquirectangularRaw", ()=>(0, _equirectangularJs.equirectangularRaw));
parcelHelpers.export(exports, "geoGnomonic", ()=>(0, _gnomonicJsDefault.default));
parcelHelpers.export(exports, "geoGnomonicRaw", ()=>(0, _gnomonicJs.gnomonicRaw));
parcelHelpers.export(exports, "geoIdentity", ()=>(0, _identityJsDefault.default));
parcelHelpers.export(exports, "geoProjection", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "geoProjectionMutator", ()=>(0, _indexJs1.projectionMutator));
parcelHelpers.export(exports, "geoMercator", ()=>(0, _mercatorJsDefault.default));
parcelHelpers.export(exports, "geoMercatorRaw", ()=>(0, _mercatorJs.mercatorRaw));
parcelHelpers.export(exports, "geoNaturalEarth1", ()=>(0, _naturalEarth1JsDefault.default));
parcelHelpers.export(exports, "geoNaturalEarth1Raw", ()=>(0, _naturalEarth1Js.naturalEarth1Raw));
parcelHelpers.export(exports, "geoOrthographic", ()=>(0, _orthographicJsDefault.default));
parcelHelpers.export(exports, "geoOrthographicRaw", ()=>(0, _orthographicJs.orthographicRaw));
parcelHelpers.export(exports, "geoStereographic", ()=>(0, _stereographicJsDefault.default));
parcelHelpers.export(exports, "geoStereographicRaw", ()=>(0, _stereographicJs.stereographicRaw));
parcelHelpers.export(exports, "geoTransverseMercator", ()=>(0, _transverseMercatorJsDefault.default));
parcelHelpers.export(exports, "geoTransverseMercatorRaw", ()=>(0, _transverseMercatorJs.transverseMercatorRaw));
parcelHelpers.export(exports, "geoRotation", ()=>(0, _rotationJsDefault.default));
parcelHelpers.export(exports, "geoStream", ()=>(0, _streamJsDefault.default));
parcelHelpers.export(exports, "geoTransform", ()=>(0, _transformJsDefault.default));
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _boundsJs = require("./bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _circleJs = require("./circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _antimeridianJs = require("./clip/antimeridian.js");
var _antimeridianJsDefault = parcelHelpers.interopDefault(_antimeridianJs);
var _circleJs1 = require("./clip/circle.js");
var _circleJsDefault1 = parcelHelpers.interopDefault(_circleJs1);
var _extentJs = require("./clip/extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _rectangleJs = require("./clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _distanceJs = require("./distance.js");
var _distanceJsDefault = parcelHelpers.interopDefault(_distanceJs);
var _graticuleJs = require("./graticule.js");
var _graticuleJsDefault = parcelHelpers.interopDefault(_graticuleJs);
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
var _lengthJs = require("./length.js");
var _lengthJsDefault = parcelHelpers.interopDefault(_lengthJs);
var _indexJs = require("./path/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _albersJs = require("./projection/albers.js");
var _albersJsDefault = parcelHelpers.interopDefault(_albersJs);
var _albersUsaJs = require("./projection/albersUsa.js");
var _albersUsaJsDefault = parcelHelpers.interopDefault(_albersUsaJs);
var _azimuthalEqualAreaJs = require("./projection/azimuthalEqualArea.js");
var _azimuthalEqualAreaJsDefault = parcelHelpers.interopDefault(_azimuthalEqualAreaJs);
var _azimuthalEquidistantJs = require("./projection/azimuthalEquidistant.js");
var _azimuthalEquidistantJsDefault = parcelHelpers.interopDefault(_azimuthalEquidistantJs);
var _conicConformalJs = require("./projection/conicConformal.js");
var _conicConformalJsDefault = parcelHelpers.interopDefault(_conicConformalJs);
var _conicEqualAreaJs = require("./projection/conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
var _conicEquidistantJs = require("./projection/conicEquidistant.js");
var _conicEquidistantJsDefault = parcelHelpers.interopDefault(_conicEquidistantJs);
var _equalEarthJs = require("./projection/equalEarth.js");
var _equalEarthJsDefault = parcelHelpers.interopDefault(_equalEarthJs);
var _equirectangularJs = require("./projection/equirectangular.js");
var _equirectangularJsDefault = parcelHelpers.interopDefault(_equirectangularJs);
var _gnomonicJs = require("./projection/gnomonic.js");
var _gnomonicJsDefault = parcelHelpers.interopDefault(_gnomonicJs);
var _identityJs = require("./projection/identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _indexJs1 = require("./projection/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _mercatorJs = require("./projection/mercator.js");
var _mercatorJsDefault = parcelHelpers.interopDefault(_mercatorJs);
var _naturalEarth1Js = require("./projection/naturalEarth1.js");
var _naturalEarth1JsDefault = parcelHelpers.interopDefault(_naturalEarth1Js);
var _orthographicJs = require("./projection/orthographic.js");
var _orthographicJsDefault = parcelHelpers.interopDefault(_orthographicJs);
var _stereographicJs = require("./projection/stereographic.js");
var _stereographicJsDefault = parcelHelpers.interopDefault(_stereographicJs);
var _transverseMercatorJs = require("./projection/transverseMercator.js");
var _transverseMercatorJsDefault = parcelHelpers.interopDefault(_transverseMercatorJs);
var _rotationJs = require("./rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);

},{"./area.js":"iajNA","./bounds.js":"9Dbky","./centroid.js":"kO6wx","./circle.js":"lPX3u","./clip/antimeridian.js":"kvVxQ","./clip/circle.js":"2PJ3I","./clip/extent.js":false,"./clip/rectangle.js":"9kmAt","./contains.js":false,"./distance.js":false,"./graticule.js":"arQrO","./interpolate.js":false,"./length.js":false,"./path/index.js":"gBtNJ","./projection/albers.js":"dSks5","./projection/albersUsa.js":"4lZJF","./projection/azimuthalEqualArea.js":"jbLs0","./projection/azimuthalEquidistant.js":"eAR2Q","./projection/conicConformal.js":"dhBsj","./projection/conicEqualArea.js":"17j9x","./projection/conicEquidistant.js":"6B358","./projection/equalEarth.js":"bMVhy","./projection/equirectangular.js":"4kEjS","./projection/gnomonic.js":"6bdgO","./projection/identity.js":"huYSV","./projection/index.js":"cd9OX","./projection/mercator.js":"iIGjZ","./projection/naturalEarth1.js":"4AzsZ","./projection/orthographic.js":"kjinQ","./projection/stereographic.js":"6ko7r","./projection/transverseMercator.js":"i6NVd","./rotation.js":"8C7qH","./stream.js":"9nFXd","./transform.js":"9MXXE","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iajNA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "areaRingSum", ()=>areaRingSum);
parcelHelpers.export(exports, "areaStream", ()=>areaStream);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var areaRingSum = new (0, _d3Array.Adder)();
// hello?
var areaSum = new (0, _d3Array.Adder)(), lambda00, phi00, lambda0, cosPhi0, sinPhi0;
var areaStream = {
    point: (0, _noopJsDefault.default),
    lineStart: (0, _noopJsDefault.default),
    lineEnd: (0, _noopJsDefault.default),
    polygonStart: function() {
        areaRingSum = new (0, _d3Array.Adder)();
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
        var areaRing = +areaRingSum;
        areaSum.add(areaRing < 0 ? (0, _mathJs.tau) + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = (0, _noopJsDefault.default);
    },
    sphere: function() {
        areaSum.add((0, _mathJs.tau));
    }
};
function areaRingStart() {
    areaStream.point = areaPointFirst;
}
function areaRingEnd() {
    areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    lambda00 = lambda, phi00 = phi;
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    lambda0 = lambda, cosPhi0 = (0, _mathJs.cos)(phi = phi / 2 + (0, _mathJs.quarterPi)), sinPhi0 = (0, _mathJs.sin)(phi);
}
function areaPoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    phi = phi / 2 + (0, _mathJs.quarterPi); // half the angular distance from south pole
    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = (0, _mathJs.cos)(phi), sinPhi = (0, _mathJs.sin)(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * (0, _mathJs.cos)(adLambda), v = k * sdLambda * (0, _mathJs.sin)(adLambda);
    areaRingSum.add((0, _mathJs.atan2)(v, u));
    // Advance the previous points.
    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}
exports.default = function(object) {
    areaSum = new (0, _d3Array.Adder)();
    (0, _streamJsDefault.default)(object, areaStream);
    return areaSum * 2;
};

},{"d3-array":"6IwJG","./math.js":"74X19","./noop.js":"aXmaS","./stream.js":"9nFXd","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"74X19":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "epsilon", ()=>epsilon);
parcelHelpers.export(exports, "epsilon2", ()=>epsilon2);
parcelHelpers.export(exports, "pi", ()=>pi);
parcelHelpers.export(exports, "halfPi", ()=>halfPi);
parcelHelpers.export(exports, "quarterPi", ()=>quarterPi);
parcelHelpers.export(exports, "tau", ()=>tau);
parcelHelpers.export(exports, "degrees", ()=>degrees);
parcelHelpers.export(exports, "radians", ()=>radians);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "atan", ()=>atan);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "ceil", ()=>ceil);
parcelHelpers.export(exports, "exp", ()=>exp);
parcelHelpers.export(exports, "floor", ()=>floor);
parcelHelpers.export(exports, "hypot", ()=>hypot);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "pow", ()=>pow);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "tan", ()=>tan);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "asin", ()=>asin);
parcelHelpers.export(exports, "haversin", ()=>haversin);
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var floor = Math.floor;
var hypot = Math.hypot;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}
function haversin(x) {
    return (x = sin(x / 2)) * x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aXmaS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function noop() {}
exports.default = noop;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9nFXd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) streamGeometryType[geometry.type](geometry, stream);
}
var streamObjectType = {
    Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while(++i < n)streamGeometry(features[i].geometry, stream);
    }
};
var streamGeometryType = {
    Sphere: function(object, stream) {
        stream.sphere();
    },
    Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while(++i < n)streamGeometry(geometries[i], stream);
    }
};
function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while(++i < n)coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
}
function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while(++i < n)streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
}
exports.default = function(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) streamObjectType[object.type](object, stream);
    else streamGeometry(object, stream);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9Dbky":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _areaJs = require("./area.js");
var _cartesianJs = require("./cartesian.js");
var _mathJs = require("./math.js");
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var lambda0, phi0, lambda1, phi1, lambda2, lambda00, phi00, p0, deltaSum, ranges, range;
var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function() {
        boundsStream.point = boundsRingPoint;
        boundsStream.lineStart = boundsRingStart;
        boundsStream.lineEnd = boundsRingEnd;
        deltaSum = new (0, _d3Array.Adder)();
        (0, _areaJs.areaStream).polygonStart();
    },
    polygonEnd: function() {
        (0, _areaJs.areaStream).polygonEnd();
        boundsStream.point = boundsPoint;
        boundsStream.lineStart = boundsLineStart;
        boundsStream.lineEnd = boundsLineEnd;
        if ((0, _areaJs.areaRingSum) < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > (0, _mathJs.epsilon)) phi1 = 90;
        else if (deltaSum < -(0, _mathJs.epsilon)) phi0 = -90;
        range[0] = lambda0, range[1] = lambda1;
    },
    sphere: function() {
        lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    }
};
function boundsPoint(lambda, phi) {
    ranges.push(range = [
        lambda0 = lambda,
        lambda1 = lambda
    ]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
}
function linePoint(lambda, phi) {
    var p = (0, _cartesianJs.cartesian)([
        lambda * (0, _mathJs.radians),
        phi * (0, _mathJs.radians)
    ]);
    if (p0) {
        var normal = (0, _cartesianJs.cartesianCross)(p0, p), equatorial = [
            normal[1],
            -normal[0],
            0
        ], inflection = (0, _cartesianJs.cartesianCross)(equatorial, normal);
        (0, _cartesianJs.cartesianNormalizeInPlace)(inflection);
        inflection = (0, _cartesianJs.spherical)(inflection);
        var delta = lambda - lambda2, sign = delta > 0 ? 1 : -1, lambdai = inflection[0] * (0, _mathJs.degrees) * sign, phii, antimeridian = (0, _mathJs.abs)(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = inflection[1] * (0, _mathJs.degrees);
            if (phii > phi1) phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = -inflection[1] * (0, _mathJs.degrees);
            if (phii < phi0) phi0 = phii;
        } else {
            if (phi < phi0) phi0 = phi;
            if (phi > phi1) phi1 = phi;
        }
        if (antimeridian) {
            if (lambda < lambda2) {
                if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
            } else if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        } else if (lambda1 >= lambda0) {
            if (lambda < lambda0) lambda0 = lambda;
            if (lambda > lambda1) lambda1 = lambda;
        } else {
            if (lambda > lambda2) {
                if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
            } else if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
    } else ranges.push(range = [
        lambda0 = lambda,
        lambda1 = lambda
    ]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
    p0 = p, lambda2 = lambda;
}
function boundsLineStart() {
    boundsStream.point = linePoint;
}
function boundsLineEnd() {
    range[0] = lambda0, range[1] = lambda1;
    boundsStream.point = boundsPoint;
    p0 = null;
}
function boundsRingPoint(lambda, phi) {
    if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add((0, _mathJs.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else lambda00 = lambda, phi00 = phi;
    (0, _areaJs.areaStream).point(lambda, phi);
    linePoint(lambda, phi);
}
function boundsRingStart() {
    (0, _areaJs.areaStream).lineStart();
}
function boundsRingEnd() {
    boundsRingPoint(lambda00, phi00);
    (0, _areaJs.areaStream).lineEnd();
    if ((0, _mathJs.abs)(deltaSum) > (0, _mathJs.epsilon)) lambda0 = -(lambda1 = 180);
    range[0] = lambda0, range[1] = lambda1;
    p0 = null;
}
// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}
function rangeCompare(a, b) {
    return a[0] - b[0];
}
function rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}
exports.default = function(feature) {
    var i, n, a, b, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
    ranges = [];
    (0, _streamJsDefault.default)(feature, boundsStream);
    // First, sort ranges by their minimum longitudes.
    if (n = ranges.length) {
        ranges.sort(rangeCompare);
        // Then, merge any ranges that overlap.
        for(i = 1, a = ranges[0], merged = [
            a
        ]; i < n; ++i){
            b = ranges[i];
            if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
                if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
            } else merged.push(a = b);
        }
        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for(deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i){
            b = merged[i];
            if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
        }
    }
    ranges = range = null;
    return lambda0 === Infinity || phi0 === Infinity ? [
        [
            NaN,
            NaN
        ],
        [
            NaN,
            NaN
        ]
    ] : [
        [
            lambda0,
            phi0
        ],
        [
            lambda1,
            phi1
        ]
    ];
};

},{"d3-array":"6IwJG","./area.js":"iajNA","./cartesian.js":"i2DwM","./math.js":"74X19","./stream.js":"9nFXd","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i2DwM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spherical", ()=>spherical);
parcelHelpers.export(exports, "cartesian", ()=>cartesian);
parcelHelpers.export(exports, "cartesianDot", ()=>cartesianDot);
parcelHelpers.export(exports, "cartesianCross", ()=>cartesianCross);
// TODO return a
parcelHelpers.export(exports, "cartesianAddInPlace", ()=>cartesianAddInPlace);
parcelHelpers.export(exports, "cartesianScale", ()=>cartesianScale);
// TODO return d
parcelHelpers.export(exports, "cartesianNormalizeInPlace", ()=>cartesianNormalizeInPlace);
var _mathJs = require("./math.js");
function spherical(cartesian) {
    return [
        (0, _mathJs.atan2)(cartesian[1], cartesian[0]),
        (0, _mathJs.asin)(cartesian[2])
    ];
}
function cartesian(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = (0, _mathJs.cos)(phi);
    return [
        cosPhi * (0, _mathJs.cos)(lambda),
        cosPhi * (0, _mathJs.sin)(lambda),
        (0, _mathJs.sin)(phi)
    ];
}
function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0]
    ];
}
function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
    return [
        vector[0] * k,
        vector[1] * k,
        vector[2] * k
    ];
}
function cartesianNormalizeInPlace(d) {
    var l = (0, _mathJs.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
}

},{"./math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kO6wx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, x0, y0, z0; // previous point
var centroidStream = {
    sphere: (0, _noopJsDefault.default),
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    }
};
// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi);
    centroidPointCartesian(cosPhi * (0, _mathJs.cos)(lambda), cosPhi * (0, _mathJs.sin)(lambda), (0, _mathJs.sin)(phi));
}
function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi);
    x0 = cosPhi * (0, _mathJs.cos)(lambda);
    y0 = cosPhi * (0, _mathJs.sin)(lambda);
    z0 = (0, _mathJs.sin)(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi), x = cosPhi * (0, _mathJs.cos)(lambda), y = cosPhi * (0, _mathJs.sin)(lambda), z = (0, _mathJs.sin)(phi), w = (0, _mathJs.atan2)((0, _mathJs.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
    centroidStream.point = centroidPoint;
}
// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
    centroidRingPoint(lambda00, phi00);
    centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
    lambda00 = lambda, phi00 = phi;
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    centroidStream.point = centroidRingPoint;
    var cosPhi = (0, _mathJs.cos)(phi);
    x0 = cosPhi * (0, _mathJs.cos)(lambda);
    y0 = cosPhi * (0, _mathJs.sin)(lambda);
    z0 = (0, _mathJs.sin)(phi);
    centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi), x = cosPhi * (0, _mathJs.cos)(lambda), y = cosPhi * (0, _mathJs.sin)(lambda), z = (0, _mathJs.sin)(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = (0, _mathJs.hypot)(cx, cy, cz), w = (0, _mathJs.asin)(m), v = m && -w / m; // area weight multiplier
    X2.add(v * cx);
    Y2.add(v * cy);
    Z2.add(v * cz);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
}
exports.default = function(object) {
    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
    X2 = new (0, _d3Array.Adder)();
    Y2 = new (0, _d3Array.Adder)();
    Z2 = new (0, _d3Array.Adder)();
    (0, _streamJsDefault.default)(object, centroidStream);
    var x = +X2, y = +Y2, z = +Z2, m = (0, _mathJs.hypot)(x, y, z);
    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
    if (m < (0, _mathJs.epsilon2)) {
        x = X1, y = Y1, z = Z1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if (W1 < (0, _mathJs.epsilon)) x = X0, y = Y0, z = Z0;
        m = (0, _mathJs.hypot)(x, y, z);
        // If the feature still has an undefined ccentroid, then return.
        if (m < (0, _mathJs.epsilon2)) return [
            NaN,
            NaN
        ];
    }
    return [
        (0, _mathJs.atan2)(y, x) * (0, _mathJs.degrees),
        (0, _mathJs.asin)(z / m) * (0, _mathJs.degrees)
    ];
};

},{"d3-array":"6IwJG","./math.js":"74X19","./noop.js":"aXmaS","./stream.js":"9nFXd","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lPX3u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Generates a circle centered at [0°, 0°], with a given radius and precision.
parcelHelpers.export(exports, "circleStream", ()=>circleStream);
var _cartesianJs = require("./cartesian.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _mathJs = require("./math.js");
var _rotationJs = require("./rotation.js");
function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = (0, _mathJs.cos)(radius), sinRadius = (0, _mathJs.sin)(radius), step = direction * delta;
    if (t0 == null) {
        t0 = radius + direction * (0, _mathJs.tau);
        t1 = radius - step / 2;
    } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * (0, _mathJs.tau);
    }
    for(var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step){
        point = (0, _cartesianJs.spherical)([
            cosRadius,
            -sinRadius * (0, _mathJs.cos)(t),
            -sinRadius * (0, _mathJs.sin)(t)
        ]);
        stream.point(point[0], point[1]);
    }
}
// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
    point = (0, _cartesianJs.cartesian)(point), point[0] -= cosRadius;
    (0, _cartesianJs.cartesianNormalizeInPlace)(point);
    var radius = (0, _mathJs.acos)(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + (0, _mathJs.tau) - (0, _mathJs.epsilon)) % (0, _mathJs.tau);
}
exports.default = function() {
    var center = (0, _constantJsDefault.default)([
        0,
        0
    ]), radius = (0, _constantJsDefault.default)(90), precision = (0, _constantJsDefault.default)(6), ring, rotate, stream = {
        point: point
    };
    function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= (0, _mathJs.degrees), x[1] *= (0, _mathJs.degrees);
    }
    function circle() {
        var c = center.apply(this, arguments), r = radius.apply(this, arguments) * (0, _mathJs.radians), p = precision.apply(this, arguments) * (0, _mathJs.radians);
        ring = [];
        rotate = (0, _rotationJs.rotateRadians)(-c[0] * (0, _mathJs.radians), -c[1] * (0, _mathJs.radians), 0).invert;
        circleStream(stream, r, p, 1);
        c = {
            type: "Polygon",
            coordinates: [
                ring
            ]
        };
        ring = rotate = null;
        return c;
    }
    circle.center = function(_) {
        return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constantJsDefault.default)([
            +_[0],
            +_[1]
        ]), circle) : center;
    };
    circle.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), circle) : radius;
    };
    circle.precision = function(_) {
        return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), circle) : precision;
    };
    return circle;
};

},{"./cartesian.js":"i2DwM","./constant.js":"en6KO","./math.js":"74X19","./rotation.js":"8C7qH","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"en6KO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8C7qH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateRadians", ()=>rotateRadians);
var _composeJs = require("./compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _mathJs = require("./math.js");
function rotationIdentity(lambda, phi) {
    return [
        (0, _mathJs.abs)(lambda) > (0, _mathJs.pi) ? lambda + Math.round(-lambda / (0, _mathJs.tau)) * (0, _mathJs.tau) : lambda,
        phi
    ];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= (0, _mathJs.tau)) ? deltaPhi || deltaGamma ? (0, _composeJsDefault.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
        return lambda += deltaLambda, [
            lambda > (0, _mathJs.pi) ? lambda - (0, _mathJs.tau) : lambda < -(0, _mathJs.pi) ? lambda + (0, _mathJs.tau) : lambda,
            phi
        ];
    };
}
function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = (0, _mathJs.cos)(deltaPhi), sinDeltaPhi = (0, _mathJs.sin)(deltaPhi), cosDeltaGamma = (0, _mathJs.cos)(deltaGamma), sinDeltaGamma = (0, _mathJs.sin)(deltaGamma);
    function rotation(lambda, phi) {
        var cosPhi = (0, _mathJs.cos)(phi), x = (0, _mathJs.cos)(lambda) * cosPhi, y = (0, _mathJs.sin)(lambda) * cosPhi, z = (0, _mathJs.sin)(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
            (0, _mathJs.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
            (0, _mathJs.asin)(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
    }
    rotation.invert = function(lambda, phi) {
        var cosPhi = (0, _mathJs.cos)(phi), x = (0, _mathJs.cos)(lambda) * cosPhi, y = (0, _mathJs.sin)(lambda) * cosPhi, z = (0, _mathJs.sin)(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
            (0, _mathJs.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
            (0, _mathJs.asin)(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
    };
    return rotation;
}
exports.default = function(rotate) {
    rotate = rotateRadians(rotate[0] * (0, _mathJs.radians), rotate[1] * (0, _mathJs.radians), rotate.length > 2 ? rotate[2] * (0, _mathJs.radians) : 0);
    function forward(coordinates) {
        coordinates = rotate(coordinates[0] * (0, _mathJs.radians), coordinates[1] * (0, _mathJs.radians));
        return coordinates[0] *= (0, _mathJs.degrees), coordinates[1] *= (0, _mathJs.degrees), coordinates;
    }
    forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * (0, _mathJs.radians), coordinates[1] * (0, _mathJs.radians));
        return coordinates[0] *= (0, _mathJs.degrees), coordinates[1] *= (0, _mathJs.degrees), coordinates;
    };
    return forward;
};

},{"./compose.js":"hmaf3","./math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hmaf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kvVxQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
exports.default = (0, _indexJsDefault.default)(function() {
    return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [
    -(0, _mathJs.pi),
    -(0, _mathJs.halfPi)
]);
// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
    var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean; // no intersections
    return {
        lineStart: function() {
            stream.lineStart();
            clean = 1;
        },
        point: function(lambda1, phi1) {
            var sign1 = lambda1 > 0 ? (0, _mathJs.pi) : -(0, _mathJs.pi), delta = (0, _mathJs.abs)(lambda1 - lambda0);
            if ((0, _mathJs.abs)(delta - (0, _mathJs.pi)) < (0, _mathJs.epsilon)) {
                stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? (0, _mathJs.halfPi) : -(0, _mathJs.halfPi));
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                stream.point(lambda1, phi0);
                clean = 0;
            } else if (sign0 !== sign1 && delta >= (0, _mathJs.pi)) {
                if ((0, _mathJs.abs)(lambda0 - sign0) < (0, _mathJs.epsilon)) lambda0 -= sign0 * (0, _mathJs.epsilon); // handle degeneracies
                if ((0, _mathJs.abs)(lambda1 - sign1) < (0, _mathJs.epsilon)) lambda1 -= sign1 * (0, _mathJs.epsilon);
                phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                clean = 0;
            }
            stream.point(lambda0 = lambda1, phi0 = phi1);
            sign0 = sign1;
        },
        lineEnd: function() {
            stream.lineEnd();
            lambda0 = phi0 = NaN;
        },
        clean: function() {
            return 2 - clean; // if intersections, rejoin first and last segments
        }
    };
}
function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0, cosPhi1, sinLambda0Lambda1 = (0, _mathJs.sin)(lambda0 - lambda1);
    return (0, _mathJs.abs)(sinLambda0Lambda1) > (0, _mathJs.epsilon) ? (0, _mathJs.atan)(((0, _mathJs.sin)(phi0) * (cosPhi1 = (0, _mathJs.cos)(phi1)) * (0, _mathJs.sin)(lambda1) - (0, _mathJs.sin)(phi1) * (cosPhi0 = (0, _mathJs.cos)(phi0)) * (0, _mathJs.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
        phi = direction * (0, _mathJs.halfPi);
        stream.point(-(0, _mathJs.pi), phi);
        stream.point(0, phi);
        stream.point((0, _mathJs.pi), phi);
        stream.point((0, _mathJs.pi), 0);
        stream.point((0, _mathJs.pi), -phi);
        stream.point(0, -phi);
        stream.point(-(0, _mathJs.pi), -phi);
        stream.point(-(0, _mathJs.pi), 0);
        stream.point(-(0, _mathJs.pi), phi);
    } else if ((0, _mathJs.abs)(from[0] - to[0]) > (0, _mathJs.epsilon)) {
        var lambda = from[0] < to[0] ? (0, _mathJs.pi) : -(0, _mathJs.pi);
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
    } else stream.point(to[0], to[1]);
}

},{"./index.js":"gHqWc","../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gHqWc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _rejoinJs = require("./rejoin.js");
var _rejoinJsDefault = parcelHelpers.interopDefault(_rejoinJs);
var _mathJs = require("../math.js");
var _polygonContainsJs = require("../polygonContains.js");
var _polygonContainsJsDefault = parcelHelpers.interopDefault(_polygonContainsJs);
var _d3Array = require("d3-array");
exports.default = function(pointVisible, clipLine, interpolate, start) {
    return function(sink) {
        var line = clipLine(sink), ringBuffer = (0, _bufferJsDefault.default)(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
        var clip = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                clip.point = pointRing;
                clip.lineStart = ringStart;
                clip.lineEnd = ringEnd;
                segments = [];
                polygon = [];
            },
            polygonEnd: function() {
                clip.point = point;
                clip.lineStart = lineStart;
                clip.lineEnd = lineEnd;
                segments = (0, _d3Array.merge)(segments);
                var startInside = (0, _polygonContainsJsDefault.default)(polygon, start);
                if (segments.length) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    (0, _rejoinJsDefault.default)(segments, compareIntersection, startInside, interpolate, sink);
                } else if (startInside) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                }
                if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                segments = polygon = null;
            },
            sphere: function() {
                sink.polygonStart();
                sink.lineStart();
                interpolate(null, null, 1, sink);
                sink.lineEnd();
                sink.polygonEnd();
            }
        };
        function point(lambda, phi) {
            if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }
        function pointLine(lambda, phi) {
            line.point(lambda, phi);
        }
        function lineStart() {
            clip.point = pointLine;
            line.lineStart();
        }
        function lineEnd() {
            clip.point = point;
            line.lineEnd();
        }
        function pointRing(lambda, phi) {
            ring.push([
                lambda,
                phi
            ]);
            ringSink.point(lambda, phi);
        }
        function ringStart() {
            ringSink.lineStart();
            ring = [];
        }
        function ringEnd() {
            pointRing(ring[0][0], ring[0][1]);
            ringSink.lineEnd();
            var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
            ring.pop();
            polygon.push(ring);
            ring = null;
            if (!n) return;
            // No intersections.
            if (clean & 1) {
                segment = ringSegments[0];
                if ((m = segment.length - 1) > 0) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    for(i = 0; i < m; ++i)sink.point((point = segment[i])[0], point[1]);
                    sink.lineEnd();
                }
                return;
            }
            // Rejoin connected segments.
            // TODO reuse ringBuffer.rejoin()?
            if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
            segments.push(ringSegments.filter(validSegment));
        }
        return clip;
    };
};
function validSegment(segment) {
    return segment.length > 1;
}
// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - (0, _mathJs.halfPi) - (0, _mathJs.epsilon) : (0, _mathJs.halfPi) - a[1]) - ((b = b.x)[0] < 0 ? b[1] - (0, _mathJs.halfPi) - (0, _mathJs.epsilon) : (0, _mathJs.halfPi) - b[1]);
}

},{"./buffer.js":"6d6VN","./rejoin.js":"6J55y","../math.js":"74X19","../polygonContains.js":"13VDK","d3-array":"6IwJG","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6d6VN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
exports.default = function() {
    var lines = [], line;
    return {
        point: function(x, y, m) {
            line.push([
                x,
                y,
                m
            ]);
        },
        lineStart: function() {
            lines.push(line = []);
        },
        lineEnd: (0, _noopJsDefault.default),
        rejoin: function() {
            if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
            var result = lines;
            lines = [];
            line = null;
            return result;
        }
    };
};

},{"../noop.js":"aXmaS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6J55y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pointEqualJs = require("../pointEqual.js");
var _pointEqualJsDefault = parcelHelpers.interopDefault(_pointEqualJs);
var _mathJs = require("../math.js");
function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection
    this.e = entry; // is an entry?
    this.v = false; // visited
    this.n = this.p = null; // next & previous
}
// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
exports.default = function(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [], clip = [], i, n;
    segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;
        if ((0, _pointEqualJsDefault.default)(p0, p1)) {
            if (!p0[2] && !p1[2]) {
                stream.lineStart();
                for(i = 0; i < n; ++i)stream.point((p0 = segment[i])[0], p0[1]);
                stream.lineEnd();
                return;
            }
            // handle degenerate cases by moving the point
            p1[0] += 2 * (0, _mathJs.epsilon);
        }
        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    link(subject);
    link(clip);
    for(i = 0, n = clip.length; i < n; ++i)clip[i].e = startInside = !startInside;
    var start = subject[0], points, point;
    while(true){
        // Find first unvisited intersection.
        var current = start, isSubject = true;
        while(current.v)if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
            current.v = current.o.v = true;
            if (current.e) {
                if (isSubject) for(i = 0, n = points.length; i < n; ++i)stream.point((point = points[i])[0], point[1]);
                else interpolate(current.x, current.n.x, 1, stream);
                current = current.n;
            } else {
                if (isSubject) {
                    points = current.p.z;
                    for(i = points.length - 1; i >= 0; --i)stream.point((point = points[i])[0], point[1]);
                } else interpolate(current.x, current.p.x, -1, stream);
                current = current.p;
            }
            current = current.o;
            points = current.z;
            isSubject = !isSubject;
        }while (!current.v);
        stream.lineEnd();
    }
};
function link(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while(++i < n){
        a.n = b = array[i];
        b.p = a;
        a = b;
    }
    a.n = b = array[0];
    b.p = a;
}

},{"../pointEqual.js":"f0mBF","../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"f0mBF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("./math.js");
exports.default = function(a, b) {
    return (0, _mathJs.abs)(a[0] - b[0]) < (0, _mathJs.epsilon) && (0, _mathJs.abs)(a[1] - b[1]) < (0, _mathJs.epsilon);
};

},{"./math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"13VDK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _cartesianJs = require("./cartesian.js");
var _mathJs = require("./math.js");
function longitude(point) {
    if ((0, _mathJs.abs)(point[0]) <= (0, _mathJs.pi)) return point[0];
    else return (0, _mathJs.sign)(point[0]) * (((0, _mathJs.abs)(point[0]) + (0, _mathJs.pi)) % (0, _mathJs.tau) - (0, _mathJs.pi));
}
exports.default = function(polygon, point) {
    var lambda = longitude(point), phi = point[1], sinPhi = (0, _mathJs.sin)(phi), normal = [
        (0, _mathJs.sin)(lambda),
        -(0, _mathJs.cos)(lambda),
        0
    ], angle = 0, winding = 0;
    var sum = new (0, _d3Array.Adder)();
    if (sinPhi === 1) phi = (0, _mathJs.halfPi) + (0, _mathJs.epsilon);
    else if (sinPhi === -1) phi = -(0, _mathJs.halfPi) - (0, _mathJs.epsilon);
    for(var i = 0, n = polygon.length; i < n; ++i){
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring, m, point0 = ring[m - 1], lambda0 = longitude(point0), phi0 = point0[1] / 2 + (0, _mathJs.quarterPi), sinPhi0 = (0, _mathJs.sin)(phi0), cosPhi0 = (0, _mathJs.cos)(phi0);
        for(var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1){
            var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + (0, _mathJs.quarterPi), sinPhi1 = (0, _mathJs.sin)(phi1), cosPhi1 = (0, _mathJs.cos)(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > (0, _mathJs.pi), k = sinPhi0 * sinPhi1;
            sum.add((0, _mathJs.atan2)(k * sign * (0, _mathJs.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _mathJs.cos)(absDelta)));
            angle += antimeridian ? delta + sign * (0, _mathJs.tau) : delta;
            // Are the longitudes either side of the point’s meridian (lambda),
            // and are the latitudes smaller than the parallel (phi)?
            if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                var arc = (0, _cartesianJs.cartesianCross)((0, _cartesianJs.cartesian)(point0), (0, _cartesianJs.cartesian)(point1));
                (0, _cartesianJs.cartesianNormalizeInPlace)(arc);
                var intersection = (0, _cartesianJs.cartesianCross)(normal, arc);
                (0, _cartesianJs.cartesianNormalizeInPlace)(intersection);
                var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _mathJs.asin)(intersection[2]);
                if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
        }
    }
    // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.
    return (angle < -(0, _mathJs.epsilon) || angle < (0, _mathJs.epsilon) && sum < -(0, _mathJs.epsilon2)) ^ winding & 1;
};

},{"d3-array":"6IwJG","./cartesian.js":"i2DwM","./math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2PJ3I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cartesianJs = require("../cartesian.js");
var _circleJs = require("../circle.js");
var _mathJs = require("../math.js");
var _pointEqualJs = require("../pointEqual.js");
var _pointEqualJsDefault = parcelHelpers.interopDefault(_pointEqualJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
exports.default = function(radius) {
    var cr = (0, _mathJs.cos)(radius), delta = 6 * (0, _mathJs.radians), smallRadius = cr > 0, notHemisphere = (0, _mathJs.abs)(cr) > (0, _mathJs.epsilon); // TODO optimise for this common case
    function interpolate(from, to, direction, stream) {
        (0, _circleJs.circleStream)(stream, radius, delta, direction, from, to);
    }
    function visible(lambda, phi) {
        return (0, _mathJs.cos)(lambda) * (0, _mathJs.cos)(phi) > cr;
    }
    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    function clipLine(stream) {
        var point0, c0, v0, v00, clean; // no intersections
        return {
            lineStart: function() {
                v00 = v0 = false;
                clean = 1;
            },
            point: function(lambda, phi) {
                var point1 = [
                    lambda,
                    phi
                ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? (0, _mathJs.pi) : -(0, _mathJs.pi)), phi) : 0;
                if (!point0 && (v00 = v0 = v)) stream.lineStart();
                if (v !== v0) {
                    point2 = intersect(point0, point1);
                    if (!point2 || (0, _pointEqualJsDefault.default)(point0, point2) || (0, _pointEqualJsDefault.default)(point1, point2)) point1[2] = 1;
                }
                if (v !== v0) {
                    clean = 0;
                    if (v) {
                        // outside going in
                        stream.lineStart();
                        point2 = intersect(point1, point0);
                        stream.point(point2[0], point2[1]);
                    } else {
                        // inside going out
                        point2 = intersect(point0, point1);
                        stream.point(point2[0], point2[1], 2);
                        stream.lineEnd();
                    }
                    point0 = point2;
                } else if (notHemisphere && point0 && smallRadius ^ v) {
                    var t;
                    // If the codes for two points are different, or are both zero,
                    // and there this segment intersects with the small circle.
                    if (!(c & c0) && (t = intersect(point1, point0, true))) {
                        clean = 0;
                        if (smallRadius) {
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1]);
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                        } else {
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1], 3);
                        }
                    }
                }
                if (v && (!point0 || !(0, _pointEqualJsDefault.default)(point0, point1))) stream.point(point1[0], point1[1]);
                point0 = point1, v0 = v, c0 = c;
            },
            lineEnd: function() {
                if (v0) stream.lineEnd();
                point0 = null;
            },
            // Rejoin first and last segments if there were intersections and the first
            // and last points were visible.
            clean: function() {
                return clean | (v00 && v0) << 1;
            }
        };
    }
    // Intersects the great circle between a and b with the clip circle.
    function intersect(a, b, two) {
        var pa = (0, _cartesianJs.cartesian)(a), pb = (0, _cartesianJs.cartesian)(b);
        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [
            1,
            0,
            0
        ], n2 = (0, _cartesianJs.cartesianCross)(pa, pb), n2n2 = (0, _cartesianJs.cartesianDot)(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
        // Two polar points.
        if (!determinant) return !two && a;
        var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = (0, _cartesianJs.cartesianCross)(n1, n2), A = (0, _cartesianJs.cartesianScale)(n1, c1), B = (0, _cartesianJs.cartesianScale)(n2, c2);
        (0, _cartesianJs.cartesianAddInPlace)(A, B);
        // Solve |p(t)|^2 = 1.
        var u = n1xn2, w = (0, _cartesianJs.cartesianDot)(A, u), uu = (0, _cartesianJs.cartesianDot)(u, u), t2 = w * w - uu * ((0, _cartesianJs.cartesianDot)(A, A) - 1);
        if (t2 < 0) return;
        var t = (0, _mathJs.sqrt)(t2), q = (0, _cartesianJs.cartesianScale)(u, (-w - t) / uu);
        (0, _cartesianJs.cartesianAddInPlace)(q, A);
        q = (0, _cartesianJs.spherical)(q);
        if (!two) return q;
        // Two intersection points.
        var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
        var delta = lambda1 - lambda0, polar = (0, _mathJs.abs)(delta - (0, _mathJs.pi)) < (0, _mathJs.epsilon), meridian = polar || delta < (0, _mathJs.epsilon);
        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
        // Check that the first point is between a and b.
        if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _mathJs.abs)(q[0] - lambda0) < (0, _mathJs.epsilon) ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > (0, _mathJs.pi) ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
            var q1 = (0, _cartesianJs.cartesianScale)(u, (-w + t) / uu);
            (0, _cartesianJs.cartesianAddInPlace)(q1, A);
            return [
                q,
                (0, _cartesianJs.spherical)(q1)
            ];
        }
    }
    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    function code(lambda, phi) {
        var r = smallRadius ? radius : (0, _mathJs.pi) - radius, code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
    }
    return (0, _indexJsDefault.default)(visible, clipLine, interpolate, smallRadius ? [
        0,
        -radius
    ] : [
        -(0, _mathJs.pi),
        radius - (0, _mathJs.pi)
    ]);
};

},{"../cartesian.js":"i2DwM","../circle.js":"lPX3u","../math.js":"74X19","../pointEqual.js":"f0mBF","./index.js":"gHqWc","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9kmAt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _rejoinJs = require("./rejoin.js");
var _rejoinJsDefault = parcelHelpers.interopDefault(_rejoinJs);
var _d3Array = require("d3-array");
var clipMax = 1e9, clipMin = -clipMax;
function clipRectangle(x0, y0, x1, y1) {
    function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }
    function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1);
        else stream.point(to[0], to[1]);
    }
    function corner(p, direction) {
        return (0, _mathJs.abs)(p[0] - x0) < (0, _mathJs.epsilon) ? direction > 0 ? 0 : 3 : (0, _mathJs.abs)(p[0] - x1) < (0, _mathJs.epsilon) ? direction > 0 ? 2 : 1 : (0, _mathJs.abs)(p[1] - y0) < (0, _mathJs.epsilon) ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }
    function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
    }
    function comparePoint(a, b) {
        var ca = corner(a, 1), cb = corner(b, 1);
        return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    return function(stream) {
        var activeStream = stream, bufferStream = (0, _bufferJsDefault.default)(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
        var clipStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: polygonStart,
            polygonEnd: polygonEnd
        };
        function point(x, y) {
            if (visible(x, y)) activeStream.point(x, y);
        }
        function polygonInside() {
            var winding = 0;
            for(var i = 0, n = polygon.length; i < n; ++i)for(var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j){
                a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                if (a1 <= y1) {
                    if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                } else if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
            return winding;
        }
        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
            activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }
        function polygonEnd() {
            var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = (0, _d3Array.merge)(segments)).length;
            if (cleanInside || visible) {
                stream.polygonStart();
                if (cleanInside) {
                    stream.lineStart();
                    interpolate(null, null, 1, stream);
                    stream.lineEnd();
                }
                if (visible) (0, _rejoinJsDefault.default)(segments, compareIntersection, startInside, interpolate, stream);
                stream.polygonEnd();
            }
            activeStream = stream, segments = polygon = ring = null;
        }
        function lineStart() {
            clipStream.point = linePoint;
            if (polygon) polygon.push(ring = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN;
        }
        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
            if (segments) {
                linePoint(x__, y__);
                if (v__ && v_) bufferStream.rejoin();
                segments.push(bufferStream.result());
            }
            clipStream.point = point;
            if (v_) activeStream.lineEnd();
        }
        function linePoint(x, y) {
            var v = visible(x, y);
            if (polygon) ring.push([
                x,
                y
            ]);
            if (first) {
                x__ = x, y__ = y, v__ = v;
                first = false;
                if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                }
            } else if (v && v_) activeStream.point(x, y);
            else {
                var a = [
                    x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                    y_ = Math.max(clipMin, Math.min(clipMax, y_))
                ], b = [
                    x = Math.max(clipMin, Math.min(clipMax, x)),
                    y = Math.max(clipMin, Math.min(clipMax, y))
                ];
                if ((0, _lineJsDefault.default)(a, b, x0, y0, x1, y1)) {
                    if (!v_) {
                        activeStream.lineStart();
                        activeStream.point(a[0], a[1]);
                    }
                    activeStream.point(b[0], b[1]);
                    if (!v) activeStream.lineEnd();
                    clean = false;
                } else if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                    clean = false;
                }
            }
            x_ = x, y_ = y, v_ = v;
        }
        return clipStream;
    };
}
exports.default = clipRectangle;

},{"../math.js":"74X19","./buffer.js":"6d6VN","./line.js":"eNqzi","./rejoin.js":"6J55y","d3-array":"6IwJG","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eNqzi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b, x0, y0, x1, y1) {
    var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    }
    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    }
    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    }
    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    }
    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"arQrO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "graticule10", ()=>graticule10);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
function graticuleX(y0, y1, dy) {
    var y = (0, _d3Array.range)(y0, y1 - (0, _mathJs.epsilon), dy).concat(y1);
    return function(x) {
        return y.map(function(y) {
            return [
                x,
                y
            ];
        });
    };
}
function graticuleY(x0, x1, dx) {
    var x = (0, _d3Array.range)(x0, x1 - (0, _mathJs.epsilon), dx).concat(x1);
    return function(y) {
        return x.map(function(x) {
            return [
                x,
                y
            ];
        });
    };
}
function graticule() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
        return {
            type: "MultiLineString",
            coordinates: lines()
        };
    }
    function lines() {
        return (0, _d3Array.range)((0, _mathJs.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _mathJs.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _mathJs.ceil)(x0 / dx) * dx, x1, dx).filter(function(x) {
            return (0, _mathJs.abs)(x % DX) > (0, _mathJs.epsilon);
        }).map(x)).concat((0, _d3Array.range)((0, _mathJs.ceil)(y0 / dy) * dy, y1, dy).filter(function(y) {
            return (0, _mathJs.abs)(y % DY) > (0, _mathJs.epsilon);
        }).map(y));
    }
    graticule.lines = function() {
        return lines().map(function(coordinates) {
            return {
                type: "LineString",
                coordinates: coordinates
            };
        });
    };
    graticule.outline = function() {
        return {
            type: "Polygon",
            coordinates: [
                X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))
            ]
        };
    };
    graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
    };
    graticule.extentMajor = function(_) {
        if (!arguments.length) return [
            [
                X0,
                Y0
            ],
            [
                X1,
                Y1
            ]
        ];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
    };
    graticule.extentMinor = function(_) {
        if (!arguments.length) return [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
    };
    graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
    };
    graticule.stepMajor = function(_) {
        if (!arguments.length) return [
            DX,
            DY
        ];
        DX = +_[0], DY = +_[1];
        return graticule;
    };
    graticule.stepMinor = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        dx = +_[0], dy = +_[1];
        return graticule;
    };
    graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
    };
    return graticule.extentMajor([
        [
            -180,
            -90 + (0, _mathJs.epsilon)
        ],
        [
            180,
            90 - (0, _mathJs.epsilon)
        ]
    ]).extentMinor([
        [
            -180,
            -80 - (0, _mathJs.epsilon)
        ],
        [
            180,
            80 + (0, _mathJs.epsilon)
        ]
    ]);
}
exports.default = graticule;
function graticule10() {
    return graticule()();
}

},{"d3-array":"6IwJG","./math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gBtNJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _streamJs = require("../stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _boundsJs = require("./bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _contextJs = require("./context.js");
var _contextJsDefault = parcelHelpers.interopDefault(_contextJs);
var _measureJs = require("./measure.js");
var _measureJsDefault = parcelHelpers.interopDefault(_measureJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
exports.default = function(projection, context) {
    var pointRadius = 4.5, projectionStream, contextStream;
    function path(object) {
        if (object) {
            if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
            (0, _streamJsDefault.default)(object, projectionStream(contextStream));
        }
        return contextStream.result();
    }
    path.area = function(object) {
        (0, _streamJsDefault.default)(object, projectionStream((0, _areaJsDefault.default)));
        return (0, _areaJsDefault.default).result();
    };
    path.measure = function(object) {
        (0, _streamJsDefault.default)(object, projectionStream((0, _measureJsDefault.default)));
        return (0, _measureJsDefault.default).result();
    };
    path.bounds = function(object) {
        (0, _streamJsDefault.default)(object, projectionStream((0, _boundsJsDefault.default)));
        return (0, _boundsJsDefault.default).result();
    };
    path.centroid = function(object) {
        (0, _streamJsDefault.default)(object, projectionStream((0, _centroidJsDefault.default)));
        return (0, _centroidJsDefault.default).result();
    };
    path.projection = function(_) {
        return arguments.length ? (projectionStream = _ == null ? (projection = null, _identityJsDefault.default) : (projection = _).stream, path) : projection;
    };
    path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new (0, _stringJsDefault.default)) : new (0, _contextJsDefault.default)(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
    };
    path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
    };
    return path.projection(projection).context(context);
};

},{"../identity.js":"kub29","../stream.js":"9nFXd","./area.js":"5SF2U","./bounds.js":"bhNL9","./centroid.js":"lPOtc","./context.js":"fIlZ0","./measure.js":"iTRFv","./string.js":"gD9Wt","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kub29":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5SF2U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var areaSum = new (0, _d3Array.Adder)(), areaRingSum = new (0, _d3Array.Adder)(), x00, y00, x0, y0;
var areaStream = {
    point: (0, _noopJsDefault.default),
    lineStart: (0, _noopJsDefault.default),
    lineEnd: (0, _noopJsDefault.default),
    polygonStart: function() {
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
        areaStream.lineStart = areaStream.lineEnd = areaStream.point = (0, _noopJsDefault.default);
        areaSum.add((0, _mathJs.abs)(areaRingSum));
        areaRingSum = new (0, _d3Array.Adder)();
    },
    result: function() {
        var area = areaSum / 2;
        areaSum = new (0, _d3Array.Adder)();
        return area;
    }
};
function areaRingStart() {
    areaStream.point = areaPointFirst;
}
function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00 = x0 = x, y00 = y0 = y;
}
function areaPoint(x, y) {
    areaRingSum.add(y0 * x - x0 * y);
    x0 = x, y0 = y;
}
function areaRingEnd() {
    areaPoint(x00, y00);
}
exports.default = areaStream;

},{"d3-array":"6IwJG","../math.js":"74X19","../noop.js":"aXmaS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bhNL9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var x0 = Infinity, y0 = x0, x1 = -x0, y1 = x1;
var boundsStream = {
    point: boundsPoint,
    lineStart: (0, _noopJsDefault.default),
    lineEnd: (0, _noopJsDefault.default),
    polygonStart: (0, _noopJsDefault.default),
    polygonEnd: (0, _noopJsDefault.default),
    result: function() {
        var bounds = [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x1 = y1 = -(y0 = x0 = Infinity);
        return bounds;
    }
};
function boundsPoint(x, y) {
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
}
exports.default = boundsStream;

},{"../noop.js":"aXmaS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lPOtc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0, Y0 = 0, Z0 = 0, X1 = 0, Y1 = 0, Z1 = 0, X2 = 0, Y2 = 0, Z2 = 0, x00, y00, x0, y0;
var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
        centroidStream.point = centroidPoint;
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
        var centroid = Z2 ? [
            X2 / Z2,
            Y2 / Z2
        ] : Z1 ? [
            X1 / Z1,
            Y1 / Z1
        ] : Z0 ? [
            X0 / Z0,
            Y0 / Z0
        ] : [
            NaN,
            NaN
        ];
        X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
        return centroid;
    }
};
function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
}
function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0 = x, y0 = y);
}
function centroidPointLine(x, y) {
    var dx = x - x0, dy = y - y0, z = (0, _mathJs.sqrt)(dx * dx + dy * dy);
    X1 += z * (x0 + x) / 2;
    Y1 += z * (y0 + y) / 2;
    Z1 += z;
    centroidPoint(x0 = x, y0 = y);
}
function centroidLineEnd() {
    centroidStream.point = centroidPoint;
}
function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
    centroidPointRing(x00, y00);
}
function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00 = x0 = x, y00 = y0 = y);
}
function centroidPointRing(x, y) {
    var dx = x - x0, dy = y - y0, z = (0, _mathJs.sqrt)(dx * dx + dy * dy);
    X1 += z * (x0 + x) / 2;
    Y1 += z * (y0 + y) / 2;
    Z1 += z;
    z = y0 * x - x0 * y;
    X2 += z * (x0 + x);
    Y2 += z * (y0 + y);
    Z2 += z * 3;
    centroidPoint(x0 = x, y0 = y);
}
exports.default = centroidStream;

},{"../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fIlZ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
function PathContext(context) {
    this._context = context;
}
exports.default = PathContext;
PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
        return this._radius = _, this;
    },
    polygonStart: function() {
        this._line = 0;
    },
    polygonEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
    },
    point: function(x, y) {
        switch(this._point){
            case 0:
                this._context.moveTo(x, y);
                this._point = 1;
                break;
            case 1:
                this._context.lineTo(x, y);
                break;
            default:
                this._context.moveTo(x + this._radius, y);
                this._context.arc(x, y, this._radius, 0, (0, _mathJs.tau));
                break;
        }
    },
    result: (0, _noopJsDefault.default)
};

},{"../math.js":"74X19","../noop.js":"aXmaS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iTRFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var lengthSum = new (0, _d3Array.Adder)(), lengthRing, x00, y00, x0, y0;
var lengthStream = {
    point: (0, _noopJsDefault.default),
    lineStart: function() {
        lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
        if (lengthRing) lengthPoint(x00, y00);
        lengthStream.point = (0, _noopJsDefault.default);
    },
    polygonStart: function() {
        lengthRing = true;
    },
    polygonEnd: function() {
        lengthRing = null;
    },
    result: function() {
        var length = +lengthSum;
        lengthSum = new (0, _d3Array.Adder)();
        return length;
    }
};
function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00 = x0 = x, y00 = y0 = y;
}
function lengthPoint(x, y) {
    x0 -= x, y0 -= y;
    lengthSum.add((0, _mathJs.sqrt)(x0 * x0 + y0 * y0));
    x0 = x, y0 = y;
}
exports.default = lengthStream;

},{"d3-array":"6IwJG","../math.js":"74X19","../noop.js":"aXmaS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gD9Wt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function PathString() {
    this._string = [];
}
exports.default = PathString;
PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
    },
    polygonStart: function() {
        this._line = 0;
    },
    polygonEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
    },
    point: function(x, y) {
        switch(this._point){
            case 0:
                this._string.push("M", x, ",", y);
                this._point = 1;
                break;
            case 1:
                this._string.push("L", x, ",", y);
                break;
            default:
                if (this._circle == null) this._circle = circle(this._radius);
                this._string.push("M", x, ",", y, this._circle);
                break;
        }
    },
    result: function() {
        if (this._string.length) {
            var result = this._string.join("");
            this._string = [];
            return result;
        } else return null;
    }
};
function circle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dSks5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _conicEqualAreaJs = require("./conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
exports.default = function() {
    return (0, _conicEqualAreaJsDefault.default)().parallels([
        29.5,
        45.5
    ]).scale(1070).translate([
        480,
        250
    ]).rotate([
        96,
        0
    ]).center([
        -0.6,
        38.7
    ]);
};

},{"./conicEqualArea.js":"17j9x","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"17j9x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicEqualAreaRaw", ()=>conicEqualAreaRaw);
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _cylindricalEqualAreaJs = require("./cylindricalEqualArea.js");
function conicEqualAreaRaw(y0, y1) {
    var sy0 = (0, _mathJs.sin)(y0), n = (sy0 + (0, _mathJs.sin)(y1)) / 2;
    // Are the parallels symmetrical around the Equator?
    if ((0, _mathJs.abs)(n) < (0, _mathJs.epsilon)) return (0, _cylindricalEqualAreaJs.cylindricalEqualAreaRaw)(y0);
    var c = 1 + sy0 * (2 * n - sy0), r0 = (0, _mathJs.sqrt)(c) / n;
    function project(x, y) {
        var r = (0, _mathJs.sqrt)(c - 2 * n * (0, _mathJs.sin)(y)) / n;
        return [
            r * (0, _mathJs.sin)(x *= n),
            r0 - r * (0, _mathJs.cos)(x)
        ];
    }
    project.invert = function(x, y) {
        var r0y = r0 - y, l = (0, _mathJs.atan2)(x, (0, _mathJs.abs)(r0y)) * (0, _mathJs.sign)(r0y);
        if (r0y * n < 0) l -= (0, _mathJs.pi) * (0, _mathJs.sign)(x) * (0, _mathJs.sign)(r0y);
        return [
            l / n,
            (0, _mathJs.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))
        ];
    };
    return project;
}
exports.default = function() {
    return (0, _conicJs.conicProjection)(conicEqualAreaRaw).scale(155.424).center([
        0,
        33.6442
    ]);
};

},{"../math.js":"74X19","./conic.js":"15g8N","./cylindricalEqualArea.js":"j13Gc","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"15g8N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicProjection", ()=>conicProjection);
var _mathJs = require("../math.js");
var _indexJs = require("./index.js");
function conicProjection(projectAt) {
    var phi0 = 0, phi1 = (0, _mathJs.pi) / 3, m = (0, _indexJs.projectionMutator)(projectAt), p = m(phi0, phi1);
    p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * (0, _mathJs.radians), phi1 = _[1] * (0, _mathJs.radians)) : [
            phi0 * (0, _mathJs.degrees),
            phi1 * (0, _mathJs.degrees)
        ];
    };
    return p;
}

},{"../math.js":"74X19","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cd9OX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "projectionMutator", ()=>projectionMutator);
var _antimeridianJs = require("../clip/antimeridian.js");
var _antimeridianJsDefault = parcelHelpers.interopDefault(_antimeridianJs);
var _circleJs = require("../clip/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _rectangleJs = require("../clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _composeJs = require("../compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _mathJs = require("../math.js");
var _rotationJs = require("../rotation.js");
var _transformJs = require("../transform.js");
var _fitJs = require("./fit.js");
var _resampleJs = require("./resample.js");
var _resampleJsDefault = parcelHelpers.interopDefault(_resampleJs);
var transformRadians = (0, _transformJs.transformer)({
    point: function(x, y) {
        this.stream.point(x * (0, _mathJs.radians), y * (0, _mathJs.radians));
    }
});
function transformRotate(rotate) {
    return (0, _transformJs.transformer)({
        point: function(x, y) {
            var r = rotate(x, y);
            return this.stream.point(r[0], r[1]);
        }
    });
}
function scaleTranslate(k, dx, dy, sx, sy) {
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            dx + k * x,
            dy - k * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            (x - dx) / k * sx,
            (dy - y) / k * sy
        ];
    };
    return transform;
}
function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = (0, _mathJs.cos)(alpha), sinAlpha = (0, _mathJs.sin)(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            a * x - b * y + dx,
            dy - b * x - a * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            sx * (ai * x - bi * y + ci),
            sy * (fi - bi * x - ai * y)
        ];
    };
    return transform;
}
function projection(project) {
    return projectionMutator(function() {
        return project;
    })();
}
exports.default = projection;
function projectionMutator(projectAt) {
    var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = (0, _antimeridianJsDefault.default), x0 = null, y0, x1, y1, postclip = (0, _identityJsDefault.default), delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
    function projection(point) {
        return projectRotateTransform(point[0] * (0, _mathJs.radians), point[1] * (0, _mathJs.radians));
    }
    function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [
            point[0] * (0, _mathJs.degrees),
            point[1] * (0, _mathJs.degrees)
        ];
    }
    projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };
    projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };
    projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? (0, _circleJsDefault.default)(theta = _ * (0, _mathJs.radians)) : (theta = null, _antimeridianJsDefault.default), reset()) : theta * (0, _mathJs.degrees);
    };
    projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identityJsDefault.default) : (0, _rectangleJsDefault.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
    };
    projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
            x,
            y
        ];
    };
    projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * (0, _mathJs.radians), phi = _[1] % 360 * (0, _mathJs.radians), recenter()) : [
            lambda * (0, _mathJs.degrees),
            phi * (0, _mathJs.degrees)
        ];
    };
    projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * (0, _mathJs.radians), deltaPhi = _[1] % 360 * (0, _mathJs.radians), deltaGamma = _.length > 2 ? _[2] % 360 * (0, _mathJs.radians) : 0, recenter()) : [
            deltaLambda * (0, _mathJs.degrees),
            deltaPhi * (0, _mathJs.degrees),
            deltaGamma * (0, _mathJs.degrees)
        ];
    };
    projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * (0, _mathJs.radians), recenter()) : alpha * (0, _mathJs.degrees);
    };
    projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };
    projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };
    projection.precision = function(_) {
        return arguments.length ? (projectResample = (0, _resampleJsDefault.default)(projectTransform, delta2 = _ * _), reset()) : (0, _mathJs.sqrt)(delta2);
    };
    projection.fitExtent = function(extent, object) {
        return (0, _fitJs.fitExtent)(projection, extent, object);
    };
    projection.fitSize = function(size, object) {
        return (0, _fitJs.fitSize)(projection, size, object);
    };
    projection.fitWidth = function(width, object) {
        return (0, _fitJs.fitWidth)(projection, width, object);
    };
    projection.fitHeight = function(height, object) {
        return (0, _fitJs.fitHeight)(projection, height, object);
    };
    function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = (0, _rotationJs.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = (0, _composeJsDefault.default)(project, transform);
        projectRotateTransform = (0, _composeJsDefault.default)(rotate, projectTransform);
        projectResample = (0, _resampleJsDefault.default)(projectTransform, delta2);
        return reset();
    }
    function reset() {
        cache = cacheStream = null;
        return projection;
    }
    return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
    };
}

},{"../clip/antimeridian.js":"kvVxQ","../clip/circle.js":"2PJ3I","../clip/rectangle.js":"9kmAt","../compose.js":"hmaf3","../identity.js":"kub29","../math.js":"74X19","../rotation.js":"8C7qH","../transform.js":"9MXXE","./fit.js":"49j0j","./resample.js":"gWNAn","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9MXXE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transformer", ()=>transformer);
exports.default = function(methods) {
    return {
        stream: transformer(methods)
    };
};
function transformer(methods) {
    return function(stream) {
        var s = new TransformStream;
        for(var key in methods)s[key] = methods[key];
        s.stream = stream;
        return s;
    };
}
function TransformStream() {}
TransformStream.prototype = {
    constructor: TransformStream,
    point: function(x, y) {
        this.stream.point(x, y);
    },
    sphere: function() {
        this.stream.sphere();
    },
    lineStart: function() {
        this.stream.lineStart();
    },
    lineEnd: function() {
        this.stream.lineEnd();
    },
    polygonStart: function() {
        this.stream.polygonStart();
    },
    polygonEnd: function() {
        this.stream.polygonEnd();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"49j0j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fitExtent", ()=>fitExtent);
parcelHelpers.export(exports, "fitSize", ()=>fitSize);
parcelHelpers.export(exports, "fitWidth", ()=>fitWidth);
parcelHelpers.export(exports, "fitHeight", ()=>fitHeight);
var _streamJs = require("../stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _boundsJs = require("../path/bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([
        0,
        0
    ]);
    if (clip != null) projection.clipExtent(null);
    (0, _streamJsDefault.default)(object, projection.stream((0, _boundsJsDefault.default)));
    fitBounds((0, _boundsJsDefault.default).result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
}
function fitExtent(projection, extent, object) {
    return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function fitSize(projection, size, object) {
    return fitExtent(projection, [
        [
            0,
            0
        ],
        size
    ], object);
}
function fitWidth(projection, width, object) {
    return fit(projection, function(b) {
        var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function fitHeight(projection, height, object) {
    return fit(projection, function(b) {
        var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}

},{"../stream.js":"9nFXd","../path/bounds.js":"bhNL9","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gWNAn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cartesianJs = require("../cartesian.js");
var _mathJs = require("../math.js");
var _transformJs = require("../transform.js");
var maxDepth = 16, cosMinDistance = (0, _mathJs.cos)(30 * (0, _mathJs.radians)); // cos(minimum angular distance)
exports.default = function(project, delta2) {
    return +delta2 ? resample(project, delta2) : resampleNone(project);
};
function resampleNone(project) {
    return (0, _transformJs.transformer)({
        point: function(x, y) {
            x = project(x, y);
            this.stream.point(x[0], x[1]);
        }
    });
}
function resample(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
            var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = (0, _mathJs.sqrt)(a * a + b * b + c * c), phi2 = (0, _mathJs.asin)(c /= m), lambda2 = (0, _mathJs.abs)((0, _mathJs.abs)(c) - 1) < (0, _mathJs.epsilon) || (0, _mathJs.abs)(lambda0 - lambda1) < (0, _mathJs.epsilon) ? (lambda0 + lambda1) / 2 : (0, _mathJs.atan2)(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > delta2 // perpendicular projected distance
             || (0, _mathJs.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
             || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                stream.point(x2, y2);
                resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
            }
        }
    }
    return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0; // previous point
        var resampleStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.polygonStart();
                resampleStream.lineStart = ringStart;
            },
            polygonEnd: function() {
                stream.polygonEnd();
                resampleStream.lineStart = lineStart;
            }
        };
        function point(x, y) {
            x = project(x, y);
            stream.point(x[0], x[1]);
        }
        function lineStart() {
            x0 = NaN;
            resampleStream.point = linePoint;
            stream.lineStart();
        }
        function linePoint(lambda, phi) {
            var c = (0, _cartesianJs.cartesian)([
                lambda,
                phi
            ]), p = project(lambda, phi);
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
            stream.point(x0, y0);
        }
        function lineEnd() {
            resampleStream.point = point;
            stream.lineEnd();
        }
        function ringStart() {
            lineStart();
            resampleStream.point = ringPoint;
            resampleStream.lineEnd = ringEnd;
        }
        function ringPoint(lambda, phi) {
            linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resampleStream.point = linePoint;
        }
        function ringEnd() {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
            resampleStream.lineEnd = lineEnd;
            lineEnd();
        }
        return resampleStream;
    };
}

},{"../cartesian.js":"i2DwM","../math.js":"74X19","../transform.js":"9MXXE","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"j13Gc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cylindricalEqualAreaRaw", ()=>cylindricalEqualAreaRaw);
var _mathJs = require("../math.js");
function cylindricalEqualAreaRaw(phi0) {
    var cosPhi0 = (0, _mathJs.cos)(phi0);
    function forward(lambda, phi) {
        return [
            lambda * cosPhi0,
            (0, _mathJs.sin)(phi) / cosPhi0
        ];
    }
    forward.invert = function(x, y) {
        return [
            x / cosPhi0,
            (0, _mathJs.asin)(y * cosPhi0)
        ];
    };
    return forward;
}

},{"../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4lZJF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var _albersJs = require("./albers.js");
var _albersJsDefault = parcelHelpers.interopDefault(_albersJs);
var _conicEqualAreaJs = require("./conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
var _fitJs = require("./fit.js");
// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
    var n = streams.length;
    return {
        point: function(x, y) {
            var i = -1;
            while(++i < n)streams[i].point(x, y);
        },
        sphere: function() {
            var i = -1;
            while(++i < n)streams[i].sphere();
        },
        lineStart: function() {
            var i = -1;
            while(++i < n)streams[i].lineStart();
        },
        lineEnd: function() {
            var i = -1;
            while(++i < n)streams[i].lineEnd();
        },
        polygonStart: function() {
            var i = -1;
            while(++i < n)streams[i].polygonStart();
        },
        polygonEnd: function() {
            var i = -1;
            while(++i < n)streams[i].polygonEnd();
        }
    };
}
// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
exports.default = function() {
    var cache, cacheStream, lower48 = (0, _albersJsDefault.default)(), lower48Point, alaska = (0, _conicEqualAreaJsDefault.default)().rotate([
        154,
        0
    ]).center([
        -2,
        58.5
    ]).parallels([
        55,
        65
    ]), alaskaPoint, hawaii = (0, _conicEqualAreaJsDefault.default)().rotate([
        157,
        0
    ]).center([
        -3,
        19.9
    ]).parallels([
        8,
        18
    ]), hawaiiPoint, point, pointStream = {
        point: function(x, y) {
            point = [
                x,
                y
            ];
        }
    };
    function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
    }
    albersUsa.invert = function(coordinates) {
        var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
        return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([
            lower48.stream(cacheStream = stream),
            alaska.stream(stream),
            hawaii.stream(stream)
        ]);
    };
    albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
    };
    albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];
        lower48Point = lower48.translate(_).clipExtent([
            [
                x - 0.455 * k,
                y - 0.238 * k
            ],
            [
                x + 0.455 * k,
                y + 0.238 * k
            ]
        ]).stream(pointStream);
        alaskaPoint = alaska.translate([
            x - 0.307 * k,
            y + 0.201 * k
        ]).clipExtent([
            [
                x - 0.425 * k + (0, _mathJs.epsilon),
                y + 0.120 * k + (0, _mathJs.epsilon)
            ],
            [
                x - 0.214 * k - (0, _mathJs.epsilon),
                y + 0.234 * k - (0, _mathJs.epsilon)
            ]
        ]).stream(pointStream);
        hawaiiPoint = hawaii.translate([
            x - 0.205 * k,
            y + 0.212 * k
        ]).clipExtent([
            [
                x - 0.214 * k + (0, _mathJs.epsilon),
                y + 0.166 * k + (0, _mathJs.epsilon)
            ],
            [
                x - 0.115 * k - (0, _mathJs.epsilon),
                y + 0.234 * k - (0, _mathJs.epsilon)
            ]
        ]).stream(pointStream);
        return reset();
    };
    albersUsa.fitExtent = function(extent, object) {
        return (0, _fitJs.fitExtent)(albersUsa, extent, object);
    };
    albersUsa.fitSize = function(size, object) {
        return (0, _fitJs.fitSize)(albersUsa, size, object);
    };
    albersUsa.fitWidth = function(width, object) {
        return (0, _fitJs.fitWidth)(albersUsa, width, object);
    };
    albersUsa.fitHeight = function(height, object) {
        return (0, _fitJs.fitHeight)(albersUsa, height, object);
    };
    function reset() {
        cache = cacheStream = null;
        return albersUsa;
    }
    return albersUsa.scale(1070);
};

},{"../math.js":"74X19","./albers.js":"dSks5","./conicEqualArea.js":"17j9x","./fit.js":"49j0j","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jbLs0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalEqualAreaRaw", ()=>azimuthalEqualAreaRaw);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var azimuthalEqualAreaRaw = (0, _azimuthalJs.azimuthalRaw)(function(cxcy) {
    return (0, _mathJs.sqrt)(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = (0, _azimuthalJs.azimuthalInvert)(function(z) {
    return 2 * (0, _mathJs.asin)(z / 2);
});
exports.default = function() {
    return (0, _indexJsDefault.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(179.999);
};

},{"../math.js":"74X19","./azimuthal.js":"boRUu","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"boRUu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalRaw", ()=>azimuthalRaw);
parcelHelpers.export(exports, "azimuthalInvert", ()=>azimuthalInvert);
var _mathJs = require("../math.js");
function azimuthalRaw(scale) {
    return function(x, y) {
        var cx = (0, _mathJs.cos)(x), cy = (0, _mathJs.cos)(y), k = scale(cx * cy);
        if (k === Infinity) return [
            2,
            0
        ];
        return [
            k * cy * (0, _mathJs.sin)(x),
            k * (0, _mathJs.sin)(y)
        ];
    };
}
function azimuthalInvert(angle) {
    return function(x, y) {
        var z = (0, _mathJs.sqrt)(x * x + y * y), c = angle(z), sc = (0, _mathJs.sin)(c), cc = (0, _mathJs.cos)(c);
        return [
            (0, _mathJs.atan2)(x * sc, z * cc),
            (0, _mathJs.asin)(z && y * sc / z)
        ];
    };
}

},{"../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eAR2Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalEquidistantRaw", ()=>azimuthalEquidistantRaw);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var azimuthalEquidistantRaw = (0, _azimuthalJs.azimuthalRaw)(function(c) {
    return (c = (0, _mathJs.acos)(c)) && c / (0, _mathJs.sin)(c);
});
azimuthalEquidistantRaw.invert = (0, _azimuthalJs.azimuthalInvert)(function(z) {
    return z;
});
exports.default = function() {
    return (0, _indexJsDefault.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(179.999);
};

},{"../math.js":"74X19","./azimuthal.js":"boRUu","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dhBsj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicConformalRaw", ()=>conicConformalRaw);
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _mercatorJs = require("./mercator.js");
function tany(y) {
    return (0, _mathJs.tan)(((0, _mathJs.halfPi) + y) / 2);
}
function conicConformalRaw(y0, y1) {
    var cy0 = (0, _mathJs.cos)(y0), n = y0 === y1 ? (0, _mathJs.sin)(y0) : (0, _mathJs.log)(cy0 / (0, _mathJs.cos)(y1)) / (0, _mathJs.log)(tany(y1) / tany(y0)), f = cy0 * (0, _mathJs.pow)(tany(y0), n) / n;
    if (!n) return 0, _mercatorJs.mercatorRaw;
    function project(x, y) {
        if (f > 0) {
            if (y < -(0, _mathJs.halfPi) + (0, _mathJs.epsilon)) y = -(0, _mathJs.halfPi) + (0, _mathJs.epsilon);
        } else if (y > (0, _mathJs.halfPi) - (0, _mathJs.epsilon)) y = (0, _mathJs.halfPi) - (0, _mathJs.epsilon);
        var r = f / (0, _mathJs.pow)(tany(y), n);
        return [
            r * (0, _mathJs.sin)(n * x),
            f - r * (0, _mathJs.cos)(n * x)
        ];
    }
    project.invert = function(x, y) {
        var fy = f - y, r = (0, _mathJs.sign)(n) * (0, _mathJs.sqrt)(x * x + fy * fy), l = (0, _mathJs.atan2)(x, (0, _mathJs.abs)(fy)) * (0, _mathJs.sign)(fy);
        if (fy * n < 0) l -= (0, _mathJs.pi) * (0, _mathJs.sign)(x) * (0, _mathJs.sign)(fy);
        return [
            l / n,
            2 * (0, _mathJs.atan)((0, _mathJs.pow)(f / r, 1 / n)) - (0, _mathJs.halfPi)
        ];
    };
    return project;
}
exports.default = function() {
    return (0, _conicJs.conicProjection)(conicConformalRaw).scale(109.5).parallels([
        30,
        30
    ]);
};

},{"../math.js":"74X19","./conic.js":"15g8N","./mercator.js":"iIGjZ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iIGjZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mercatorRaw", ()=>mercatorRaw);
parcelHelpers.export(exports, "mercatorProjection", ()=>mercatorProjection);
var _mathJs = require("../math.js");
var _rotationJs = require("../rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function mercatorRaw(lambda, phi) {
    return [
        lambda,
        (0, _mathJs.log)((0, _mathJs.tan)(((0, _mathJs.halfPi) + phi) / 2))
    ];
}
mercatorRaw.invert = function(x, y) {
    return [
        x,
        2 * (0, _mathJs.atan)((0, _mathJs.exp)(y)) - (0, _mathJs.halfPi)
    ];
};
exports.default = function() {
    return mercatorProjection(mercatorRaw).scale(961 / (0, _mathJs.tau));
};
function mercatorProjection(project) {
    var m = (0, _indexJsDefault.default)(project), center = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x0 = null, y0, x1, y1; // clip extent
    m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
    };
    m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
    };
    m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
    };
    m.clipExtent = function(_) {
        return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    function reclip() {
        var k = (0, _mathJs.pi) * scale(), t = m((0, _rotationJsDefault.default)(m.rotate()).invert([
            0,
            0
        ]));
        return clipExtent(x0 == null ? [
            [
                t[0] - k,
                t[1] - k
            ],
            [
                t[0] + k,
                t[1] + k
            ]
        ] : project === mercatorRaw ? [
            [
                Math.max(t[0] - k, x0),
                y0
            ],
            [
                Math.min(t[0] + k, x1),
                y1
            ]
        ] : [
            [
                x0,
                Math.max(t[1] - k, y0)
            ],
            [
                x1,
                Math.min(t[1] + k, y1)
            ]
        ]);
    }
    return reclip();
}

},{"../math.js":"74X19","../rotation.js":"8C7qH","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6B358":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicEquidistantRaw", ()=>conicEquidistantRaw);
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _equirectangularJs = require("./equirectangular.js");
function conicEquidistantRaw(y0, y1) {
    var cy0 = (0, _mathJs.cos)(y0), n = y0 === y1 ? (0, _mathJs.sin)(y0) : (cy0 - (0, _mathJs.cos)(y1)) / (y1 - y0), g = cy0 / n + y0;
    if ((0, _mathJs.abs)(n) < (0, _mathJs.epsilon)) return 0, _equirectangularJs.equirectangularRaw;
    function project(x, y) {
        var gy = g - y, nx = n * x;
        return [
            gy * (0, _mathJs.sin)(nx),
            g - gy * (0, _mathJs.cos)(nx)
        ];
    }
    project.invert = function(x, y) {
        var gy = g - y, l = (0, _mathJs.atan2)(x, (0, _mathJs.abs)(gy)) * (0, _mathJs.sign)(gy);
        if (gy * n < 0) l -= (0, _mathJs.pi) * (0, _mathJs.sign)(x) * (0, _mathJs.sign)(gy);
        return [
            l / n,
            g - (0, _mathJs.sign)(n) * (0, _mathJs.sqrt)(x * x + gy * gy)
        ];
    };
    return project;
}
exports.default = function() {
    return (0, _conicJs.conicProjection)(conicEquidistantRaw).scale(131.154).center([
        0,
        13.9389
    ]);
};

},{"../math.js":"74X19","./conic.js":"15g8N","./equirectangular.js":"4kEjS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4kEjS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equirectangularRaw", ()=>equirectangularRaw);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function equirectangularRaw(lambda, phi) {
    return [
        lambda,
        phi
    ];
}
equirectangularRaw.invert = equirectangularRaw;
exports.default = function() {
    return (0, _indexJsDefault.default)(equirectangularRaw).scale(152.63);
};

},{"./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bMVhy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalEarthRaw", ()=>equalEarthRaw);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
var A1 = 1.340264, A2 = -0.081106, A3 = 0.000893, A4 = 0.003796, M = (0, _mathJs.sqrt)(3) / 2, iterations = 12;
function equalEarthRaw(lambda, phi) {
    var l = (0, _mathJs.asin)(M * (0, _mathJs.sin)(phi)), l2 = l * l, l6 = l2 * l2 * l2;
    return [
        lambda * (0, _mathJs.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
        l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
    ];
}
equalEarthRaw.invert = function(x, y) {
    var l = y, l2 = l * l, l6 = l2 * l2 * l2;
    for(var i = 0, delta, fy, fpy; i < iterations; ++i){
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if ((0, _mathJs.abs)(delta) < (0, _mathJs.epsilon2)) break;
    }
    return [
        M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _mathJs.cos)(l),
        (0, _mathJs.asin)((0, _mathJs.sin)(l) / M)
    ];
};
exports.default = function() {
    return (0, _indexJsDefault.default)(equalEarthRaw).scale(177.158);
};

},{"./index.js":"cd9OX","../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6bdgO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gnomonicRaw", ()=>gnomonicRaw);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function gnomonicRaw(x, y) {
    var cy = (0, _mathJs.cos)(y), k = (0, _mathJs.cos)(x) * cy;
    return [
        cy * (0, _mathJs.sin)(x) / k,
        (0, _mathJs.sin)(y) / k
    ];
}
gnomonicRaw.invert = (0, _azimuthalJs.azimuthalInvert)((0, _mathJs.atan));
exports.default = function() {
    return (0, _indexJsDefault.default)(gnomonicRaw).scale(144.049).clipAngle(60);
};

},{"../math.js":"74X19","./azimuthal.js":"boRUu","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"huYSV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rectangleJs = require("../clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _transformJs = require("../transform.js");
var _fitJs = require("./fit.js");
var _mathJs = require("../math.js");
exports.default = function() {
    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x0 = null, y0, x1, y1, kx = 1, ky = 1, transform = (0, _transformJs.transformer)({
        point: function(x, y) {
            var p = projection([
                x,
                y
            ]);
            this.stream.point(p[0], p[1]);
        }
    }), postclip = (0, _identityJsDefault.default), cache, cacheStream;
    function reset() {
        kx = k * sx;
        ky = k * sy;
        cache = cacheStream = null;
        return projection;
    }
    function projection(p) {
        var x = p[0] * kx, y = p[1] * ky;
        if (alpha) {
            var t = y * ca - x * sa;
            x = x * ca + y * sa;
            y = t;
        }
        return [
            x + tx,
            y + ty
        ];
    }
    projection.invert = function(p) {
        var x = p[0] - tx, y = p[1] - ty;
        if (alpha) {
            var t = y * ca + x * sa;
            x = x * ca - y * sa;
            y = t;
        }
        return [
            x / kx,
            y / ky
        ];
    };
    projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    };
    projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identityJsDefault.default) : (0, _rectangleJsDefault.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function(_) {
        return arguments.length ? (k = +_, reset()) : k;
    };
    projection.translate = function(_) {
        return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [
            tx,
            ty
        ];
    };
    projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * (0, _mathJs.radians), sa = (0, _mathJs.sin)(alpha), ca = (0, _mathJs.cos)(alpha), reset()) : alpha * (0, _mathJs.degrees);
    };
    projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
    };
    projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
    };
    projection.fitExtent = function(extent, object) {
        return (0, _fitJs.fitExtent)(projection, extent, object);
    };
    projection.fitSize = function(size, object) {
        return (0, _fitJs.fitSize)(projection, size, object);
    };
    projection.fitWidth = function(width, object) {
        return (0, _fitJs.fitWidth)(projection, width, object);
    };
    projection.fitHeight = function(height, object) {
        return (0, _fitJs.fitHeight)(projection, height, object);
    };
    return projection;
};

},{"../clip/rectangle.js":"9kmAt","../identity.js":"kub29","../transform.js":"9MXXE","./fit.js":"49j0j","../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4AzsZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "naturalEarth1Raw", ()=>naturalEarth1Raw);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
function naturalEarth1Raw(lambda, phi) {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
    ];
}
naturalEarth1Raw.invert = function(x, y) {
    var phi = y, i = 25, delta;
    do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.045255 + phi4 * (-0.311325 + 0.259866 * phi2 - 0.005916 * 11 * phi4)));
    }while ((0, _mathJs.abs)(delta) > (0, _mathJs.epsilon) && --i > 0);
    return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
    ];
};
exports.default = function() {
    return (0, _indexJsDefault.default)(naturalEarth1Raw).scale(175.295);
};

},{"./index.js":"cd9OX","../math.js":"74X19","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kjinQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orthographicRaw", ()=>orthographicRaw);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function orthographicRaw(x, y) {
    return [
        (0, _mathJs.cos)(y) * (0, _mathJs.sin)(x),
        (0, _mathJs.sin)(y)
    ];
}
orthographicRaw.invert = (0, _azimuthalJs.azimuthalInvert)((0, _mathJs.asin));
exports.default = function() {
    return (0, _indexJsDefault.default)(orthographicRaw).scale(249.5).clipAngle(90 + (0, _mathJs.epsilon));
};

},{"../math.js":"74X19","./azimuthal.js":"boRUu","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6ko7r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stereographicRaw", ()=>stereographicRaw);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function stereographicRaw(x, y) {
    var cy = (0, _mathJs.cos)(y), k = 1 + (0, _mathJs.cos)(x) * cy;
    return [
        cy * (0, _mathJs.sin)(x) / k,
        (0, _mathJs.sin)(y) / k
    ];
}
stereographicRaw.invert = (0, _azimuthalJs.azimuthalInvert)(function(z) {
    return 2 * (0, _mathJs.atan)(z);
});
exports.default = function() {
    return (0, _indexJsDefault.default)(stereographicRaw).scale(250).clipAngle(142);
};

},{"../math.js":"74X19","./azimuthal.js":"boRUu","./index.js":"cd9OX","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i6NVd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transverseMercatorRaw", ()=>transverseMercatorRaw);
var _mathJs = require("../math.js");
var _mercatorJs = require("./mercator.js");
function transverseMercatorRaw(lambda, phi) {
    return [
        (0, _mathJs.log)((0, _mathJs.tan)(((0, _mathJs.halfPi) + phi) / 2)),
        -lambda
    ];
}
transverseMercatorRaw.invert = function(x, y) {
    return [
        -y,
        2 * (0, _mathJs.atan)((0, _mathJs.exp)(x)) - (0, _mathJs.halfPi)
    ];
};
exports.default = function() {
    var m = (0, _mercatorJs.mercatorProjection)(transverseMercatorRaw), center = m.center, rotate = m.rotate;
    m.center = function(_) {
        return arguments.length ? center([
            -_[1],
            _[0]
        ]) : (_ = center(), [
            _[1],
            -_[0]
        ]);
    };
    m.rotate = function(_) {
        return arguments.length ? rotate([
            _[0],
            _[1],
            _.length > 2 ? _[2] + 90 : 90
        ]) : (_ = rotate(), [
            _[0],
            _[1],
            _[2] - 90
        ]);
    };
    return rotate([
        0,
        0,
        90
    ]).scale(159.155);
};

},{"../math.js":"74X19","./mercator.js":"iIGjZ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ixW8K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "geoAiry", ()=>(0, _airyDefault.default));
parcelHelpers.export(exports, "geoAiryRaw", ()=>(0, _airy.airyRaw));
parcelHelpers.export(exports, "geoAitoff", ()=>(0, _aitoffDefault.default));
parcelHelpers.export(exports, "geoAitoffRaw", ()=>(0, _aitoff.aitoffRaw));
parcelHelpers.export(exports, "geoArmadillo", ()=>(0, _armadilloDefault.default));
parcelHelpers.export(exports, "geoArmadilloRaw", ()=>(0, _armadillo.armadilloRaw));
parcelHelpers.export(exports, "geoAugust", ()=>(0, _augustDefault.default));
parcelHelpers.export(exports, "geoAugustRaw", ()=>(0, _august.augustRaw));
parcelHelpers.export(exports, "geoBaker", ()=>(0, _bakerDefault.default));
parcelHelpers.export(exports, "geoBakerRaw", ()=>(0, _baker.bakerRaw));
parcelHelpers.export(exports, "geoBerghaus", ()=>(0, _berghausDefault.default));
parcelHelpers.export(exports, "geoBerghausRaw", ()=>(0, _berghaus.berghausRaw));
parcelHelpers.export(exports, "geoBertin1953", ()=>(0, _bertinDefault.default));
parcelHelpers.export(exports, "geoBertin1953Raw", ()=>(0, _bertin.bertin1953Raw));
parcelHelpers.export(exports, "geoBoggs", ()=>(0, _boggsDefault.default));
parcelHelpers.export(exports, "geoBoggsRaw", ()=>(0, _boggs.boggsRaw));
parcelHelpers.export(exports, "geoBonne", ()=>(0, _bonneDefault.default));
parcelHelpers.export(exports, "geoBonneRaw", ()=>(0, _bonne.bonneRaw));
parcelHelpers.export(exports, "geoBottomley", ()=>(0, _bottomleyDefault.default));
parcelHelpers.export(exports, "geoBottomleyRaw", ()=>(0, _bottomley.bottomleyRaw));
parcelHelpers.export(exports, "geoBromley", ()=>(0, _bromleyDefault.default));
parcelHelpers.export(exports, "geoBromleyRaw", ()=>(0, _bromley.bromleyRaw));
parcelHelpers.export(exports, "geoChamberlin", ()=>(0, _chamberlinDefault.default));
parcelHelpers.export(exports, "geoChamberlinRaw", ()=>(0, _chamberlin.chamberlinRaw));
parcelHelpers.export(exports, "geoChamberlinAfrica", ()=>(0, _chamberlin.chamberlinAfrica));
parcelHelpers.export(exports, "geoCollignon", ()=>(0, _collignonDefault.default));
parcelHelpers.export(exports, "geoCollignonRaw", ()=>(0, _collignon.collignonRaw));
parcelHelpers.export(exports, "geoCraig", ()=>(0, _craigDefault.default));
parcelHelpers.export(exports, "geoCraigRaw", ()=>(0, _craig.craigRaw));
parcelHelpers.export(exports, "geoCraster", ()=>(0, _crasterDefault.default));
parcelHelpers.export(exports, "geoCrasterRaw", ()=>(0, _craster.crasterRaw));
parcelHelpers.export(exports, "geoCylindricalEqualArea", ()=>(0, _cylindricalEqualAreaDefault.default));
parcelHelpers.export(exports, "geoCylindricalEqualAreaRaw", ()=>(0, _cylindricalEqualArea.cylindricalEqualAreaRaw));
parcelHelpers.export(exports, "geoCylindricalStereographic", ()=>(0, _cylindricalStereographicDefault.default));
parcelHelpers.export(exports, "geoCylindricalStereographicRaw", ()=>(0, _cylindricalStereographic.cylindricalStereographicRaw));
parcelHelpers.export(exports, "geoEckert1", ()=>(0, _eckert1JsDefault.default));
parcelHelpers.export(exports, "geoEckert1Raw", ()=>(0, _eckert1Js.eckert1Raw));
parcelHelpers.export(exports, "geoEckert2", ()=>(0, _eckert2JsDefault.default));
parcelHelpers.export(exports, "geoEckert2Raw", ()=>(0, _eckert2Js.eckert2Raw));
parcelHelpers.export(exports, "geoEckert3", ()=>(0, _eckert3JsDefault.default));
parcelHelpers.export(exports, "geoEckert3Raw", ()=>(0, _eckert3Js.eckert3Raw));
parcelHelpers.export(exports, "geoEckert4", ()=>(0, _eckert4JsDefault.default));
parcelHelpers.export(exports, "geoEckert4Raw", ()=>(0, _eckert4Js.eckert4Raw));
parcelHelpers.export(exports, "geoEckert5", ()=>(0, _eckert5JsDefault.default));
parcelHelpers.export(exports, "geoEckert5Raw", ()=>(0, _eckert5Js.eckert5Raw));
parcelHelpers.export(exports, "geoEckert6", ()=>(0, _eckert6JsDefault.default));
parcelHelpers.export(exports, "geoEckert6Raw", ()=>(0, _eckert6Js.eckert6Raw));
parcelHelpers.export(exports, "geoEisenlohr", ()=>(0, _eisenlohrJsDefault.default));
parcelHelpers.export(exports, "geoEisenlohrRaw", ()=>(0, _eisenlohrJs.eisenlohrRaw));
parcelHelpers.export(exports, "geoFahey", ()=>(0, _faheyJsDefault.default));
parcelHelpers.export(exports, "geoFaheyRaw", ()=>(0, _faheyJs.faheyRaw));
parcelHelpers.export(exports, "geoFoucaut", ()=>(0, _foucautJsDefault.default));
parcelHelpers.export(exports, "geoFoucautRaw", ()=>(0, _foucautJs.foucautRaw));
parcelHelpers.export(exports, "geoFoucautSinusoidal", ()=>(0, _foucautSinusoidalJsDefault.default));
parcelHelpers.export(exports, "geoFoucautSinusoidalRaw", ()=>(0, _foucautSinusoidalJs.foucautSinusoidalRaw));
parcelHelpers.export(exports, "geoGilbert", ()=>(0, _gilbertJsDefault.default));
parcelHelpers.export(exports, "geoGingery", ()=>(0, _gingeryJsDefault.default));
parcelHelpers.export(exports, "geoGingeryRaw", ()=>(0, _gingeryJs.gingeryRaw));
parcelHelpers.export(exports, "geoGinzburg4", ()=>(0, _ginzburg4JsDefault.default));
parcelHelpers.export(exports, "geoGinzburg4Raw", ()=>(0, _ginzburg4Js.ginzburg4Raw));
parcelHelpers.export(exports, "geoGinzburg5", ()=>(0, _ginzburg5JsDefault.default));
parcelHelpers.export(exports, "geoGinzburg5Raw", ()=>(0, _ginzburg5Js.ginzburg5Raw));
parcelHelpers.export(exports, "geoGinzburg6", ()=>(0, _ginzburg6JsDefault.default));
parcelHelpers.export(exports, "geoGinzburg6Raw", ()=>(0, _ginzburg6Js.ginzburg6Raw));
parcelHelpers.export(exports, "geoGinzburg8", ()=>(0, _ginzburg8JsDefault.default));
parcelHelpers.export(exports, "geoGinzburg8Raw", ()=>(0, _ginzburg8Js.ginzburg8Raw));
parcelHelpers.export(exports, "geoGinzburg9", ()=>(0, _ginzburg9JsDefault.default));
parcelHelpers.export(exports, "geoGinzburg9Raw", ()=>(0, _ginzburg9Js.ginzburg9Raw));
parcelHelpers.export(exports, "geoGringorten", ()=>(0, _gringortenJsDefault.default));
parcelHelpers.export(exports, "geoGringortenRaw", ()=>(0, _gringortenJs.gringortenRaw));
parcelHelpers.export(exports, "geoGuyou", ()=>(0, _guyouJsDefault.default));
parcelHelpers.export(exports, "geoGuyouRaw", ()=>(0, _guyouJs.guyouRaw));
parcelHelpers.export(exports, "geoHammer", ()=>(0, _hammerJsDefault.default));
parcelHelpers.export(exports, "geoHammerRaw", ()=>(0, _hammerJs.hammerRaw));
parcelHelpers.export(exports, "geoHammerRetroazimuthal", ()=>(0, _hammerRetroazimuthalJsDefault.default));
parcelHelpers.export(exports, "geoHammerRetroazimuthalRaw", ()=>(0, _hammerRetroazimuthalJs.hammerRetroazimuthalRaw));
parcelHelpers.export(exports, "geoHealpix", ()=>(0, _healpixJsDefault.default));
parcelHelpers.export(exports, "geoHealpixRaw", ()=>(0, _healpixJs.healpixRaw));
parcelHelpers.export(exports, "geoHill", ()=>(0, _hillJsDefault.default));
parcelHelpers.export(exports, "geoHillRaw", ()=>(0, _hillJs.hillRaw));
parcelHelpers.export(exports, "geoHomolosine", ()=>(0, _homolosineJsDefault.default));
parcelHelpers.export(exports, "geoHomolosineRaw", ()=>(0, _homolosineJs.homolosineRaw));
parcelHelpers.export(exports, "geoHufnagel", ()=>(0, _hufnagelJsDefault.default));
parcelHelpers.export(exports, "geoHufnagelRaw", ()=>(0, _hufnagelJs.hufnagelRaw));
parcelHelpers.export(exports, "geoHyperelliptical", ()=>(0, _hyperellipticalDefault.default));
parcelHelpers.export(exports, "geoHyperellipticalRaw", ()=>(0, _hyperelliptical.hyperellipticalRaw));
parcelHelpers.export(exports, "geoInterrupt", ()=>(0, _indexDefault.default));
parcelHelpers.export(exports, "geoInterruptedBoggs", ()=>(0, _boggsDefault1.default));
parcelHelpers.export(exports, "geoInterruptedHomolosine", ()=>(0, _homolosineDefault.default));
parcelHelpers.export(exports, "geoInterruptedMollweide", ()=>(0, _mollweideDefault.default));
parcelHelpers.export(exports, "geoInterruptedMollweideHemispheres", ()=>(0, _mollweideHemispheresDefault.default));
parcelHelpers.export(exports, "geoInterruptedSinuMollweide", ()=>(0, _sinuMollweideDefault.default));
parcelHelpers.export(exports, "geoInterruptedSinusoidal", ()=>(0, _sinusoidalDefault.default));
parcelHelpers.export(exports, "geoKavrayskiy7", ()=>(0, _kavrayskiy7JsDefault.default));
parcelHelpers.export(exports, "geoKavrayskiy7Raw", ()=>(0, _kavrayskiy7Js.kavrayskiy7Raw));
parcelHelpers.export(exports, "geoLagrange", ()=>(0, _lagrangeJsDefault.default));
parcelHelpers.export(exports, "geoLagrangeRaw", ()=>(0, _lagrangeJs.lagrangeRaw));
parcelHelpers.export(exports, "geoLarrivee", ()=>(0, _larriveeDefault.default));
parcelHelpers.export(exports, "geoLarriveeRaw", ()=>(0, _larrivee.larriveeRaw));
parcelHelpers.export(exports, "geoLaskowski", ()=>(0, _laskowskiDefault.default));
parcelHelpers.export(exports, "geoLaskowskiRaw", ()=>(0, _laskowski.laskowskiRaw));
parcelHelpers.export(exports, "geoLittrow", ()=>(0, _littrowJsDefault.default));
parcelHelpers.export(exports, "geoLittrowRaw", ()=>(0, _littrowJs.littrowRaw));
parcelHelpers.export(exports, "geoLoximuthal", ()=>(0, _loximuthalJsDefault.default));
parcelHelpers.export(exports, "geoLoximuthalRaw", ()=>(0, _loximuthalJs.loximuthalRaw));
parcelHelpers.export(exports, "geoMiller", ()=>(0, _millerDefault.default));
parcelHelpers.export(exports, "geoMillerRaw", ()=>(0, _miller.millerRaw));
parcelHelpers.export(exports, "geoModifiedStereographic", ()=>(0, _modifiedStereographicDefault.default));
parcelHelpers.export(exports, "geoModifiedStereographicRaw", ()=>(0, _modifiedStereographic.modifiedStereographicRaw));
parcelHelpers.export(exports, "geoModifiedStereographicAlaska", ()=>(0, _modifiedStereographic.modifiedStereographicAlaska));
parcelHelpers.export(exports, "geoModifiedStereographicGs48", ()=>(0, _modifiedStereographic.modifiedStereographicGs48));
parcelHelpers.export(exports, "geoModifiedStereographicGs50", ()=>(0, _modifiedStereographic.modifiedStereographicGs50));
parcelHelpers.export(exports, "geoModifiedStereographicMiller", ()=>(0, _modifiedStereographic.modifiedStereographicMiller));
parcelHelpers.export(exports, "geoModifiedStereographicLee", ()=>(0, _modifiedStereographic.modifiedStereographicLee));
parcelHelpers.export(exports, "geoMollweide", ()=>(0, _mollweideDefault1.default));
parcelHelpers.export(exports, "geoMollweideRaw", ()=>(0, _mollweide1.mollweideRaw));
parcelHelpers.export(exports, "geoMtFlatPolarParabolic", ()=>(0, _mtFlatPolarParabolicDefault.default));
parcelHelpers.export(exports, "geoMtFlatPolarParabolicRaw", ()=>(0, _mtFlatPolarParabolic.mtFlatPolarParabolicRaw));
parcelHelpers.export(exports, "geoMtFlatPolarQuartic", ()=>(0, _mtFlatPolarQuarticDefault.default));
parcelHelpers.export(exports, "geoMtFlatPolarQuarticRaw", ()=>(0, _mtFlatPolarQuartic.mtFlatPolarQuarticRaw));
parcelHelpers.export(exports, "geoMtFlatPolarSinusoidal", ()=>(0, _mtFlatPolarSinusoidalDefault.default));
parcelHelpers.export(exports, "geoMtFlatPolarSinusoidalRaw", ()=>(0, _mtFlatPolarSinusoidal.mtFlatPolarSinusoidalRaw));
parcelHelpers.export(exports, "geoNaturalEarth2", ()=>(0, _naturalEarth2Default.default));
parcelHelpers.export(exports, "geoNaturalEarth2Raw", ()=>(0, _naturalEarth2.naturalEarth2Raw));
parcelHelpers.export(exports, "geoNellHammer", ()=>(0, _nellHammerDefault.default));
parcelHelpers.export(exports, "geoNellHammerRaw", ()=>(0, _nellHammer.nellHammerRaw));
parcelHelpers.export(exports, "geoInterruptedQuarticAuthalic", ()=>(0, _quarticAuthalicDefault.default));
parcelHelpers.export(exports, "geoNicolosi", ()=>(0, _nicolosiDefault.default));
parcelHelpers.export(exports, "geoNicolosiRaw", ()=>(0, _nicolosi.nicolosiRaw));
parcelHelpers.export(exports, "geoPatterson", ()=>(0, _pattersonDefault.default));
parcelHelpers.export(exports, "geoPattersonRaw", ()=>(0, _patterson.pattersonRaw));
parcelHelpers.export(exports, "geoPolyconic", ()=>(0, _polyconicDefault.default));
parcelHelpers.export(exports, "geoPolyconicRaw", ()=>(0, _polyconic.polyconicRaw));
parcelHelpers.export(exports, "geoPolyhedral", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "geoPolyhedralButterfly", ()=>(0, _butterflyJsDefault.default));
parcelHelpers.export(exports, "geoPolyhedralCollignon", ()=>(0, _collignonJsDefault.default));
parcelHelpers.export(exports, "geoPolyhedralWaterman", ()=>(0, _watermanJsDefault.default));
parcelHelpers.export(exports, "geoProject", ()=>(0, _indexDefault1.default));
parcelHelpers.export(exports, "geoGringortenQuincuncial", ()=>(0, _gringortenJsDefault1.default));
parcelHelpers.export(exports, "geoPeirceQuincuncial", ()=>(0, _peirceJsDefault.default));
parcelHelpers.export(exports, "geoQuantize", ()=>(0, _quantizeDefault.default));
parcelHelpers.export(exports, "geoQuincuncial", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "geoRectangularPolyconic", ()=>(0, _rectangularPolyconicDefault.default));
parcelHelpers.export(exports, "geoRectangularPolyconicRaw", ()=>(0, _rectangularPolyconic.rectangularPolyconicRaw));
parcelHelpers.export(exports, "geoRobinson", ()=>(0, _robinsonDefault.default));
parcelHelpers.export(exports, "geoRobinsonRaw", ()=>(0, _robinson.robinsonRaw));
parcelHelpers.export(exports, "geoSatellite", ()=>(0, _satelliteDefault.default));
parcelHelpers.export(exports, "geoSatelliteRaw", ()=>(0, _satellite.satelliteRaw));
parcelHelpers.export(exports, "geoSinuMollweide", ()=>(0, _sinuMollweideDefault1.default));
parcelHelpers.export(exports, "geoSinuMollweideRaw", ()=>(0, _sinuMollweide1.sinuMollweideRaw));
parcelHelpers.export(exports, "geoSinusoidal", ()=>(0, _sinusoidalDefault1.default));
parcelHelpers.export(exports, "geoSinusoidalRaw", ()=>(0, _sinusoidal1.sinusoidalRaw));
parcelHelpers.export(exports, "geoStitch", ()=>(0, _stitchDefault.default));
parcelHelpers.export(exports, "geoTimes", ()=>(0, _timesDefault.default));
parcelHelpers.export(exports, "geoTimesRaw", ()=>(0, _times.timesRaw));
parcelHelpers.export(exports, "geoTwoPointAzimuthal", ()=>(0, _twoPointAzimuthalDefault.default));
parcelHelpers.export(exports, "geoTwoPointAzimuthalRaw", ()=>(0, _twoPointAzimuthal.twoPointAzimuthalRaw));
parcelHelpers.export(exports, "geoTwoPointAzimuthalUsa", ()=>(0, _twoPointAzimuthal.twoPointAzimuthalUsa));
parcelHelpers.export(exports, "geoTwoPointEquidistant", ()=>(0, _twoPointEquidistantDefault.default));
parcelHelpers.export(exports, "geoTwoPointEquidistantRaw", ()=>(0, _twoPointEquidistant.twoPointEquidistantRaw));
parcelHelpers.export(exports, "geoTwoPointEquidistantUsa", ()=>(0, _twoPointEquidistant.twoPointEquidistantUsa));
parcelHelpers.export(exports, "geoVanDerGrinten", ()=>(0, _vanDerGrintenDefault.default));
parcelHelpers.export(exports, "geoVanDerGrintenRaw", ()=>(0, _vanDerGrinten.vanDerGrintenRaw));
parcelHelpers.export(exports, "geoVanDerGrinten2", ()=>(0, _vanDerGrinten2Default.default));
parcelHelpers.export(exports, "geoVanDerGrinten2Raw", ()=>(0, _vanDerGrinten2.vanDerGrinten2Raw));
parcelHelpers.export(exports, "geoVanDerGrinten3", ()=>(0, _vanDerGrinten3Default.default));
parcelHelpers.export(exports, "geoVanDerGrinten3Raw", ()=>(0, _vanDerGrinten3.vanDerGrinten3Raw));
parcelHelpers.export(exports, "geoVanDerGrinten4", ()=>(0, _vanDerGrinten4Default.default));
parcelHelpers.export(exports, "geoVanDerGrinten4Raw", ()=>(0, _vanDerGrinten4.vanDerGrinten4Raw));
parcelHelpers.export(exports, "geoWagner", ()=>(0, _wagnerJsDefault.default));
parcelHelpers.export(exports, "geoWagner7", ()=>(0, _wagnerJs.wagner7));
parcelHelpers.export(exports, "geoWagnerRaw", ()=>(0, _wagnerJs.wagnerRaw));
parcelHelpers.export(exports, "geoWagner4", ()=>(0, _wagner4JsDefault.default));
parcelHelpers.export(exports, "geoWagner4Raw", ()=>(0, _wagner4Js.wagner4Raw));
parcelHelpers.export(exports, "geoWagner6", ()=>(0, _wagner6JsDefault.default));
parcelHelpers.export(exports, "geoWagner6Raw", ()=>(0, _wagner6Js.wagner6Raw));
parcelHelpers.export(exports, "geoWiechel", ()=>(0, _wiechelJsDefault.default));
parcelHelpers.export(exports, "geoWiechelRaw", ()=>(0, _wiechelJs.wiechelRaw));
parcelHelpers.export(exports, "geoWinkel3", ()=>(0, _winkel3Default.default));
parcelHelpers.export(exports, "geoWinkel3Raw", ()=>(0, _winkel3.winkel3Raw));
var _airy = require("./airy");
var _airyDefault = parcelHelpers.interopDefault(_airy);
var _aitoff = require("./aitoff");
var _aitoffDefault = parcelHelpers.interopDefault(_aitoff);
var _armadillo = require("./armadillo");
var _armadilloDefault = parcelHelpers.interopDefault(_armadillo);
var _august = require("./august");
var _augustDefault = parcelHelpers.interopDefault(_august);
var _baker = require("./baker");
var _bakerDefault = parcelHelpers.interopDefault(_baker);
var _berghaus = require("./berghaus");
var _berghausDefault = parcelHelpers.interopDefault(_berghaus);
var _bertin = require("./bertin");
var _bertinDefault = parcelHelpers.interopDefault(_bertin);
var _boggs = require("./boggs");
var _boggsDefault = parcelHelpers.interopDefault(_boggs);
var _bonne = require("./bonne");
var _bonneDefault = parcelHelpers.interopDefault(_bonne);
var _bottomley = require("./bottomley");
var _bottomleyDefault = parcelHelpers.interopDefault(_bottomley);
var _bromley = require("./bromley");
var _bromleyDefault = parcelHelpers.interopDefault(_bromley);
var _chamberlin = require("./chamberlin");
var _chamberlinDefault = parcelHelpers.interopDefault(_chamberlin);
var _collignon = require("./collignon");
var _collignonDefault = parcelHelpers.interopDefault(_collignon);
var _craig = require("./craig");
var _craigDefault = parcelHelpers.interopDefault(_craig);
var _craster = require("./craster");
var _crasterDefault = parcelHelpers.interopDefault(_craster);
var _cylindricalEqualArea = require("./cylindricalEqualArea");
var _cylindricalEqualAreaDefault = parcelHelpers.interopDefault(_cylindricalEqualArea);
var _cylindricalStereographic = require("./cylindricalStereographic");
var _cylindricalStereographicDefault = parcelHelpers.interopDefault(_cylindricalStereographic);
var _eckert1Js = require("./eckert1.js");
var _eckert1JsDefault = parcelHelpers.interopDefault(_eckert1Js);
var _eckert2Js = require("./eckert2.js");
var _eckert2JsDefault = parcelHelpers.interopDefault(_eckert2Js);
var _eckert3Js = require("./eckert3.js");
var _eckert3JsDefault = parcelHelpers.interopDefault(_eckert3Js);
var _eckert4Js = require("./eckert4.js");
var _eckert4JsDefault = parcelHelpers.interopDefault(_eckert4Js);
var _eckert5Js = require("./eckert5.js");
var _eckert5JsDefault = parcelHelpers.interopDefault(_eckert5Js);
var _eckert6Js = require("./eckert6.js");
var _eckert6JsDefault = parcelHelpers.interopDefault(_eckert6Js);
var _eisenlohrJs = require("./eisenlohr.js");
var _eisenlohrJsDefault = parcelHelpers.interopDefault(_eisenlohrJs);
var _faheyJs = require("./fahey.js");
var _faheyJsDefault = parcelHelpers.interopDefault(_faheyJs);
var _foucautJs = require("./foucaut.js");
var _foucautJsDefault = parcelHelpers.interopDefault(_foucautJs);
var _foucautSinusoidalJs = require("./foucautSinusoidal.js");
var _foucautSinusoidalJsDefault = parcelHelpers.interopDefault(_foucautSinusoidalJs);
var _gilbertJs = require("./gilbert.js");
var _gilbertJsDefault = parcelHelpers.interopDefault(_gilbertJs);
var _gingeryJs = require("./gingery.js");
var _gingeryJsDefault = parcelHelpers.interopDefault(_gingeryJs);
var _ginzburg4Js = require("./ginzburg4.js");
var _ginzburg4JsDefault = parcelHelpers.interopDefault(_ginzburg4Js);
var _ginzburg5Js = require("./ginzburg5.js");
var _ginzburg5JsDefault = parcelHelpers.interopDefault(_ginzburg5Js);
var _ginzburg6Js = require("./ginzburg6.js");
var _ginzburg6JsDefault = parcelHelpers.interopDefault(_ginzburg6Js);
var _ginzburg8Js = require("./ginzburg8.js");
var _ginzburg8JsDefault = parcelHelpers.interopDefault(_ginzburg8Js);
var _ginzburg9Js = require("./ginzburg9.js");
var _ginzburg9JsDefault = parcelHelpers.interopDefault(_ginzburg9Js);
var _gringortenJs = require("./gringorten.js");
var _gringortenJsDefault = parcelHelpers.interopDefault(_gringortenJs);
var _guyouJs = require("./guyou.js");
var _guyouJsDefault = parcelHelpers.interopDefault(_guyouJs);
var _hammerJs = require("./hammer.js");
var _hammerJsDefault = parcelHelpers.interopDefault(_hammerJs);
var _hammerRetroazimuthalJs = require("./hammerRetroazimuthal.js");
var _hammerRetroazimuthalJsDefault = parcelHelpers.interopDefault(_hammerRetroazimuthalJs);
var _healpixJs = require("./healpix.js");
var _healpixJsDefault = parcelHelpers.interopDefault(_healpixJs);
var _hillJs = require("./hill.js");
var _hillJsDefault = parcelHelpers.interopDefault(_hillJs);
var _homolosineJs = require("./homolosine.js");
var _homolosineJsDefault = parcelHelpers.interopDefault(_homolosineJs);
var _hufnagelJs = require("./hufnagel.js");
var _hufnagelJsDefault = parcelHelpers.interopDefault(_hufnagelJs);
var _hyperelliptical = require("./hyperelliptical");
var _hyperellipticalDefault = parcelHelpers.interopDefault(_hyperelliptical);
var _index = require("./interrupted/index");
var _indexDefault = parcelHelpers.interopDefault(_index);
var _boggs1 = require("./interrupted/boggs");
var _boggsDefault1 = parcelHelpers.interopDefault(_boggs1);
var _homolosine = require("./interrupted/homolosine");
var _homolosineDefault = parcelHelpers.interopDefault(_homolosine);
var _mollweide = require("./interrupted/mollweide");
var _mollweideDefault = parcelHelpers.interopDefault(_mollweide);
var _mollweideHemispheres = require("./interrupted/mollweideHemispheres");
var _mollweideHemispheresDefault = parcelHelpers.interopDefault(_mollweideHemispheres);
var _sinuMollweide = require("./interrupted/sinuMollweide");
var _sinuMollweideDefault = parcelHelpers.interopDefault(_sinuMollweide);
var _sinusoidal = require("./interrupted/sinusoidal");
var _sinusoidalDefault = parcelHelpers.interopDefault(_sinusoidal);
var _kavrayskiy7Js = require("./kavrayskiy7.js");
var _kavrayskiy7JsDefault = parcelHelpers.interopDefault(_kavrayskiy7Js);
var _lagrangeJs = require("./lagrange.js");
var _lagrangeJsDefault = parcelHelpers.interopDefault(_lagrangeJs);
var _larrivee = require("./larrivee");
var _larriveeDefault = parcelHelpers.interopDefault(_larrivee);
var _laskowski = require("./laskowski");
var _laskowskiDefault = parcelHelpers.interopDefault(_laskowski);
var _littrowJs = require("./littrow.js");
var _littrowJsDefault = parcelHelpers.interopDefault(_littrowJs);
var _loximuthalJs = require("./loximuthal.js");
var _loximuthalJsDefault = parcelHelpers.interopDefault(_loximuthalJs);
var _miller = require("./miller");
var _millerDefault = parcelHelpers.interopDefault(_miller);
var _modifiedStereographic = require("./modifiedStereographic");
var _modifiedStereographicDefault = parcelHelpers.interopDefault(_modifiedStereographic);
var _mollweide1 = require("./mollweide");
var _mollweideDefault1 = parcelHelpers.interopDefault(_mollweide1);
var _mtFlatPolarParabolic = require("./mtFlatPolarParabolic");
var _mtFlatPolarParabolicDefault = parcelHelpers.interopDefault(_mtFlatPolarParabolic);
var _mtFlatPolarQuartic = require("./mtFlatPolarQuartic");
var _mtFlatPolarQuarticDefault = parcelHelpers.interopDefault(_mtFlatPolarQuartic);
var _mtFlatPolarSinusoidal = require("./mtFlatPolarSinusoidal");
var _mtFlatPolarSinusoidalDefault = parcelHelpers.interopDefault(_mtFlatPolarSinusoidal);
var _naturalEarth2 = require("./naturalEarth2");
var _naturalEarth2Default = parcelHelpers.interopDefault(_naturalEarth2);
var _nellHammer = require("./nellHammer");
var _nellHammerDefault = parcelHelpers.interopDefault(_nellHammer);
var _quarticAuthalic = require("./interrupted/quarticAuthalic");
var _quarticAuthalicDefault = parcelHelpers.interopDefault(_quarticAuthalic);
var _nicolosi = require("./nicolosi");
var _nicolosiDefault = parcelHelpers.interopDefault(_nicolosi);
var _patterson = require("./patterson");
var _pattersonDefault = parcelHelpers.interopDefault(_patterson);
var _polyconic = require("./polyconic");
var _polyconicDefault = parcelHelpers.interopDefault(_polyconic);
var _indexJs = require("./polyhedral/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _butterflyJs = require("./polyhedral/butterfly.js");
var _butterflyJsDefault = parcelHelpers.interopDefault(_butterflyJs);
var _collignonJs = require("./polyhedral/collignon.js");
var _collignonJsDefault = parcelHelpers.interopDefault(_collignonJs);
var _watermanJs = require("./polyhedral/waterman.js");
var _watermanJsDefault = parcelHelpers.interopDefault(_watermanJs);
var _index1 = require("./project/index");
var _indexDefault1 = parcelHelpers.interopDefault(_index1);
var _gringortenJs1 = require("./quincuncial/gringorten.js");
var _gringortenJsDefault1 = parcelHelpers.interopDefault(_gringortenJs1);
var _peirceJs = require("./quincuncial/peirce.js");
var _peirceJsDefault = parcelHelpers.interopDefault(_peirceJs);
var _quantize = require("./quantize");
var _quantizeDefault = parcelHelpers.interopDefault(_quantize);
var _indexJs1 = require("./quincuncial/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _rectangularPolyconic = require("./rectangularPolyconic");
var _rectangularPolyconicDefault = parcelHelpers.interopDefault(_rectangularPolyconic);
var _robinson = require("./robinson");
var _robinsonDefault = parcelHelpers.interopDefault(_robinson);
var _satellite = require("./satellite");
var _satelliteDefault = parcelHelpers.interopDefault(_satellite);
var _sinuMollweide1 = require("./sinuMollweide");
var _sinuMollweideDefault1 = parcelHelpers.interopDefault(_sinuMollweide1);
var _sinusoidal1 = require("./sinusoidal");
var _sinusoidalDefault1 = parcelHelpers.interopDefault(_sinusoidal1);
var _stitch = require("./stitch");
var _stitchDefault = parcelHelpers.interopDefault(_stitch);
var _times = require("./times");
var _timesDefault = parcelHelpers.interopDefault(_times);
var _twoPointAzimuthal = require("./twoPointAzimuthal");
var _twoPointAzimuthalDefault = parcelHelpers.interopDefault(_twoPointAzimuthal);
var _twoPointEquidistant = require("./twoPointEquidistant");
var _twoPointEquidistantDefault = parcelHelpers.interopDefault(_twoPointEquidistant);
var _vanDerGrinten = require("./vanDerGrinten");
var _vanDerGrintenDefault = parcelHelpers.interopDefault(_vanDerGrinten);
var _vanDerGrinten2 = require("./vanDerGrinten2");
var _vanDerGrinten2Default = parcelHelpers.interopDefault(_vanDerGrinten2);
var _vanDerGrinten3 = require("./vanDerGrinten3");
var _vanDerGrinten3Default = parcelHelpers.interopDefault(_vanDerGrinten3);
var _vanDerGrinten4 = require("./vanDerGrinten4");
var _vanDerGrinten4Default = parcelHelpers.interopDefault(_vanDerGrinten4);
var _wagnerJs = require("./wagner.js");
var _wagnerJsDefault = parcelHelpers.interopDefault(_wagnerJs);
var _wagner4Js = require("./wagner4.js");
var _wagner4JsDefault = parcelHelpers.interopDefault(_wagner4Js);
var _wagner6Js = require("./wagner6.js");
var _wagner6JsDefault = parcelHelpers.interopDefault(_wagner6Js);
var _wiechelJs = require("./wiechel.js");
var _wiechelJsDefault = parcelHelpers.interopDefault(_wiechelJs);
var _winkel3 = require("./winkel3");
var _winkel3Default = parcelHelpers.interopDefault(_winkel3);

},{"./airy":false,"./aitoff":false,"./armadillo":false,"./august":false,"./baker":false,"./berghaus":false,"./bertin":false,"./boggs":false,"./bonne":false,"./bottomley":false,"./bromley":false,"./chamberlin":false,"./collignon":false,"./craig":false,"./craster":false,"./cylindricalEqualArea":false,"./cylindricalStereographic":false,"./eckert1.js":false,"./eckert2.js":false,"./eckert3.js":false,"./eckert4.js":false,"./eckert5.js":false,"./eckert6.js":false,"./eisenlohr.js":false,"./fahey.js":false,"./foucaut.js":false,"./foucautSinusoidal.js":false,"./gilbert.js":false,"./gingery.js":false,"./ginzburg4.js":false,"./ginzburg5.js":false,"./ginzburg6.js":false,"./ginzburg8.js":false,"./ginzburg9.js":false,"./gringorten.js":false,"./guyou.js":false,"./hammer.js":false,"./hammerRetroazimuthal.js":false,"./healpix.js":false,"./hill.js":false,"./homolosine.js":false,"./hufnagel.js":false,"./hyperelliptical":false,"./interrupted/index":false,"./interrupted/boggs":false,"./interrupted/homolosine":false,"./interrupted/mollweide":false,"./interrupted/mollweideHemispheres":false,"./interrupted/sinuMollweide":false,"./interrupted/sinusoidal":false,"./kavrayskiy7.js":false,"./lagrange.js":false,"./larrivee":false,"./laskowski":false,"./littrow.js":false,"./loximuthal.js":false,"./miller":false,"./modifiedStereographic":false,"./mollweide":"dkpmT","./mtFlatPolarParabolic":false,"./mtFlatPolarQuartic":false,"./mtFlatPolarSinusoidal":false,"./naturalEarth2":false,"./nellHammer":false,"./interrupted/quarticAuthalic":false,"./nicolosi":false,"./patterson":false,"./polyconic":false,"./polyhedral/index.js":false,"./polyhedral/butterfly.js":false,"./polyhedral/collignon.js":false,"./polyhedral/waterman.js":false,"./project/index":false,"./quincuncial/gringorten.js":false,"./quincuncial/peirce.js":false,"./quantize":false,"./quincuncial/index.js":false,"./rectangularPolyconic":false,"./robinson":false,"./satellite":false,"./sinuMollweide":false,"./sinusoidal":false,"./stitch":false,"./times":false,"./twoPointAzimuthal":false,"./twoPointEquidistant":false,"./vanDerGrinten":false,"./vanDerGrinten2":false,"./vanDerGrinten3":false,"./vanDerGrinten4":false,"./wagner.js":false,"./wagner4.js":false,"./wagner6.js":false,"./wiechel.js":false,"./winkel3":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dkpmT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mollweideBromleyTheta", ()=>mollweideBromleyTheta);
parcelHelpers.export(exports, "mollweideBromleyRaw", ()=>mollweideBromleyRaw);
parcelHelpers.export(exports, "mollweideRaw", ()=>mollweideRaw);
var _d3Geo = require("d3-geo");
var _mathJs = require("./math.js");
function mollweideBromleyTheta(cp, phi) {
    var cpsinPhi = cp * (0, _mathJs.sin)(phi), i = 30, delta;
    do phi -= delta = (phi + (0, _mathJs.sin)(phi) - cpsinPhi) / (1 + (0, _mathJs.cos)(phi));
    while ((0, _mathJs.abs)(delta) > (0, _mathJs.epsilon) && --i > 0);
    return phi / 2;
}
function mollweideBromleyRaw(cx, cy, cp) {
    function forward(lambda, phi) {
        return [
            cx * lambda * (0, _mathJs.cos)(phi = mollweideBromleyTheta(cp, phi)),
            cy * (0, _mathJs.sin)(phi)
        ];
    }
    forward.invert = function(x, y) {
        return y = (0, _mathJs.asin)(y / cy), [
            x / (cx * (0, _mathJs.cos)(y)),
            (0, _mathJs.asin)((2 * y + (0, _mathJs.sin)(2 * y)) / cp)
        ];
    };
    return forward;
}
var mollweideRaw = mollweideBromleyRaw((0, _mathJs.sqrt2) / (0, _mathJs.halfPi), (0, _mathJs.sqrt2), (0, _mathJs.pi));
exports.default = function() {
    return (0, _d3Geo.geoProjection)(mollweideRaw).scale(169.529);
};

},{"d3-geo":"lY61T","./math.js":"lq3g8","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lq3g8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "atan", ()=>atan);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "ceil", ()=>ceil);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "exp", ()=>exp);
parcelHelpers.export(exports, "floor", ()=>floor);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "pow", ()=>pow);
parcelHelpers.export(exports, "round", ()=>round);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "tan", ()=>tan);
parcelHelpers.export(exports, "epsilon", ()=>epsilon);
parcelHelpers.export(exports, "epsilon2", ()=>epsilon2);
parcelHelpers.export(exports, "pi", ()=>pi);
parcelHelpers.export(exports, "halfPi", ()=>halfPi);
parcelHelpers.export(exports, "quarterPi", ()=>quarterPi);
parcelHelpers.export(exports, "sqrt1_2", ()=>sqrt1_2);
parcelHelpers.export(exports, "sqrt2", ()=>sqrt2);
parcelHelpers.export(exports, "sqrtPi", ()=>sqrtPi);
parcelHelpers.export(exports, "tau", ()=>tau);
parcelHelpers.export(exports, "degrees", ()=>degrees);
parcelHelpers.export(exports, "radians", ()=>radians);
parcelHelpers.export(exports, "sinci", ()=>sinci);
parcelHelpers.export(exports, "asin", ()=>asin);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "tanh", ()=>tanh);
parcelHelpers.export(exports, "sinh", ()=>sinh);
parcelHelpers.export(exports, "cosh", ()=>cosh);
parcelHelpers.export(exports, "arsinh", ()=>arsinh);
parcelHelpers.export(exports, "arcosh", ()=>arcosh);
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var ceil = Math.ceil;
var cos = Math.cos;
var exp = Math.exp;
var floor = Math.floor;
var log = Math.log;
var max = Math.max;
var min = Math.min;
var pow = Math.pow;
var round = Math.round;
var sign = Math.sign || function(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sin = Math.sin;
var tan = Math.tan;
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var sqrt1_2 = Math.SQRT1_2;
var sqrt2 = sqrt(2);
var sqrtPi = sqrt(pi);
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
function sinci(x) {
    return x ? x / Math.sin(x) : 1;
}
function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function sqrt(x) {
    return x > 0 ? Math.sqrt(x) : 0;
}
function tanh(x) {
    x = exp(2 * x);
    return (x - 1) / (x + 1);
}
function sinh(x) {
    return (exp(x) - exp(-x)) / 2;
}
function cosh(x) {
    return (exp(x) + exp(-x)) / 2;
}
function arsinh(x) {
    return log(x + sqrt(x * x + 1));
}
function arcosh(x) {
    return log(x + sqrt(x * x - 1));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4JCry":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "force", ()=>Force);
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
var _d3Force = require("d3-force");
const ForceMap = {
    center: (0, _d3Force.forceCenter),
    collide: (0, _d3Force.forceCollide),
    nbody: (0, _d3Force.forceManyBody),
    link: (0, _d3Force.forceLink),
    x: (0, _d3Force.forceX),
    y: (0, _d3Force.forceY)
};
const Forces = "forces", ForceParams = [
    "alpha",
    "alphaMin",
    "alphaTarget",
    "velocityDecay",
    "forces"
], ForceConfig = [
    "static",
    "iterations"
], ForceOutput = [
    "x",
    "y",
    "vx",
    "vy"
];
/**
 * Force simulation layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<object>} params.forces - The forces to apply.
 */ function Force(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Force.Definition = {
    "type": "Force",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "static",
            "type": "boolean",
            "default": false
        },
        {
            "name": "restart",
            "type": "boolean",
            "default": false
        },
        {
            "name": "iterations",
            "type": "number",
            "default": 300
        },
        {
            "name": "alpha",
            "type": "number",
            "default": 1
        },
        {
            "name": "alphaMin",
            "type": "number",
            "default": 0.001
        },
        {
            "name": "alphaTarget",
            "type": "number",
            "default": 0
        },
        {
            "name": "velocityDecay",
            "type": "number",
            "default": 0.4
        },
        {
            "name": "forces",
            "type": "param",
            "array": true,
            "params": [
                {
                    "key": {
                        "force": "center"
                    },
                    "params": [
                        {
                            "name": "x",
                            "type": "number",
                            "default": 0
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "default": 0
                        }
                    ]
                },
                {
                    "key": {
                        "force": "collide"
                    },
                    "params": [
                        {
                            "name": "radius",
                            "type": "number",
                            "expr": true
                        },
                        {
                            "name": "strength",
                            "type": "number",
                            "default": 0.7
                        },
                        {
                            "name": "iterations",
                            "type": "number",
                            "default": 1
                        }
                    ]
                },
                {
                    "key": {
                        "force": "nbody"
                    },
                    "params": [
                        {
                            "name": "strength",
                            "type": "number",
                            "default": -30
                        },
                        {
                            "name": "theta",
                            "type": "number",
                            "default": 0.9
                        },
                        {
                            "name": "distanceMin",
                            "type": "number",
                            "default": 1
                        },
                        {
                            "name": "distanceMax",
                            "type": "number"
                        }
                    ]
                },
                {
                    "key": {
                        "force": "link"
                    },
                    "params": [
                        {
                            "name": "links",
                            "type": "data"
                        },
                        {
                            "name": "id",
                            "type": "field"
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "default": 30,
                            "expr": true
                        },
                        {
                            "name": "strength",
                            "type": "number",
                            "expr": true
                        },
                        {
                            "name": "iterations",
                            "type": "number",
                            "default": 1
                        }
                    ]
                },
                {
                    "key": {
                        "force": "x"
                    },
                    "params": [
                        {
                            "name": "strength",
                            "type": "number",
                            "default": 0.1
                        },
                        {
                            "name": "x",
                            "type": "field"
                        }
                    ]
                },
                {
                    "key": {
                        "force": "y"
                    },
                    "params": [
                        {
                            "name": "strength",
                            "type": "number",
                            "default": 0.1
                        },
                        {
                            "name": "y",
                            "type": "field"
                        }
                    ]
                }
            ]
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "modify": false,
            "default": ForceOutput
        }
    ]
};
(0, _vegaUtil.inherits)(Force, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        var sim = this.value, change = pulse.changed(pulse.ADD_REM), params = _.modified(ForceParams), iters = _.iterations || 300; // configure simulation
        if (!sim) {
            this.value = sim = simulation(pulse.source, _);
            sim.on("tick", rerun(pulse.dataflow, this));
            if (!_.static) {
                change = true;
                sim.tick(); // ensure we run on init
            }
            pulse.modifies("index");
        } else {
            if (change) {
                pulse.modifies("index");
                sim.nodes(pulse.source);
            }
            if (params || pulse.changed(pulse.MOD)) setup(sim, _, 0, pulse);
        } // run simulation
        if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {
            sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));
            if (_.static) for(sim.stop(); --iters >= 0;)sim.tick();
            else {
                if (sim.stopped()) sim.restart();
                if (!change) return pulse.StopPropagation; // defer to sim ticks
            }
        }
        return this.finish(_, pulse);
    },
    finish (_, pulse) {
        const dataflow = pulse.dataflow; // inspect dependencies, touch link source data
        for(let args = this._argops, j = 0, m = args.length, arg; j < m; ++j){
            arg = args[j];
            if (arg.name !== Forces || arg.op._argval.force !== "link") continue;
            for(var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i)if (ops[i].name === "links" && (op = ops[i].op.source)) {
                dataflow.pulse(op, dataflow.changeset().reflow());
                break;
            }
        } // reflow all nodes
        return pulse.reflow(_.modified()).modifies(ForceOutput);
    }
});
function rerun(df, op) {
    return ()=>df.touch(op).run();
}
function simulation(nodes, _) {
    const sim = (0, _d3Force.forceSimulation)(nodes), stop = sim.stop, restart = sim.restart;
    let stopped = false;
    sim.stopped = ()=>stopped;
    sim.restart = ()=>(stopped = false, restart());
    sim.stop = ()=>(stopped = true, stop());
    return setup(sim, _, true).on("end", ()=>stopped = true);
}
function setup(sim, _, init, pulse) {
    var f = (0, _vegaUtil.array)(_.forces), i, n, p, name;
    for(i = 0, n = ForceParams.length; i < n; ++i){
        p = ForceParams[i];
        if (p !== Forces && _.modified(p)) sim[p](_[p]);
    }
    for(i = 0, n = f.length; i < n; ++i){
        name = Forces + i;
        p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;
        if (p) sim.force(name, p);
    }
    for(n = sim.numForces || 0; i < n; ++i)sim.force(Forces + i, null); // remove
    sim.numForces = f.length;
    return sim;
}
function modified(f, pulse) {
    var k, v;
    for(k in f){
        if ((0, _vegaUtil.isFunction)(v = f[k]) && pulse.modified((0, _vegaUtil.accessorFields)(v))) return 1;
    }
    return 0;
}
function getForce(_) {
    var f, p;
    if (!(0, _vegaUtil.hasOwnProperty)(ForceMap, _.force)) (0, _vegaUtil.error)("Unrecognized force: " + _.force);
    f = ForceMap[_.force]();
    for(p in _)if ((0, _vegaUtil.isFunction)(f[p])) setForceParam(f[p], _[p], _);
    return f;
}
function setForceParam(f, v, _) {
    f((0, _vegaUtil.isFunction)(v) ? (d)=>v(d, _) : v);
}

},{"vega-dataflow":"3NitK","vega-util":"bApja","d3-force":"kTqQn","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kTqQn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forceCenter", ()=>(0, _centerJsDefault.default));
parcelHelpers.export(exports, "forceCollide", ()=>(0, _collideJsDefault.default));
parcelHelpers.export(exports, "forceLink", ()=>(0, _linkJsDefault.default));
parcelHelpers.export(exports, "forceManyBody", ()=>(0, _manyBodyJsDefault.default));
parcelHelpers.export(exports, "forceRadial", ()=>(0, _radialJsDefault.default));
parcelHelpers.export(exports, "forceSimulation", ()=>(0, _simulationJsDefault.default));
parcelHelpers.export(exports, "forceX", ()=>(0, _xJsDefault.default));
parcelHelpers.export(exports, "forceY", ()=>(0, _yJsDefault.default));
var _centerJs = require("./center.js");
var _centerJsDefault = parcelHelpers.interopDefault(_centerJs);
var _collideJs = require("./collide.js");
var _collideJsDefault = parcelHelpers.interopDefault(_collideJs);
var _linkJs = require("./link.js");
var _linkJsDefault = parcelHelpers.interopDefault(_linkJs);
var _manyBodyJs = require("./manyBody.js");
var _manyBodyJsDefault = parcelHelpers.interopDefault(_manyBodyJs);
var _radialJs = require("./radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _simulationJs = require("./simulation.js");
var _simulationJsDefault = parcelHelpers.interopDefault(_simulationJs);
var _xJs = require("./x.js");
var _xJsDefault = parcelHelpers.interopDefault(_xJs);
var _yJs = require("./y.js");
var _yJsDefault = parcelHelpers.interopDefault(_yJs);

},{"./center.js":"cmuXj","./collide.js":"kAxiK","./link.js":"dpYez","./manyBody.js":"1XMYH","./radial.js":false,"./simulation.js":"k5O0L","./x.js":"byekK","./y.js":"eIzZp","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cmuXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x, y) {
    var nodes, strength = 1;
    if (x == null) x = 0;
    if (y == null) y = 0;
    function force() {
        var i, n = nodes.length, node, sx = 0, sy = 0;
        for(i = 0; i < n; ++i)node = nodes[i], sx += node.x, sy += node.y;
        for(sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i)node = nodes[i], node.x -= sx, node.y -= sy;
    }
    force.initialize = function(_) {
        nodes = _;
    };
    force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
    };
    force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    return force;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kAxiK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Quadtree = require("d3-quadtree");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _jiggleJs = require("./jiggle.js");
var _jiggleJsDefault = parcelHelpers.interopDefault(_jiggleJs);
function x(d) {
    return d.x + d.vx;
}
function y(d) {
    return d.y + d.vy;
}
exports.default = function(radius) {
    var nodes, radii, random, strength = 1, iterations = 1;
    if (typeof radius !== "function") radius = (0, _constantJsDefault.default)(radius == null ? 1 : +radius);
    function force() {
        var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
        for(var k = 0; k < iterations; ++k){
            tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);
            for(i = 0; i < n; ++i){
                node = nodes[i];
                ri = radii[node.index], ri2 = ri * ri;
                xi = node.x + node.vx;
                yi = node.y + node.vy;
                tree.visit(apply);
            }
        }
        function apply(quad, x0, y0, x1, y1) {
            var data = quad.data, rj = quad.r, r = ri + rj;
            if (data) {
                if (data.index > node.index) {
                    var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
                    if (l < r * r) {
                        if (x === 0) x = (0, _jiggleJsDefault.default)(random), l += x * x;
                        if (y === 0) y = (0, _jiggleJsDefault.default)(random), l += y * y;
                        l = (r - (l = Math.sqrt(l))) / l * strength;
                        node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                        node.vy += (y *= l) * r;
                        data.vx -= x * (r = 1 - r);
                        data.vy -= y * r;
                    }
                }
                return;
            }
            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
    }
    function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for(var i = quad.r = 0; i < 4; ++i)if (quad[i] && quad[i].r > quad.r) quad.r = quad[i].r;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for(i = 0; i < n; ++i)node = nodes[i], radii[node.index] = +radius(node, i, nodes);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initialize(), force) : radius;
    };
    return force;
};

},{"d3-quadtree":"37u8M","./constant.js":"gq4mo","./jiggle.js":"2qIlb","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"37u8M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quadtree", ()=>(0, _quadtreeJsDefault.default));
var _quadtreeJs = require("./quadtree.js");
var _quadtreeJsDefault = parcelHelpers.interopDefault(_quadtreeJs);

},{"./quadtree.js":"3kHO8","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3kHO8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addJs = require("./add.js");
var _addJsDefault = parcelHelpers.interopDefault(_addJs);
var _coverJs = require("./cover.js");
var _coverJsDefault = parcelHelpers.interopDefault(_coverJs);
var _dataJs = require("./data.js");
var _dataJsDefault = parcelHelpers.interopDefault(_dataJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _rootJs = require("./root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _visitJs = require("./visit.js");
var _visitJsDefault = parcelHelpers.interopDefault(_visitJs);
var _visitAfterJs = require("./visitAfter.js");
var _visitAfterJsDefault = parcelHelpers.interopDefault(_visitAfterJs);
var _xJs = require("./x.js");
var _xJsDefault = parcelHelpers.interopDefault(_xJs);
var _yJs = require("./y.js");
var _yJsDefault = parcelHelpers.interopDefault(_yJs);
function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? (0, _xJs.defaultX) : x, y == null ? (0, _yJs.defaultY) : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
}
exports.default = quadtree;
function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
}
function leaf_copy(leaf) {
    var copy = {
        data: leaf.data
    }, next = copy;
    while(leaf = leaf.next)next = next.next = {
        data: leaf.data
    };
    return copy;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
    if (!node) return copy;
    if (!node.length) return copy._root = leaf_copy(node), copy;
    nodes = [
        {
            source: node,
            target: copy._root = new Array(4)
        }
    ];
    while(node = nodes.pop()){
        for(var i = 0; i < 4; ++i)if (child = node.source[i]) {
            if (child.length) nodes.push({
                source: child,
                target: node.target[i] = new Array(4)
            });
            else node.target[i] = leaf_copy(child);
        }
    }
    return copy;
};
treeProto.add = (0, _addJsDefault.default);
treeProto.addAll = (0, _addJs.addAll);
treeProto.cover = (0, _coverJsDefault.default);
treeProto.data = (0, _dataJsDefault.default);
treeProto.extent = (0, _extentJsDefault.default);
treeProto.find = (0, _findJsDefault.default);
treeProto.remove = (0, _removeJsDefault.default);
treeProto.removeAll = (0, _removeJs.removeAll);
treeProto.root = (0, _rootJsDefault.default);
treeProto.size = (0, _sizeJsDefault.default);
treeProto.visit = (0, _visitJsDefault.default);
treeProto.visitAfter = (0, _visitAfterJsDefault.default);
treeProto.x = (0, _xJsDefault.default);
treeProto.y = (0, _yJsDefault.default);

},{"./add.js":"5Rd7q","./cover.js":"bMVUj","./data.js":"8gCAF","./extent.js":"55OBQ","./find.js":"7wO3V","./remove.js":"aDV7k","./root.js":"i8Ybu","./size.js":"9DeOu","./visit.js":"4YvSz","./visitAfter.js":"fin30","./x.js":"39OFs","./y.js":"9VKON","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5Rd7q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addAll", ()=>addAll);
exports.default = function(d) {
    const x = +this._x.call(null, d), y = +this._y.call(null, d);
    return add(this.cover(x, y), x, y, d);
};
function add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
    var parent, node = tree._root, leaf = {
        data: d
    }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;
    // Find the existing leaf for the new point, or add it.
    while(node.length){
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    }
    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
    // Otherwise, split the leaf node until the old and new point are separated.
    do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
    }while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    // Compute the points and their extent.
    for(i = 0; i < n; ++i){
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
    }
    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1) return this;
    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);
    // Add the new points.
    for(i = 0; i < n; ++i)add(this, xz[i], yz[i], data[i]);
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bMVUj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
    } else {
        var z = x1 - x0 || 1, node = this._root, parent, i;
        while(x0 > x || x >= x1 || y0 > y || y >= y1){
            i = (y < y0) << 1 | x < x0;
            parent = new Array(4), parent[i] = node, node = parent, z *= 2;
            switch(i){
                case 0:
                    x1 = x0 + z, y1 = y0 + z;
                    break;
                case 1:
                    x0 = x1 - z, y1 = y0 + z;
                    break;
                case 2:
                    x1 = x0 + z, y0 = y1 - z;
                    break;
                case 3:
                    x0 = x1 - z, y0 = y1 - z;
                    break;
            }
        }
        if (this._root && this._root.length) this._root = node;
    }
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8gCAF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var data = [];
    this.visit(function(node) {
        if (!node.length) do data.push(node.data);
        while (node = node.next);
    });
    return data;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"55OBQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
        [
            this._x0,
            this._y0
        ],
        [
            this._x1,
            this._y1
        ]
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7wO3V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadJs = require("./quad.js");
var _quadJsDefault = parcelHelpers.interopDefault(_quadJs);
exports.default = function(x, y, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
    if (node) quads.push(new (0, _quadJsDefault.default)(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;
    else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
    }
    while(q = quads.pop()){
        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;
        // Bisect the current quadrant.
        if (node.length) {
            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
            quads.push(new (0, _quadJsDefault.default)(node[3], xm, ym, x2, y2), new (0, _quadJsDefault.default)(node[2], x1, ym, xm, y2), new (0, _quadJsDefault.default)(node[1], xm, y1, x2, ym), new (0, _quadJsDefault.default)(node[0], x1, y1, xm, ym));
            // Visit the closest quadrant first.
            if (i = (y >= ym) << 1 | x >= xm) {
                q = quads[quads.length - 1];
                quads[quads.length - 1] = quads[quads.length - 1 - i];
                quads[quads.length - 1 - i] = q;
            }
        } else {
            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
            if (d2 < radius) {
                var d = Math.sqrt(radius = d2);
                x0 = x - d, y0 = y - d;
                x3 = x + d, y3 = y + d;
                data = node.data;
            }
        }
    }
    return data;
};

},{"./quad.js":"ij3wf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ij3wf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aDV7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeAll", ()=>removeAll);
exports.default = function(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;
    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while(true){
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
    }
    // Find the point to remove.
    while(node.data !== d)if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;
    // If there are multiple coincident points, remove just the point.
    if (previous) return next ? previous.next = next : delete previous.next, this;
    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;
    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];
    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
    }
    return this;
};
function removeAll(data) {
    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i8Ybu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return this._root;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9DeOu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var size = 0;
    this.visit(function(node) {
        if (!node.length) do ++size;
        while (node = node.next);
    });
    return size;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4YvSz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadJs = require("./quad.js");
var _quadJsDefault = parcelHelpers.interopDefault(_quadJs);
exports.default = function(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new (0, _quadJsDefault.default)(node, this._x0, this._y0, this._x1, this._y1));
    while(q = quads.pop())if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new (0, _quadJsDefault.default)(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new (0, _quadJsDefault.default)(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new (0, _quadJsDefault.default)(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new (0, _quadJsDefault.default)(child, x0, y0, xm, ym));
    }
    return this;
};

},{"./quad.js":"ij3wf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fin30":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadJs = require("./quad.js");
var _quadJsDefault = parcelHelpers.interopDefault(_quadJs);
exports.default = function(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new (0, _quadJsDefault.default)(this._root, this._x0, this._y0, this._x1, this._y1));
    while(q = quads.pop()){
        var node = q.node;
        if (node.length) {
            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[0]) quads.push(new (0, _quadJsDefault.default)(child, x0, y0, xm, ym));
            if (child = node[1]) quads.push(new (0, _quadJsDefault.default)(child, xm, y0, x1, ym));
            if (child = node[2]) quads.push(new (0, _quadJsDefault.default)(child, x0, ym, xm, y1));
            if (child = node[3]) quads.push(new (0, _quadJsDefault.default)(child, xm, ym, x1, y1));
        }
        next.push(q);
    }
    while(q = next.pop())callback(q.node, q.x0, q.y0, q.x1, q.y1);
    return this;
};

},{"./quad.js":"ij3wf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"39OFs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultX", ()=>defaultX);
function defaultX(d) {
    return d[0];
}
exports.default = function(_) {
    return arguments.length ? (this._x = _, this) : this._x;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9VKON":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultY", ()=>defaultY);
function defaultY(d) {
    return d[1];
}
exports.default = function(_) {
    return arguments.length ? (this._y = _, this) : this._y;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gq4mo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2qIlb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(random) {
    return (random() - 0.5) * 1e-6;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dpYez":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _jiggleJs = require("./jiggle.js");
var _jiggleJsDefault = parcelHelpers.interopDefault(_jiggleJs);
function index(d) {
    return d.index;
}
function find(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("node not found: " + nodeId);
    return node;
}
exports.default = function(links) {
    var id = index, strength = defaultStrength, strengths, distance = (0, _constantJsDefault.default)(30), distances, nodes, count, bias, random, iterations = 1;
    if (links == null) links = [];
    function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }
    function force(alpha) {
        for(var k = 0, n = links.length; k < iterations; ++k)for(var i = 0, link, source, target, x, y, l, b; i < n; ++i){
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || (0, _jiggleJsDefault.default)(random);
            y = target.y + target.vy - source.y - source.vy || (0, _jiggleJsDefault.default)(random);
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
        }
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i)=>[
                id(d, i, nodes),
                d
            ])), link;
        for(i = 0, count = new Array(n); i < m; ++i){
            link = links[i], link.index = i;
            if (typeof link.source !== "object") link.source = find(nodeById, link.source);
            if (typeof link.target !== "object") link.target = find(nodeById, link.target);
            count[link.source.index] = (count[link.source.index] || 0) + 1;
            count[link.target.index] = (count[link.target.index] || 0) + 1;
        }
        for(i = 0, bias = new Array(m); i < m; ++i)link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
    }
    function initializeStrength() {
        if (!nodes) return;
        for(var i = 0, n = links.length; i < n; ++i)strengths[i] = +strength(links[i], i, links);
    }
    function initializeDistance() {
        if (!nodes) return;
        for(var i = 0, n = links.length; i < n; ++i)distances[i] = +distance(links[i], i, links);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
    };
    force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
    };
    force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initializeStrength(), force) : strength;
    };
    force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initializeDistance(), force) : distance;
    };
    return force;
};

},{"./constant.js":"gq4mo","./jiggle.js":"2qIlb","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1XMYH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Quadtree = require("d3-quadtree");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _jiggleJs = require("./jiggle.js");
var _jiggleJsDefault = parcelHelpers.interopDefault(_jiggleJs);
var _simulationJs = require("./simulation.js");
exports.default = function() {
    var nodes, node, random, alpha, strength = (0, _constantJsDefault.default)(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
        var i, n = nodes.length, tree = (0, _d3Quadtree.quadtree)(nodes, (0, _simulationJs.x), (0, _simulationJs.y)).visitAfter(accumulate);
        for(alpha = _, i = 0; i < n; ++i)node = nodes[i], tree.visit(apply);
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for(i = 0; i < n; ++i)node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
    }
    function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;
        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
            for(x = y = i = 0; i < 4; ++i)if ((q = quad[i]) && (c = Math.abs(q.value))) strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            quad.x = x / weight;
            quad.y = y / weight;
        } else {
            q = quad;
            q.x = q.data.x;
            q.y = q.data.y;
            do strength += strengths[q.data.index];
            while (q = q.next);
        }
        quad.value = strength;
    }
    function apply(quad, x1, _, x2) {
        if (!quad.value) return true;
        var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;
        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
            if (l < distanceMax2) {
                if (x === 0) x = (0, _jiggleJsDefault.default)(random), l += x * x;
                if (y === 0) y = (0, _jiggleJsDefault.default)(random), l += y * y;
                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
                node.vx += x * quad.value * alpha / l;
                node.vy += y * quad.value * alpha / l;
            }
            return true;
        } else if (quad.length || l >= distanceMax2) return;
        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node || quad.next) {
            if (x === 0) x = (0, _jiggleJsDefault.default)(random), l += x * x;
            if (y === 0) y = (0, _jiggleJsDefault.default)(random), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }
        do if (quad.data !== node) {
            w = strengths[quad.data.index] * alpha / l;
            node.vx += x * w;
            node.vy += y * w;
        }
        while (quad = quad.next);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initialize(), force) : strength;
    };
    force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
};

},{"d3-quadtree":"37u8M","./constant.js":"gq4mo","./jiggle.js":"2qIlb","./simulation.js":"k5O0L","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"k5O0L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "x", ()=>x);
parcelHelpers.export(exports, "y", ()=>y);
var _d3Dispatch = require("d3-dispatch");
var _d3Timer = require("d3-timer");
var _lcgJs = require("./lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);
function x(d) {
    return d.x;
}
function y(d) {
    return d.y;
}
var initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
exports.default = function(nodes) {
    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = (0, _d3Timer.timer)(step), event = (0, _d3Dispatch.dispatch)("tick", "end"), random = (0, _lcgJsDefault.default)();
    if (nodes == null) nodes = [];
    function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
            stepper.stop();
            event.call("end", simulation);
        }
    }
    function tick(iterations) {
        var i, n = nodes.length, node;
        if (iterations === undefined) iterations = 1;
        for(var k = 0; k < iterations; ++k){
            alpha += (alphaTarget - alpha) * alphaDecay;
            forces.forEach(function(force) {
                force(alpha);
            });
            for(i = 0; i < n; ++i){
                node = nodes[i];
                if (node.fx == null) node.x += node.vx *= velocityDecay;
                else node.x = node.fx, node.vx = 0;
                if (node.fy == null) node.y += node.vy *= velocityDecay;
                else node.y = node.fy, node.vy = 0;
            }
        }
        return simulation;
    }
    function initializeNodes() {
        for(var i = 0, n = nodes.length, node; i < n; ++i){
            node = nodes[i], node.index = i;
            if (node.fx != null) node.x = node.fx;
            if (node.fy != null) node.y = node.fy;
            if (isNaN(node.x) || isNaN(node.y)) {
                var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
                node.x = radius * Math.cos(angle);
                node.y = radius * Math.sin(angle);
            }
            if (isNaN(node.vx) || isNaN(node.vy)) node.vx = node.vy = 0;
        }
    }
    function initializeForce(force) {
        if (force.initialize) force.initialize(nodes, random);
        return force;
    }
    initializeNodes();
    return simulation = {
        tick: tick,
        restart: function() {
            return stepper.restart(step), simulation;
        },
        stop: function() {
            return stepper.stop(), simulation;
        },
        nodes: function(_) {
            return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },
        alpha: function(_) {
            return arguments.length ? (alpha = +_, simulation) : alpha;
        },
        alphaMin: function(_) {
            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },
        alphaDecay: function(_) {
            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },
        alphaTarget: function(_) {
            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },
        velocityDecay: function(_) {
            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },
        randomSource: function(_) {
            return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
        },
        force: function(name, _) {
            return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
        },
        find: function(x, y, radius) {
            var i = 0, n = nodes.length, dx, dy, d2, node, closest;
            if (radius == null) radius = Infinity;
            else radius *= radius;
            for(i = 0; i < n; ++i){
                node = nodes[i];
                dx = x - node.x;
                dy = y - node.y;
                d2 = dx * dx + dy * dy;
                if (d2 < radius) closest = node, radius = d2;
            }
            return closest;
        },
        on: function(name, _) {
            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
    };
};

},{"d3-dispatch":"i7nsc","d3-timer":"d15bJ","./lcg.js":"3KZNV","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i7nsc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dispatch", ()=>(0, _dispatchJsDefault.default));
var _dispatchJs = require("./dispatch.js");
var _dispatchJsDefault = parcelHelpers.interopDefault(_dispatchJs);

},{"./dispatch.js":"6iBKi","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6iBKi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var noop = {
    value: ()=>{}
};
function dispatch() {
    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){
        if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
    }
    return new Dispatch(_);
}
function Dispatch(_) {
    this._ = _;
}
function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {
            type: t,
            name: name
        };
    });
}
Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
        var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
            while(++i < n)if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
            return;
        }
        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while(++i < n){
            if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
            else if (callback == null) for(t in _)_[t] = set(_[t], typename.name, null);
        }
        return this;
    },
    copy: function() {
        var copy = {}, _ = this._;
        for(var t in _)copy[t] = _[t].slice();
        return new Dispatch(copy);
    },
    call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    }
};
function get(type, name) {
    for(var i = 0, n = type.length, c; i < n; ++i){
        if ((c = type[i]).name === name) return c.value;
    }
}
function set(type, name, callback) {
    for(var i = 0, n = type.length; i < n; ++i)if (type[i].name === name) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
    }
    if (callback != null) type.push({
        name: name,
        value: callback
    });
    return type;
}
exports.default = dispatch;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"d15bJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>(0, _timerJs.now));
parcelHelpers.export(exports, "timer", ()=>(0, _timerJs.timer));
parcelHelpers.export(exports, "timerFlush", ()=>(0, _timerJs.timerFlush));
parcelHelpers.export(exports, "timeout", ()=>(0, _timeoutJsDefault.default));
parcelHelpers.export(exports, "interval", ()=>(0, _intervalJsDefault.default));
var _timerJs = require("./timer.js");
var _timeoutJs = require("./timeout.js");
var _timeoutJsDefault = parcelHelpers.interopDefault(_timeoutJs);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);

},{"./timer.js":"1Lfpo","./timeout.js":false,"./interval.js":"dgSlx","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1Lfpo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>now);
parcelHelpers.export(exports, "Timer", ()=>Timer);
parcelHelpers.export(exports, "timer", ()=>timer);
parcelHelpers.export(exports, "timerFlush", ()=>timerFlush);
var frame = 0, timeout = 0, interval = 0, pokeDelay = 1000, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
};
function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
    clockNow = 0;
}
function Timer() {
    this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
            if (taskTail) taskTail._next = this;
            else taskHead = this;
            taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
    },
    stop: function() {
        if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep();
        }
    }
};
function timer(callback, delay, time) {
    var t = new Timer;
    t.restart(callback, delay, time);
    return t;
}
function timerFlush() {
    now(); // Get the current time, if not already set.
    ++frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while(t){
        if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
        t = t._next;
    }
    --frame;
}
function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
        timerFlush();
    } finally{
        frame = 0;
        nap();
        clockNow = 0;
    }
}
function poke() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}
function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while(t1)if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
    } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
    taskTail = t0;
    sleep(time);
}
function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
        if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
    } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dgSlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _timerJs = require("./timer.js");
exports.default = function(callback, delay, time) {
    var t = new (0, _timerJs.Timer), total = delay;
    if (delay == null) return t.restart(callback, delay, time), t;
    t._restart = t.restart;
    t.restart = function(callback, delay, time) {
        delay = +delay, time = time == null ? (0, _timerJs.now)() : +time;
        t._restart(function tick(elapsed) {
            elapsed += total;
            t._restart(tick, total += delay, time);
            callback(elapsed);
        }, delay, time);
    };
    t.restart(callback, delay, time);
    return t;
};

},{"./timer.js":"1Lfpo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3KZNV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const a = 1664525;
const c = 1013904223;
const m = 4294967296; // 2^32
exports.default = function() {
    let s = 1;
    return ()=>(s = (a * s + c) % m) / m;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"byekK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function(x) {
    var strength = (0, _constantJsDefault.default)(0.1), nodes, strengths, xz;
    if (typeof x !== "function") x = (0, _constantJsDefault.default)(x == null ? 0 : +x);
    function force(alpha) {
        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for(i = 0; i < n; ++i)strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
    force.initialize = function(_) {
        nodes = _;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initialize(), force) : strength;
    };
    force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initialize(), force) : x;
    };
    return force;
};

},{"./constant.js":"gq4mo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eIzZp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function(y) {
    var strength = (0, _constantJsDefault.default)(0.1), nodes, strengths, yz;
    if (typeof y !== "function") y = (0, _constantJsDefault.default)(y == null ? 0 : +y);
    function force(alpha) {
        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for(i = 0; i < n; ++i)strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
    force.initialize = function(_) {
        nodes = _;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initialize(), force) : strength;
    };
    force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), initialize(), force) : y;
    };
    return force;
};

},{"./constant.js":"gq4mo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lserr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nest", ()=>Nest);
parcelHelpers.export(exports, "pack", ()=>Pack);
parcelHelpers.export(exports, "partition", ()=>Partition);
parcelHelpers.export(exports, "stratify", ()=>Stratify);
parcelHelpers.export(exports, "tree", ()=>Tree);
parcelHelpers.export(exports, "treelinks", ()=>TreeLinks);
parcelHelpers.export(exports, "treemap", ()=>Treemap);
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
var _d3Hierarchy = require("d3-hierarchy");
// Build lookup table mapping tuple keys to tree node instances
function lookup(tree, key, filter) {
    const map = {};
    tree.each((node)=>{
        const t = node.data;
        if (filter(t)) map[key(t)] = node;
    });
    tree.lookup = map;
    return tree;
}
/**
 * Nest tuples into a tree structure, grouped by key values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
 * @param {boolean} [params.generate=false] - A boolean flag indicating if
 *   non-leaf nodes generated by this transform should be included in the
 *   output. The default (false) includes only the input data (leaf nodes)
 *   in the data stream.
 */ function Nest(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Nest.Definition = {
    "type": "Nest",
    "metadata": {
        "treesource": true,
        "changes": true
    },
    "params": [
        {
            "name": "keys",
            "type": "field",
            "array": true
        },
        {
            "name": "generate",
            "type": "boolean"
        }
    ]
};
const children = (n)=>n.values;
(0, _vegaUtil.inherits)(Nest, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (!pulse.source) (0, _vegaUtil.error)("Nest transform requires an upstream data source.");
        var gen = _.generate, mod = _.modified(), out = pulse.clone(), tree = this.value;
        if (!tree || mod || pulse.changed()) {
            // collect nodes to remove
            if (tree) tree.each((node)=>{
                if (node.children && (0, _vegaDataflow.isTuple)(node.data)) out.rem.push(node.data);
            });
             // generate new tree structure
            this.value = tree = (0, _d3Hierarchy.hierarchy)({
                values: (0, _vegaUtil.array)(_.keys).reduce((n, k)=>{
                    n.key(k);
                    return n;
                }, nest()).entries(out.source)
            }, children); // collect nodes to add
            if (gen) tree.each((node)=>{
                if (node.children) {
                    node = (0, _vegaDataflow.ingest)(node.data);
                    out.add.push(node);
                    out.source.push(node);
                }
            });
             // build lookup table
            lookup(tree, (0, _vegaDataflow.tupleid), (0, _vegaDataflow.tupleid));
        }
        out.source.root = tree;
        return out;
    }
});
function nest() {
    const keys = [], nest = {
        entries: (array)=>entries(apply(array, 0), 0),
        key: (d)=>(keys.push(d), nest)
    };
    function apply(array, depth) {
        if (depth >= keys.length) return array;
        const n = array.length, key = keys[depth++], valuesByKey = {}, result = {};
        let i = -1, keyValue, value, values;
        while(++i < n){
            keyValue = key(value = array[i]) + "";
            if (values = valuesByKey[keyValue]) values.push(value);
            else valuesByKey[keyValue] = [
                value
            ];
        }
        for(keyValue in valuesByKey)result[keyValue] = apply(valuesByKey[keyValue], depth);
        return result;
    }
    function entries(map, depth) {
        if (++depth > keys.length) return map;
        const array = [];
        for(const key in map)array.push({
            key,
            values: entries(map[key], depth)
        });
        return array;
    }
    return nest;
}
/**
 * Abstract class for tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function HierarchyLayout(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
const defaultSeparation = (a, b)=>a.parent === b.parent ? 1 : 2;
(0, _vegaUtil.inherits)(HierarchyLayout, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (!pulse.source || !pulse.source.root) (0, _vegaUtil.error)(this.constructor.name + " transform requires a backing tree data source.");
        const layout = this.layout(_.method), fields = this.fields, root = pulse.source.root, as = _.as || fields;
        if (_.field) root.sum(_.field);
        else root.count();
        if (_.sort) root.sort((0, _vegaDataflow.stableCompare)(_.sort, (d)=>d.data));
        setParams(layout, this.params, _);
        if (layout.separation) layout.separation(_.separation !== false ? defaultSeparation : (0, _vegaUtil.one));
        try {
            this.value = layout(root);
        } catch (err) {
            (0, _vegaUtil.error)(err);
        }
        root.each((node)=>setFields(node, fields, as));
        return pulse.reflow(_.modified()).modifies(as).modifies("leaf");
    }
});
function setParams(layout, params, _) {
    for(let p, i = 0, n = params.length; i < n; ++i){
        p = params[i];
        if (p in _) layout[p](_[p]);
    }
}
function setFields(node, fields, as) {
    const t = node.data, n = fields.length - 1;
    for(let i = 0; i < n; ++i)t[as[i]] = node[fields[i]];
    t[as[n]] = node.children ? node.children.length : 0;
}
const Output = [
    "x",
    "y",
    "r",
    "depth",
    "children"
];
/**
 * Packed circle tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */ function Pack(params) {
    HierarchyLayout.call(this, params);
}
Pack.Definition = {
    "type": "Pack",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "padding",
            "type": "number",
            "default": 0
        },
        {
            "name": "radius",
            "type": "field",
            "default": null
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": Output.length,
            "default": Output
        }
    ]
};
(0, _vegaUtil.inherits)(Pack, HierarchyLayout, {
    layout: (0, _d3Hierarchy.pack),
    params: [
        "radius",
        "size",
        "padding"
    ],
    fields: Output
});
const Output$1 = [
    "x0",
    "y0",
    "x1",
    "y1",
    "depth",
    "children"
];
/**
 * Partition tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */ function Partition(params) {
    HierarchyLayout.call(this, params);
}
Partition.Definition = {
    "type": "Partition",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "padding",
            "type": "number",
            "default": 0
        },
        {
            "name": "round",
            "type": "boolean",
            "default": false
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": Output$1.length,
            "default": Output$1
        }
    ]
};
(0, _vegaUtil.inherits)(Partition, HierarchyLayout, {
    layout: (0, _d3Hierarchy.partition),
    params: [
        "size",
        "round",
        "padding"
    ],
    fields: Output$1
});
/**
 * Stratify a collection of tuples into a tree structure based on
 * id and parent id fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.key - Unique key field for each tuple.
 * @param {function(object): *} params.parentKey - Field with key for parent tuple.
 */ function Stratify(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Stratify.Definition = {
    "type": "Stratify",
    "metadata": {
        "treesource": true
    },
    "params": [
        {
            "name": "key",
            "type": "field",
            "required": true
        },
        {
            "name": "parentKey",
            "type": "field",
            "required": true
        }
    ]
};
(0, _vegaUtil.inherits)(Stratify, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (!pulse.source) (0, _vegaUtil.error)("Stratify transform requires an upstream data source.");
        let tree = this.value;
        const mod = _.modified(), out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE), run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution
        out.source = out.source.slice();
        if (run) tree = out.source.length ? lookup((0, _d3Hierarchy.stratify)().id(_.key).parentId(_.parentKey)(out.source), _.key, (0, _vegaUtil.truthy)) : lookup((0, _d3Hierarchy.stratify)()([
            {}
        ]), _.key, _.key);
        out.source.root = this.value = tree;
        return out;
    }
});
const Layouts = {
    tidy: (0, _d3Hierarchy.tree),
    cluster: (0, _d3Hierarchy.cluster)
};
const Output$2 = [
    "x",
    "y",
    "depth",
    "children"
];
/**
 * Tree layout. Depending on the method parameter, performs either
 * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function Tree(params) {
    HierarchyLayout.call(this, params);
}
Tree.Definition = {
    "type": "Tree",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "method",
            "type": "enum",
            "default": "tidy",
            "values": [
                "tidy",
                "cluster"
            ]
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "nodeSize",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "separation",
            "type": "boolean",
            "default": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": Output$2.length,
            "default": Output$2
        }
    ]
};
(0, _vegaUtil.inherits)(Tree, HierarchyLayout, {
    /**
   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
   */ layout (method) {
        const m = method || "tidy";
        if ((0, _vegaUtil.hasOwnProperty)(Layouts, m)) return Layouts[m]();
        else (0, _vegaUtil.error)("Unrecognized Tree layout method: " + m);
    },
    params: [
        "size",
        "nodeSize"
    ],
    fields: Output$2
});
/**
 * Generate tuples representing links between tree nodes.
 * The resulting tuples will contain 'source' and 'target' fields,
 * which point to parent and child node tuples, respectively.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function TreeLinks(params) {
    (0, _vegaDataflow.Transform).call(this, [], params);
}
TreeLinks.Definition = {
    "type": "TreeLinks",
    "metadata": {
        "tree": true,
        "generates": true,
        "changes": true
    },
    "params": []
};
(0, _vegaUtil.inherits)(TreeLinks, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const links = this.value, tree = pulse.source && pulse.source.root, out = pulse.fork(pulse.NO_SOURCE), lut = {};
        if (!tree) (0, _vegaUtil.error)("TreeLinks transform requires a tree data source.");
        if (pulse.changed(pulse.ADD_REM)) {
            // remove previous links
            out.rem = links; // build lookup table of valid tuples
            pulse.visit(pulse.SOURCE, (t)=>lut[(0, _vegaDataflow.tupleid)(t)] = 1); // generate links for all edges incident on valid tuples
            tree.each((node)=>{
                const t = node.data, p = node.parent && node.parent.data;
                if (p && lut[(0, _vegaDataflow.tupleid)(t)] && lut[(0, _vegaDataflow.tupleid)(p)]) out.add.push((0, _vegaDataflow.ingest)({
                    source: p,
                    target: t
                }));
            });
            this.value = out.add;
        } else if (pulse.changed(pulse.MOD)) {
            // build lookup table of modified tuples
            pulse.visit(pulse.MOD, (t)=>lut[(0, _vegaDataflow.tupleid)(t)] = 1); // gather links incident on modified tuples
            links.forEach((link)=>{
                if (lut[(0, _vegaDataflow.tupleid)(link.source)] || lut[(0, _vegaDataflow.tupleid)(link.target)]) out.mod.push(link);
            });
        }
        return out;
    }
});
const Tiles = {
    binary: (0, _d3Hierarchy.treemapBinary),
    dice: (0, _d3Hierarchy.treemapDice),
    slice: (0, _d3Hierarchy.treemapSlice),
    slicedice: (0, _d3Hierarchy.treemapSliceDice),
    squarify: (0, _d3Hierarchy.treemapSquarify),
    resquarify: (0, _d3Hierarchy.treemapResquarify)
};
const Output$3 = [
    "x0",
    "y0",
    "x1",
    "y1",
    "depth",
    "children"
];
/**
 * Treemap layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */ function Treemap(params) {
    HierarchyLayout.call(this, params);
}
Treemap.Definition = {
    "type": "Treemap",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "method",
            "type": "enum",
            "default": "squarify",
            "values": [
                "squarify",
                "resquarify",
                "binary",
                "dice",
                "slice",
                "slicedice"
            ]
        },
        {
            "name": "padding",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingInner",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingOuter",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingTop",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingRight",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingBottom",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingLeft",
            "type": "number",
            "default": 0
        },
        {
            "name": "ratio",
            "type": "number",
            "default": 1.618033988749895
        },
        {
            "name": "round",
            "type": "boolean",
            "default": false
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": Output$3.length,
            "default": Output$3
        }
    ]
};
(0, _vegaUtil.inherits)(Treemap, HierarchyLayout, {
    /**
   * Treemap layout generator. Adds 'method' and 'ratio' parameters
   * to configure the underlying tile method.
   */ layout () {
        const x = (0, _d3Hierarchy.treemap)();
        x.ratio = (_)=>{
            const t = x.tile();
            if (t.ratio) x.tile(t.ratio(_));
        };
        x.method = (_)=>{
            if ((0, _vegaUtil.hasOwnProperty)(Tiles, _)) x.tile(Tiles[_]);
            else (0, _vegaUtil.error)("Unrecognized Treemap layout method: " + _);
        };
        return x;
    },
    params: [
        "method",
        "ratio",
        "size",
        "round",
        "padding",
        "paddingInner",
        "paddingOuter",
        "paddingTop",
        "paddingRight",
        "paddingBottom",
        "paddingLeft"
    ],
    fields: Output$3
});

},{"vega-dataflow":"3NitK","vega-util":"bApja","d3-hierarchy":"4fr5p","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4fr5p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cluster", ()=>(0, _clusterJsDefault.default));
parcelHelpers.export(exports, "hierarchy", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "pack", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "packSiblings", ()=>(0, _siblingsJsDefault.default));
parcelHelpers.export(exports, "packEnclose", ()=>(0, _encloseJsDefault.default));
parcelHelpers.export(exports, "partition", ()=>(0, _partitionJsDefault.default));
parcelHelpers.export(exports, "stratify", ()=>(0, _stratifyJsDefault.default));
parcelHelpers.export(exports, "tree", ()=>(0, _treeJsDefault.default));
parcelHelpers.export(exports, "treemap", ()=>(0, _indexJsDefault2.default));
parcelHelpers.export(exports, "treemapBinary", ()=>(0, _binaryJsDefault.default));
parcelHelpers.export(exports, "treemapDice", ()=>(0, _diceJsDefault.default));
parcelHelpers.export(exports, "treemapSlice", ()=>(0, _sliceJsDefault.default));
parcelHelpers.export(exports, "treemapSliceDice", ()=>(0, _sliceDiceJsDefault.default));
parcelHelpers.export(exports, "treemapSquarify", ()=>(0, _squarifyJsDefault.default));
parcelHelpers.export(exports, "treemapResquarify", ()=>(0, _resquarifyJsDefault.default));
var _clusterJs = require("./cluster.js");
var _clusterJsDefault = parcelHelpers.interopDefault(_clusterJs);
var _indexJs = require("./hierarchy/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./pack/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _siblingsJs = require("./pack/siblings.js");
var _siblingsJsDefault = parcelHelpers.interopDefault(_siblingsJs);
var _encloseJs = require("./pack/enclose.js");
var _encloseJsDefault = parcelHelpers.interopDefault(_encloseJs);
var _partitionJs = require("./partition.js");
var _partitionJsDefault = parcelHelpers.interopDefault(_partitionJs);
var _stratifyJs = require("./stratify.js");
var _stratifyJsDefault = parcelHelpers.interopDefault(_stratifyJs);
var _treeJs = require("./tree.js");
var _treeJsDefault = parcelHelpers.interopDefault(_treeJs);
var _indexJs2 = require("./treemap/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _binaryJs = require("./treemap/binary.js");
var _binaryJsDefault = parcelHelpers.interopDefault(_binaryJs);
var _diceJs = require("./treemap/dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./treemap/slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _sliceDiceJs = require("./treemap/sliceDice.js");
var _sliceDiceJsDefault = parcelHelpers.interopDefault(_sliceDiceJs);
var _squarifyJs = require("./treemap/squarify.js");
var _squarifyJsDefault = parcelHelpers.interopDefault(_squarifyJs);
var _resquarifyJs = require("./treemap/resquarify.js");
var _resquarifyJsDefault = parcelHelpers.interopDefault(_resquarifyJs);

},{"./cluster.js":"fviPU","./hierarchy/index.js":"jtgBj","./pack/index.js":"eQFOB","./pack/siblings.js":"8RhM7","./pack/enclose.js":"gBh5f","./partition.js":"hfHoW","./stratify.js":"1euRH","./tree.js":"5MDZW","./treemap/index.js":"ew6JB","./treemap/binary.js":"8vqlk","./treemap/dice.js":"c7pGx","./treemap/slice.js":"c9bya","./treemap/sliceDice.js":"fbNXv","./treemap/squarify.js":"dnoy6","./treemap/resquarify.js":"12ScZ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fviPU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
}
function meanXReduce(x, c) {
    return x + c.x;
}
function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
}
function maxYReduce(y, c) {
    return Math.max(y, c.y);
}
function leafLeft(node) {
    var children;
    while(children = node.children)node = children[0];
    return node;
}
function leafRight(node) {
    var children;
    while(children = node.children)node = children[children.length - 1];
    return node;
}
exports.default = function() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
    function cluster(root) {
        var previousNode, x = 0;
        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
            var children = node.children;
            if (children) {
                node.x = meanX(children);
                node.y = maxY(children);
            } else {
                node.x = previousNode ? x += separation(node, previousNode) : 0;
                node.y = 0;
                previousNode = node;
            }
        });
        var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
            node.x = (node.x - root.x) * dx;
            node.y = (root.y - node.y) * dy;
        } : function(node) {
            node.x = (node.x - x0) / (x1 - x0) * dx;
            node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
    }
    cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
    };
    cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return cluster;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jtgBj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "computeHeight", ()=>computeHeight);
parcelHelpers.export(exports, "Node", ()=>Node);
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _eachBeforeJs = require("./eachBefore.js");
var _eachBeforeJsDefault = parcelHelpers.interopDefault(_eachBeforeJs);
var _eachAfterJs = require("./eachAfter.js");
var _eachAfterJsDefault = parcelHelpers.interopDefault(_eachAfterJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _ancestorsJs = require("./ancestors.js");
var _ancestorsJsDefault = parcelHelpers.interopDefault(_ancestorsJs);
var _descendantsJs = require("./descendants.js");
var _descendantsJsDefault = parcelHelpers.interopDefault(_descendantsJs);
var _leavesJs = require("./leaves.js");
var _leavesJsDefault = parcelHelpers.interopDefault(_leavesJs);
var _linksJs = require("./links.js");
var _linksJsDefault = parcelHelpers.interopDefault(_linksJs);
var _iteratorJs = require("./iterator.js");
var _iteratorJsDefault = parcelHelpers.interopDefault(_iteratorJs);
function hierarchy(data, children) {
    if (data instanceof Map) {
        data = [
            undefined,
            data
        ];
        if (children === undefined) children = mapChildren;
    } else if (children === undefined) children = objectChildren;
    var root = new Node(data), node, nodes = [
        root
    ], child, childs, i, n;
    while(node = nodes.pop())if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = childs[i] = new Node(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
        }
    }
    return root.eachBefore(computeHeight);
}
exports.default = hierarchy;
function node_copy() {
    return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
    return d.children;
}
function mapChildren(d) {
    return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
    if (node.data.value !== undefined) node.value = node.data.value;
    node.data = node.data.data;
}
function computeHeight(node) {
    var height = 0;
    do node.height = height;
    while ((node = node.parent) && node.height < ++height);
}
function Node(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
}
Node.prototype = hierarchy.prototype = {
    constructor: Node,
    count: (0, _countJsDefault.default),
    each: (0, _eachJsDefault.default),
    eachAfter: (0, _eachAfterJsDefault.default),
    eachBefore: (0, _eachBeforeJsDefault.default),
    find: (0, _findJsDefault.default),
    sum: (0, _sumJsDefault.default),
    sort: (0, _sortJsDefault.default),
    path: (0, _pathJsDefault.default),
    ancestors: (0, _ancestorsJsDefault.default),
    descendants: (0, _descendantsJsDefault.default),
    leaves: (0, _leavesJsDefault.default),
    links: (0, _linksJsDefault.default),
    copy: node_copy,
    [Symbol.iterator]: (0, _iteratorJsDefault.default)
};

},{"./count.js":"jNzMu","./each.js":"8q3O0","./eachBefore.js":"kBI99","./eachAfter.js":"goYvF","./find.js":"dotdr","./sum.js":"6wYAA","./sort.js":"ljhs0","./path.js":"ecIKT","./ancestors.js":"9BIjB","./descendants.js":"6MhHV","./leaves.js":"jpVT1","./links.js":"eJseT","./iterator.js":"aGwDK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jNzMu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function count(node) {
    var sum = 0, children = node.children, i = children && children.length;
    if (!i) sum = 1;
    else while(--i >= 0)sum += children[i].value;
    node.value = sum;
}
exports.default = function() {
    return this.eachAfter(count);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8q3O0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    let index = -1;
    for (const node of this)callback.call(that, node, ++index, this);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kBI99":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    var node = this, nodes = [
        node
    ], children, i, index = -1;
    while(node = nodes.pop()){
        callback.call(that, node, ++index, this);
        if (children = node.children) for(i = children.length - 1; i >= 0; --i)nodes.push(children[i]);
    }
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"goYvF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    var node = this, nodes = [
        node
    ], next = [], children, i, n, index = -1;
    while(node = nodes.pop()){
        next.push(node);
        if (children = node.children) for(i = 0, n = children.length; i < n; ++i)nodes.push(children[i]);
    }
    while(node = next.pop())callback.call(that, node, ++index, this);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dotdr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    let index = -1;
    for (const node of this){
        if (callback.call(that, node, ++index, this)) return node;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6wYAA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(value) {
    return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
        while(--i >= 0)sum += children[i].value;
        node.value = sum;
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ljhs0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(compare) {
    return this.eachBefore(function(node) {
        if (node.children) node.children.sort(compare);
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ecIKT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(end) {
    var start = this, ancestor = leastCommonAncestor(start, end), nodes = [
        start
    ];
    while(start !== ancestor){
        start = start.parent;
        nodes.push(start);
    }
    var k = nodes.length;
    while(end !== ancestor){
        nodes.splice(k, 0, end);
        end = end.parent;
    }
    return nodes;
};
function leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while(a === b){
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
    }
    return c;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9BIjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var node = this, nodes = [
        node
    ];
    while(node = node.parent)nodes.push(node);
    return nodes;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6MhHV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return Array.from(this);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jpVT1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var leaves = [];
    this.eachBefore(function(node) {
        if (!node.children) leaves.push(node);
    });
    return leaves;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eJseT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var root = this, links = [];
    root.each(function(node) {
        if (node !== root) links.push({
            source: node.parent,
            target: node
        });
    });
    return links;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aGwDK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function*() {
    var node = this, current, next = [
        node
    ], children, i, n;
    do {
        current = next.reverse(), next = [];
        while(node = current.pop()){
            yield node;
            if (children = node.children) for(i = 0, n = children.length; i < n; ++i)next.push(children[i]);
        }
    }while (next.length);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eQFOB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _siblingsJs = require("./siblings.js");
var _accessorsJs = require("../accessors.js");
var _constantJs = require("../constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
function defaultRadius(d) {
    return Math.sqrt(d.value);
}
exports.default = function() {
    var radius = null, dx = 1, dy = 1, padding = (0, _constantJs.constantZero);
    function pack(root) {
        root.x = dx / 2, root.y = dy / 2;
        if (radius) root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
        else root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren((0, _constantJs.constantZero), 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        return root;
    }
    pack.radius = function(x) {
        return arguments.length ? (radius = (0, _accessorsJs.optional)(x), pack) : radius;
    };
    pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
            dx,
            dy
        ];
    };
    pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : (0, _constantJsDefault.default)(+x), pack) : padding;
    };
    return pack;
};
function radiusLeaf(radius) {
    return function(node) {
        if (!node.children) node.r = Math.max(0, +radius(node) || 0);
    };
}
function packChildren(padding, k) {
    return function(node) {
        if (children = node.children) {
            var children, i, n = children.length, r = padding(node) * k || 0, e;
            if (r) for(i = 0; i < n; ++i)children[i].r += r;
            e = (0, _siblingsJs.packEnclose)(children);
            if (r) for(i = 0; i < n; ++i)children[i].r -= r;
            node.r = e + r;
        }
    };
}
function translateChild(k) {
    return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
            node.x = parent.x + k * node.x;
            node.y = parent.y + k * node.y;
        }
    };
}

},{"./siblings.js":"8RhM7","../accessors.js":"i242w","../constant.js":"i6Ely","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8RhM7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packEnclose", ()=>packEnclose);
var _arrayJs = require("../array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _encloseJs = require("./enclose.js");
var _encloseJsDefault = parcelHelpers.interopDefault(_encloseJs);
function place(b, a, c) {
    var dx = b.x - a.x, x, a2, dy = b.y - a.y, y, b2, d2 = dx * dx + dy * dy;
    if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
            x = (d2 + b2 - a2) / (2 * d2);
            y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
            c.x = b.x - x * dx - y * dy;
            c.y = b.y - x * dy + y * dx;
        } else {
            x = (d2 + a2 - b2) / (2 * d2);
            y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
            c.x = a.x + x * dx - y * dy;
            c.y = a.y + x * dy + y * dx;
        }
    } else {
        c.x = a.x + c.r;
        c.y = a.y;
    }
}
function intersects(a, b) {
    var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function score(node) {
    var a = node._, b = node.next._, ab = a.r + b.r, dx = (a.x * b.r + b.x * a.r) / ab, dy = (a.y * b.r + b.y * a.r) / ab;
    return dx * dx + dy * dy;
}
function Node(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
}
function packEnclose(circles) {
    if (!(n = (circles = (0, _arrayJsDefault.default)(circles)).length)) return 0;
    var a, b, c, n, aa, ca, i, j, k, sj, sk;
    // Place the first circle.
    a = circles[0], a.x = 0, a.y = 0;
    if (!(n > 1)) return a.r;
    // Place the second circle.
    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
    if (!(n > 2)) return a.r + b.r;
    // Place the third circle.
    place(b, a, c = circles[2]);
    // Initialize the front-chain using the first three circles a, b and c.
    a = new Node(a), b = new Node(b), c = new Node(c);
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a;
    // Attempt to place each remaining circle…
    pack: for(i = 3; i < n; ++i){
        place(a._, b._, c = circles[i]), c = new Node(c);
        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do if (sj <= sk) {
            if (intersects(j._, c._)) {
                b = j, a.next = b, b.previous = a, --i;
                continue pack;
            }
            sj += j._.r, j = j.next;
        } else {
            if (intersects(k._, c._)) {
                a = k, a.next = b, b.previous = a, --i;
                continue pack;
            }
            sk += k._.r, k = k.previous;
        }
        while (j !== k.next);
        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;
        // Compute the new closest circle pair to the centroid.
        aa = score(a);
        while((c = c.next) !== b)if ((ca = score(c)) < aa) a = c, aa = ca;
        b = a.next;
    }
    // Compute the enclosing circle of the front chain.
    a = [
        b._
    ], c = b;
    while((c = c.next) !== b)a.push(c._);
    c = (0, _encloseJsDefault.default)(a);
    // Translate the circles to put the enclosing circle around the origin.
    for(i = 0; i < n; ++i)a = circles[i], a.x -= c.x, a.y -= c.y;
    return c.r;
}
exports.default = function(circles) {
    packEnclose(circles);
    return circles;
};

},{"../array.js":"4vcaT","./enclose.js":"gBh5f","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4vcaT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shuffle", ()=>shuffle);
exports.default = function(x) {
    return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
     : Array.from(x); // Map, Set, iterable, string, or anything else
};
function shuffle(array) {
    var m = array.length, t, i;
    while(m){
        i = Math.random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
    }
    return array;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gBh5f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayJs = require("../array.js");
exports.default = function(circles) {
    var i = 0, n = (circles = (0, _arrayJs.shuffle)(Array.from(circles))).length, B = [], p, e;
    while(i < n){
        p = circles[i];
        if (e && enclosesWeak(e, p)) ++i;
        else e = encloseBasis(B = extendBasis(B, p)), i = 0;
    }
    return e;
};
function extendBasis(B, p) {
    var i, j;
    if (enclosesWeakAll(p, B)) return [
        p
    ];
    // If we get here then B must have at least one element.
    for(i = 0; i < B.length; ++i){
        if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) return [
            B[i],
            p
        ];
    }
    // If we get here then B must have at least two elements.
    for(i = 0; i < B.length - 1; ++i)for(j = i + 1; j < B.length; ++j){
        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) return [
            B[i],
            B[j],
            p
        ];
    }
    // If we get here then something is very wrong.
    throw new Error;
}
function enclosesNot(a, b) {
    var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
    return dr < 0 || dr * dr < dx * dx + dy * dy;
}
function enclosesWeak(a, b) {
    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function enclosesWeakAll(a, B) {
    for(var i = 0; i < B.length; ++i){
        if (!enclosesWeak(a, B[i])) return false;
    }
    return true;
}
function encloseBasis(B) {
    switch(B.length){
        case 1:
            return encloseBasis1(B[0]);
        case 2:
            return encloseBasis2(B[0], B[1]);
        case 3:
            return encloseBasis3(B[0], B[1], B[2]);
    }
}
function encloseBasis1(a) {
    return {
        x: a.x,
        y: a.y,
        r: a.r
    };
}
function encloseBasis2(a, b) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
    };
}
function encloseBasis3(a, b, c) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = x1 - x2, a3 = x1 - x3, b2 = y1 - y2, b3 = y1 - y3, c2 = r2 - r1, c3 = r3 - r1, d1 = x1 * x1 + y1 * y1 - r1 * r1, d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2, d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (r1 + xa * xb + ya * yb), C = xa * xa + ya * ya - r1 * r1, r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
    return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
    };
}

},{"../array.js":"4vcaT","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i242w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "optional", ()=>optional);
parcelHelpers.export(exports, "required", ()=>required);
function optional(f) {
    return f == null ? null : required(f);
}
function required(f) {
    if (typeof f !== "function") throw new Error;
    return f;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i6Ely":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constantZero", ()=>constantZero);
function constantZero() {
    return 0;
}
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hfHoW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundJs = require("./treemap/round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _diceJs = require("./treemap/dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
exports.default = function() {
    var dx = 1, dy = 1, padding = 0, round = false;
    function partition(root) {
        var n = root.height + 1;
        root.x0 = root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round) root.eachBefore((0, _roundJsDefault.default));
        return root;
    }
    function positionNode(dy, n) {
        return function(node) {
            if (node.children) (0, _diceJsDefault.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
            var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1;
        };
    }
    partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
    };
    partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [
            dx,
            dy
        ];
    };
    partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
    };
    return partition;
};

},{"./treemap/round.js":"9PNun","./treemap/dice.js":"c7pGx","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9PNun":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"c7pGx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
    while(++i < n){
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1euRH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _accessorsJs = require("./accessors.js");
var _indexJs = require("./hierarchy/index.js");
var preroot = {
    depth: -1
}, ambiguous = {};
function defaultId(d) {
    return d.id;
}
function defaultParentId(d) {
    return d.parentId;
}
exports.default = function() {
    var id = defaultId, parentId = defaultParentId;
    function stratify(data) {
        var nodes = Array.from(data), n = nodes.length, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = new Map;
        for(i = 0; i < n; ++i){
            d = nodes[i], node = nodes[i] = new (0, _indexJs.Node)(d);
            if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
                nodeKey = node.id = nodeId;
                nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
            }
            if ((nodeId = parentId(d, i, data)) != null && (nodeId += "")) node.parent = nodeId;
        }
        for(i = 0; i < n; ++i){
            node = nodes[i];
            if (nodeId = node.parent) {
                parent = nodeByKey.get(nodeId);
                if (!parent) throw new Error("missing: " + nodeId);
                if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
                if (parent.children) parent.children.push(node);
                else parent.children = [
                    node
                ];
                node.parent = parent;
            } else {
                if (root) throw new Error("multiple roots");
                root = node;
            }
        }
        if (!root) throw new Error("no root");
        root.parent = preroot;
        root.eachBefore(function(node) {
            node.depth = node.parent.depth + 1;
            --n;
        }).eachBefore((0, _indexJs.computeHeight));
        root.parent = null;
        if (n > 0) throw new Error("cycle");
        return root;
    }
    stratify.id = function(x) {
        return arguments.length ? (id = (0, _accessorsJs.required)(x), stratify) : id;
    };
    stratify.parentId = function(x) {
        return arguments.length ? (parentId = (0, _accessorsJs.required)(x), stratify) : parentId;
    };
    return stratify;
};

},{"./accessors.js":"i242w","./hierarchy/index.js":"jtgBj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5MDZW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./hierarchy/index.js");
function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
}
// This function works analogously to nextLeft.
function nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
}
// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
}
// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while(--i >= 0){
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
    }
}
// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
}
function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null; // default ancestor
    this.a = this; // ancestor
    this.z = 0; // prelim
    this.m = 0; // mod
    this.c = 0; // change
    this.s = 0; // shift
    this.t = null; // thread
    this.i = i; // number
}
TreeNode.prototype = Object.create((0, _indexJs.Node).prototype);
function treeRoot(root) {
    var tree = new TreeNode(root, 0), node, nodes = [
        tree
    ], child, children, i, n;
    while(node = nodes.pop())if (children = node._.children) {
        node.children = new Array(n = children.length);
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
        }
    }
    (tree.parent = new TreeNode(null, 0)).children = [
        tree
    ];
    return tree;
}
// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
exports.default = function() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = null;
    function tree(root) {
        var t = treeRoot(root);
        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);
        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);
        else {
            var left = root, right = root, bottom = root;
            root.eachBefore(function(node) {
                if (node.x < left.x) left = node;
                if (node.x > right.x) right = node;
                if (node.depth > bottom.depth) bottom = node;
            });
            var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
            root.eachBefore(function(node) {
                node.x = (node.x + tx) * kx;
                node.y = node.depth * ky;
            });
        }
        return root;
    }
    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.
    function firstWalk(v) {
        var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
        if (children) {
            executeShifts(v);
            var midpoint = (children[0].z + children[children.length - 1].z) / 2;
            if (w) {
                v.z = w.z + separation(v._, w._);
                v.m = v.z - midpoint;
            } else v.z = midpoint;
        } else if (w) v.z = w.z + separation(v._, w._);
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    // Computes all real x-coordinates by summing up the modifiers recursively.
    function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
    }
    // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).
    function apportion(v, w, ancestor) {
        if (w) {
            var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
            while(vim = nextRight(vim), vip = nextLeft(vip), vim && vip){
                vom = nextLeft(vom);
                vop = nextRight(vop);
                vop.a = v;
                shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                if (shift > 0) {
                    moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                    sip += shift;
                    sop += shift;
                }
                sim += vim.m;
                sip += vip.m;
                som += vom.m;
                sop += vop.m;
            }
            if (vim && !nextRight(vop)) {
                vop.t = vim;
                vop.m += sim - sop;
            }
            if (vip && !nextLeft(vom)) {
                vom.t = vip;
                vom.m += sip - som;
                ancestor = v;
            }
        }
        return ancestor;
    }
    function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
    }
    tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
    };
    tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return tree;
};

},{"./hierarchy/index.js":"jtgBj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ew6JB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _squarifyJs = require("./squarify.js");
var _squarifyJsDefault = parcelHelpers.interopDefault(_squarifyJs);
var _accessorsJs = require("../accessors.js");
var _constantJs = require("../constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function() {
    var tile = (0, _squarifyJsDefault.default), round = false, dx = 1, dy = 1, paddingStack = [
        0
    ], paddingInner = (0, _constantJs.constantZero), paddingTop = (0, _constantJs.constantZero), paddingRight = (0, _constantJs.constantZero), paddingBottom = (0, _constantJs.constantZero), paddingLeft = (0, _constantJs.constantZero);
    function treemap(root) {
        root.x0 = root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [
            0
        ];
        if (round) root.eachBefore((0, _roundJsDefault.default));
        return root;
    }
    function positionNode(node) {
        var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
            p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
            x0 += paddingLeft(node) - p;
            y0 += paddingTop(node) - p;
            x1 -= paddingRight(node) - p;
            y1 -= paddingBottom(node) - p;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            tile(node, x0, y0, x1, y1);
        }
    }
    treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
    };
    treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
            dx,
            dy
        ];
    };
    treemap.tile = function(x) {
        return arguments.length ? (tile = (0, _accessorsJs.required)(x), treemap) : tile;
    };
    treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };
    treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constantJsDefault.default)(+x), treemap) : paddingInner;
    };
    treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };
    treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constantJsDefault.default)(+x), treemap) : paddingTop;
    };
    treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constantJsDefault.default)(+x), treemap) : paddingRight;
    };
    treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constantJsDefault.default)(+x), treemap) : paddingBottom;
    };
    treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constantJsDefault.default)(+x), treemap) : paddingLeft;
    };
    return treemap;
};

},{"./round.js":"9PNun","./squarify.js":"dnoy6","../accessors.js":"i242w","../constant.js":"i6Ely","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dnoy6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "phi", ()=>phi);
parcelHelpers.export(exports, "squarifyRatio", ()=>squarifyRatio);
var _diceJs = require("./dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
    while(i0 < n){
        dx = x1 - x0, dy = y1 - y0;
        // Find the next non-empty node.
        do sumValue = nodes[i1++].value;
        while (!sumValue && i1 < n);
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);
        // Keep adding nodes while the aspect ratio maintains or improves.
        for(; i1 < n; ++i1){
            sumValue += nodeValue = nodes[i1].value;
            if (nodeValue < minValue) minValue = nodeValue;
            if (nodeValue > maxValue) maxValue = nodeValue;
            beta = sumValue * sumValue * alpha;
            newRatio = Math.max(maxValue / beta, beta / minValue);
            if (newRatio > minRatio) {
                sumValue -= nodeValue;
                break;
            }
            minRatio = newRatio;
        }
        // Position and record the row orientation.
        rows.push(row = {
            value: sumValue,
            dice: dx < dy,
            children: nodes.slice(i0, i1)
        });
        if (row.dice) (0, _diceJsDefault.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else (0, _sliceJsDefault.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
    }
    return rows;
}
exports.default = function custom(ratio) {
    function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
    }
    squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return squarify;
}(phi);

},{"./dice.js":"c7pGx","./slice.js":"c9bya","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"c9bya":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
    while(++i < n){
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8vqlk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(parent, x0, y0, x1, y1) {
    var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
    for(sums[0] = sum = i = 0; i < n; ++i)sums[i + 1] = sum += nodes[i].value;
    partition(0, n, parent.value, x0, y0, x1, y1);
    function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
            var node = nodes[i];
            node.x0 = x0, node.y0 = y0;
            node.x1 = x1, node.y1 = y1;
            return;
        }
        var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
        while(k < hi){
            var mid = k + hi >>> 1;
            if (sums[mid] < valueTarget) k = mid + 1;
            else hi = mid;
        }
        if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
        var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
        if (x1 - x0 > y1 - y0) {
            var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
            partition(i, k, valueLeft, x0, y0, xk, y1);
            partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
            var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
            partition(i, k, valueLeft, x0, y0, x1, yk);
            partition(k, j, valueRight, x0, yk, x1, y1);
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fbNXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _diceJs = require("./dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
exports.default = function(parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? (0, _sliceJsDefault.default) : (0, _diceJsDefault.default))(parent, x0, y0, x1, y1);
};

},{"./dice.js":"c7pGx","./slice.js":"c9bya","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"12ScZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _diceJs = require("./dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _squarifyJs = require("./squarify.js");
exports.default = function custom(ratio) {
    function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && rows.ratio === ratio) {
            var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
            while(++j < m){
                row = rows[j], nodes = row.children;
                for(i = row.value = 0, n = nodes.length; i < n; ++i)row.value += nodes[i].value;
                if (row.dice) (0, _diceJsDefault.default)(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
                else (0, _sliceJsDefault.default)(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
                value -= row.value;
            }
        } else {
            parent._squarify = rows = (0, _squarifyJs.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
            rows.ratio = ratio;
        }
    }
    resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return resquarify;
}((0, _squarifyJs.phi));

},{"./dice.js":"c7pGx","./slice.js":"c9bya","./squarify.js":"dnoy6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lZyUZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "label", ()=>Label);
var _vegaCanvas = require("vega-canvas");
var _vegaDataflow = require("vega-dataflow");
var _vegaScenegraph = require("vega-scenegraph");
var _vegaUtil = require("vega-util");
const ALPHA_MASK = 0xff000000; // alpha value equivalent to opacity 0.0625
const INSIDE_OPACITY_IN_ALPHA = 0x10000000;
const INSIDE_OPACITY = 0.0625;
function baseBitmaps($, data) {
    const bitmap = $.bitmap(); // when there is no base mark but data points are to be avoided
    (data || []).forEach((d)=>bitmap.set($(d.boundary[0]), $(d.boundary[3])));
    return [
        bitmap,
        undefined
    ];
}
function markBitmaps($, avoidMarks, labelInside, isGroupArea) {
    // create canvas
    const width = $.width, height = $.height, border = labelInside || isGroupArea, context = (0, _vegaCanvas.canvas)(width, height).getContext("2d"); // render all marks to be avoided into canvas
    avoidMarks.forEach((items)=>draw(context, items, border)); // get canvas buffer, create bitmaps
    const buffer = new Uint32Array(context.getImageData(0, 0, width, height).data.buffer), layer1 = $.bitmap(), layer2 = border && $.bitmap(); // populate bitmap layers
    let x, y, u, v, alpha;
    for(y = 0; y < height; ++y)for(x = 0; x < width; ++x){
        alpha = buffer[y * width + x] & ALPHA_MASK;
        if (alpha) {
            u = $(x);
            v = $(y);
            if (!isGroupArea) layer1.set(u, v); // update interior bitmap
            if (border && alpha ^ INSIDE_OPACITY_IN_ALPHA) layer2.set(u, v); // update border bitmap
        }
    }
    return [
        layer1,
        layer2
    ];
}
function draw(context, items, interior) {
    if (!items.length) return;
    const type = items[0].mark.marktype;
    if (type === "group") items.forEach((group)=>{
        group.items.forEach((mark)=>draw(context, mark.items, interior));
    });
    else (0, _vegaScenegraph.Marks)[type].draw(context, {
        items: interior ? items.map(prepare) : items
    });
}
/**
 * Prepare item before drawing into canvas (setting stroke and opacity)
 * @param {object} source item to be prepared
 * @returns prepared item
 */ function prepare(source) {
    const item = (0, _vegaDataflow.rederive)(source, {});
    if (item.stroke) item.strokeOpacity = 1;
    if (item.fill) {
        item.fillOpacity = INSIDE_OPACITY;
        item.stroke = "#000";
        item.strokeOpacity = 1;
        item.strokeWidth = 2;
    }
    return item;
}
const DIV = 5, // bit shift from x, y index to bit vector array index
MOD = 31, // bit mask for index lookup within a bit vector
SIZE = 32, // individual bit vector size
RIGHT0 = new Uint32Array(SIZE + 1), // left-anchored bit vectors, full -> 0
RIGHT1 = new Uint32Array(SIZE + 1); // right-anchored bit vectors, 0 -> full
RIGHT1[0] = 0;
RIGHT0[0] = ~RIGHT1[0];
for(let i = 1; i <= SIZE; ++i){
    RIGHT1[i] = RIGHT1[i - 1] << 1 | 1;
    RIGHT0[i] = ~RIGHT1[i];
}
function Bitmap(w, h) {
    const array = new Uint32Array(~~((w * h + SIZE) / SIZE));
    function _set(index, mask) {
        array[index] |= mask;
    }
    function _clear(index, mask) {
        array[index] &= mask;
    }
    return {
        array: array,
        get: (x, y)=>{
            const index = y * w + x;
            return array[index >>> DIV] & 1 << (index & MOD);
        },
        set: (x, y)=>{
            const index = y * w + x;
            _set(index >>> DIV, 1 << (index & MOD));
        },
        clear: (x, y)=>{
            const index = y * w + x;
            _clear(index >>> DIV, ~(1 << (index & MOD)));
        },
        getRange: (x, y, x2, y2)=>{
            let r = y2, start, end, indexStart, indexEnd;
            for(; r >= y; --r){
                start = r * w + x;
                end = r * w + x2;
                indexStart = start >>> DIV;
                indexEnd = end >>> DIV;
                if (indexStart === indexEnd) {
                    if (array[indexStart] & RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]) return true;
                } else {
                    if (array[indexStart] & RIGHT0[start & MOD]) return true;
                    if (array[indexEnd] & RIGHT1[(end & MOD) + 1]) return true;
                    for(let i = indexStart + 1; i < indexEnd; ++i){
                        if (array[i]) return true;
                    }
                }
            }
            return false;
        },
        setRange: (x, y, x2, y2)=>{
            let start, end, indexStart, indexEnd, i;
            for(; y <= y2; ++y){
                start = y * w + x;
                end = y * w + x2;
                indexStart = start >>> DIV;
                indexEnd = end >>> DIV;
                if (indexStart === indexEnd) _set(indexStart, RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]);
                else {
                    _set(indexStart, RIGHT0[start & MOD]);
                    _set(indexEnd, RIGHT1[(end & MOD) + 1]);
                    for(i = indexStart + 1; i < indexEnd; ++i)_set(i, 0xffffffff);
                }
            }
        },
        clearRange: (x, y, x2, y2)=>{
            let start, end, indexStart, indexEnd, i;
            for(; y <= y2; ++y){
                start = y * w + x;
                end = y * w + x2;
                indexStart = start >>> DIV;
                indexEnd = end >>> DIV;
                if (indexStart === indexEnd) _clear(indexStart, RIGHT1[start & MOD] | RIGHT0[(end & MOD) + 1]);
                else {
                    _clear(indexStart, RIGHT1[start & MOD]);
                    _clear(indexEnd, RIGHT0[(end & MOD) + 1]);
                    for(i = indexStart + 1; i < indexEnd; ++i)_clear(i, 0);
                }
            }
        },
        outOfBounds: (x, y, x2, y2)=>x < 0 || y < 0 || y2 >= h || x2 >= w
    };
}
function scaler(width, height, padding) {
    const ratio = Math.max(1, Math.sqrt(width * height / 1e6)), w = ~~((width + 2 * padding + ratio) / ratio), h = ~~((height + 2 * padding + ratio) / ratio), scale = (_)=>~~((_ + padding) / ratio);
    scale.invert = (_)=>_ * ratio - padding;
    scale.bitmap = ()=>Bitmap(w, h);
    scale.ratio = ratio;
    scale.padding = padding;
    scale.width = width;
    scale.height = height;
    return scale;
}
function placeAreaLabelNaive($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height; // try to place a label within an input area mark
    return function(d) {
        const items = d.datum.datum.items[markIndex].items, // area points
        n = items.length, // number of points
        textHeight = d.datum.fontSize, // label width
        textWidth = (0, _vegaScenegraph.textMetrics).width(d.datum, d.datum.text); // label height
        let maxAreaWidth = 0, x1, x2, y1, y2, x, y, areaWidth; // for each area sample point
        for(let i = 0; i < n; ++i){
            x1 = items[i].x;
            y1 = items[i].y;
            x2 = items[i].x2 === undefined ? x1 : items[i].x2;
            y2 = items[i].y2 === undefined ? y1 : items[i].y2;
            x = (x1 + x2) / 2;
            y = (y1 + y2) / 2;
            areaWidth = Math.abs(x2 - x1 + y2 - y1);
            if (areaWidth >= maxAreaWidth) {
                maxAreaWidth = areaWidth;
                d.x = x;
                d.y = y;
            }
        }
        x = textWidth / 2;
        y = textHeight / 2;
        x1 = d.x - x;
        x2 = d.x + x;
        y1 = d.y - y;
        y2 = d.y + y;
        d.align = "center";
        if (x1 < 0 && x2 <= width) d.align = "left";
        else if (0 <= x1 && width < x2) d.align = "right";
        d.baseline = "middle";
        if (y1 < 0 && y2 <= height) d.baseline = "top";
        else if (0 <= y1 && height < y2) d.baseline = "bottom";
        return true;
    };
}
function outOfBounds(x, y, textWidth, textHeight, width, height) {
    let r = textWidth / 2;
    return x - r < 0 || x + r > width || y - (r = textHeight / 2) < 0 || y + r > height;
}
function collision($, x, y, textHeight, textWidth, h, bm0, bm1) {
    const w = textWidth * h / (textHeight * 2), x1 = $(x - w), x2 = $(x + w), y1 = $(y - (h = h / 2)), y2 = $(y + h);
    return bm0.outOfBounds(x1, y1, x2, y2) || bm0.getRange(x1, y1, x2, y2) || bm1 && bm1.getRange(x1, y1, x2, y2);
}
function placeAreaLabelReducedSearch($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], // where labels have been placed
    bm1 = bitmaps[1]; // area outlines
    function tryLabel(_x, _y, maxSize, textWidth, textHeight) {
        const x = $.invert(_x), y = $.invert(_y);
        let lo = maxSize, hi = height, mid;
        if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
            // if the label fits at the current sample point,
            // perform binary search to find the largest font size that fits
            while(hi - lo >= 1){
                mid = (lo + hi) / 2;
                if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) hi = mid;
                else lo = mid;
            } // place label if current lower bound exceeds prior max font size
            if (lo > maxSize) return [
                x,
                y,
                lo,
                true
            ];
        }
    } // try to place a label within an input area mark
    return function(d) {
        const items = d.datum.datum.items[markIndex].items, // area points
        n = items.length, // number of points
        textHeight = d.datum.fontSize, // label width
        textWidth = (0, _vegaScenegraph.textMetrics).width(d.datum, d.datum.text); // label height
        let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x1, x2, y1, y2, x, y, _x, _y, _x1, _xMid, _x2, _y1, _yMid, _y2, areaWidth, result, swapTmp; // for each area sample point
        for(let i = 0; i < n; ++i){
            x1 = items[i].x;
            y1 = items[i].y;
            x2 = items[i].x2 === undefined ? x1 : items[i].x2;
            y2 = items[i].y2 === undefined ? y1 : items[i].y2;
            if (x1 > x2) {
                swapTmp = x1;
                x1 = x2;
                x2 = swapTmp;
            }
            if (y1 > y2) {
                swapTmp = y1;
                y1 = y2;
                y2 = swapTmp;
            }
            _x1 = $(x1);
            _x2 = $(x2);
            _xMid = ~~((_x1 + _x2) / 2);
            _y1 = $(y1);
            _y2 = $(y2);
            _yMid = ~~((_y1 + _y2) / 2); // search along the line from mid point between the 2 border to lower border
            for(_x = _xMid; _x >= _x1; --_x)for(_y = _yMid; _y >= _y1; --_y){
                result = tryLabel(_x, _y, maxSize, textWidth, textHeight);
                if (result) [d.x, d.y, maxSize, labelPlaced] = result;
            }
             // search along the line from mid point between the 2 border to upper border
            for(_x = _xMid; _x <= _x2; ++_x)for(_y = _yMid; _y <= _y2; ++_y){
                result = tryLabel(_x, _y, maxSize, textWidth, textHeight);
                if (result) [d.x, d.y, maxSize, labelPlaced] = result;
            }
             // place label at slice center if not placed through other means
            // and if we're not avoiding overlap with other areas
            if (!labelPlaced && !avoidBaseMark) {
                // one span is zero, hence we can add
                areaWidth = Math.abs(x2 - x1 + y2 - y1);
                x = (x1 + x2) / 2;
                y = (y1 + y2) / 2; // place label if it fits and improves the max area width
                if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
                    maxAreaWidth = areaWidth;
                    d.x = x;
                    d.y = y;
                    labelPlaced2 = true;
                }
            }
        } // record current label placement information, update label bitmap
        if (labelPlaced || labelPlaced2) {
            x = textWidth / 2;
            y = textHeight / 2;
            bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
            d.align = "center";
            d.baseline = "middle";
            return true;
        } else return false;
    };
}
const X_DIR = [
    -1,
    -1,
    1,
    1
];
const Y_DIR = [
    -1,
    1,
    -1,
    1
];
function placeAreaLabelFloodFill($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], // where labels have been placed
    bm1 = bitmaps[1], // area outlines
    bm2 = $.bitmap(); // flood-fill visitations
    // try to place a label within an input area mark
    return function(d) {
        const items = d.datum.datum.items[markIndex].items, // area points
        n = items.length, // number of points
        textHeight = d.datum.fontSize, // label width
        textWidth = (0, _vegaScenegraph.textMetrics).width(d.datum, d.datum.text), // label height
        stack = []; // flood fill stack
        let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x1, x2, y1, y2, x, y, _x, _y, lo, hi, mid, areaWidth; // for each area sample point
        for(let i = 0; i < n; ++i){
            x1 = items[i].x;
            y1 = items[i].y;
            x2 = items[i].x2 === undefined ? x1 : items[i].x2;
            y2 = items[i].y2 === undefined ? y1 : items[i].y2; // add scaled center point to stack
            stack.push([
                $((x1 + x2) / 2),
                $((y1 + y2) / 2)
            ]); // perform flood fill, visit points
            while(stack.length){
                [_x, _y] = stack.pop(); // exit if point already marked
                if (bm0.get(_x, _y) || bm1.get(_x, _y) || bm2.get(_x, _y)) continue; // mark point in flood fill bitmap
                // add search points for all (in bound) directions
                bm2.set(_x, _y);
                for(let j = 0; j < 4; ++j){
                    x = _x + X_DIR[j];
                    y = _y + Y_DIR[j];
                    if (!bm2.outOfBounds(x, y, x, y)) stack.push([
                        x,
                        y
                    ]);
                } // unscale point back to x, y space
                x = $.invert(_x);
                y = $.invert(_y);
                lo = maxSize;
                hi = height; // TODO: make this bound smaller
                if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
                    // if the label fits at the current sample point,
                    // perform binary search to find the largest font size that fits
                    while(hi - lo >= 1){
                        mid = (lo + hi) / 2;
                        if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) hi = mid;
                        else lo = mid;
                    } // place label if current lower bound exceeds prior max font size
                    if (lo > maxSize) {
                        d.x = x;
                        d.y = y;
                        maxSize = lo;
                        labelPlaced = true;
                    }
                }
            } // place label at slice center if not placed through other means
            // and if we're not avoiding overlap with other areas
            if (!labelPlaced && !avoidBaseMark) {
                // one span is zero, hence we can add
                areaWidth = Math.abs(x2 - x1 + y2 - y1);
                x = (x1 + x2) / 2;
                y = (y1 + y2) / 2; // place label if it fits and improves the max area width
                if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
                    maxAreaWidth = areaWidth;
                    d.x = x;
                    d.y = y;
                    labelPlaced2 = true;
                }
            }
        } // record current label placement information, update label bitmap
        if (labelPlaced || labelPlaced2) {
            x = textWidth / 2;
            y = textHeight / 2;
            bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
            d.align = "center";
            d.baseline = "middle";
            return true;
        } else return false;
    };
}
const Aligns = [
    "right",
    "center",
    "left"
], Baselines = [
    "bottom",
    "middle",
    "top"
];
function placeMarkLabel($, bitmaps, anchors, offsets) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], bm1 = bitmaps[1], n = offsets.length;
    return function(d) {
        const boundary = d.boundary, textHeight = d.datum.fontSize; // can not be placed if the mark is not visible in the graph bound
        if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width || boundary[3] > height) return false;
        let textWidth = 0, dx, dy, isInside, sizeFactor, insideFactor, x1, x2, y1, y2, xc, yc, _x1, _x2, _y1, _y2; // for each anchor and offset
        for(let i = 0; i < n; ++i){
            dx = (anchors[i] & 0x3) - 1;
            dy = (anchors[i] >>> 0x2 & 0x3) - 1;
            isInside = dx === 0 && dy === 0 || offsets[i] < 0;
            sizeFactor = dx && dy ? Math.SQRT1_2 : 1;
            insideFactor = offsets[i] < 0 ? -1 : 1;
            x1 = boundary[1 + dx] + offsets[i] * dx * sizeFactor;
            yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets[i] * dy * sizeFactor;
            y1 = yc - textHeight / 2;
            y2 = yc + textHeight / 2;
            _x1 = $(x1);
            _y1 = $(y1);
            _y2 = $(y2);
            if (!textWidth) {
                // to avoid finding width of text label,
                if (!test(_x1, _x1, _y1, _y2, bm0, bm1, x1, x1, y1, y2, boundary, isInside)) continue;
                else // Otherwise, find the label width
                textWidth = (0, _vegaScenegraph.textMetrics).width(d.datum, d.datum.text);
            }
            xc = x1 + insideFactor * textWidth * dx / 2;
            x1 = xc - textWidth / 2;
            x2 = xc + textWidth / 2;
            _x1 = $(x1);
            _x2 = $(x2);
            if (test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside)) {
                // place label if the position is placeable
                d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x1;
                d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y1;
                d.align = Aligns[dx * insideFactor + 1];
                d.baseline = Baselines[dy * insideFactor + 1];
                bm0.setRange(_x1, _y1, _x2, _y2);
                return true;
            }
        }
        return false;
    };
} // Test if a label with the given dimensions can be added without overlap
function test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside) {
    return !(bm0.outOfBounds(_x1, _y1, _x2, _y2) || (isInside && bm1 ? bm1.getRange(_x1, _y1, _x2, _y2) || !isInMarkBound(x1, y1, x2, y2, boundary) : bm0.getRange(_x1, _y1, _x2, _y2)));
}
function isInMarkBound(x1, y1, x2, y2, boundary) {
    return boundary[0] <= x1 && x2 <= boundary[2] && boundary[3] <= y1 && y2 <= boundary[5];
}
const TOP = 0x0, MIDDLE = 0x4, BOTTOM = 0x8, LEFT = 0x0, CENTER = 0x1, RIGHT = 0x2; // Mapping from text anchor to number representation
const anchorCode = {
    "top-left": TOP + LEFT,
    "top": TOP + CENTER,
    "top-right": TOP + RIGHT,
    "left": MIDDLE + LEFT,
    "middle": MIDDLE + CENTER,
    "right": MIDDLE + RIGHT,
    "bottom-left": BOTTOM + LEFT,
    "bottom": BOTTOM + CENTER,
    "bottom-right": BOTTOM + RIGHT
};
const placeAreaLabel = {
    "naive": placeAreaLabelNaive,
    "reduced-search": placeAreaLabelReducedSearch,
    "floodfill": placeAreaLabelFloodFill
};
function labelLayout(texts, size, compare, offset, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding, method) {
    // early exit for empty data
    if (!texts.length) return texts;
    const positions = Math.max(offset.length, anchor.length), offsets = getOffsets(offset, positions), anchors = getAnchors(anchor, positions), marktype = markType(texts[0].datum), grouptype = marktype === "group" && texts[0].datum.items[markIndex].marktype, isGroupArea = grouptype === "area", boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex), $ = scaler(size[0], size[1], padding), isNaiveGroupArea = isGroupArea && method === "naive"; // prepare text mark data for placing
    const data = texts.map((d)=>({
            datum: d,
            opacity: 0,
            x: undefined,
            y: undefined,
            align: undefined,
            baseline: undefined,
            boundary: boundary(d)
        }));
    let bitmaps;
    if (!isNaiveGroupArea) {
        // sort labels in priority order, if comparator is provided
        if (compare) data.sort((a, b)=>compare(a.datum, b.datum));
         // flag indicating if label can be placed inside its base mark
        let labelInside = false;
        for(let i = 0; i < anchors.length && !labelInside; ++i)// label inside if anchor is at center
        // label inside if offset to be inside the mark bound
        labelInside = anchors[i] === 0x5 || offsets[i] < 0;
         // extract data information from base mark when base mark is to be avoided
        // base mark is implicitly avoided if it is a group area
        if (marktype && (avoidBaseMark || isGroupArea)) avoidMarks = [
            texts.map((d)=>d.datum)
        ].concat(avoidMarks);
         // generate bitmaps for layout calculation
        bitmaps = avoidMarks.length ? markBitmaps($, avoidMarks, labelInside, isGroupArea) : baseBitmaps($, avoidBaseMark && data);
    } // generate label placement function
    const place = isGroupArea ? placeAreaLabel[method]($, bitmaps, avoidBaseMark, markIndex) : placeMarkLabel($, bitmaps, anchors, offsets); // place all labels
    data.forEach((d)=>d.opacity = +place(d));
    return data;
}
function getOffsets(_, count) {
    const offsets = new Float64Array(count), n = _.length;
    for(let i = 0; i < n; ++i)offsets[i] = _[i] || 0;
    for(let i1 = n; i1 < count; ++i1)offsets[i1] = offsets[n - 1];
    return offsets;
}
function getAnchors(_, count) {
    const anchors = new Int8Array(count), n = _.length;
    for(let i = 0; i < n; ++i)anchors[i] |= anchorCode[_[i]];
    for(let i1 = n; i1 < count; ++i1)anchors[i1] = anchors[n - 1];
    return anchors;
}
function markType(item) {
    return item && item.mark && item.mark.marktype;
}
/**
 * Factory function for function for getting base mark boundary, depending
 * on mark and group type. When mark type is undefined, line or area: boundary
 * is the coordinate of each data point. When base mark is grouped line,
 * boundary is either at the beginning or end of the line depending on the
 * value of lineAnchor. Otherwise, use bounds of base mark.
 */ function markBoundary(marktype, grouptype, lineAnchor, markIndex) {
    const xy = (d)=>[
            d.x,
            d.x,
            d.x,
            d.y,
            d.y,
            d.y
        ];
    if (!marktype) return xy; // no reactive geometry
    else if (marktype === "line" || marktype === "area") return (d)=>xy(d.datum);
    else if (grouptype === "line") return (d)=>{
        const items = d.datum.items[markIndex].items;
        return xy(items.length ? items[lineAnchor === "start" ? 0 : items.length - 1] : {
            x: NaN,
            y: NaN
        });
    };
    else return (d)=>{
        const b = d.datum.bounds;
        return [
            b.x1,
            (b.x1 + b.x2) / 2,
            b.x2,
            b.y1,
            (b.y1 + b.y2) / 2,
            b.y2
        ];
    };
}
const Output = [
    "x",
    "y",
    "opacity",
    "align",
    "baseline"
];
const Anchors = [
    "top-left",
    "left",
    "bottom-left",
    "top",
    "bottom",
    "top-right",
    "right",
    "bottom-right"
];
/**
 * Compute text label layout to annotate marks.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The size of the layout, provided as a [width, height] array.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting label data in priority order.
 * @param {Array<string>} [params.anchor] - Label anchor points relative to the base mark bounding box.
 *   The available options are 'top-left', 'left', 'bottom-left', 'top',
 *   'bottom', 'top-right', 'right', 'bottom-right', 'middle'.
 * @param {Array<number>} [params.offset] - Label offsets (in pixels) from the base mark bounding box.
 *   This parameter  is parallel to the list of anchor points.
 * @param {number} [params.padding=0] - The amount (in pixels) that a label may exceed the layout size.
 * @param {string} [params.lineAnchor='end'] - For group line mark labels only, indicates the anchor
 *   position for labels. One of 'start' or 'end'.
 * @param {string} [params.markIndex=0] - For group mark labels only, an index indicating
 *   which mark within the group should be labeled.
 * @param {Array<number>} [params.avoidMarks] - A list of additional mark names for which the label
 *   layout should avoid overlap.
 * @param {boolean} [params.avoidBaseMark=true] - Boolean flag indicating if labels should avoid
 *   overlap with the underlying base mark being labeled.
 * @param {string} [params.method='naive'] - For area make labels only, a method for
 *   place labels. One of 'naive', 'reduced-search', or 'floodfill'.
 * @param {Array<string>} [params.as] - The output fields written by the transform.
 *   The default is ['x', 'y', 'opacity', 'align', 'baseline'].
 */ function Label(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Label.Definition = {
    type: "Label",
    metadata: {
        modifies: true
    },
    params: [
        {
            name: "size",
            type: "number",
            array: true,
            length: 2,
            required: true
        },
        {
            name: "sort",
            type: "compare"
        },
        {
            name: "anchor",
            type: "string",
            array: true,
            default: Anchors
        },
        {
            name: "offset",
            type: "number",
            array: true,
            default: [
                1
            ]
        },
        {
            name: "padding",
            type: "number",
            default: 0
        },
        {
            name: "lineAnchor",
            type: "string",
            values: [
                "start",
                "end"
            ],
            default: "end"
        },
        {
            name: "markIndex",
            type: "number",
            default: 0
        },
        {
            name: "avoidBaseMark",
            type: "boolean",
            default: true
        },
        {
            name: "avoidMarks",
            type: "data",
            array: true
        },
        {
            name: "method",
            type: "string",
            default: "naive"
        },
        {
            name: "as",
            type: "string",
            array: true,
            length: Output.length,
            default: Output
        }
    ]
};
(0, _vegaUtil.inherits)(Label, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        function modp(param) {
            const p = _[param];
            return (0, _vegaUtil.isFunction)(p) && pulse.modified(p.fields);
        }
        const mod = _.modified();
        if (!(mod || pulse.changed(pulse.ADD_REM) || modp("sort"))) return;
        if (!_.size || _.size.length !== 2) (0, _vegaUtil.error)("Size parameter should be specified as a [width, height] array.");
        const as = _.as || Output; // run label layout
        labelLayout(pulse.materialize(pulse.SOURCE).source, _.size, _.sort, (0, _vegaUtil.array)(_.offset || 1), (0, _vegaUtil.array)(_.anchor || Anchors), _.avoidMarks || [], _.avoidBaseMark === false ? false : true, _.lineAnchor || "end", _.markIndex || 0, _.padding || 0, _.method || "naive").forEach((l)=>{
            // write layout results to data stream
            const t = l.datum;
            t[as[0]] = l.x;
            t[as[1]] = l.y;
            t[as[2]] = l.opacity;
            t[as[3]] = l.align;
            t[as[4]] = l.baseline;
        });
        return pulse.reflow(mod).modifies(as);
    }
});

},{"vega-canvas":"f0yaA","vega-dataflow":"3NitK","vega-scenegraph":"jattk","vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"elv3U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loess", ()=>Loess);
parcelHelpers.export(exports, "regression", ()=>Regression);
var _vegaStatistics = require("vega-statistics");
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
function partition(data, groupby) {
    var groups = [], get = function(f) {
        return f(t);
    }, map, i, n, t, k, g; // partition data points into stack groups
    if (groupby == null) groups.push(data);
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            g.dims = k;
            groups.push(g);
        }
        g.push(t);
    }
    return groups;
}
/**
 * Compute locally-weighted regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.bandwidth=0.3] - The loess bandwidth.
 */ function Loess(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Loess.Definition = {
    "type": "Loess",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "bandwidth",
            "type": "number",
            "default": 0.3
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        }
    ]
};
(0, _vegaUtil.inherits)(Loess, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const source = pulse.materialize(pulse.SOURCE).source, groups = partition(source, _.groupby), names = (_.groupby || []).map((0, _vegaUtil.accessorName)), m = names.length, as = _.as || [
                (0, _vegaUtil.accessorName)(_.x),
                (0, _vegaUtil.accessorName)(_.y)
            ], values = [];
            groups.forEach((g)=>{
                (0, _vegaStatistics.regressionLoess)(g, _.x, _.y, _.bandwidth || 0.3).forEach((p)=>{
                    const t = {};
                    for(let i = 0; i < m; ++i)t[names[i]] = g.dims[i];
                    t[as[0]] = p[0];
                    t[as[1]] = p[1];
                    values.push((0, _vegaDataflow.ingest)(t));
                });
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});
const Methods = {
    linear: (0, _vegaStatistics.regressionLinear),
    log: (0, _vegaStatistics.regressionLog),
    exp: (0, _vegaStatistics.regressionExp),
    pow: (0, _vegaStatistics.regressionPow),
    quad: (0, _vegaStatistics.regressionQuad),
    poly: (0, _vegaStatistics.regressionPoly)
};
const degreesOfFreedom = (method, order)=>method === "poly" ? order : method === "quad" ? 2 : 1;
/**
 * Compute regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {string} [params.method='linear'] - The regression method to apply.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.
 * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.
 */ function Regression(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Regression.Definition = {
    "type": "Regression",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "method",
            "type": "string",
            "default": "linear",
            "values": Object.keys(Methods)
        },
        {
            "name": "order",
            "type": "number",
            "default": 3
        },
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "params",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        }
    ]
};
(0, _vegaUtil.inherits)(Regression, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const source = pulse.materialize(pulse.SOURCE).source, groups = partition(source, _.groupby), names = (_.groupby || []).map((0, _vegaUtil.accessorName)), method = _.method || "linear", order = _.order || 3, dof = degreesOfFreedom(method, order), as = _.as || [
                (0, _vegaUtil.accessorName)(_.x),
                (0, _vegaUtil.accessorName)(_.y)
            ], fit = Methods[method], values = [];
            let domain = _.extent;
            if (!(0, _vegaUtil.hasOwnProperty)(Methods, method)) (0, _vegaUtil.error)("Invalid regression method: " + method);
            if (domain != null) {
                if (method === "log" && domain[0] <= 0) {
                    pulse.dataflow.warn("Ignoring extent with values <= 0 for log regression.");
                    domain = null;
                }
            }
            groups.forEach((g)=>{
                const n = g.length;
                if (n <= dof) {
                    pulse.dataflow.warn("Skipping regression with more parameters than data points.");
                    return;
                }
                const model = fit(g, _.x, _.y, order);
                if (_.params) {
                    // if parameter vectors requested return those
                    values.push((0, _vegaDataflow.ingest)({
                        keys: g.dims,
                        coef: model.coef,
                        rSquared: model.rSquared
                    }));
                    return;
                }
                const dom = domain || (0, _vegaUtil.extent)(g, _.x), add = (p)=>{
                    const t = {};
                    for(let i = 0; i < names.length; ++i)t[names[i]] = g.dims[i];
                    t[as[0]] = p[0];
                    t[as[1]] = p[1];
                    values.push((0, _vegaDataflow.ingest)(t));
                };
                if (method === "linear") // for linear regression we only need the end points
                dom.forEach((x)=>add([
                        x,
                        model.predict(x)
                    ]));
                else // otherwise return trend line sample points
                (0, _vegaStatistics.sampleCurve)(model.predict, dom, 25, 200).forEach(add);
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});

},{"vega-statistics":"5ncfv","vega-dataflow":"3NitK","vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"96rkJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "voronoi", ()=>Voronoi);
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
var _d3Delaunay = require("d3-delaunay");
function Voronoi(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
Voronoi.Definition = {
    "type": "Voronoi",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "extent",
            "type": "array",
            "array": true,
            "length": 2,
            "default": [
                [
                    -100000,
                    -100000
                ],
                [
                    1e5,
                    1e5
                ]
            ],
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "as",
            "type": "string",
            "default": "path"
        }
    ]
};
const defaultExtent = [
    -100000,
    -100000,
    1e5,
    1e5
];
(0, _vegaUtil.inherits)(Voronoi, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const as = _.as || "path", data = pulse.source; // nothing to do if no data
        if (!data || !data.length) return pulse; // configure and construct voronoi diagram
        let s = _.size;
        s = s ? [
            0,
            0,
            s[0],
            s[1]
        ] : (s = _.extent) ? [
            s[0][0],
            s[0][1],
            s[1][0],
            s[1][1]
        ] : defaultExtent;
        const voronoi = this.value = (0, _d3Delaunay.Delaunay).from(data, _.x, _.y).voronoi(s); // map polygons to paths
        for(let i = 0, n = data.length; i < n; ++i){
            const polygon = voronoi.cellPolygon(i);
            data[i][as] = polygon ? toPathString(polygon) : null;
        }
        return pulse.reflow(_.modified()).modifies(as);
    }
}); // suppress duplicated end point vertices
function toPathString(p) {
    const x = p[0][0], y = p[0][1];
    let n = p.length - 1;
    for(; p[n][0] === x && p[n][1] === y; --n);
    return "M" + p.slice(0, n + 1).join("L") + "Z";
}

},{"vega-dataflow":"3NitK","vega-util":"bApja","d3-delaunay":"9qKHu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9qKHu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Delaunay", ()=>(0, _delaunayJsDefault.default));
parcelHelpers.export(exports, "Voronoi", ()=>(0, _voronoiJsDefault.default));
var _delaunayJs = require("./delaunay.js");
var _delaunayJsDefault = parcelHelpers.interopDefault(_delaunayJs);
var _voronoiJs = require("./voronoi.js");
var _voronoiJsDefault = parcelHelpers.interopDefault(_voronoiJs);

},{"./delaunay.js":"1eiyj","./voronoi.js":"a33Bo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1eiyj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _delaunator = require("delaunator");
var _delaunatorDefault = parcelHelpers.interopDefault(_delaunator);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _polygonJs = require("./polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
var _voronoiJs = require("./voronoi.js");
var _voronoiJsDefault = parcelHelpers.interopDefault(_voronoiJs);
const tau = 2 * Math.PI, pow = Math.pow;
function pointX(p) {
    return p[0];
}
function pointY(p) {
    return p[1];
}
// A triangulation is collinear if all its triangles have a non-null area
function collinear(d) {
    const { triangles , coords  } = d;
    for(let i = 0; i < triangles.length; i += 3){
        const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
    }
    return true;
}
function jitter(x, y, r) {
    return [
        x + Math.sin(x + y) * r,
        y + Math.cos(x - y) * r
    ];
}
class Delaunay {
    static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
    }
    constructor(points){
        this._delaunator = new (0, _delaunatorDefault.default)(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
    }
    update() {
        this._delaunator.update();
        this._init();
        return this;
    }
    _init() {
        const d = this._delaunator, points = this.points;
        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear(d)) {
            this.collinear = Int32Array.from({
                length: points.length / 2
            }, (_, i)=>i).sort((i, j)=>points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
            const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [
                points[2 * e],
                points[2 * e + 1],
                points[2 * f],
                points[2 * f + 1]
            ], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
            for(let i = 0, n = points.length / 2; i < n; ++i){
                const p = jitter(points[2 * i], points[2 * i + 1], r);
                points[2 * i] = p[0];
                points[2 * i + 1] = p[1];
            }
            this._delaunator = new (0, _delaunatorDefault.default)(points);
        } else delete this.collinear;
        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);
        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for(let e1 = 0, n1 = halfedges.length; e1 < n1; ++e1){
            const p1 = triangles[e1 % 3 === 2 ? e1 - 2 : e1 + 1];
            if (halfedges[e1] === -1 || inedges[p1] === -1) inedges[p1] = e1;
        }
        for(let i1 = 0, n2 = hull.length; i1 < n2; ++i1)hullIndex[hull[i1]] = i1;
        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
            this.triangles = new Int32Array(3).fill(-1);
            this.halfedges = new Int32Array(3).fill(-1);
            this.triangles[0] = hull[0];
            this.triangles[1] = hull[1];
            this.triangles[2] = hull[1];
            inedges[hull[0]] = 1;
            if (hull.length === 2) inedges[hull[1]] = 0;
        }
    }
    voronoi(bounds) {
        return new (0, _voronoiJsDefault.default)(this, bounds);
    }
    *neighbors(i) {
        const { inedges , hull , _hullIndex , halfedges , triangles , collinear  } = this;
        // degenerate case with several collinear points
        if (collinear) {
            const l = collinear.indexOf(i);
            if (l > 0) yield collinear[l - 1];
            if (l < collinear.length - 1) yield collinear[l + 1];
            return;
        }
        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
            yield p0 = triangles[e];
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) return; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                const p = hull[(_hullIndex[i] + 1) % hull.length];
                if (p !== p0) yield p;
                return;
            }
        }while (e !== e0);
    }
    find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)i = c;
        return c;
    }
    _step(i, x, y) {
        const { inedges , hull , _hullIndex , halfedges , triangles , points  } = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
            let t = triangles[e];
            const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
            if (dt < dc) dc = dt, c = t;
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                e = hull[(_hullIndex[i] + 1) % hull.length];
                if (e !== t) {
                    if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;
                }
                break;
            }
        }while (e !== e0);
        return c;
    }
    render(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { points , halfedges , triangles  } = this;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = triangles[i] * 2;
            const tj = triangles[j] * 2;
            context.moveTo(points[ti], points[ti + 1]);
            context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
    }
    renderPoints(context, r = 2) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { points  } = this;
        for(let i = 0, n = points.length; i < n; i += 2){
            const x = points[i], y = points[i + 1];
            context.moveTo(x + r, y);
            context.arc(x, y, r, 0, tau);
        }
        return buffer && buffer.value();
    }
    renderHull(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { hull , points  } = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for(let i = 1; i < n; ++i){
            const h1 = 2 * hull[i];
            context.lineTo(points[h1], points[h1 + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
    }
    hullPolygon() {
        const polygon = new (0, _polygonJsDefault.default);
        this.renderHull(polygon);
        return polygon.value();
    }
    renderTriangle(i, context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { points , triangles  } = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *trianglePolygons() {
        const { triangles  } = this;
        for(let i = 0, n = triangles.length / 3; i < n; ++i)yield this.trianglePolygon(i);
    }
    trianglePolygon(i) {
        const polygon = new (0, _polygonJsDefault.default);
        this.renderTriangle(i, polygon);
        return polygon.value();
    }
}
exports.default = Delaunay;
function flatArray(points, fx, fy, that) {
    const n = points.length;
    const array = new Float64Array(n * 2);
    for(let i = 0; i < n; ++i){
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
    }
    return array;
}
function* flatIterable(points, fx, fy, that) {
    let i = 0;
    for (const p of points){
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
    }
}

},{"delaunator":"auyGo","./path.js":"60Yfe","./polygon.js":"5nsXD","./voronoi.js":"a33Bo","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"auyGo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const EPSILON = Math.pow(2, -52);
const EDGE_STACK = new Uint32Array(512);
class Delaunator {
    static from(points, getX = defaultGetX, getY = defaultGetY) {
        const n = points.length;
        const coords = new Float64Array(n * 2);
        for(let i = 0; i < n; i++){
            const p = points[i];
            coords[2 * i] = getX(p);
            coords[2 * i + 1] = getY(p);
        }
        return new Delaunator(coords);
    }
    constructor(coords){
        const n = coords.length >> 1;
        if (n > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
        this.coords = coords;
        // arrays that will store the triangulation graph
        const maxTriangles = Math.max(2 * n - 5, 0);
        this._triangles = new Uint32Array(maxTriangles * 3);
        this._halfedges = new Int32Array(maxTriangles * 3);
        // temporary arrays for tracking the edges of the advancing convex hull
        this._hashSize = Math.ceil(Math.sqrt(n));
        this._hullPrev = new Uint32Array(n); // edge to prev edge
        this._hullNext = new Uint32Array(n); // edge to next edge
        this._hullTri = new Uint32Array(n); // edge to adjacent triangle
        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash
        // temporary arrays for sorting points
        this._ids = new Uint32Array(n);
        this._dists = new Float64Array(n);
        this.update();
    }
    update() {
        const { coords , _hullPrev: hullPrev , _hullNext: hullNext , _hullTri: hullTri , _hullHash: hullHash  } = this;
        const n = coords.length >> 1;
        // populate an array of point indices; calculate input data bbox
        let minX = Infinity;
        let minY = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        for(let i = 0; i < n; i++){
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            this._ids[i] = i;
        }
        const cx = (minX + maxX) / 2;
        const cy = (minY + maxY) / 2;
        let minDist = Infinity;
        let i0, i1, i2;
        // pick a seed point close to the center
        for(let i3 = 0; i3 < n; i3++){
            const d = dist(cx, cy, coords[2 * i3], coords[2 * i3 + 1]);
            if (d < minDist) {
                i0 = i3;
                minDist = d;
            }
        }
        const i0x = coords[2 * i0];
        const i0y = coords[2 * i0 + 1];
        minDist = Infinity;
        // find the point closest to the seed
        for(let i4 = 0; i4 < n; i4++){
            if (i4 === i0) continue;
            const d1 = dist(i0x, i0y, coords[2 * i4], coords[2 * i4 + 1]);
            if (d1 < minDist && d1 > 0) {
                i1 = i4;
                minDist = d1;
            }
        }
        let i1x = coords[2 * i1];
        let i1y = coords[2 * i1 + 1];
        let minRadius = Infinity;
        // find the third point which forms the smallest circumcircle with the first two
        for(let i5 = 0; i5 < n; i5++){
            if (i5 === i0 || i5 === i1) continue;
            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i5], coords[2 * i5 + 1]);
            if (r < minRadius) {
                i2 = i5;
                minRadius = r;
            }
        }
        let i2x = coords[2 * i2];
        let i2y = coords[2 * i2 + 1];
        if (minRadius === Infinity) {
            // order collinear points by dx (or dy if all x are identical)
            // and return the list as a hull
            for(let i6 = 0; i6 < n; i6++)this._dists[i6] = coords[2 * i6] - coords[0] || coords[2 * i6 + 1] - coords[1];
            quicksort(this._ids, this._dists, 0, n - 1);
            const hull = new Uint32Array(n);
            let j = 0;
            for(let i7 = 0, d0 = -Infinity; i7 < n; i7++){
                const id = this._ids[i7];
                if (this._dists[id] > d0) {
                    hull[j++] = id;
                    d0 = this._dists[id];
                }
            }
            this.hull = hull.subarray(0, j);
            this.triangles = new Uint32Array(0);
            this.halfedges = new Uint32Array(0);
            return;
        }
        // swap the order of the seed points for counter-clockwise orientation
        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
            const i8 = i1;
            const x1 = i1x;
            const y1 = i1y;
            i1 = i2;
            i1x = i2x;
            i1y = i2y;
            i2 = i8;
            i2x = x1;
            i2y = y1;
        }
        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
        this._cx = center.x;
        this._cy = center.y;
        for(let i9 = 0; i9 < n; i9++)this._dists[i9] = dist(coords[2 * i9], coords[2 * i9 + 1], center.x, center.y);
        // sort the points by distance from the seed triangle circumcenter
        quicksort(this._ids, this._dists, 0, n - 1);
        // set up the seed triangle as the starting hull
        this._hullStart = i0;
        let hullSize = 3;
        hullNext[i0] = hullPrev[i2] = i1;
        hullNext[i1] = hullPrev[i0] = i2;
        hullNext[i2] = hullPrev[i1] = i0;
        hullTri[i0] = 0;
        hullTri[i1] = 1;
        hullTri[i2] = 2;
        hullHash.fill(-1);
        hullHash[this._hashKey(i0x, i0y)] = i0;
        hullHash[this._hashKey(i1x, i1y)] = i1;
        hullHash[this._hashKey(i2x, i2y)] = i2;
        this.trianglesLen = 0;
        this._addTriangle(i0, i1, i2, -1, -1, -1);
        for(let k = 0, xp, yp; k < this._ids.length; k++){
            const i10 = this._ids[k];
            const x2 = coords[2 * i10];
            const y2 = coords[2 * i10 + 1];
            // skip near-duplicate points
            if (k > 0 && Math.abs(x2 - xp) <= EPSILON && Math.abs(y2 - yp) <= EPSILON) continue;
            xp = x2;
            yp = y2;
            // skip seed triangle points
            if (i10 === i0 || i10 === i1 || i10 === i2) continue;
            // find a visible edge on the convex hull using edge hash
            let start = 0;
            for(let j1 = 0, key = this._hashKey(x2, y2); j1 < this._hashSize; j1++){
                start = hullHash[(key + j1) % this._hashSize];
                if (start !== -1 && start !== hullNext[start]) break;
            }
            start = hullPrev[start];
            let e = start, q;
            while(q = hullNext[e], !orient(x2, y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])){
                e = q;
                if (e === start) {
                    e = -1;
                    break;
                }
            }
            if (e === -1) continue; // likely a near-duplicate point; skip it
            // add the first triangle from the point
            let t = this._addTriangle(e, i10, hullNext[e], -1, -1, hullTri[e]);
            // recursively flip triangles from the point until they satisfy the Delaunay condition
            hullTri[i10] = this._legalize(t + 2);
            hullTri[e] = t; // keep track of boundary triangles on the hull
            hullSize++;
            // walk forward through the hull, adding more triangles and flipping recursively
            let n1 = hullNext[e];
            while(q = hullNext[n1], orient(x2, y2, coords[2 * n1], coords[2 * n1 + 1], coords[2 * q], coords[2 * q + 1])){
                t = this._addTriangle(n1, i10, q, hullTri[i10], -1, hullTri[n1]);
                hullTri[i10] = this._legalize(t + 2);
                hullNext[n1] = n1; // mark as removed
                hullSize--;
                n1 = q;
            }
            // walk backward from the other side, adding more triangles and flipping
            if (e === start) while(q = hullPrev[e], orient(x2, y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])){
                t = this._addTriangle(q, i10, e, -1, hullTri[e], hullTri[q]);
                this._legalize(t + 2);
                hullTri[q] = t;
                hullNext[e] = e; // mark as removed
                hullSize--;
                e = q;
            }
            // update the hull indices
            this._hullStart = hullPrev[i10] = e;
            hullNext[e] = hullPrev[n1] = i10;
            hullNext[i10] = n1;
            // save the two new edges in the hash table
            hullHash[this._hashKey(x2, y2)] = i10;
            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
        }
        this.hull = new Uint32Array(hullSize);
        for(let i11 = 0, e1 = this._hullStart; i11 < hullSize; i11++){
            this.hull[i11] = e1;
            e1 = hullNext[e1];
        }
        // trim typed triangle mesh arrays
        this.triangles = this._triangles.subarray(0, this.trianglesLen);
        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x, y) {
        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a) {
        const { _triangles: triangles , _halfedges: halfedges , coords  } = this;
        let i = 0;
        let ar = 0;
        // recursion eliminated with a fixed-size stack
        while(true){
            const b = halfedges[a];
            /* if the pair of triangles doesn't satisfy the Delaunay condition
             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
             * then do the same check/flip recursively for the new pair of triangles
             *
             *           pl                    pl
             *          /||\                  /  \
             *       al/ || \bl            al/    \a
             *        /  ||  \              /      \
             *       /  a||b  \    flip    /___ar___\
             *     p0\   ||   /p1   =>   p0\---bl---/p1
             *        \  ||  /              \      /
             *       ar\ || /br             b\    /br
             *          \||/                  \  /
             *           pr                    pr
             */ const a0 = a - a % 3;
            ar = a0 + (a + 2) % 3;
            if (b === -1) {
                if (i === 0) break;
                a = EDGE_STACK[--i];
                continue;
            }
            const b0 = b - b % 3;
            const al = a0 + (a + 1) % 3;
            const bl = b0 + (b + 2) % 3;
            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];
            const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
            if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;
                const hbl = halfedges[bl];
                // edge swapped on the other side of the hull (rare); fix the halfedge reference
                if (hbl === -1) {
                    let e = this._hullStart;
                    do {
                        if (this._hullTri[e] === bl) {
                            this._hullTri[e] = a;
                            break;
                        }
                        e = this._hullPrev[e];
                    }while (e !== this._hullStart);
                }
                this._link(a, hbl);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);
                const br = b0 + (b + 1) % 3;
                // don't worry about hitting the cap: it can only happen on extremely degenerate input
                if (i < EDGE_STACK.length) EDGE_STACK[i++] = br;
            } else {
                if (i === 0) break;
                a = EDGE_STACK[--i];
            }
        }
        return ar;
    }
    _link(a, b) {
        this._halfedges[a] = b;
        if (b !== -1) this._halfedges[b] = a;
    }
    // add a new triangle given vertex indices and adjacent half-edge ids
    _addTriangle(i0, i1, i2, a, b, c) {
        const t = this.trianglesLen;
        this._triangles[t] = i0;
        this._triangles[t + 1] = i1;
        this._triangles[t + 2] = i2;
        this._link(t, a);
        this._link(t + 1, b);
        this._link(t + 2, c);
        this.trianglesLen += 3;
        return t;
    }
}
exports.default = Delaunator;
// monotonically increases with real angle, but doesn't need expensive trigonometry
function pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
}
function dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
}
// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check
function orientIfSure(px, py, rx, ry, qx, qy) {
    const l = (ry - py) * (qx - px);
    const r = (rx - px) * (qy - py);
    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
}
// a more robust orientation test that's stable in a given triangle (to fix robustness issues)
function orient(rx, ry, qx, qy, px, py) {
    const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
    return sign < 0;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = (ey * bl - dy * cl) * d;
    const y = (dx * cl - ex * bl) * d;
    return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = ax + (ey * bl - dy * cl) * d;
    const y = ay + (dx * cl - ex * bl) * d;
    return {
        x,
        y
    };
}
function quicksort(ids, dists, left, right) {
    if (right - left <= 20) for(let i = left + 1; i <= right; i++){
        const temp = ids[i];
        const tempDist = dists[temp];
        let j = i - 1;
        while(j >= left && dists[ids[j]] > tempDist)ids[j + 1] = ids[j--];
        ids[j + 1] = temp;
    }
    else {
        const median = left + right >> 1;
        let i1 = left + 1;
        let j1 = right;
        swap(ids, median, i1);
        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
        if (dists[ids[i1]] > dists[ids[right]]) swap(ids, i1, right);
        if (dists[ids[left]] > dists[ids[i1]]) swap(ids, left, i1);
        const temp1 = ids[i1];
        const tempDist1 = dists[temp1];
        while(true){
            do i1++;
            while (dists[ids[i1]] < tempDist1);
            do j1--;
            while (dists[ids[j1]] > tempDist1);
            if (j1 < i1) break;
            swap(ids, i1, j1);
        }
        ids[left + 1] = ids[j1];
        ids[j1] = temp1;
        if (right - i1 + 1 >= j1 - left) {
            quicksort(ids, dists, i1, right);
            quicksort(ids, dists, left, j1 - 1);
        } else {
            quicksort(ids, dists, left, j1 - 1);
            quicksort(ids, dists, i1, right);
        }
    }
}
function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
function defaultGetX(p) {
    return p[0];
}
function defaultGetY(p) {
    return p[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"60Yfe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const epsilon = 1e-6;
class Path {
    constructor(){
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
    }
    moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    }
    lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
    }
    arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
    }
    rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
    }
    value() {
        return this._ || null;
    }
}
exports.default = Path;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5nsXD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Polygon {
    constructor(){
        this._ = [];
    }
    moveTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    closePath() {
        this._.push(this._[0].slice());
    }
    lineTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    value() {
        return this._.length ? this._ : null;
    }
}
exports.default = Polygon;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"a33Bo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _polygonJs = require("./polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
class Voronoi {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [
        0,
        0,
        960,
        500
    ]){
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
    }
    update() {
        this.delaunay.update();
        this._init();
        return this;
    }
    _init() {
        const { delaunay: { points , hull , triangles  } , vectors  } = this;
        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for(let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2){
            const t1 = triangles[i] * 2;
            const t2 = triangles[i + 1] * 2;
            const t3 = triangles[i + 2] * 2;
            const x1 = points[t1];
            const y1 = points[t1 + 1];
            const x2 = points[t2];
            const y2 = points[t2 + 1];
            const x3 = points[t3];
            const y3 = points[t3 + 1];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const ex = x3 - x1;
            const ey = y3 - y1;
            const bl = dx * dx + dy * dy;
            const cl = ex * ex + ey * ey;
            const ab = (dx * ey - dy * ex) * 2;
            if (!ab) {
                // degenerate case (collinear diagram)
                x = (x1 + x3) / 2 - 1e8 * ey;
                y = (y1 + y3) / 2 + 1e8 * ex;
            } else if (Math.abs(ab) < 1e-8) {
                // almost equal points (degenerate triangle)
                x = (x1 + x3) / 2;
                y = (y1 + y3) / 2;
            } else {
                const d = 1 / ab;
                x = x1 + (ey * bl - dy * cl) * d;
                y = y1 + (dx * cl - ex * bl) * d;
            }
            circumcenters[j] = x;
            circumcenters[j + 1] = y;
        }
        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x11 = points[2 * h];
        let y0, y11 = points[2 * h + 1];
        vectors.fill(0);
        for(let i1 = 0; i1 < hull.length; ++i1){
            h = hull[i1];
            p0 = p1, x0 = x11, y0 = y11;
            p1 = h * 4, x11 = points[2 * h], y11 = points[2 * h + 1];
            vectors[p0 + 2] = vectors[p1] = y0 - y11;
            vectors[p0 + 3] = vectors[p1 + 1] = x11 - x0;
        }
    }
    render(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { delaunay: { halfedges , inedges , hull  } , circumcenters , vectors  } = this;
        if (hull.length <= 1) return null;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = Math.floor(i / 3) * 2;
            const tj = Math.floor(j / 3) * 2;
            const xi = circumcenters[ti];
            const yi = circumcenters[ti + 1];
            const xj = circumcenters[tj];
            const yj = circumcenters[tj + 1];
            this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for(let i1 = 0; i1 < hull.length; ++i1){
            h0 = h1, h1 = hull[i1];
            const t = Math.floor(inedges[h1] / 3) * 2;
            const x = circumcenters[t];
            const y = circumcenters[t + 1];
            const v = h0 * 4;
            const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
            if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
    }
    renderBounds(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
    }
    renderCell(i, context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while(points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)n -= 2;
        for(let i1 = 2; i1 < n; i1 += 2)if (points[i1] !== points[i1 - 2] || points[i1 + 1] !== points[i1 - 1]) context.lineTo(points[i1], points[i1 + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *cellPolygons() {
        const { delaunay: { points  }  } = this;
        for(let i = 0, n = points.length / 2; i < n; ++i){
            const cell = this.cellPolygon(i);
            if (cell) cell.index = i, yield cell;
        }
    }
    cellPolygon(i) {
        const polygon = new (0, _polygonJsDefault.default);
        this.renderCell(i, polygon);
        return polygon.value();
    }
    _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
            context.moveTo(S[0], S[1]);
            context.lineTo(S[2], S[3]);
        }
    }
    contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
    }
    *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)){
            const cj = this._clip(j);
            // find the common edge
            if (cj) loop: for(let ai = 0, li = ci.length; ai < li; ai += 2){
                for(let aj = 0, lj = cj.length; aj < lj; aj += 2)if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                    yield j;
                    break loop;
                }
            }
        }
    }
    _cell(i) {
        const { circumcenters , delaunay: { inedges , halfedges , triangles  }  } = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
            const t = Math.floor(e / 3);
            points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
        }while (e !== e0 && e !== -1);
        return points;
    }
    _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        const points = this._cell(i);
        if (points === null) return null;
        const { vectors: V  } = this;
        const v = i * 4;
        return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
    }
    _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1;
        for(let j = 0; j < n; j += 2){
            x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
            c0 = c1, c1 = this._regioncode(x1, y1);
            if (c0 === 0 && c1 === 0) {
                e0 = e1, e1 = 0;
                if (P) P.push(x1, y1);
                else P = [
                    x1,
                    y1
                ];
            } else {
                let S, sx0, sy0, sx1, sy1;
                if (c0 === 0) {
                    if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
                    [sx0, sy0, sx1, sy1] = S;
                } else {
                    if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
                    [sx1, sy1, sx0, sy0] = S;
                    e0 = e1, e1 = this._edgecode(sx0, sy0);
                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                    if (P) P.push(sx0, sy0);
                    else P = [
                        sx0,
                        sy0
                    ];
                }
                e0 = e1, e1 = this._edgecode(sx1, sy1);
                if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                if (P) P.push(sx1, sy1);
                else P = [
                    sx1,
                    sy1
                ];
            }
        }
        if (P) {
            e0 = e1, e1 = this._edgecode(P[0], P[1]);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        return P;
    }
    _clipSegment(x0, y0, x1, y1, c0, c1) {
        while(true){
            if (c0 === 0 && c1 === 0) return [
                x0,
                y0,
                x1,
                y1
            ];
            if (c0 & c1) return null;
            let x, y, c = c0 || c1;
            if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
            else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
            else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
            else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
            if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
            else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
    }
    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) for(let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2){
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
        }
        else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) P = [
            this.xmin,
            this.ymin,
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax
        ];
        return P;
    }
    _edge(i, e0, e1, P, j) {
        while(e0 !== e1){
            let x, y;
            switch(e0){
                case 5:
                    e0 = 4;
                    continue; // top-left
                case 4:
                    e0 = 6, x = this.xmax, y = this.ymin;
                    break; // top
                case 6:
                    e0 = 2;
                    continue; // top-right
                case 2:
                    e0 = 10, x = this.xmax, y = this.ymax;
                    break; // right
                case 10:
                    e0 = 8;
                    continue; // bottom-right
                case 8:
                    e0 = 9, x = this.xmin, y = this.ymax;
                    break; // bottom
                case 9:
                    e0 = 1;
                    continue; // bottom-left
                case 1:
                    e0 = 5, x = this.xmin, y = this.ymin;
                    break; // left
            }
            if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) P.splice(j, 0, x, y), j += 2;
        }
        if (P.length > 4) for(let i1 = 0; i1 < P.length; i1 += 2){
            const j1 = (i1 + 2) % P.length, k = (i1 + 4) % P.length;
            if (P[i1] === P[j1] && P[j1] === P[k] || P[i1 + 1] === P[j1 + 1] && P[j1 + 1] === P[k + 1]) P.splice(j1, 2), i1 -= 2;
        }
        return j;
    }
    _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) {
            if (y0 <= this.ymin) return null;
            if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) {
            if (y0 >= this.ymax) return null;
            if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) {
            if (x0 >= this.xmax) return null;
            if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) {
            if (x0 <= this.xmin) return null;
            if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [
            x,
            y
        ];
    }
    _edgecode(x, y) {
        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
    }
    _regioncode(x, y) {
        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
    }
}
exports.default = Voronoi;

},{"./path.js":"60Yfe","./polygon.js":"5nsXD","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7Z7Aq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wordcloud", ()=>Wordcloud);
var _vegaCanvas = require("vega-canvas");
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
var _vegaScale = require("vega-scale");
var _vegaStatistics = require("vega-statistics");
/*
Copyright (c) 2013, Jason Davies.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  * The name Jason Davies may not be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
var cloudRadians = Math.PI / 180, cw = 64, ch = 2048;
function cloud() {
    var size = [
        256,
        256
    ], text, font, fontSize, fontStyle, fontWeight, rotate, padding, spiral = archimedeanSpiral, words = [], random = Math.random, cloud = {};
    cloud.layout = function() {
        var contextAndRatio = getContext((0, _vegaCanvas.canvas)()), board = zeroArray((size[0] >> 5) * size[1]), bounds = null, n = words.length, i = -1, tags = [], data = words.map((d)=>({
                text: text(d),
                font: font(d),
                style: fontStyle(d),
                weight: fontWeight(d),
                rotate: rotate(d),
                size: ~~(fontSize(d) + 1e-14),
                padding: padding(d),
                xoff: 0,
                yoff: 0,
                x1: 0,
                y1: 0,
                x0: 0,
                y0: 0,
                hasText: false,
                sprite: null,
                datum: d
            })).sort((a, b)=>b.size - a.size);
        while(++i < n){
            var d = data[i];
            d.x = size[0] * (random() + .5) >> 1;
            d.y = size[1] * (random() + .5) >> 1;
            cloudSprite(contextAndRatio, d, data, i);
            if (d.hasText && place(board, d, bounds)) {
                tags.push(d);
                if (bounds) cloudBounds(bounds, d);
                else bounds = [
                    {
                        x: d.x + d.x0,
                        y: d.y + d.y0
                    },
                    {
                        x: d.x + d.x1,
                        y: d.y + d.y1
                    }
                ]; // Temporary hack
                d.x -= size[0] >> 1;
                d.y -= size[1] >> 1;
            }
        }
        return tags;
    };
    function getContext(canvas) {
        canvas.width = canvas.height = 1;
        var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
        canvas.width = (cw << 5) / ratio;
        canvas.height = ch / ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = context.strokeStyle = "red";
        context.textAlign = "center";
        return {
            context: context,
            ratio: ratio
        };
    }
    function place(board, tag, bounds) {
        var startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s = spiral(size), dt = random() < .5 ? 1 : -1, t = -dt, dxdy, dx, dy;
        while(dxdy = s(t += dt)){
            dx = ~~dxdy[0];
            dy = ~~dxdy[1];
            if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
            tag.x = startX + dx;
            tag.y = startY + dy;
            if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.
            if (!bounds || !cloudCollide(tag, board, size[0])) {
                if (!bounds || collideRects(tag, bounds)) {
                    var sprite = tag.sprite, w = tag.width >> 5, sw = size[0] >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;
                    for(var j = 0; j < h; j++){
                        last = 0;
                        for(var i = 0; i <= w; i++)board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
                        x += sw;
                    }
                    tag.sprite = null;
                    return true;
                }
            }
        }
        return false;
    }
    cloud.words = function(_) {
        if (arguments.length) {
            words = _;
            return cloud;
        } else return words;
    };
    cloud.size = function(_) {
        if (arguments.length) {
            size = [
                +_[0],
                +_[1]
            ];
            return cloud;
        } else return size;
    };
    cloud.font = function(_) {
        if (arguments.length) {
            font = functor(_);
            return cloud;
        } else return font;
    };
    cloud.fontStyle = function(_) {
        if (arguments.length) {
            fontStyle = functor(_);
            return cloud;
        } else return fontStyle;
    };
    cloud.fontWeight = function(_) {
        if (arguments.length) {
            fontWeight = functor(_);
            return cloud;
        } else return fontWeight;
    };
    cloud.rotate = function(_) {
        if (arguments.length) {
            rotate = functor(_);
            return cloud;
        } else return rotate;
    };
    cloud.text = function(_) {
        if (arguments.length) {
            text = functor(_);
            return cloud;
        } else return text;
    };
    cloud.spiral = function(_) {
        if (arguments.length) {
            spiral = spirals[_] || _;
            return cloud;
        } else return spiral;
    };
    cloud.fontSize = function(_) {
        if (arguments.length) {
            fontSize = functor(_);
            return cloud;
        } else return fontSize;
    };
    cloud.padding = function(_) {
        if (arguments.length) {
            padding = functor(_);
            return cloud;
        } else return padding;
    };
    cloud.random = function(_) {
        if (arguments.length) {
            random = _;
            return cloud;
        } else return random;
    };
    return cloud;
} // Fetches a monochrome sprite bitmap for the specified text.
// Load in batches for speed.
function cloudSprite(contextAndRatio, d, data, di) {
    if (d.sprite) return;
    var c = contextAndRatio.context, ratio = contextAndRatio.ratio;
    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
    var x = 0, y = 0, maxh = 0, n = data.length, w, w32, h, i, j;
    --di;
    while(++di < n){
        d = data[di];
        c.save();
        c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
        w = c.measureText(d.text + "m").width * ratio;
        h = d.size << 1;
        if (d.rotate) {
            var sr = Math.sin(d.rotate * cloudRadians), cr = Math.cos(d.rotate * cloudRadians), wcr = w * cr, wsr = w * sr, hcr = h * cr, hsr = h * sr;
            w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
            h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
        } else w = w + 0x1f >> 5 << 5;
        if (h > maxh) maxh = h;
        if (x + w >= cw << 5) {
            x = 0;
            y += maxh;
            maxh = 0;
        }
        if (y + h >= ch) break;
        c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
        if (d.rotate) c.rotate(d.rotate * cloudRadians);
        c.fillText(d.text, 0, 0);
        if (d.padding) {
            c.lineWidth = 2 * d.padding;
            c.strokeText(d.text, 0, 0);
        }
        c.restore();
        d.width = w;
        d.height = h;
        d.xoff = x;
        d.yoff = y;
        d.x1 = w >> 1;
        d.y1 = h >> 1;
        d.x0 = -d.x1;
        d.y0 = -d.y1;
        d.hasText = true;
        x += w;
    }
    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];
    while(--di >= 0){
        d = data[di];
        if (!d.hasText) continue;
        w = d.width;
        w32 = w >> 5;
        h = d.y1 - d.y0; // Zero the buffer
        for(i = 0; i < h * w32; i++)sprite[i] = 0;
        x = d.xoff;
        if (x == null) return;
        y = d.yoff;
        var seen = 0, seenRow = -1;
        for(j = 0; j < h; j++){
            for(i = 0; i < w; i++){
                var k = w32 * j + (i >> 5), m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
                sprite[k] |= m;
                seen |= m;
            }
            if (seen) seenRow = j;
            else {
                d.y0++;
                h--;
                j--;
                y++;
            }
        }
        d.y1 = d.y0 + seenRow;
        d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
} // Use mask-based collision detection.
function cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite, w = tag.width >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;
    for(var j = 0; j < h; j++){
        last = 0;
        for(var i = 0; i <= w; i++){
            if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
        }
        x += sw;
    }
    return false;
}
function cloudBounds(bounds, d) {
    var b0 = bounds[0], b1 = bounds[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
}
function collideRects(a, b) {
    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
}
function archimedeanSpiral(size) {
    var e = size[0] / size[1];
    return function(t) {
        return [
            e * (t *= .1) * Math.cos(t),
            t * Math.sin(t)
        ];
    };
}
function rectangularSpiral(size) {
    var dy = 4, dx = dy * size[0] / size[1], x = 0, y = 0;
    return function(t) {
        var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.
        switch(Math.sqrt(1 + 4 * sign * t) - sign & 3){
            case 0:
                x += dx;
                break;
            case 1:
                y += dy;
                break;
            case 2:
                x -= dx;
                break;
            default:
                y -= dy;
                break;
        }
        return [
            x,
            y
        ];
    };
} // TODO reuse arrays?
function zeroArray(n) {
    var a = [], i = -1;
    while(++i < n)a[i] = 0;
    return a;
}
function functor(d) {
    return typeof d === "function" ? d : function() {
        return d;
    };
}
var spirals = {
    archimedean: archimedeanSpiral,
    rectangular: rectangularSpiral
};
const Output = [
    "x",
    "y",
    "font",
    "fontSize",
    "fontStyle",
    "fontWeight",
    "angle"
];
const Params = [
    "text",
    "font",
    "rotate",
    "fontSize",
    "fontStyle",
    "fontWeight"
];
function Wordcloud(params) {
    (0, _vegaDataflow.Transform).call(this, cloud(), params);
}
Wordcloud.Definition = {
    "type": "Wordcloud",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "font",
            "type": "string",
            "expr": true,
            "default": "sans-serif"
        },
        {
            "name": "fontStyle",
            "type": "string",
            "expr": true,
            "default": "normal"
        },
        {
            "name": "fontWeight",
            "type": "string",
            "expr": true,
            "default": "normal"
        },
        {
            "name": "fontSize",
            "type": "number",
            "expr": true,
            "default": 14
        },
        {
            "name": "fontSizeRange",
            "type": "number",
            "array": "nullable",
            "default": [
                10,
                50
            ]
        },
        {
            "name": "rotate",
            "type": "number",
            "expr": true,
            "default": 0
        },
        {
            "name": "text",
            "type": "field"
        },
        {
            "name": "spiral",
            "type": "string",
            "values": [
                "archimedean",
                "rectangular"
            ]
        },
        {
            "name": "padding",
            "type": "number",
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 7,
            "default": Output
        }
    ]
};
(0, _vegaUtil.inherits)(Wordcloud, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (_.size && !(_.size[0] && _.size[1])) (0, _vegaUtil.error)("Wordcloud size dimensions must be non-zero.");
        function modp(param) {
            const p = _[param];
            return (0, _vegaUtil.isFunction)(p) && pulse.modified(p.fields);
        }
        const mod = _.modified();
        if (!(mod || pulse.changed(pulse.ADD_REM) || Params.some(modp))) return;
        const data = pulse.materialize(pulse.SOURCE).source, layout = this.value, as = _.as || Output;
        let fontSize = _.fontSize || 14, range;
        (0, _vegaUtil.isFunction)(fontSize) ? range = _.fontSizeRange : fontSize = (0, _vegaUtil.constant)(fontSize); // create font size scaling function as needed
        if (range) {
            const fsize = fontSize, sizeScale = (0, _vegaScale.scale)("sqrt")().domain((0, _vegaUtil.extent)(data, fsize)).range(range);
            fontSize = (x)=>sizeScale(fsize(x));
        }
        data.forEach((t)=>{
            t[as[0]] = NaN;
            t[as[1]] = NaN;
            t[as[3]] = 0;
        }); // configure layout
        const words = layout.words(data).text(_.text).size(_.size || [
            500,
            500
        ]).padding(_.padding || 1).spiral(_.spiral || "archimedean").rotate(_.rotate || 0).font(_.font || "sans-serif").fontStyle(_.fontStyle || "normal").fontWeight(_.fontWeight || "normal").fontSize(fontSize).random((0, _vegaStatistics.random)).layout();
        const size = layout.size(), dx = size[0] >> 1, dy = size[1] >> 1, n = words.length;
        for(let i = 0, w, t; i < n; ++i){
            w = words[i];
            t = w.datum;
            t[as[0]] = w.x + dx;
            t[as[1]] = w.y + dy;
            t[as[2]] = w.font;
            t[as[3]] = w.size;
            t[as[4]] = w.style;
            t[as[5]] = w.weight;
            t[as[6]] = w.rotate;
        }
        return pulse.reflow(mod).modifies(as);
    }
});

},{"vega-canvas":"f0yaA","vega-dataflow":"3NitK","vega-util":"bApja","vega-scale":"bEydG","vega-statistics":"5ncfv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8iEZv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crossfilter", ()=>CrossFilter);
parcelHelpers.export(exports, "resolvefilter", ()=>ResolveFilter);
var _d3Array = require("d3-array");
var _vegaDataflow = require("vega-dataflow");
var _vegaUtil = require("vega-util");
const array8 = (n)=>new Uint8Array(n);
const array16 = (n)=>new Uint16Array(n);
const array32 = (n)=>new Uint32Array(n);
/**
 * Maintains CrossFilter state.
 */ function Bitmaps() {
    let width = 8, data = [], seen = array32(0), curr = array(0, width), prev = array(0, width);
    return {
        data: ()=>data,
        seen: ()=>seen = lengthen(seen, data.length),
        add (array) {
            for(let i = 0, j = data.length, n = array.length, t; i < n; ++i){
                t = array[i];
                t._index = j++;
                data.push(t);
            }
        },
        remove (num, map) {
            // map: index -> boolean (true => remove)
            const n = data.length, copy = Array(n - num), reindex = data; // reuse old data array for index map
            let t, i, j; // seek forward to first removal
            for(i = 0; !map[i] && i < n; ++i){
                copy[i] = data[i];
                reindex[i] = i;
            } // condense arrays
            for(j = i; i < n; ++i){
                t = data[i];
                if (!map[i]) {
                    reindex[i] = j;
                    curr[j] = curr[i];
                    prev[j] = prev[i];
                    copy[j] = t;
                    t._index = j++;
                } else reindex[i] = -1;
                curr[i] = 0; // clear unused bits
            }
            data = copy;
            return reindex;
        },
        size: ()=>data.length,
        curr: ()=>curr,
        prev: ()=>prev,
        reset: (k)=>prev[k] = curr[k],
        all: ()=>width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,
        set (k, one) {
            curr[k] |= one;
        },
        clear (k, one) {
            curr[k] &= ~one;
        },
        resize (n, m) {
            const k = curr.length;
            if (n > k || m > width) {
                width = Math.max(m, width);
                curr = array(n, width, curr);
                prev = array(n, width);
            }
        }
    };
}
function lengthen(array, length, copy) {
    if (array.length >= length) return array;
    copy = copy || new array.constructor(length);
    copy.set(array);
    return copy;
}
function array(n, m, array) {
    const copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);
    if (array) copy.set(array);
    return copy;
}
function Dimension(index, i, query) {
    const bit = 1 << i;
    return {
        one: bit,
        zero: ~bit,
        range: query.slice(),
        bisect: index.bisect,
        index: index.index,
        size: index.size,
        onAdd (added, curr) {
            const dim = this, range = dim.bisect(dim.range, added.value), idx = added.index, lo = range[0], hi = range[1], n1 = idx.length;
            let i;
            for(i = 0; i < lo; ++i)curr[idx[i]] |= bit;
            for(i = hi; i < n1; ++i)curr[idx[i]] |= bit;
            return dim;
        }
    };
}
/**
 * Maintains a list of values, sorted by key.
 */ function SortedIndex() {
    let index = array32(0), value = [], size = 0;
    function insert(key, data, base) {
        if (!data.length) return [];
        const n0 = size, n1 = data.length, addi = array32(n1);
        let addv = Array(n1), oldv, oldi, i;
        for(i = 0; i < n1; ++i){
            addv[i] = key(data[i]);
            addi[i] = i;
        }
        addv = sort(addv, addi);
        if (n0) {
            oldv = value;
            oldi = index;
            value = Array(n0 + n1);
            index = array32(n0 + n1);
            merge(base, oldv, oldi, n0, addv, addi, n1, value, index);
        } else {
            if (base > 0) for(i = 0; i < n1; ++i)addi[i] += base;
            value = addv;
            index = addi;
        }
        size = n0 + n1;
        return {
            index: addi,
            value: addv
        };
    }
    function remove(num, map) {
        // map: index -> remove
        const n = size;
        let idx, i, j; // seek forward to first removal
        for(i = 0; !map[index[i]] && i < n; ++i); // condense index and value arrays
        for(j = i; i < n; ++i)if (!map[idx = index[i]]) {
            index[j] = idx;
            value[j] = value[i];
            ++j;
        }
        size = n - num;
    }
    function reindex(map) {
        for(let i = 0, n = size; i < n; ++i)index[i] = map[index[i]];
    }
    function bisect(range, array) {
        let n;
        if (array) n = array.length;
        else {
            array = value;
            n = size;
        }
        return [
            (0, _d3Array.bisectLeft)(array, range[0], 0, n),
            (0, _d3Array.bisectRight)(array, range[1], 0, n)
        ];
    }
    return {
        insert: insert,
        remove: remove,
        bisect: bisect,
        reindex: reindex,
        index: ()=>index,
        size: ()=>size
    };
}
function sort(values, index) {
    values.sort.call(index, (a, b)=>{
        const x = values[a], y = values[b];
        return x < y ? -1 : x > y ? 1 : 0;
    });
    return (0, _d3Array.permute)(values, index);
}
function merge(base, value0, index0, n0, value1, index1, n1, value, index) {
    let i0 = 0, i1 = 0, i;
    for(i = 0; i0 < n0 && i1 < n1; ++i)if (value0[i0] < value1[i1]) {
        value[i] = value0[i0];
        index[i] = index0[i0++];
    } else {
        value[i] = value1[i1];
        index[i] = index1[i1++] + base;
    }
    for(; i0 < n0; ++i0, ++i){
        value[i] = value0[i0];
        index[i] = index0[i0];
    }
    for(; i1 < n1; ++i1, ++i){
        value[i] = value1[i1];
        index[i] = index1[i1] + base;
    }
}
/**
 * An indexed multi-dimensional filter.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
 * @param {Array} params.query - An array of per-dimension range queries.
 */ function CrossFilter(params) {
    (0, _vegaDataflow.Transform).call(this, Bitmaps(), params);
    this._indices = null;
    this._dims = null;
}
CrossFilter.Definition = {
    "type": "CrossFilter",
    "metadata": {},
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "query",
            "type": "array",
            "array": true,
            "required": true,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        }
    ]
};
(0, _vegaUtil.inherits)(CrossFilter, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        if (!this._dims) return this.init(_, pulse);
        else {
            var init = _.modified("fields") || _.fields.some((f)=>pulse.modified(f.fields));
            return init ? this.reinit(_, pulse) : this.eval(_, pulse);
        }
    },
    init (_, pulse) {
        const fields = _.fields, query = _.query, indices = this._indices = {}, dims = this._dims = [], m = query.length;
        let i = 0, key, index; // instantiate indices and dimensions
        for(; i < m; ++i){
            key = fields[i].fname;
            index = indices[key] || (indices[key] = SortedIndex());
            dims.push(Dimension(index, i, query[i]));
        }
        return this.eval(_, pulse);
    },
    reinit (_, pulse) {
        const output = pulse.materialize().fork(), fields = _.fields, query = _.query, indices = this._indices, dims = this._dims, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), out = output.rem = output.add, mod = output.mod, m = query.length, adds = {};
        let add, index, key, mods, remMap, modMap, i, n, f; // set prev to current state
        prev.set(curr); // if pulse has remove tuples, process them first
        if (pulse.rem.length) remMap = this.remove(_, pulse, output);
         // if pulse has added tuples, add them to state
        if (pulse.add.length) bits.add(pulse.add);
         // if pulse has modified tuples, create an index map
        if (pulse.mod.length) {
            modMap = {};
            for(mods = pulse.mod, i = 0, n = mods.length; i < n; ++i)modMap[mods[i]._index] = 1;
        } // re-initialize indices as needed, update curr bitmap
        for(i = 0; i < m; ++i){
            f = fields[i];
            if (!dims[i] || _.modified("fields", i) || pulse.modified(f.fields)) {
                key = f.fname;
                if (!(add = adds[key])) {
                    indices[key] = index = SortedIndex();
                    adds[key] = add = index.insert(f, pulse.source, 0);
                }
                dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);
            }
        } // visit each tuple
        // if filter state changed, push index to add/rem
        // else if in mod and passes a filter, push index to mod
        for(i = 0, n = bits.data().length; i < n; ++i){
            if (remMap[i]) continue;
            else if (prev[i] !== curr[i]) // add if state changed
            out.push(i);
            else if (modMap[i] && curr[i] !== all) // otherwise, pass mods through
            mod.push(i);
        }
        bits.mask = (1 << m) - 1;
        return output;
    },
    eval (_, pulse) {
        const output = pulse.materialize().fork(), m = this._dims.length;
        let mask = 0;
        if (pulse.rem.length) {
            this.remove(_, pulse, output);
            mask |= (1 << m) - 1;
        }
        if (_.modified("query") && !_.modified("fields")) mask |= this.update(_, pulse, output);
        if (pulse.add.length) {
            this.insert(_, pulse, output);
            mask |= (1 << m) - 1;
        }
        if (pulse.mod.length) {
            this.modify(pulse, output);
            mask |= (1 << m) - 1;
        }
        this.value.mask = mask;
        return output;
    },
    insert (_, pulse, output) {
        const tuples = pulse.add, bits = this.value, dims = this._dims, indices = this._indices, fields = _.fields, adds = {}, out = output.add, n = bits.size() + tuples.length, m = dims.length;
        let k = bits.size(), j, key, add; // resize bitmaps and add tuples as needed
        bits.resize(n, m);
        bits.add(tuples);
        const curr = bits.curr(), prev = bits.prev(), all = bits.all(); // add to dimensional indices
        for(j = 0; j < m; ++j){
            key = fields[j].fname;
            add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
            dims[j].onAdd(add, curr);
        } // set previous filters, output if passes at least one filter
        for(; k < n; ++k){
            prev[k] = all;
            if (curr[k] !== all) out.push(k);
        }
    },
    modify (pulse, output) {
        const out = output.mod, bits = this.value, curr = bits.curr(), all = bits.all(), tuples = pulse.mod;
        let i, n, k;
        for(i = 0, n = tuples.length; i < n; ++i){
            k = tuples[i]._index;
            if (curr[k] !== all) out.push(k);
        }
    },
    remove (_, pulse, output) {
        const indices = this._indices, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), map = {}, out = output.rem, tuples = pulse.rem;
        let i, n, k, f; // process tuples, output if passes at least one filter
        for(i = 0, n = tuples.length; i < n; ++i){
            k = tuples[i]._index;
            map[k] = 1; // build index map
            prev[k] = f = curr[k];
            curr[k] = all;
            if (f !== all) out.push(k);
        } // remove from dimensional indices
        for(k in indices)indices[k].remove(n, map);
        this.reindex(pulse, n, map);
        return map;
    },
    // reindex filters and indices after propagation completes
    reindex (pulse, num, map) {
        const indices = this._indices, bits = this.value;
        pulse.runAfter(()=>{
            const indexMap = bits.remove(num, map);
            for(const key in indices)indices[key].reindex(indexMap);
        });
    },
    update (_, pulse, output) {
        const dims = this._dims, query = _.query, stamp = pulse.stamp, m = dims.length;
        let mask = 0, i, q; // survey how many queries have changed
        output.filters = 0;
        for(q = 0; q < m; ++q)if (_.modified("query", q)) {
            i = q;
            ++mask;
        }
        if (mask === 1) {
            // only one query changed, use more efficient update
            mask = dims[i].one;
            this.incrementOne(dims[i], query[i], output.add, output.rem);
        } else // multiple queries changed, perform full record keeping
        for(q = 0, mask = 0; q < m; ++q){
            if (!_.modified("query", q)) continue;
            mask |= dims[q].one;
            this.incrementAll(dims[q], query[q], stamp, output.add);
            output.rem = output.add; // duplicate add/rem for downstream resolve
        }
        return mask;
    },
    incrementAll (dim, query, stamp, out) {
        const bits = this.value, seen = bits.seen(), curr = bits.curr(), prev = bits.prev(), index = dim.index(), old = dim.bisect(dim.range), range = dim.bisect(query), lo1 = range[0], hi1 = range[1], lo0 = old[0], hi0 = old[1], one = dim.one;
        let i, j, k; // Fast incremental update based on previous lo index.
        if (lo1 < lo0) for(i = lo1, j = Math.min(lo0, hi1); i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        else if (lo1 > lo0) for(i = lo0, j = Math.min(lo1, hi0); i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
         // Fast incremental update based on previous hi index.
        if (hi1 > hi0) for(i = Math.max(lo1, hi0), j = hi1; i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        else if (hi1 < hi0) for(i = Math.max(lo0, hi1), j = hi0; i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        dim.range = query.slice();
    },
    incrementOne (dim, query, add, rem) {
        const bits = this.value, curr = bits.curr(), index = dim.index(), old = dim.bisect(dim.range), range = dim.bisect(query), lo1 = range[0], hi1 = range[1], lo0 = old[0], hi0 = old[1], one = dim.one;
        let i, j, k; // Fast incremental update based on previous lo index.
        if (lo1 < lo0) for(i = lo1, j = Math.min(lo0, hi1); i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            add.push(k);
        }
        else if (lo1 > lo0) for(i = lo0, j = Math.min(lo1, hi0); i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            rem.push(k);
        }
         // Fast incremental update based on previous hi index.
        if (hi1 > hi0) for(i = Math.max(lo1, hi0), j = hi1; i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            add.push(k);
        }
        else if (hi1 < hi0) for(i = Math.max(lo0, hi1), j = hi0; i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            rem.push(k);
        }
        dim.range = query.slice();
    }
});
/**
 * Selectively filters tuples by resolving against a filter bitmap.
 * Useful for processing the output of a cross-filter transform.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.ignore - A bit mask indicating which filters to ignore.
 * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
 *   parameter value is a reference to a {@link CrossFilter} transform.
 */ function ResolveFilter(params) {
    (0, _vegaDataflow.Transform).call(this, null, params);
}
ResolveFilter.Definition = {
    "type": "ResolveFilter",
    "metadata": {},
    "params": [
        {
            "name": "ignore",
            "type": "number",
            "required": true,
            "description": "A bit mask indicating which filters to ignore."
        },
        {
            "name": "filter",
            "type": "object",
            "required": true,
            "description": "Per-tuple filter bitmaps from a CrossFilter transform."
        }
    ]
};
(0, _vegaUtil.inherits)(ResolveFilter, (0, _vegaDataflow.Transform), {
    transform (_, pulse) {
        const ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore
        bitmap = _.filter, mask = bitmap.mask; // exit early if no relevant filter changes
        if ((mask & ignore) === 0) return pulse.StopPropagation;
        const output = pulse.fork(pulse.ALL), data = bitmap.data(), curr = bitmap.curr(), prev = bitmap.prev(), pass = (k)=>!(curr[k] & ignore) ? data[k] : null; // propagate all mod tuples that pass the filter
        output.filter(output.MOD, pass); // determine add & rem tuples via filter functions
        // for efficiency, we do *not* populate new arrays,
        // instead we add filter functions applied downstream
        if (!(mask & mask - 1)) {
            // only one filter changed
            output.filter(output.ADD, pass);
            output.filter(output.REM, (k)=>(curr[k] & ignore) === mask ? data[k] : null);
        } else {
            // multiple filters changed
            output.filter(output.ADD, (k)=>{
                const c = curr[k] & ignore, f = !c && c ^ prev[k] & ignore;
                return f ? data[k] : null;
            });
            output.filter(output.REM, (k)=>{
                const c = curr[k] & ignore, f = c && !(c ^ (c ^ prev[k] & ignore));
                return f ? data[k] : null;
            });
        } // add filter to source data in case of reflow...
        return output.filter(output.SOURCE, (t)=>pass(t._index));
    }
});

},{"d3-array":"6IwJG","vega-dataflow":"3NitK","vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cGC2i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "View", ()=>View);
var _vegaUtil = require("vega-util");
var _vegaDataflow = require("vega-dataflow");
var _vegaScenegraph = require("vega-scenegraph");
var _d3Array = require("d3-array");
var _vegaFunctions = require("vega-functions");
var _vegaRuntime = require("vega-runtime");
var _d3Timer = require("d3-timer");
var _vegaFormat = require("vega-format");
// initialize aria role and label attributes
function initializeAria(view) {
    const el = view.container();
    if (el) {
        el.setAttribute("role", "graphics-document");
        el.setAttribute("aria-roleDescription", "visualization");
        ariaLabel(el, view.description());
    }
} // update aria-label if we have a DOM container element
function ariaLabel(el, desc) {
    if (el) desc == null ? el.removeAttribute("aria-label") : el.setAttribute("aria-label", desc);
}
function background(view) {
    // respond to background signal
    view.add(null, (_)=>{
        view._background = _.bg;
        view._resize = 1;
        return _.bg;
    }, {
        bg: view._signals.background
    });
}
const Default = "default";
function cursor(view) {
    // get cursor signal, add to dataflow if needed
    const cursor = view._signals.cursor || (view._signals.cursor = view.add({
        user: Default,
        item: null
    })); // evaluate cursor on each mousemove event
    view.on(view.events("view", "mousemove"), cursor, (_, event)=>{
        const value = cursor.value, user = value ? (0, _vegaUtil.isString)(value) ? value : value.user : Default, item = event.item && event.item.cursor || null;
        return value && user === value.user && item == value.item ? value : {
            user: user,
            item: item
        };
    }); // when cursor signal updates, set visible cursor
    view.add(null, function(_) {
        let user = _.cursor, item = this.value;
        if (!(0, _vegaUtil.isString)(user)) {
            item = user.item;
            user = user.user;
        }
        setCursor(view, user && user !== Default ? user : item || user);
        return item;
    }, {
        cursor: cursor
    });
}
function setCursor(view, cursor) {
    const el = view.globalCursor() ? typeof document !== "undefined" && document.body : view.container();
    if (el) return cursor == null ? el.style.removeProperty("cursor") : el.style.cursor = cursor;
}
function dataref(view, name) {
    var data = view._runtime.data;
    if (!(0, _vegaUtil.hasOwnProperty)(data, name)) (0, _vegaUtil.error)("Unrecognized data set: " + name);
    return data[name];
}
function data(name, values) {
    return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, (0, _vegaDataflow.changeset)().remove((0, _vegaUtil.truthy)).insert(values));
}
function change(name, changes) {
    if (!(0, _vegaDataflow.isChangeSet)(changes)) (0, _vegaUtil.error)("Second argument to changes must be a changeset.");
    const dataset = dataref(this, name);
    dataset.modified = true;
    return this.pulse(dataset.input, changes);
}
function insert(name, _) {
    return change.call(this, name, (0, _vegaDataflow.changeset)().insert(_));
}
function remove(name, _) {
    return change.call(this, name, (0, _vegaDataflow.changeset)().remove(_));
}
function width(view) {
    var padding = view.padding();
    return Math.max(0, view._viewWidth + padding.left + padding.right);
}
function height(view) {
    var padding = view.padding();
    return Math.max(0, view._viewHeight + padding.top + padding.bottom);
}
function offset(view) {
    var padding = view.padding(), origin = view._origin;
    return [
        padding.left + origin[0],
        padding.top + origin[1]
    ];
}
function resizeRenderer(view) {
    var origin = offset(view), w = width(view), h = height(view);
    view._renderer.background(view.background());
    view._renderer.resize(w, h, origin);
    view._handler.origin(origin);
    view._resizeListeners.forEach((handler)=>{
        try {
            handler(w, h);
        } catch (error) {
            view.error(error);
        }
    });
}
/**
 * Extend an event with additional view-specific methods.
 * Adds a new property ('vega') to an event that provides a number
 * of methods for querying information about the current interaction.
 * The vega object provides the following methods:
 *   view - Returns the backing View instance.
 *   item - Returns the currently active scenegraph item (if any).
 *   group - Returns the currently active scenegraph group (if any).
 *     This method accepts a single string-typed argument indicating the name
 *     of the desired parent group. The scenegraph will be traversed from
 *     the item up towards the root to search for a matching group. If no
 *     argument is provided the enclosing group for the active item is
 *     returned, unless the item it itself a group, in which case it is
 *     returned directly.
 *   xy - Returns a two-element array containing the x and y coordinates for
 *     mouse or touch events. For touch events, this is based on the first
 *     elements in the changedTouches array. This method accepts a single
 *     argument: either an item instance or mark name that should serve as
 *     the reference coordinate system. If no argument is provided the
 *     top-level view coordinate system is assumed.
 *   x - Returns the current x-coordinate, accepts the same arguments as xy.
 *   y - Returns the current y-coordinate, accepts the same arguments as xy.
 * @param {Event} event - The input event to extend.
 * @param {Item} item - The currently active scenegraph item (if any).
 * @return {Event} - The extended input event.
 */ function eventExtend(view, event, item) {
    var r = view._renderer, el = r && r.canvas(), p, e, translate;
    if (el) {
        translate = offset(view);
        e = event.changedTouches ? event.changedTouches[0] : event;
        p = (0, _vegaScenegraph.point)(e, el);
        p[0] -= translate[0];
        p[1] -= translate[1];
    }
    event.dataflow = view;
    event.item = item;
    event.vega = extension(view, item, p);
    return event;
}
function extension(view, item, point) {
    const itemGroup = item ? item.mark.marktype === "group" ? item : item.mark.group : null;
    function group(name) {
        var g = itemGroup, i;
        if (name) {
            for(i = item; i; i = i.mark.group)if (i.mark.name === name) {
                g = i;
                break;
            }
        }
        return g && g.mark && g.mark.interactive ? g : {};
    }
    function xy(item) {
        if (!item) return point;
        if ((0, _vegaUtil.isString)(item)) item = group(item);
        const p = point.slice();
        while(item){
            p[0] -= item.x || 0;
            p[1] -= item.y || 0;
            item = item.mark && item.mark.group;
        }
        return p;
    }
    return {
        view: (0, _vegaUtil.constant)(view),
        item: (0, _vegaUtil.constant)(item || {}),
        group: group,
        xy: xy,
        x: (item)=>xy(item)[0],
        y: (item)=>xy(item)[1]
    };
}
const VIEW = "view", TIMER = "timer", WINDOW = "window", NO_TRAP = {
    trap: false
};
/**
 * Initialize event handling configuration.
 * @param {object} config - The configuration settings.
 * @return {object}
 */ function initializeEventConfig(config) {
    const events = (0, _vegaUtil.extend)({
        defaults: {}
    }, config);
    const unpack = (obj, keys)=>{
        keys.forEach((k)=>{
            if ((0, _vegaUtil.isArray)(obj[k])) obj[k] = (0, _vegaUtil.toSet)(obj[k]);
        });
    };
    unpack(events.defaults, [
        "prevent",
        "allow"
    ]);
    unpack(events, [
        "view",
        "window",
        "selector"
    ]);
    return events;
}
function trackEventListener(view, sources, type, handler) {
    view._eventListeners.push({
        type: type,
        sources: (0, _vegaUtil.array)(sources),
        handler: handler
    });
}
function prevent(view, type) {
    var def = view._eventConfig.defaults, prevent = def.prevent, allow = def.allow;
    return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();
}
function permit(view, key, type) {
    const rule = view._eventConfig && view._eventConfig[key];
    if (rule === false || (0, _vegaUtil.isObject)(rule) && !rule[type]) {
        view.warn(`Blocked ${key} ${type} event listener.`);
        return false;
    }
    return true;
}
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @return {EventStream}
 */ function events(source, type, filter) {
    var view = this, s = new (0, _vegaDataflow.EventStream)(filter), send = function(e, item) {
        view.runAsync(null, ()=>{
            if (source === VIEW && prevent(view, type)) e.preventDefault();
            s.receive(eventExtend(view, e, item));
        });
    }, sources;
    if (source === TIMER) {
        if (permit(view, "timer", type)) view.timer(send, type);
    } else if (source === VIEW) {
        if (permit(view, "view", type)) // send traps errors, so use {trap: false} option
        view.addEventListener(type, send, NO_TRAP);
    } else {
        if (source === WINDOW) {
            if (permit(view, "window", type) && typeof window !== "undefined") sources = [
                window
            ];
        } else if (typeof document !== "undefined") {
            if (permit(view, "selector", type)) sources = document.querySelectorAll(source);
        }
        if (!sources) view.warn("Can not resolve event source: " + source);
        else {
            for(var i = 0, n = sources.length; i < n; ++i)sources[i].addEventListener(type, send);
            trackEventListener(view, sources, type, send);
        }
    }
    return s;
}
function itemFilter(event) {
    return event.item;
}
function markTarget(event) {
    // grab upstream collector feeding the mark operator
    return event.item.mark.source;
}
function invoke(name) {
    return function(_, event) {
        return event.vega.view().changeset().encode(event.item, name);
    };
}
function hover(hoverSet, leaveSet) {
    hoverSet = [
        hoverSet || "hover"
    ];
    leaveSet = [
        leaveSet || "update",
        hoverSet[0]
    ]; // invoke hover set upon mouseover
    this.on(this.events("view", "mouseover", itemFilter), markTarget, invoke(hoverSet)); // invoke leave set upon mouseout
    this.on(this.events("view", "mouseout", itemFilter), markTarget, invoke(leaveSet));
    return this;
}
/**
 * Finalize a View instance that is being removed.
 * Cancel any running timers.
 * Remove all external event listeners.
 * Remove any currently displayed tooltip.
 */ function finalize() {
    var tooltip = this._tooltip, timers = this._timers, listeners = this._eventListeners, n, m, e;
    n = timers.length;
    while(--n >= 0)timers[n].stop();
    n = listeners.length;
    while(--n >= 0){
        e = listeners[n];
        m = e.sources.length;
        while(--m >= 0)e.sources[m].removeEventListener(e.type, e.handler);
    }
    if (tooltip) tooltip.call(this, this._handler, null, null, null);
    return this;
}
function element(tag, attr, text) {
    const el = document.createElement(tag);
    for(const key in attr)el.setAttribute(key, attr[key]);
    if (text != null) el.textContent = text;
    return el;
}
const BindClass = "vega-bind", NameClass = "vega-bind-name", RadioClass = "vega-bind-radio";
/**
 * Bind a signal to an external HTML input element. The resulting two-way
 * binding will propagate input changes to signals, and propagate signal
 * changes to the input element state. If this view instance has no parent
 * element, we assume the view is headless and no bindings are created.
 * @param {Element|string} el - The parent DOM element to which the input
 *   element should be appended as a child. If string-valued, this argument
 *   will be treated as a CSS selector. If null or undefined, the parent
 *   element of this view will be used as the element.
 * @param {object} param - The binding parameters which specify the signal
 *   to bind to, the input element type, and type-specific configuration.
 * @return {View} - This view instance.
 */ function bind(view, el, binding) {
    if (!el) return;
    const param = binding.param;
    let bind = binding.state;
    if (!bind) {
        bind = binding.state = {
            elements: null,
            active: false,
            set: null,
            update: (value)=>{
                if (value != view.signal(param.signal)) view.runAsync(null, ()=>{
                    bind.source = true;
                    view.signal(param.signal, value);
                });
            }
        };
        if (param.debounce) bind.update = (0, _vegaUtil.debounce)(param.debounce, bind.update);
    }
    const create = param.input == null && param.element ? target : generate;
    create(bind, el, param, view);
    if (!bind.active) {
        view.on(view._signals[param.signal], null, ()=>{
            bind.source ? bind.source = false : bind.set(view.signal(param.signal));
        });
        bind.active = true;
    }
    return bind;
}
/**
 * Bind the signal to an external EventTarget.
 */ function target(bind, node, param, view) {
    const type = param.event || "input";
    const handler = ()=>bind.update(node.value); // initialize signal value to external input value
    view.signal(param.signal, node.value); // listen for changes on the element
    node.addEventListener(type, handler); // register with view, so we can remove it upon finalization
    trackEventListener(view, node, type, handler); // propagate change to element
    bind.set = (value)=>{
        node.value = value;
        node.dispatchEvent(event(type));
    };
}
function event(type) {
    return typeof Event !== "undefined" ? new Event(type) : {
        type
    };
}
/**
 * Generate an HTML input form element and bind it to a signal.
 */ function generate(bind, el, param, view) {
    const value = view.signal(param.signal);
    const div = element("div", {
        "class": BindClass
    });
    const wrapper = param.input === "radio" ? div : div.appendChild(element("label"));
    wrapper.appendChild(element("span", {
        "class": NameClass
    }, param.name || param.signal));
    el.appendChild(div);
    let input = form;
    switch(param.input){
        case "checkbox":
            input = checkbox;
            break;
        case "select":
            input = select;
            break;
        case "radio":
            input = radio;
            break;
        case "range":
            input = range;
            break;
    }
    input(bind, wrapper, param, value);
}
/**
 * Generates an arbitrary input form element.
 * The input type is controlled via user-provided parameters.
 */ function form(bind, el, param, value) {
    const node = element("input");
    for(const key in param)if (key !== "signal" && key !== "element") node.setAttribute(key === "input" ? "type" : key, param[key]);
    node.setAttribute("name", param.signal);
    node.value = value;
    el.appendChild(node);
    node.addEventListener("input", ()=>bind.update(node.value));
    bind.elements = [
        node
    ];
    bind.set = (value)=>node.value = value;
}
/**
 * Generates a checkbox input element.
 */ function checkbox(bind, el, param, value) {
    const attr = {
        type: "checkbox",
        name: param.signal
    };
    if (value) attr.checked = true;
    const node = element("input", attr);
    el.appendChild(node);
    node.addEventListener("change", ()=>bind.update(node.checked));
    bind.elements = [
        node
    ];
    bind.set = (value)=>node.checked = !!value || null;
}
/**
 * Generates a selection list input element.
 */ function select(bind, el, param, value) {
    const node = element("select", {
        name: param.signal
    }), labels = param.labels || [];
    param.options.forEach((option, i)=>{
        const attr = {
            value: option
        };
        if (valuesEqual(option, value)) attr.selected = true;
        node.appendChild(element("option", attr, (labels[i] || option) + ""));
    });
    el.appendChild(node);
    node.addEventListener("change", ()=>{
        bind.update(param.options[node.selectedIndex]);
    });
    bind.elements = [
        node
    ];
    bind.set = (value)=>{
        for(let i = 0, n = param.options.length; i < n; ++i)if (valuesEqual(param.options[i], value)) {
            node.selectedIndex = i;
            return;
        }
    };
}
/**
 * Generates a radio button group.
 */ function radio(bind, el, param, value) {
    const group = element("span", {
        "class": RadioClass
    }), labels = param.labels || [];
    el.appendChild(group);
    bind.elements = param.options.map((option, i)=>{
        const attr = {
            type: "radio",
            name: param.signal,
            value: option
        };
        if (valuesEqual(option, value)) attr.checked = true;
        const input = element("input", attr);
        input.addEventListener("change", ()=>bind.update(option));
        const label = element("label", {}, (labels[i] || option) + "");
        label.prepend(input);
        group.appendChild(label);
        return input;
    });
    bind.set = (value)=>{
        const nodes = bind.elements, n = nodes.length;
        for(let i = 0; i < n; ++i)if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
    };
}
/**
 * Generates a slider input element.
 */ function range(bind, el, param, value) {
    value = value !== undefined ? value : (+param.max + +param.min) / 2;
    const max = param.max != null ? param.max : Math.max(100, +value) || 100, min = param.min || Math.min(0, max, +value) || 0, step = param.step || (0, _d3Array.tickStep)(min, max, 100);
    const node = element("input", {
        type: "range",
        name: param.signal,
        min: min,
        max: max,
        step: step
    });
    node.value = value;
    const span = element("span", {}, +value);
    el.appendChild(node);
    el.appendChild(span);
    const update = ()=>{
        span.textContent = node.value;
        bind.update(+node.value);
    }; // subscribe to both input and change
    node.addEventListener("input", update);
    node.addEventListener("change", update);
    bind.elements = [
        node
    ];
    bind.set = (value)=>{
        node.value = value;
        span.textContent = value;
    };
}
function valuesEqual(a, b) {
    return a === b || a + "" === b + "";
}
function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
    r = r || new constructor(view.loader());
    return r.initialize(el, width(view), height(view), offset(view), scaleFactor, opt).background(view.background());
}
function trap(view, fn) {
    return !fn ? null : function() {
        try {
            fn.apply(this, arguments);
        } catch (error) {
            view.error(error);
        }
    };
}
function initializeHandler(view, prevHandler, el, constructor) {
    // instantiate scenegraph handler
    const handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, offset(view), view); // transfer event handlers
    if (prevHandler) prevHandler.handlers().forEach((h)=>{
        handler.on(h.type, h.handler);
    });
    return handler;
}
function initialize(el, elBind) {
    const view = this, type = view._renderType, config = view._eventConfig.bind, module = (0, _vegaScenegraph.renderModule)(type); // containing dom element
    el = view._el = el ? lookup(view, el, true) : null; // initialize aria attributes
    initializeAria(view); // select appropriate renderer & handler
    if (!module) view.error("Unrecognized renderer type: " + type);
    const Handler = module.handler || (0, _vegaScenegraph.CanvasHandler), Renderer = el ? module.renderer : module.headless; // initialize renderer and input handler
    view._renderer = !Renderer ? null : initializeRenderer(view, view._renderer, el, Renderer);
    view._handler = initializeHandler(view, view._handler, el, Handler);
    view._redraw = true; // initialize signal bindings
    if (el && config !== "none") {
        elBind = elBind ? view._elBind = lookup(view, elBind, true) : el.appendChild(element("form", {
            "class": "vega-bindings"
        }));
        view._bind.forEach((_)=>{
            if (_.param.element && config !== "container") _.element = lookup(view, _.param.element, !!_.param.input);
        });
        view._bind.forEach((_)=>{
            bind(view, _.element || elBind, _);
        });
    }
    return view;
}
function lookup(view, el, clear) {
    if (typeof el === "string") {
        if (typeof document !== "undefined") {
            el = document.querySelector(el);
            if (!el) {
                view.error("Signal bind element not found: " + el);
                return null;
            }
        } else {
            view.error("DOM document instance not found.");
            return null;
        }
    }
    if (el && clear) try {
        el.innerHTML = "";
    } catch (e) {
        el = null;
        view.error(e);
    }
    return el;
}
const number = (_)=>+_ || 0;
const paddingObject = (_)=>({
        top: _,
        bottom: _,
        left: _,
        right: _
    });
function padding(_) {
    return (0, _vegaUtil.isObject)(_) ? {
        top: number(_.top),
        bottom: number(_.bottom),
        left: number(_.left),
        right: number(_.right)
    } : paddingObject(number(_));
}
/**
 * Render the current scene in a headless fashion.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A Promise that resolves to a renderer.
 */ async function renderHeadless(view, type, scaleFactor, opt) {
    const module = (0, _vegaScenegraph.renderModule)(type), ctr = module && module.headless;
    if (!ctr) (0, _vegaUtil.error)("Unrecognized renderer type: " + type);
    await view.runAsync();
    return initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);
}
/**
 * Produce an image URL for the visualization. Depending on the type
 * parameter, the generated URL contains data for either a PNG or SVG image.
 * The URL can be used (for example) to download images of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
 *   The 'canvas' and 'png' types are synonyms for a PNG image.
 * @return {Promise} - A promise that resolves to an image URL.
 */ async function renderToImageURL(type, scaleFactor) {
    if (type !== (0, _vegaScenegraph.RenderType).Canvas && type !== (0, _vegaScenegraph.RenderType).SVG && type !== (0, _vegaScenegraph.RenderType).PNG) (0, _vegaUtil.error)("Unrecognized image type: " + type);
    const r = await renderHeadless(this, type, scaleFactor);
    return type === (0, _vegaScenegraph.RenderType).SVG ? toBlobURL(r.svg(), "image/svg+xml") : r.canvas().toDataURL("image/png");
}
function toBlobURL(data, mime) {
    const blob = new Blob([
        data
    ], {
        type: mime
    });
    return window.URL.createObjectURL(blob);
}
/**
 * Produce a Canvas instance containing a rendered visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to a Canvas instance.
 */ async function renderToCanvas(scaleFactor, opt) {
    const r = await renderHeadless(this, (0, _vegaScenegraph.RenderType).Canvas, scaleFactor, opt);
    return r.canvas();
}
/**
 * Produce a rendered SVG string of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to an SVG string.
 */ async function renderToSVG(scaleFactor) {
    const r = await renderHeadless(this, (0, _vegaScenegraph.RenderType).SVG, scaleFactor);
    return r.svg();
}
function runtime(view, spec, expr) {
    return (0, _vegaRuntime.context)(view, (0, _vegaDataflow.transforms), (0, _vegaFunctions.functionContext), expr).parse(spec);
}
function scale(name) {
    var scales = this._runtime.scales;
    if (!(0, _vegaUtil.hasOwnProperty)(scales, name)) (0, _vegaUtil.error)("Unrecognized scale or projection: " + name);
    return scales[name].value;
}
var Width = "width", Height = "height", Padding = "padding", Skip = {
    skip: true
};
function viewWidth(view, width) {
    var a = view.autosize(), p = view.padding();
    return width - (a && a.contains === Padding ? p.left + p.right : 0);
}
function viewHeight(view, height) {
    var a = view.autosize(), p = view.padding();
    return height - (a && a.contains === Padding ? p.top + p.bottom : 0);
}
function initializeResize(view) {
    var s = view._signals, w = s[Width], h = s[Height], p = s[Padding];
    function resetSize() {
        view._autosize = view._resize = 1;
    } // respond to width signal
    view._resizeWidth = view.add(null, (_)=>{
        view._width = _.size;
        view._viewWidth = viewWidth(view, _.size);
        resetSize();
    }, {
        size: w
    }); // respond to height signal
    view._resizeHeight = view.add(null, (_)=>{
        view._height = _.size;
        view._viewHeight = viewHeight(view, _.size);
        resetSize();
    }, {
        size: h
    }); // respond to padding signal
    const resizePadding = view.add(null, resetSize, {
        pad: p
    }); // set rank to run immediately after source signal
    view._resizeWidth.rank = w.rank + 1;
    view._resizeHeight.rank = h.rank + 1;
    resizePadding.rank = p.rank + 1;
}
function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
    this.runAfter((view)=>{
        let rerun = 0; // reset autosize flag
        view._autosize = 0; // width value changed: update signal, skip resize op
        if (view.width() !== width) {
            rerun = 1;
            view.signal(Width, width, Skip); // set width, skip update calc
            view._resizeWidth.skip(true); // skip width resize handler
        } // height value changed: update signal, skip resize op
        if (view.height() !== height) {
            rerun = 1;
            view.signal(Height, height, Skip); // set height, skip update calc
            view._resizeHeight.skip(true); // skip height resize handler
        } // view width changed: update view property, set resize flag
        if (view._viewWidth !== viewWidth) {
            view._resize = 1;
            view._viewWidth = viewWidth;
        } // view height changed: update view property, set resize flag
        if (view._viewHeight !== viewHeight) {
            view._resize = 1;
            view._viewHeight = viewHeight;
        } // origin changed: update view property, set resize flag
        if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
            view._resize = 1;
            view._origin = origin;
        } // run dataflow on width/height signal change
        if (rerun) view.run("enter");
        if (auto) view.runAfter((v)=>v.resize());
    }, false, 1);
}
/**
 * Get the current view state, consisting of signal values and/or data sets.
 * @param {object} [options] - Options flags indicating which state to export.
 *   If unspecified, all signals and data sets will be exported.
 * @param {function(string, Operator):boolean} [options.signals] - Optional
 *   predicate function for testing if a signal should be included in the
 *   exported state. If unspecified, all signals will be included, except for
 *   those named 'parent' or those which refer to a Transform value.
 * @param {function(string, object):boolean} [options.data] - Optional
 *   predicate function for testing if a data set's input should be included
 *   in the exported state. If unspecified, all data sets that have been
 *   explicitly modified will be included.
 * @param {boolean} [options.recurse=true] - Flag indicating if the exported
 *   state should recursively include state from group mark sub-contexts.
 * @return {object} - An object containing the exported state values.
 */ function getState(options) {
    return this._runtime.getState(options || {
        data: dataTest,
        signals: signalTest,
        recurse: true
    });
}
function dataTest(name, data) {
    return data.modified && (0, _vegaUtil.isArray)(data.input.value) && name.indexOf("_:vega:_");
}
function signalTest(name, op) {
    return !(name === "parent" || op instanceof (0, _vegaDataflow.transforms).proxy);
}
/**
 * Sets the current view state and updates the view by invoking run.
 * @param {object} state - A state object containing signal and/or
 *   data set values, following the format used by the getState method.
 * @return {View} - This view instance.
 */ function setState(state) {
    this.runAsync(null, (v)=>{
        v._trigger = false;
        v._runtime.setState(state);
    }, (v)=>{
        v._trigger = true;
    });
    return this;
}
function timer(callback, delay) {
    function tick(elapsed) {
        callback({
            timestamp: Date.now(),
            elapsed: elapsed
        });
    }
    this._timers.push((0, _d3Timer.interval)(tick, delay));
}
function defaultTooltip(handler, event, item, value) {
    const el = handler.element();
    if (el) el.setAttribute("title", formatTooltip(value));
}
function formatTooltip(value) {
    return value == null ? "" : (0, _vegaUtil.isArray)(value) ? formatArray(value) : (0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isDate)(value) ? formatObject(value) : value + "";
}
function formatObject(obj) {
    return Object.keys(obj).map((key)=>{
        const v = obj[key];
        return key + ": " + ((0, _vegaUtil.isArray)(v) ? formatArray(v) : formatValue(v));
    }).join("\n");
}
function formatArray(value) {
    return "[" + value.map(formatValue).join(", ") + "]";
}
function formatValue(value) {
    return (0, _vegaUtil.isArray)(value) ? "[…]" : (0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isDate)(value) ? "{…}" : value;
}
/**
 * Create a new View instance from a Vega dataflow runtime specification.
 * The generated View will not immediately be ready for display. Callers
 * should also invoke the initialize method (e.g., to set the parent
 * DOM element in browser-based deployment) and then invoke the run
 * method to evaluate the dataflow graph. Rendering will automatically
 * be performed upon dataflow runs.
 * @constructor
 * @param {object} spec - The Vega dataflow runtime specification.
 */ function View(spec, options) {
    const view = this;
    options = options || {};
    (0, _vegaDataflow.Dataflow).call(view);
    if (options.loader) view.loader(options.loader);
    if (options.logger) view.logger(options.logger);
    if (options.logLevel != null) view.logLevel(options.logLevel);
    if (options.locale || spec.locale) {
        const loc = (0, _vegaUtil.extend)({}, spec.locale, options.locale);
        view.locale((0, _vegaFormat.locale)(loc.number, loc.time));
    }
    view._el = null;
    view._elBind = null;
    view._renderType = options.renderer || (0, _vegaScenegraph.RenderType).Canvas;
    view._scenegraph = new (0, _vegaScenegraph.Scenegraph)();
    const root = view._scenegraph.root; // initialize renderer, handler and event management
    view._renderer = null;
    view._tooltip = options.tooltip || defaultTooltip, view._redraw = true;
    view._handler = new (0, _vegaScenegraph.CanvasHandler)().scene(root);
    view._globalCursor = false;
    view._preventDefault = false;
    view._timers = [];
    view._eventListeners = [];
    view._resizeListeners = []; // initialize event configuration
    view._eventConfig = initializeEventConfig(spec.eventConfig);
    view.globalCursor(view._eventConfig.globalCursor); // initialize dataflow graph
    const ctx = runtime(view, spec, options.expr);
    view._runtime = ctx;
    view._signals = ctx.signals;
    view._bind = (spec.bindings || []).map((_)=>({
            state: null,
            param: (0, _vegaUtil.extend)({}, _)
        })); // initialize scenegraph
    if (ctx.root) ctx.root.set(root);
    root.source = ctx.data.root.input;
    view.pulse(ctx.data.root.input, view.changeset().insert(root.items)); // initialize view size
    view._width = view.width();
    view._height = view.height();
    view._viewWidth = viewWidth(view, view._width);
    view._viewHeight = viewHeight(view, view._height);
    view._origin = [
        0,
        0
    ];
    view._resize = 0;
    view._autosize = 1;
    initializeResize(view); // initialize background color
    background(view); // initialize cursor
    cursor(view); // initialize view description
    view.description(spec.description); // initialize hover proessing, if requested
    if (options.hover) view.hover(); // initialize DOM container(s) and renderer
    if (options.container) view.initialize(options.container, options.bind);
}
function lookupSignal(view, name) {
    return (0, _vegaUtil.hasOwnProperty)(view._signals, name) ? view._signals[name] : (0, _vegaUtil.error)("Unrecognized signal name: " + (0, _vegaUtil.stringValue)(name));
}
function findOperatorHandler(op, handler) {
    const h = (op._targets || []).filter((op)=>op._update && op._update.handler === handler);
    return h.length ? h[0] : null;
}
function addOperatorListener(view, name, op, handler) {
    let h = findOperatorHandler(op, handler);
    if (!h) {
        h = trap(view, ()=>handler(name, op.value));
        h.handler = handler;
        view.on(op, null, h);
    }
    return view;
}
function removeOperatorListener(view, op, handler) {
    const h = findOperatorHandler(op, handler);
    if (h) op._targets.remove(h);
    return view;
}
(0, _vegaUtil.inherits)(View, (0, _vegaDataflow.Dataflow), {
    // -- DATAFLOW / RENDERING ----
    async evaluate (encode, prerun, postrun) {
        // evaluate dataflow and prerun
        await (0, _vegaDataflow.Dataflow).prototype.evaluate.call(this, encode, prerun); // render as needed
        if (this._redraw || this._resize) try {
            if (this._renderer) {
                if (this._resize) {
                    this._resize = 0;
                    resizeRenderer(this);
                }
                await this._renderer.renderAsync(this._scenegraph.root);
            }
            this._redraw = false;
        } catch (e) {
            this.error(e);
        }
         // evaluate postrun
        if (postrun) (0, _vegaDataflow.asyncCallback)(this, postrun);
        return this;
    },
    dirty (item) {
        this._redraw = true;
        this._renderer && this._renderer.dirty(item);
    },
    // -- GET / SET ----
    description (text) {
        if (arguments.length) {
            const desc = text != null ? text + "" : null;
            if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);
            return this;
        }
        return this._desc;
    },
    container () {
        return this._el;
    },
    scenegraph () {
        return this._scenegraph;
    },
    origin () {
        return this._origin.slice();
    },
    signal (name, value, options) {
        const op = lookupSignal(this, name);
        return arguments.length === 1 ? op.value : this.update(op, value, options);
    },
    width (_) {
        return arguments.length ? this.signal("width", _) : this.signal("width");
    },
    height (_) {
        return arguments.length ? this.signal("height", _) : this.signal("height");
    },
    padding (_) {
        return arguments.length ? this.signal("padding", padding(_)) : padding(this.signal("padding"));
    },
    autosize (_) {
        return arguments.length ? this.signal("autosize", _) : this.signal("autosize");
    },
    background (_) {
        return arguments.length ? this.signal("background", _) : this.signal("background");
    },
    renderer (type) {
        if (!arguments.length) return this._renderType;
        if (!(0, _vegaScenegraph.renderModule)(type)) (0, _vegaUtil.error)("Unrecognized renderer type: " + type);
        if (type !== this._renderType) {
            this._renderType = type;
            this._resetRenderer();
        }
        return this;
    },
    tooltip (handler) {
        if (!arguments.length) return this._tooltip;
        if (handler !== this._tooltip) {
            this._tooltip = handler;
            this._resetRenderer();
        }
        return this;
    },
    loader (loader) {
        if (!arguments.length) return this._loader;
        if (loader !== this._loader) {
            (0, _vegaDataflow.Dataflow).prototype.loader.call(this, loader);
            this._resetRenderer();
        }
        return this;
    },
    resize () {
        // set flag to perform autosize
        this._autosize = 1; // touch autosize signal to ensure top-level ViewLayout runs
        return this.touch(lookupSignal(this, "autosize"));
    },
    _resetRenderer () {
        if (this._renderer) {
            this._renderer = null;
            this.initialize(this._el, this._elBind);
        }
    },
    // -- SIZING ----
    _resizeView: resizeView,
    // -- EVENT HANDLING ----
    addEventListener (type, handler, options) {
        let callback = handler;
        if (!(options && options.trap === false)) {
            // wrap callback in error handler
            callback = trap(this, handler);
            callback.raw = handler;
        }
        this._handler.on(type, callback);
        return this;
    },
    removeEventListener (type, handler) {
        var handlers = this._handler.handlers(type), i = handlers.length, h, t; // search registered handlers, remove if match found
        while(--i >= 0){
            t = handlers[i].type;
            h = handlers[i].handler;
            if (type === t && (handler === h || handler === h.raw)) {
                this._handler.off(t, h);
                break;
            }
        }
        return this;
    },
    addResizeListener (handler) {
        const l = this._resizeListeners;
        if (l.indexOf(handler) < 0) // add handler if it isn't already registered
        // note: error trapping handled elsewhere, so
        // no need to wrap handlers here
        l.push(handler);
        return this;
    },
    removeResizeListener (handler) {
        var l = this._resizeListeners, i = l.indexOf(handler);
        if (i >= 0) l.splice(i, 1);
        return this;
    },
    addSignalListener (name, handler) {
        return addOperatorListener(this, name, lookupSignal(this, name), handler);
    },
    removeSignalListener (name, handler) {
        return removeOperatorListener(this, lookupSignal(this, name), handler);
    },
    addDataListener (name, handler) {
        return addOperatorListener(this, name, dataref(this, name).values, handler);
    },
    removeDataListener (name, handler) {
        return removeOperatorListener(this, dataref(this, name).values, handler);
    },
    globalCursor (_) {
        if (arguments.length) {
            if (this._globalCursor !== !!_) {
                const prev = setCursor(this, null); // clear previous cursor
                this._globalCursor = !!_;
                if (prev) setCursor(this, prev); // swap cursor
            }
            return this;
        } else return this._globalCursor;
    },
    preventDefault (_) {
        if (arguments.length) {
            this._preventDefault = _;
            return this;
        } else return this._preventDefault;
    },
    timer,
    events,
    finalize,
    hover,
    // -- DATA ----
    data,
    change,
    insert,
    remove,
    // -- SCALES --
    scale,
    // -- INITIALIZATION ----
    initialize,
    // -- HEADLESS RENDERING ----
    toImageURL: renderToImageURL,
    toCanvas: renderToCanvas,
    toSVG: renderToSVG,
    // -- SAVE / RESTORE STATE ----
    getState,
    setState
});

},{"vega-util":"bApja","vega-dataflow":"3NitK","vega-scenegraph":"jattk","d3-array":"6IwJG","vega-functions":"iuqsd","vega-runtime":"k7ppL","d3-timer":"d15bJ","vega-format":"47kOt","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iuqsd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataPrefix", ()=>DataPrefix);
parcelHelpers.export(exports, "IndexPrefix", ()=>IndexPrefix);
parcelHelpers.export(exports, "ScalePrefix", ()=>ScalePrefix);
parcelHelpers.export(exports, "SignalPrefix", ()=>SignalPrefix);
parcelHelpers.export(exports, "bandspace", ()=>bandspace);
parcelHelpers.export(exports, "bandwidth", ()=>bandwidth);
parcelHelpers.export(exports, "codeGenerator", ()=>codeGenerator);
parcelHelpers.export(exports, "codegenParams", ()=>codegenParams);
parcelHelpers.export(exports, "containerSize", ()=>containerSize);
parcelHelpers.export(exports, "contrast", ()=>contrast);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "data", ()=>data);
parcelHelpers.export(exports, "dataVisitor", ()=>dataVisitor);
parcelHelpers.export(exports, "dayAbbrevFormat", ()=>dayAbbrevFormat);
parcelHelpers.export(exports, "dayFormat", ()=>dayFormat);
parcelHelpers.export(exports, "debug", ()=>debug);
parcelHelpers.export(exports, "domain", ()=>domain);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "expressionFunction", ()=>expressionFunction);
parcelHelpers.export(exports, "format", ()=>format);
parcelHelpers.export(exports, "functionContext", ()=>functionContext);
parcelHelpers.export(exports, "geoArea", ()=>geoArea);
parcelHelpers.export(exports, "geoBounds", ()=>geoBounds);
parcelHelpers.export(exports, "geoCentroid", ()=>geoCentroid);
parcelHelpers.export(exports, "geoShape", ()=>geoShape);
parcelHelpers.export(exports, "inScope", ()=>inScope);
parcelHelpers.export(exports, "indata", ()=>indata);
parcelHelpers.export(exports, "indataVisitor", ()=>indataVisitor);
parcelHelpers.export(exports, "indexof", ()=>indexof);
parcelHelpers.export(exports, "info", ()=>info);
parcelHelpers.export(exports, "invert", ()=>invert);
parcelHelpers.export(exports, "join", ()=>join);
parcelHelpers.export(exports, "lastindexof", ()=>lastindexof);
parcelHelpers.export(exports, "luminance", ()=>luminance);
parcelHelpers.export(exports, "merge", ()=>merge);
parcelHelpers.export(exports, "modify", ()=>modify);
parcelHelpers.export(exports, "monthAbbrevFormat", ()=>monthAbbrevFormat);
parcelHelpers.export(exports, "monthFormat", ()=>monthFormat);
parcelHelpers.export(exports, "parseExpression", ()=>parser);
parcelHelpers.export(exports, "pathShape", ()=>pathShape);
parcelHelpers.export(exports, "pinchAngle", ()=>pinchAngle);
parcelHelpers.export(exports, "pinchDistance", ()=>pinchDistance);
parcelHelpers.export(exports, "pluck", ()=>pluck);
parcelHelpers.export(exports, "range", ()=>range);
parcelHelpers.export(exports, "replace", ()=>replace);
parcelHelpers.export(exports, "reverse", ()=>reverse);
parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "scaleGradient", ()=>scaleGradient);
parcelHelpers.export(exports, "scaleVisitor", ()=>scaleVisitor);
parcelHelpers.export(exports, "screen", ()=>screen);
parcelHelpers.export(exports, "setdata", ()=>setdata);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "timeFormat", ()=>timeFormat);
parcelHelpers.export(exports, "timeParse", ()=>timeParse);
parcelHelpers.export(exports, "treeAncestors", ()=>treeAncestors);
parcelHelpers.export(exports, "treePath", ()=>treePath);
parcelHelpers.export(exports, "utcFormat", ()=>utcFormat);
parcelHelpers.export(exports, "utcParse", ()=>utcParse);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "windowSize", ()=>windowSize);
var _vegaUtil = require("vega-util");
var _vegaExpression = require("vega-expression");
var _d3Geo = require("d3-geo");
var _d3Color = require("d3-color");
var _vegaDataflow = require("vega-dataflow");
var _vegaScale = require("vega-scale");
var _vegaScenegraph = require("vega-scenegraph");
var _vegaSelections = require("vega-selections");
var _vegaStatistics = require("vega-statistics");
var _vegaTime = require("vega-time");
var _d3Array = require("d3-array");
function data(name) {
    const data = this.context.data[name];
    return data ? data.values.value : [];
}
function indata(name, field, value) {
    const index = this.context.data[name]["index:" + field], entry = index ? index.value.get(value) : undefined;
    return entry ? entry.count : entry;
}
function setdata(name, tuples) {
    const df = this.context.dataflow, data = this.context.data[name], input = data.input;
    df.pulse(input, df.changeset().remove((0, _vegaUtil.truthy)).insert(tuples));
    return 1;
}
function encode(item, name, retval) {
    if (item) {
        const df = this.context.dataflow, target = item.mark.source;
        df.pulse(target, df.changeset().encode(item, name));
    }
    return retval !== undefined ? retval : item;
}
const wrap = (method)=>function(value, spec) {
        const locale = this.context.dataflow.locale();
        return locale[method](spec)(value);
    };
const format = wrap("format");
const timeFormat = wrap("timeFormat");
const utcFormat = wrap("utcFormat");
const timeParse = wrap("timeParse");
const utcParse = wrap("utcParse");
const dateObj = new Date(2000, 0, 1);
function time(month, day, specifier) {
    if (!Number.isInteger(month) || !Number.isInteger(day)) return "";
    dateObj.setYear(2000);
    dateObj.setMonth(month);
    dateObj.setDate(day);
    return timeFormat.call(this, dateObj, specifier);
}
function monthFormat(month) {
    return time.call(this, month, 1, "%B");
}
function monthAbbrevFormat(month) {
    return time.call(this, month, 1, "%b");
}
function dayFormat(day) {
    return time.call(this, 0, 2 + day, "%A");
}
function dayAbbrevFormat(day) {
    return time.call(this, 0, 2 + day, "%a");
}
const DataPrefix = ":";
const IndexPrefix = "@";
const ScalePrefix = "%";
const SignalPrefix = "$";
function dataVisitor(name, args, scope, params) {
    if (args[0].type !== (0, _vegaExpression.Literal)) (0, _vegaUtil.error)("First argument to data functions must be a string literal.");
    const data = args[0].value, dataName = DataPrefix + data;
    if (!(0, _vegaUtil.hasOwnProperty)(dataName, params)) try {
        params[dataName] = scope.getData(data).tuplesRef();
    } catch (err) {}
}
function indataVisitor(name, args, scope, params) {
    if (args[0].type !== (0, _vegaExpression.Literal)) (0, _vegaUtil.error)("First argument to indata must be a string literal.");
    if (args[1].type !== (0, _vegaExpression.Literal)) (0, _vegaUtil.error)("Second argument to indata must be a string literal.");
    const data = args[0].value, field = args[1].value, indexName = IndexPrefix + field;
    if (!(0, _vegaUtil.hasOwnProperty)(indexName, params)) params[indexName] = scope.getData(data).indataRef(scope, field);
}
function scaleVisitor(name, args, scope, params) {
    if (args[0].type === (0, _vegaExpression.Literal)) // add scale dependency
    addScaleDependency(scope, params, args[0].value);
    else // indirect scale lookup; add all scales as parameters
    for(name in scope.scales)addScaleDependency(scope, params, name);
}
function addScaleDependency(scope, params, name) {
    const scaleName = ScalePrefix + name;
    if (!(0, _vegaUtil.hasOwnProperty)(params, scaleName)) try {
        params[scaleName] = scope.scaleRef(name);
    } catch (err) {}
}
function getScale(name, ctx) {
    let s;
    return (0, _vegaUtil.isFunction)(name) ? name : (0, _vegaUtil.isString)(name) ? (s = ctx.scales[name]) && s.value : undefined;
}
function internalScaleFunctions(codegen, fnctx, visitors) {
    // add helper method to the 'this' expression function context
    fnctx.__bandwidth = (s)=>s && s.bandwidth ? s.bandwidth() : 0; // register AST visitors for internal scale functions
    visitors._bandwidth = scaleVisitor;
    visitors._range = scaleVisitor;
    visitors._scale = scaleVisitor; // resolve scale reference directly to the signal hash argument
    const ref = (arg)=>"_[" + (arg.type === (0, _vegaExpression.Literal) ? (0, _vegaUtil.stringValue)(ScalePrefix + arg.value) : (0, _vegaUtil.stringValue)(ScalePrefix) + "+" + codegen(arg)) + "]"; // define and return internal scale function code generators
    // these internal functions are called by mark encoders
    return {
        _bandwidth: (args)=>`this.__bandwidth(${ref(args[0])})`,
        _range: (args)=>`${ref(args[0])}.range()`,
        _scale: (args)=>`${ref(args[0])}(${codegen(args[1])})`
    };
}
function geoMethod(methodName, globalMethod) {
    return function(projection, geojson, group) {
        if (projection) {
            // projection defined, use it
            const p = getScale(projection, (group || this).context);
            return p && p.path[methodName](geojson);
        } else // projection undefined, use global method
        return globalMethod(geojson);
    };
}
const geoArea = geoMethod("area", (0, _d3Geo.geoArea));
const geoBounds = geoMethod("bounds", (0, _d3Geo.geoBounds));
const geoCentroid = geoMethod("centroid", (0, _d3Geo.geoCentroid));
function inScope(item) {
    const group = this.context.group;
    let value = false;
    if (group) while(item){
        if (item === group) {
            value = true;
            break;
        }
        item = item.mark.group;
    }
    return value;
}
function log(df, method, args) {
    try {
        df[method].apply(df, [
            "EXPRESSION"
        ].concat([].slice.call(args)));
    } catch (err) {
        df.warn(err);
    }
    return args[args.length - 1];
}
function warn() {
    return log(this.context.dataflow, "warn", arguments);
}
function info() {
    return log(this.context.dataflow, "info", arguments);
}
function debug() {
    return log(this.context.dataflow, "debug", arguments);
}
function channel_luminance_value(channelValue) {
    const val = channelValue / 255;
    if (val <= 0.03928) return val / 12.92;
    return Math.pow((val + 0.055) / 1.055, 2.4);
}
function luminance(color) {
    const c = (0, _d3Color.rgb)(color), r = channel_luminance_value(c.r), g = channel_luminance_value(c.g), b = channel_luminance_value(c.b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
} // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
function contrast(color1, color2) {
    const lum1 = luminance(color1), lum2 = luminance(color2), lumL = Math.max(lum1, lum2), lumD = Math.min(lum1, lum2);
    return (lumL + 0.05) / (lumD + 0.05);
}
function merge() {
    const args = [].slice.call(arguments);
    args.unshift({});
    return (0, _vegaUtil.extend)(...args);
}
function equal(a, b) {
    return a === b || a !== a && b !== b ? true : (0, _vegaUtil.isArray)(a) ? (0, _vegaUtil.isArray)(b) && a.length === b.length ? equalArray(a, b) : false : (0, _vegaUtil.isObject)(a) && (0, _vegaUtil.isObject)(b) ? equalObject(a, b) : false;
}
function equalArray(a, b) {
    for(let i = 0, n = a.length; i < n; ++i){
        if (!equal(a[i], b[i])) return false;
    }
    return true;
}
function equalObject(a, b) {
    for(const key in a){
        if (!equal(a[key], b[key])) return false;
    }
    return true;
}
function removePredicate(props) {
    return (_)=>equalObject(props, _);
}
function modify(name, insert, remove, toggle, modify, values) {
    const df = this.context.dataflow, data = this.context.data[name], input = data.input, stamp = df.stamp();
    let changes = data.changes, predicate, key;
    if (df._trigger === false || !(input.value.length || insert || toggle)) // nothing to do!
    return 0;
    if (!changes || changes.stamp < stamp) {
        data.changes = changes = df.changeset();
        changes.stamp = stamp;
        df.runAfter(()=>{
            data.modified = true;
            df.pulse(input, changes).run();
        }, true, 1);
    }
    if (remove) {
        predicate = remove === true ? (0, _vegaUtil.truthy) : (0, _vegaUtil.isArray)(remove) || (0, _vegaDataflow.isTuple)(remove) ? remove : removePredicate(remove);
        changes.remove(predicate);
    }
    if (insert) changes.insert(insert);
    if (toggle) {
        predicate = removePredicate(toggle);
        if (input.value.some(predicate)) changes.remove(predicate);
        else changes.insert(toggle);
    }
    if (modify) for(key in values)changes.modify(modify, key, values[key]);
    return 1;
}
function pinchDistance(event) {
    const t = event.touches, dx = t[0].clientX - t[1].clientX, dy = t[0].clientY - t[1].clientY;
    return Math.sqrt(dx * dx + dy * dy);
}
function pinchAngle(event) {
    const t = event.touches;
    return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
}
const accessors = {};
function pluck(data, name) {
    const accessor = accessors[name] || (accessors[name] = (0, _vegaUtil.field)(name));
    return (0, _vegaUtil.isArray)(data) ? data.map(accessor) : accessor(data);
}
function array(seq) {
    return (0, _vegaUtil.isArray)(seq) || ArrayBuffer.isView(seq) ? seq : null;
}
function sequence(seq) {
    return array(seq) || ((0, _vegaUtil.isString)(seq) ? seq : null);
}
function join(seq, ...args) {
    return array(seq).join(...args);
}
function indexof(seq, ...args) {
    return sequence(seq).indexOf(...args);
}
function lastindexof(seq, ...args) {
    return sequence(seq).lastIndexOf(...args);
}
function slice(seq, ...args) {
    return sequence(seq).slice(...args);
}
function replace(str, pattern, repl) {
    if ((0, _vegaUtil.isFunction)(repl)) (0, _vegaUtil.error)("Function argument passed to replace.");
    return String(str).replace(pattern, repl);
}
function reverse(seq) {
    return array(seq).slice().reverse();
}
function bandspace(count, paddingInner, paddingOuter) {
    return (0, _vegaScale.bandSpace)(count || 0, paddingInner || 0, paddingOuter || 0);
}
function bandwidth(name, group) {
    const s = getScale(name, (group || this).context);
    return s && s.bandwidth ? s.bandwidth() : 0;
}
function copy(name, group) {
    const s = getScale(name, (group || this).context);
    return s ? s.copy() : undefined;
}
function domain(name, group) {
    const s = getScale(name, (group || this).context);
    return s ? s.domain() : [];
}
function invert(name, range, group) {
    const s = getScale(name, (group || this).context);
    return !s ? undefined : (0, _vegaUtil.isArray)(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);
}
function range(name, group) {
    const s = getScale(name, (group || this).context);
    return s && s.range ? s.range() : [];
}
function scale(name, value, group) {
    const s = getScale(name, (group || this).context);
    return s ? s(value) : undefined;
}
function scaleGradient(scale, p0, p1, count, group) {
    scale = getScale(scale, (group || this).context);
    const gradient = (0, _vegaScenegraph.Gradient)(p0, p1);
    let stops = scale.domain(), min = stops[0], max = (0, _vegaUtil.peek)(stops), fraction = (0, _vegaUtil.identity);
    if (!(max - min)) // expand scale if domain has zero span, fix #1479
    scale = (scale.interpolator ? (0, _vegaScale.scale)("sequential")().interpolator(scale.interpolator()) : (0, _vegaScale.scale)("linear")().interpolate(scale.interpolate()).range(scale.range())).domain([
        min = 0,
        max = 1
    ]);
    else fraction = (0, _vegaScale.scaleFraction)(scale, min, max);
    if (scale.ticks) {
        stops = scale.ticks(+count || 15);
        if (min !== stops[0]) stops.unshift(min);
        if (max !== (0, _vegaUtil.peek)(stops)) stops.push(max);
    }
    stops.forEach((_)=>gradient.stop(fraction(_), scale(_)));
    return gradient;
}
function geoShape(projection, geojson, group) {
    const p = getScale(projection, (group || this).context);
    return function(context) {
        return p ? p.path.context(context)(geojson) : "";
    };
}
function pathShape(path) {
    let p = null;
    return function(context) {
        return context ? (0, _vegaScenegraph.pathRender)(context, p = p || (0, _vegaScenegraph.pathParse)(path)) : path;
    };
}
const datum = (d)=>d.data;
function treeNodes(name, context) {
    const tree = data.call(context, name);
    return tree.root && tree.root.lookup || {};
}
function treePath(name, source, target) {
    const nodes = treeNodes(name, this), s = nodes[source], t = nodes[target];
    return s && t ? s.path(t).map(datum) : undefined;
}
function treeAncestors(name, node) {
    const n = treeNodes(name, this)[node];
    return n ? n.ancestors().map(datum) : undefined;
}
const _window = ()=>typeof window !== "undefined" && window || null;
function screen() {
    const w = _window();
    return w ? w.screen : {};
}
function windowSize() {
    const w = _window();
    return w ? [
        w.innerWidth,
        w.innerHeight
    ] : [
        undefined,
        undefined
    ];
}
function containerSize() {
    const view = this.context.dataflow, el = view.container && view.container();
    return el ? [
        el.clientWidth,
        el.clientHeight
    ] : [
        undefined,
        undefined
    ];
}
function intersect(b, opt, group) {
    if (!b) return [];
    const [u, v] = b, box = new (0, _vegaScenegraph.Bounds)().set(u[0], u[1], v[0], v[1]), scene = group || this.context.dataflow.scenegraph().root;
    return (0, _vegaScenegraph.intersect)(scene, box, filter(opt));
}
function filter(opt) {
    let p = null;
    if (opt) {
        const types = (0, _vegaUtil.array)(opt.marktype), names = (0, _vegaUtil.array)(opt.markname);
        p = (_)=>(!types.length || types.some((t)=>_.marktype === t)) && (!names.length || names.some((s)=>_.name === s));
    }
    return p;
}
const functionContext = {
    random () {
        return (0, _vegaStatistics.random)();
    },
    cumulativeNormal: // override default
    (0, _vegaStatistics.cumulativeNormal),
    cumulativeLogNormal: (0, _vegaStatistics.cumulativeLogNormal),
    cumulativeUniform: (0, _vegaStatistics.cumulativeUniform),
    densityNormal: (0, _vegaStatistics.densityNormal),
    densityLogNormal: (0, _vegaStatistics.densityLogNormal),
    densityUniform: (0, _vegaStatistics.densityUniform),
    quantileNormal: (0, _vegaStatistics.quantileNormal),
    quantileLogNormal: (0, _vegaStatistics.quantileLogNormal),
    quantileUniform: (0, _vegaStatistics.quantileUniform),
    sampleNormal: (0, _vegaStatistics.sampleNormal),
    sampleLogNormal: (0, _vegaStatistics.sampleLogNormal),
    sampleUniform: (0, _vegaStatistics.sampleUniform),
    isArray: (0, _vegaUtil.isArray),
    isBoolean: (0, _vegaUtil.isBoolean),
    isDate: (0, _vegaUtil.isDate),
    isDefined (_) {
        return _ !== undefined;
    },
    isNumber: (0, _vegaUtil.isNumber),
    isObject: (0, _vegaUtil.isObject),
    isRegExp: (0, _vegaUtil.isRegExp),
    isString: (0, _vegaUtil.isString),
    isTuple: (0, _vegaDataflow.isTuple),
    isValid (_) {
        return _ != null && _ === _;
    },
    toBoolean: (0, _vegaUtil.toBoolean),
    toDate: (0, _vegaUtil.toDate),
    toNumber: (0, _vegaUtil.toNumber),
    toString: (0, _vegaUtil.toString),
    indexof,
    join,
    lastindexof,
    replace,
    reverse,
    slice,
    flush: (0, _vegaUtil.flush),
    lerp: (0, _vegaUtil.lerp),
    merge,
    pad: (0, _vegaUtil.pad),
    peek: (0, _vegaUtil.peek),
    pluck,
    span: (0, _vegaUtil.span),
    inrange: (0, _vegaUtil.inrange),
    truncate: (0, _vegaUtil.truncate),
    rgb: (0, _d3Color.rgb),
    lab: (0, _d3Color.lab),
    hcl: (0, _d3Color.hcl),
    hsl: (0, _d3Color.hsl),
    luminance,
    contrast,
    sequence: (0, _d3Array.range),
    format,
    utcFormat,
    utcParse,
    utcOffset: (0, _vegaTime.utcOffset),
    utcSequence: (0, _vegaTime.utcSequence),
    timeFormat,
    timeParse,
    timeOffset: (0, _vegaTime.timeOffset),
    timeSequence: (0, _vegaTime.timeSequence),
    timeUnitSpecifier: (0, _vegaTime.timeUnitSpecifier),
    monthFormat,
    monthAbbrevFormat,
    dayFormat,
    dayAbbrevFormat,
    quarter: (0, _vegaUtil.quarter),
    utcquarter: (0, _vegaUtil.utcquarter),
    week: (0, _vegaTime.week),
    utcweek: (0, _vegaTime.utcweek),
    dayofyear: (0, _vegaTime.dayofyear),
    utcdayofyear: (0, _vegaTime.utcdayofyear),
    warn,
    info,
    debug,
    extent: (0, _vegaUtil.extent),
    inScope,
    intersect,
    clampRange: (0, _vegaUtil.clampRange),
    pinchDistance,
    pinchAngle,
    screen,
    containerSize,
    windowSize,
    bandspace,
    setdata,
    pathShape,
    panLinear: (0, _vegaUtil.panLinear),
    panLog: (0, _vegaUtil.panLog),
    panPow: (0, _vegaUtil.panPow),
    panSymlog: (0, _vegaUtil.panSymlog),
    zoomLinear: (0, _vegaUtil.zoomLinear),
    zoomLog: (0, _vegaUtil.zoomLog),
    zoomPow: (0, _vegaUtil.zoomPow),
    zoomSymlog: (0, _vegaUtil.zoomSymlog),
    encode,
    modify
};
const eventFunctions = [
    "view",
    "item",
    "group",
    "xy",
    "x",
    "y"
], // event functions
eventPrefix = "event.vega.", // event function prefix
thisPrefix = "this.", // function context prefix
astVisitors = {}; // AST visitors for dependency analysis
// export code generator parameters
const codegenParams = {
    forbidden: [
        "_"
    ],
    allowed: [
        "datum",
        "event",
        "item"
    ],
    fieldvar: "datum",
    globalvar: (id)=>`_[${(0, _vegaUtil.stringValue)(SignalPrefix + id)}]`,
    functions: buildFunctions,
    constants: (0, _vegaExpression.constants),
    visitors: astVisitors
}; // export code generator
const codeGenerator = (0, _vegaExpression.codegenExpression)(codegenParams); // Build expression function registry
function buildFunctions(codegen) {
    const fn = (0, _vegaExpression.functions)(codegen);
    eventFunctions.forEach((name)=>fn[name] = eventPrefix + name);
    for(const name in functionContext)fn[name] = thisPrefix + name;
    (0, _vegaUtil.extend)(fn, internalScaleFunctions(codegen, functionContext, astVisitors));
    return fn;
} // Register an expression function
function expressionFunction(name, fn, visitor) {
    if (arguments.length === 1) return functionContext[name];
     // register with the functionContext
    functionContext[name] = fn; // if there is an astVisitor register that, too
    if (visitor) astVisitors[name] = visitor; // if the code generator has already been initialized,
    // we need to also register the function with it
    if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
    return this;
} // register expression functions with ast visitors
expressionFunction("bandwidth", bandwidth, scaleVisitor);
expressionFunction("copy", copy, scaleVisitor);
expressionFunction("domain", domain, scaleVisitor);
expressionFunction("range", range, scaleVisitor);
expressionFunction("invert", invert, scaleVisitor);
expressionFunction("scale", scale, scaleVisitor);
expressionFunction("gradient", scaleGradient, scaleVisitor);
expressionFunction("geoArea", geoArea, scaleVisitor);
expressionFunction("geoBounds", geoBounds, scaleVisitor);
expressionFunction("geoCentroid", geoCentroid, scaleVisitor);
expressionFunction("geoShape", geoShape, scaleVisitor);
expressionFunction("indata", indata, indataVisitor);
expressionFunction("data", data, dataVisitor);
expressionFunction("treePath", treePath, dataVisitor);
expressionFunction("treeAncestors", treeAncestors, dataVisitor); // register Vega-Lite selection functions
expressionFunction("vlSelectionTest", (0, _vegaSelections.selectionTest), (0, _vegaSelections.selectionVisitor));
expressionFunction("vlSelectionIdTest", (0, _vegaSelections.selectionIdTest), (0, _vegaSelections.selectionVisitor));
expressionFunction("vlSelectionResolve", (0, _vegaSelections.selectionResolve), (0, _vegaSelections.selectionVisitor));
expressionFunction("vlSelectionTuples", (0, _vegaSelections.selectionTuples));
function parser(expr, scope) {
    const params = {}; // parse the expression to an abstract syntax tree (ast)
    let ast;
    try {
        expr = (0, _vegaUtil.isString)(expr) ? expr : (0, _vegaUtil.stringValue)(expr) + "";
        ast = (0, _vegaExpression.parseExpression)(expr);
    } catch (err) {
        (0, _vegaUtil.error)("Expression parse error: " + expr);
    } // analyze ast function calls for dependencies
    ast.visit((node)=>{
        if (node.type !== (0, _vegaExpression.CallExpression)) return;
        const name = node.callee.name, visit = codegenParams.visitors[name];
        if (visit) visit(name, node.arguments, scope, params);
    }); // perform code generation
    const gen = codeGenerator(ast); // collect signal dependencies
    gen.globals.forEach((name)=>{
        const signalName = SignalPrefix + name;
        if (!(0, _vegaUtil.hasOwnProperty)(params, signalName) && scope.getSignal(name)) params[signalName] = scope.signalRef(name);
    }); // return generated expression code and dependencies
    return {
        $expr: (0, _vegaUtil.extend)({
            code: gen.code
        }, scope.options.ast ? {
            ast
        } : null),
        $fields: gen.fields,
        $params: params
    };
}

},{"vega-util":"bApja","vega-expression":"53Uxk","d3-geo":"lY61T","d3-color":"7SCp9","vega-dataflow":"3NitK","vega-scale":"bEydG","vega-scenegraph":"jattk","vega-selections":"674qo","vega-statistics":"5ncfv","vega-time":"27kpp","d3-array":"6IwJG","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"53Uxk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ASTNode", ()=>ASTNode);
parcelHelpers.export(exports, "ArrayExpression", ()=>ArrayExpression);
parcelHelpers.export(exports, "BinaryExpression", ()=>BinaryExpression);
parcelHelpers.export(exports, "CallExpression", ()=>CallExpression);
parcelHelpers.export(exports, "ConditionalExpression", ()=>ConditionalExpression);
parcelHelpers.export(exports, "Identifier", ()=>Identifier);
parcelHelpers.export(exports, "Literal", ()=>Literal);
parcelHelpers.export(exports, "LogicalExpression", ()=>LogicalExpression);
parcelHelpers.export(exports, "MemberExpression", ()=>MemberExpression);
parcelHelpers.export(exports, "ObjectExpression", ()=>ObjectExpression);
parcelHelpers.export(exports, "Property", ()=>Property);
parcelHelpers.export(exports, "RawCode", ()=>RawCode);
parcelHelpers.export(exports, "UnaryExpression", ()=>UnaryExpression);
parcelHelpers.export(exports, "codegenExpression", ()=>codegen);
parcelHelpers.export(exports, "constants", ()=>Constants);
parcelHelpers.export(exports, "functions", ()=>Functions);
parcelHelpers.export(exports, "parseExpression", ()=>parser);
var _vegaUtil = require("vega-util");
const RawCode = "RawCode";
const Literal = "Literal";
const Property = "Property";
const Identifier = "Identifier";
const ArrayExpression = "ArrayExpression";
const BinaryExpression = "BinaryExpression";
const CallExpression = "CallExpression";
const ConditionalExpression = "ConditionalExpression";
const LogicalExpression = "LogicalExpression";
const MemberExpression = "MemberExpression";
const ObjectExpression = "ObjectExpression";
const UnaryExpression = "UnaryExpression";
function ASTNode(type) {
    this.type = type;
}
ASTNode.prototype.visit = function(visitor) {
    let c, i, n;
    if (visitor(this)) return 1;
    for(c = children(this), i = 0, n = c.length; i < n; ++i){
        if (c[i].visit(visitor)) return 1;
    }
};
function children(node) {
    switch(node.type){
        case ArrayExpression:
            return node.elements;
        case BinaryExpression:
        case LogicalExpression:
            return [
                node.left,
                node.right
            ];
        case CallExpression:
            return [
                node.callee
            ].concat(node.arguments);
        case ConditionalExpression:
            return [
                node.test,
                node.consequent,
                node.alternate
            ];
        case MemberExpression:
            return [
                node.object,
                node.property
            ];
        case ObjectExpression:
            return node.properties;
        case Property:
            return [
                node.key,
                node.value
            ];
        case UnaryExpression:
            return [
                node.argument
            ];
        case Identifier:
        case Literal:
        case RawCode:
        default:
            return [];
    }
}
/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ var TokenName, source, index, length, lookahead;
var TokenBooleanLiteral = 1, TokenEOF = 2, TokenIdentifier = 3, TokenKeyword = 4, TokenNullLiteral = 5, TokenNumericLiteral = 6, TokenPunctuator = 7, TokenStringLiteral = 8, TokenRegularExpression = 9;
TokenName = {};
TokenName[TokenBooleanLiteral] = "Boolean";
TokenName[TokenEOF] = "<end>";
TokenName[TokenIdentifier] = "Identifier";
TokenName[TokenKeyword] = "Keyword";
TokenName[TokenNullLiteral] = "Null";
TokenName[TokenNumericLiteral] = "Numeric";
TokenName[TokenPunctuator] = "Punctuator";
TokenName[TokenStringLiteral] = "String";
TokenName[TokenRegularExpression] = "RegularExpression";
var SyntaxArrayExpression = "ArrayExpression", SyntaxBinaryExpression = "BinaryExpression", SyntaxCallExpression = "CallExpression", SyntaxConditionalExpression = "ConditionalExpression", SyntaxIdentifier = "Identifier", SyntaxLiteral = "Literal", SyntaxLogicalExpression = "LogicalExpression", SyntaxMemberExpression = "MemberExpression", SyntaxObjectExpression = "ObjectExpression", SyntaxProperty = "Property", SyntaxUnaryExpression = "UnaryExpression"; // Error messages should be identical to V8.
var MessageUnexpectedToken = "Unexpected token %0", MessageUnexpectedNumber = "Unexpected number", MessageUnexpectedString = "Unexpected string", MessageUnexpectedIdentifier = "Unexpected identifier", MessageUnexpectedReserved = "Unexpected reserved word", MessageUnexpectedEOS = "Unexpected end of input", MessageInvalidRegExp = "Invalid regular expression", MessageUnterminatedRegExp = "Invalid regular expression: missing /", MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.", MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
var ILLEGAL = "ILLEGAL", DISABLED = "Disabled."; // See also tools/generate-unicode-regex.py.
var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), // eslint-disable-next-line no-misleading-character-class
RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.
function assert(condition, message) {
    /* istanbul ignore next */ if (!condition) throw new Error("ASSERT: " + message);
}
function isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
}
function isHexDigit(ch) {
    return "0123456789abcdefABCDEF".indexOf(ch) >= 0;
}
function isOctalDigit(ch) {
    return "01234567".indexOf(ch) >= 0;
} // 7.2 White Space
function isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [
        0x1680,
        0x180E,
        0x2000,
        0x2001,
        0x2002,
        0x2003,
        0x2004,
        0x2005,
        0x2006,
        0x2007,
        0x2008,
        0x2009,
        0x200A,
        0x202F,
        0x205F,
        0x3000,
        0xFEFF
    ].indexOf(ch) >= 0;
} // 7.3 Line Terminators
function isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
} // 7.6 Identifier Names and Identifiers
function isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch === 0x5C || ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}
function isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch >= 0x30 && ch <= 0x39 || ch === 0x5C || ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
} // 7.6.1.1 Keywords
const keywords = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
};
function skipComment() {
    while(index < length){
        const ch = source.charCodeAt(index);
        if (isWhiteSpace(ch) || isLineTerminator(ch)) ++index;
        else break;
    }
}
function scanHexEscape(prefix) {
    var i, len, ch, code = 0;
    len = prefix === "u" ? 4 : 2;
    for(i = 0; i < len; ++i)if (index < length && isHexDigit(source[index])) {
        ch = source[index++];
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    } else throwError({}, MessageUnexpectedToken, ILLEGAL);
    return String.fromCharCode(code);
}
function scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = source[index];
    code = 0; // At least, one hex digit is required.
    if (ch === "}") throwError({}, MessageUnexpectedToken, ILLEGAL);
    while(index < length){
        ch = source[index++];
        if (!isHexDigit(ch)) break;
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    }
    if (code > 0x10FFFF || ch !== "}") throwError({}, MessageUnexpectedToken, ILLEGAL);
     // UTF-16 Encoding
    if (code <= 0xFFFF) return String.fromCharCode(code);
    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
}
function getEscapedIdentifier() {
    var ch, id;
    ch = source.charCodeAt(index++);
    id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
        if (source.charCodeAt(index) !== 0x75) throwError({}, MessageUnexpectedToken, ILLEGAL);
        ++index;
        ch = scanHexEscape("u");
        if (!ch || ch === "\\" || !isIdentifierStart(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
        id = ch;
    }
    while(index < length){
        ch = source.charCodeAt(index);
        if (!isIdentifierPart(ch)) break;
        ++index;
        id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            id = id.substr(0, id.length - 1);
            if (source.charCodeAt(index) !== 0x75) throwError({}, MessageUnexpectedToken, ILLEGAL);
            ++index;
            ch = scanHexEscape("u");
            if (!ch || ch === "\\" || !isIdentifierPart(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
            id += ch;
        }
    }
    return id;
}
function getIdentifier() {
    var start, ch;
    start = index++;
    while(index < length){
        ch = source.charCodeAt(index);
        if (ch === 0x5C) {
            // Blackslash (U+005C) marks Unicode escape sequence.
            index = start;
            return getEscapedIdentifier();
        }
        if (isIdentifierPart(ch)) ++index;
        else break;
    }
    return source.slice(start, index);
}
function scanIdentifier() {
    var start, id, type;
    start = index; // Backslash (U+005C) starts an escaped character.
    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) type = TokenIdentifier;
    else if (keywords.hasOwnProperty(id)) // eslint-disable-line no-prototype-builtins
    type = TokenKeyword;
    else if (id === "null") type = TokenNullLiteral;
    else if (id === "true" || id === "false") type = TokenBooleanLiteral;
    else type = TokenIdentifier;
    return {
        type: type,
        value: id,
        start: start,
        end: index
    };
} // 7.7 Punctuators
function scanPunctuator() {
    var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2, ch3, ch4;
    switch(code){
        // Check for most common single-character punctuators.
        case 0x2E:
        case 0x28:
        case 0x29:
        case 0x3B:
        case 0x2C:
        case 0x7B:
        case 0x7D:
        case 0x5B:
        case 0x5D:
        case 0x3A:
        case 0x3F:
        case 0x7E:
            // ~
            ++index;
            return {
                type: TokenPunctuator,
                value: String.fromCharCode(code),
                start: start,
                end: index
            };
        default:
            code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) switch(code){
                case 0x2B:
                case 0x2D:
                case 0x2F:
                case 0x3C:
                case 0x3E:
                case 0x5E:
                case 0x7C:
                case 0x25:
                case 0x26:
                case 0x2A:
                    // *
                    index += 2;
                    return {
                        type: TokenPunctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        start: start,
                        end: index
                    };
                case 0x21:
                case 0x3D:
                    // =
                    index += 2; // !== and ===
                    if (source.charCodeAt(index) === 0x3D) ++index;
                    return {
                        type: TokenPunctuator,
                        value: source.slice(start, index),
                        start: start,
                        end: index
                    };
            }
    } // 4-character punctuator: >>>=
    ch4 = source.substr(index, 4);
    if (ch4 === ">>>=") {
        index += 4;
        return {
            type: TokenPunctuator,
            value: ch4,
            start: start,
            end: index
        };
    } // 3-character punctuators: === !== >>> <<= >>=
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
        index += 3;
        return {
            type: TokenPunctuator,
            value: ch3,
            start: start,
            end: index
        };
    } // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".indexOf(ch1) >= 0 || ch2 === "=>") {
        index += 2;
        return {
            type: TokenPunctuator,
            value: ch2,
            start: start,
            end: index
        };
    }
    if (ch2 === "//") throwError({}, MessageUnexpectedToken, ILLEGAL);
     // 1-character punctuators: < > = ! + - * % & | ^ /
    if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
        ++index;
        return {
            type: TokenPunctuator,
            value: ch1,
            start: start,
            end: index
        };
    }
    throwError({}, MessageUnexpectedToken, ILLEGAL);
} // 7.8.3 Numeric Literals
function scanHexLiteral(start) {
    let number = "";
    while(index < length){
        if (!isHexDigit(source[index])) break;
        number += source[index++];
    }
    if (number.length === 0) throwError({}, MessageUnexpectedToken, ILLEGAL);
    if (isIdentifierStart(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseInt("0x" + number, 16),
        start: start,
        end: index
    };
}
function scanOctalLiteral(start) {
    let number = "0" + source[index++];
    while(index < length){
        if (!isOctalDigit(source[index])) break;
        number += source[index++];
    }
    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: index
    };
}
function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = index;
    number = "";
    if (ch !== ".") {
        number = source[index++];
        ch = source[index]; // Hex number starts with '0x'.
        // Octal number starts with '0'.
        if (number === "0") {
            if (ch === "x" || ch === "X") {
                ++index;
                return scanHexLiteral(start);
            }
            if (isOctalDigit(ch)) return scanOctalLiteral(start);
             // decimal number starts with '0' such as '09' is illegal.
            if (ch && isDecimalDigit(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        ch = source[index];
    }
    if (ch === ".") {
        number += source[index++];
        while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        ch = source[index];
    }
    if (ch === "e" || ch === "E") {
        number += source[index++];
        ch = source[index];
        if (ch === "+" || ch === "-") number += source[index++];
        if (isDecimalDigit(source.charCodeAt(index))) while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        else throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if (isIdentifierStart(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: index
    };
} // 7.8.4 String Literals
function scanStringLiteral() {
    var str = "", quote, start, ch, code, octal = false;
    quote = source[index];
    assert(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = index;
    ++index;
    while(index < length){
        ch = source[index++];
        if (ch === quote) {
            quote = "";
            break;
        } else if (ch === "\\") {
            ch = source[index++];
            if (!ch || !isLineTerminator(ch.charCodeAt(0))) switch(ch){
                case "u":
                case "x":
                    if (source[index] === "{") {
                        ++index;
                        str += scanUnicodeCodePointEscape();
                    } else str += scanHexEscape(ch);
                    break;
                case "n":
                    str += "\n";
                    break;
                case "r":
                    str += "\r";
                    break;
                case "t":
                    str += "	";
                    break;
                case "b":
                    str += "\b";
                    break;
                case "f":
                    str += "\f";
                    break;
                case "v":
                    str += "\v";
                    break;
                default:
                    if (isOctalDigit(ch)) {
                        code = "01234567".indexOf(ch); // \0 is not octal escape sequence
                        if (code !== 0) octal = true;
                        if (index < length && isOctalDigit(source[index])) {
                            octal = true;
                            code = code * 8 + "01234567".indexOf(source[index++]); // 3 digits are only allowed when string starts
                            // with 0, 1, 2, 3
                            if ("0123".indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) code = code * 8 + "01234567".indexOf(source[index++]);
                        }
                        str += String.fromCharCode(code);
                    } else str += ch;
                    break;
            }
            else if (ch === "\r" && source[index] === "\n") ++index;
        } else if (isLineTerminator(ch.charCodeAt(0))) break;
        else str += ch;
    }
    if (quote !== "") throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: index
    };
}
function testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.indexOf("u") >= 0) // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1)=>{
        if (parseInt($1, 16) <= 0x10FFFF) return "x";
        throwError({}, MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
     // First, detect invalid regular expressions.
    try {
        new RegExp(tmp);
    } catch (e) {
        throwError({}, MessageInvalidRegExp);
    } // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
        return new RegExp(pattern, flags);
    } catch (exception) {
        return null;
    }
}
function scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = source[index];
    assert(ch === "/", "Regular expression literal must start with a slash");
    str = source[index++];
    classMarker = false;
    terminated = false;
    while(index < length){
        ch = source[index++];
        str += ch;
        if (ch === "\\") {
            ch = source[index++]; // ECMA-262 7.8.5
            if (isLineTerminator(ch.charCodeAt(0))) throwError({}, MessageUnterminatedRegExp);
            str += ch;
        } else if (isLineTerminator(ch.charCodeAt(0))) throwError({}, MessageUnterminatedRegExp);
        else if (classMarker) {
            if (ch === "]") classMarker = false;
        } else {
            if (ch === "/") {
                terminated = true;
                break;
            } else if (ch === "[") classMarker = true;
        }
    }
    if (!terminated) throwError({}, MessageUnterminatedRegExp);
     // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
        value: body,
        literal: str
    };
}
function scanRegExpFlags() {
    var ch, str, flags;
    str = "";
    flags = "";
    while(index < length){
        ch = source[index];
        if (!isIdentifierPart(ch.charCodeAt(0))) break;
        ++index;
        if (ch === "\\" && index < length) throwError({}, MessageUnexpectedToken, ILLEGAL);
        else {
            flags += ch;
            str += ch;
        }
    }
    if (flags.search(/[^gimuy]/g) >= 0) throwError({}, MessageInvalidRegExp, flags);
    return {
        value: flags,
        literal: str
    };
}
function scanRegExp() {
    var start, body, flags, value;
    lookahead = null;
    skipComment();
    start = index;
    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value = testRegExp(body.value, flags.value);
    return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
            pattern: body.value,
            flags: flags.value
        },
        start: start,
        end: index
    };
}
function isIdentifierName(token) {
    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
}
function advance() {
    skipComment();
    if (index >= length) return {
        type: TokenEOF,
        start: index,
        end: index
    };
    const ch = source.charCodeAt(index);
    if (isIdentifierStart(ch)) return scanIdentifier();
     // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) return scanPunctuator();
     // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) return scanStringLiteral();
     // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
        if (isDecimalDigit(source.charCodeAt(index + 1))) return scanNumericLiteral();
        return scanPunctuator();
    }
    if (isDecimalDigit(ch)) return scanNumericLiteral();
    return scanPunctuator();
}
function lex() {
    const token = lookahead;
    index = token.end;
    lookahead = advance();
    index = token.end;
    return token;
}
function peek() {
    const pos = index;
    lookahead = advance();
    index = pos;
}
function finishArrayExpression(elements) {
    const node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
}
function finishBinaryExpression(operator, left, right) {
    const node = new ASTNode(operator === "||" || operator === "&&" ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
}
function finishCallExpression(callee, args) {
    const node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
}
function finishConditionalExpression(test, consequent, alternate) {
    const node = new ASTNode(SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
}
function finishIdentifier(name) {
    const node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
}
function finishLiteral(token) {
    const node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source.slice(token.start, token.end);
    if (token.regex) {
        if (node.raw === "//") node.raw = "/(?:)/";
        node.regex = token.regex;
    }
    return node;
}
function finishMemberExpression(accessor, object, property) {
    const node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor === "[";
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
}
function finishObjectExpression(properties) {
    const node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
}
function finishProperty(kind, key, value) {
    const node = new ASTNode(SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
}
function finishUnaryExpression(operator, argument) {
    const node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
} // Throw an exception
function throwError(token, messageFormat) {
    var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index)=>{
        assert(index < args.length, "Message reference must be in range");
        return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
} // Throw an exception because of the token.
function throwUnexpected(token) {
    if (token.type === TokenEOF) throwError(token, MessageUnexpectedEOS);
    if (token.type === TokenNumericLiteral) throwError(token, MessageUnexpectedNumber);
    if (token.type === TokenStringLiteral) throwError(token, MessageUnexpectedString);
    if (token.type === TokenIdentifier) throwError(token, MessageUnexpectedIdentifier);
    if (token.type === TokenKeyword) throwError(token, MessageUnexpectedReserved);
     // BooleanLiteral, NullLiteral, or Punctuator.
    throwError(token, MessageUnexpectedToken, token.value);
} // Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.
function expect(value) {
    const token = lex();
    if (token.type !== TokenPunctuator || token.value !== value) throwUnexpected(token);
} // Return true if the next token matches the specified punctuator.
function match(value) {
    return lookahead.type === TokenPunctuator && lookahead.value === value;
} // Return true if the next token matches the specified keyword
function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
} // 11.1.4 Array Initialiser
function parseArrayInitialiser() {
    const elements = [];
    index = lookahead.start;
    expect("[");
    while(!match("]"))if (match(",")) {
        lex();
        elements.push(null);
    } else {
        elements.push(parseConditionalExpression());
        if (!match("]")) expect(",");
    }
    lex();
    return finishArrayExpression(elements);
} // 11.1.5 Object Initialiser
function parseObjectPropertyKey() {
    index = lookahead.start;
    const token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.
    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
        if (token.octal) throwError(token, MessageStrictOctalLiteral);
        return finishLiteral(token);
    }
    return finishIdentifier(token.value);
}
function parseObjectProperty() {
    var token, key, id, value;
    index = lookahead.start;
    token = lookahead;
    if (token.type === TokenIdentifier) {
        id = parseObjectPropertyKey();
        expect(":");
        value = parseConditionalExpression();
        return finishProperty("init", id, value);
    }
    if (token.type === TokenEOF || token.type === TokenPunctuator) throwUnexpected(token);
    else {
        key = parseObjectPropertyKey();
        expect(":");
        value = parseConditionalExpression();
        return finishProperty("init", key, value);
    }
}
function parseObjectInitialiser() {
    var properties = [], property, name, key, map = {}, toString = String;
    index = lookahead.start;
    expect("{");
    while(!match("}")){
        property = parseObjectProperty();
        if (property.key.type === SyntaxIdentifier) name = property.key.name;
        else name = toString(property.key.value);
        key = "$" + name;
        if (Object.prototype.hasOwnProperty.call(map, key)) throwError({}, MessageStrictDuplicateProperty);
        else map[key] = true;
        properties.push(property);
        if (!match("}")) expect(",");
    }
    expect("}");
    return finishObjectExpression(properties);
} // 11.1.6 The Grouping Operator
function parseGroupExpression() {
    expect("(");
    const expr = parseExpression();
    expect(")");
    return expr;
} // 11.1 Primary Expressions
const legalKeywords = {
    "if": 1
};
function parsePrimaryExpression() {
    var type, token, expr;
    if (match("(")) return parseGroupExpression();
    if (match("[")) return parseArrayInitialiser();
    if (match("{")) return parseObjectInitialiser();
    type = lookahead.type;
    index = lookahead.start;
    if (type === TokenIdentifier || legalKeywords[lookahead.value]) expr = finishIdentifier(lex().value);
    else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
        if (lookahead.octal) throwError(lookahead, MessageStrictOctalLiteral);
        expr = finishLiteral(lex());
    } else if (type === TokenKeyword) throw new Error(DISABLED);
    else if (type === TokenBooleanLiteral) {
        token = lex();
        token.value = token.value === "true";
        expr = finishLiteral(token);
    } else if (type === TokenNullLiteral) {
        token = lex();
        token.value = null;
        expr = finishLiteral(token);
    } else if (match("/") || match("/=")) {
        expr = finishLiteral(scanRegExp());
        peek();
    } else throwUnexpected(lex());
    return expr;
} // 11.2 Left-Hand-Side Expressions
function parseArguments() {
    const args = [];
    expect("(");
    if (!match(")")) while(index < length){
        args.push(parseConditionalExpression());
        if (match(")")) break;
        expect(",");
    }
    expect(")");
    return args;
}
function parseNonComputedProperty() {
    index = lookahead.start;
    const token = lex();
    if (!isIdentifierName(token)) throwUnexpected(token);
    return finishIdentifier(token.value);
}
function parseNonComputedMember() {
    expect(".");
    return parseNonComputedProperty();
}
function parseComputedMember() {
    expect("[");
    const expr = parseExpression();
    expect("]");
    return expr;
}
function parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = parsePrimaryExpression();
    for(;;){
        if (match(".")) {
            property = parseNonComputedMember();
            expr = finishMemberExpression(".", expr, property);
        } else if (match("(")) {
            args = parseArguments();
            expr = finishCallExpression(expr, args);
        } else if (match("[")) {
            property = parseComputedMember();
            expr = finishMemberExpression("[", expr, property);
        } else break;
    }
    return expr;
} // 11.3 Postfix Expressions
function parsePostfixExpression() {
    const expr = parseLeftHandSideExpressionAllowCall();
    if (lookahead.type === TokenPunctuator) {
        if (match("++") || match("--")) throw new Error(DISABLED);
    }
    return expr;
} // 11.4 Unary Operators
function parseUnaryExpression() {
    var token, expr;
    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) expr = parsePostfixExpression();
    else if (match("++") || match("--")) throw new Error(DISABLED);
    else if (match("+") || match("-") || match("~") || match("!")) {
        token = lex();
        expr = parseUnaryExpression();
        expr = finishUnaryExpression(token.value, expr);
    } else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) throw new Error(DISABLED);
    else expr = parsePostfixExpression();
    return expr;
}
function binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) return 0;
    switch(token.value){
        case "||":
            prec = 1;
            break;
        case "&&":
            prec = 2;
            break;
        case "|":
            prec = 3;
            break;
        case "^":
            prec = 4;
            break;
        case "&":
            prec = 5;
            break;
        case "==":
        case "!=":
        case "===":
        case "!==":
            prec = 6;
            break;
        case "<":
        case ">":
        case "<=":
        case ">=":
        case "instanceof":
        case "in":
            prec = 7;
            break;
        case "<<":
        case ">>":
        case ">>>":
            prec = 8;
            break;
        case "+":
        case "-":
            prec = 9;
            break;
        case "*":
        case "/":
        case "%":
            prec = 11;
            break;
    }
    return prec;
} // 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators
function parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = lookahead;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);
    if (prec === 0) return left;
    token.prec = prec;
    lex();
    markers = [
        marker,
        lookahead
    ];
    right = parseUnaryExpression();
    stack = [
        left,
        token,
        right
    ];
    while((prec = binaryPrecedence(lookahead)) > 0){
        // Reduce: make a binary expression from the three topmost entries.
        while(stack.length > 2 && prec <= stack[stack.length - 2].prec){
            right = stack.pop();
            operator = stack.pop().value;
            left = stack.pop();
            markers.pop();
            expr = finishBinaryExpression(operator, left, right);
            stack.push(expr);
        } // Shift.
        token = lex();
        token.prec = prec;
        stack.push(token);
        markers.push(lookahead);
        expr = parseUnaryExpression();
        stack.push(expr);
    } // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while(i > 1){
        markers.pop();
        expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
    }
    return expr;
} // 11.12 Conditional Operator
function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();
    if (match("?")) {
        lex();
        consequent = parseConditionalExpression();
        expect(":");
        alternate = parseConditionalExpression();
        expr = finishConditionalExpression(expr, consequent, alternate);
    }
    return expr;
} // 11.14 Comma Operator
function parseExpression() {
    const expr = parseConditionalExpression();
    if (match(",")) throw new Error(DISABLED); // no sequence expressions
    return expr;
}
function parser(code) {
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    peek();
    const expr = parseExpression();
    if (lookahead.type !== TokenEOF) throw new Error("Unexpect token after expression.");
    return expr;
}
var Constants = {
    NaN: "NaN",
    E: "Math.E",
    LN2: "Math.LN2",
    LN10: "Math.LN10",
    LOG2E: "Math.LOG2E",
    LOG10E: "Math.LOG10E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    MIN_VALUE: "Number.MIN_VALUE",
    MAX_VALUE: "Number.MAX_VALUE"
};
function Functions(codegen) {
    function fncall(name, args, cast, type) {
        let obj = codegen(args[0]);
        if (cast) {
            obj = cast + "(" + obj + ")";
            if (cast.lastIndexOf("new ", 0) === 0) obj = "(" + obj + ")";
        }
        return obj + "." + name + (type < 0 ? "" : type === 0 ? "()" : "(" + args.slice(1).map(codegen).join(",") + ")");
    }
    function fn(name, cast, type) {
        return (args)=>fncall(name, args, cast, type);
    }
    const DATE = "new Date", STRING = "String", REGEXP = "RegExp";
    return {
        // MATH functions
        isNaN: "Number.isNaN",
        isFinite: "Number.isFinite",
        abs: "Math.abs",
        acos: "Math.acos",
        asin: "Math.asin",
        atan: "Math.atan",
        atan2: "Math.atan2",
        ceil: "Math.ceil",
        cos: "Math.cos",
        exp: "Math.exp",
        floor: "Math.floor",
        log: "Math.log",
        max: "Math.max",
        min: "Math.min",
        pow: "Math.pow",
        random: "Math.random",
        round: "Math.round",
        sin: "Math.sin",
        sqrt: "Math.sqrt",
        tan: "Math.tan",
        clamp: function(args) {
            if (args.length < 3) (0, _vegaUtil.error)("Missing arguments to clamp function.");
            if (args.length > 3) (0, _vegaUtil.error)("Too many arguments to clamp function.");
            const a = args.map(codegen);
            return "Math.max(" + a[1] + ", Math.min(" + a[2] + "," + a[0] + "))";
        },
        // DATE functions
        now: "Date.now",
        utc: "Date.UTC",
        datetime: DATE,
        date: fn("getDate", DATE, 0),
        day: fn("getDay", DATE, 0),
        year: fn("getFullYear", DATE, 0),
        month: fn("getMonth", DATE, 0),
        hours: fn("getHours", DATE, 0),
        minutes: fn("getMinutes", DATE, 0),
        seconds: fn("getSeconds", DATE, 0),
        milliseconds: fn("getMilliseconds", DATE, 0),
        time: fn("getTime", DATE, 0),
        timezoneoffset: fn("getTimezoneOffset", DATE, 0),
        utcdate: fn("getUTCDate", DATE, 0),
        utcday: fn("getUTCDay", DATE, 0),
        utcyear: fn("getUTCFullYear", DATE, 0),
        utcmonth: fn("getUTCMonth", DATE, 0),
        utchours: fn("getUTCHours", DATE, 0),
        utcminutes: fn("getUTCMinutes", DATE, 0),
        utcseconds: fn("getUTCSeconds", DATE, 0),
        utcmilliseconds: fn("getUTCMilliseconds", DATE, 0),
        // sequence functions
        length: fn("length", null, -1),
        // STRING functions
        parseFloat: "parseFloat",
        parseInt: "parseInt",
        upper: fn("toUpperCase", STRING, 0),
        lower: fn("toLowerCase", STRING, 0),
        substring: fn("substring", STRING),
        split: fn("split", STRING),
        trim: fn("trim", STRING, 0),
        // REGEXP functions
        regexp: REGEXP,
        test: fn("test", REGEXP),
        // Control Flow functions
        if: function(args) {
            if (args.length < 3) (0, _vegaUtil.error)("Missing arguments to if function.");
            if (args.length > 3) (0, _vegaUtil.error)("Too many arguments to if function.");
            const a = args.map(codegen);
            return "(" + a[0] + "?" + a[1] + ":" + a[2] + ")";
        }
    };
}
function stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === "'" && s[n] === "'") ? s.slice(1, -1) : s;
}
function codegen(opt) {
    opt = opt || {};
    const allowed = opt.allowed ? (0, _vegaUtil.toSet)(opt.allowed) : {}, forbidden = opt.forbidden ? (0, _vegaUtil.toSet)(opt.forbidden) : {}, constants = opt.constants || Constants, functions = (opt.functions || Functions)(visit), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = (0, _vegaUtil.isFunction)(globalvar) ? globalvar : (id)=>`${globalvar}["${id}"]`;
    let globals = {}, fields = {}, memberDepth = 0;
    function visit(ast) {
        if ((0, _vegaUtil.isString)(ast)) return ast;
        const generator = Generators[ast.type];
        if (generator == null) (0, _vegaUtil.error)("Unsupported type: " + ast.type);
        return generator(ast);
    }
    const Generators = {
        Literal: (n)=>n.raw,
        Identifier: (n)=>{
            const id = n.name;
            if (memberDepth > 0) return id;
            else if ((0, _vegaUtil.hasOwnProperty)(forbidden, id)) return (0, _vegaUtil.error)("Illegal identifier: " + id);
            else if ((0, _vegaUtil.hasOwnProperty)(constants, id)) return constants[id];
            else if ((0, _vegaUtil.hasOwnProperty)(allowed, id)) return id;
            else {
                globals[id] = 1;
                return outputGlobal(id);
            }
        },
        MemberExpression: (n)=>{
            const d = !n.computed, o = visit(n.object);
            if (d) memberDepth += 1;
            const p = visit(n.property);
            if (o === fieldvar) // strip quotes to sanitize field name (#1653)
            fields[stripQuotes(p)] = 1;
            if (d) memberDepth -= 1;
            return o + (d ? "." + p : "[" + p + "]");
        },
        CallExpression: (n)=>{
            if (n.callee.type !== "Identifier") (0, _vegaUtil.error)("Illegal callee type: " + n.callee.type);
            const callee = n.callee.name, args = n.arguments, fn = (0, _vegaUtil.hasOwnProperty)(functions, callee) && functions[callee];
            if (!fn) (0, _vegaUtil.error)("Unrecognized function: " + callee);
            return (0, _vegaUtil.isFunction)(fn) ? fn(args) : fn + "(" + args.map(visit).join(",") + ")";
        },
        ArrayExpression: (n)=>"[" + n.elements.map(visit).join(",") + "]",
        BinaryExpression: (n)=>"(" + visit(n.left) + " " + n.operator + " " + visit(n.right) + ")",
        UnaryExpression: (n)=>"(" + n.operator + visit(n.argument) + ")",
        ConditionalExpression: (n)=>"(" + visit(n.test) + "?" + visit(n.consequent) + ":" + visit(n.alternate) + ")",
        LogicalExpression: (n)=>"(" + visit(n.left) + n.operator + visit(n.right) + ")",
        ObjectExpression: (n)=>"{" + n.properties.map(visit).join(",") + "}",
        Property: (n)=>{
            memberDepth += 1;
            const k = visit(n.key);
            memberDepth -= 1;
            return k + ":" + visit(n.value);
        }
    };
    function codegen(ast) {
        const result = {
            code: visit(ast),
            globals: Object.keys(globals),
            fields: Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
    }
    codegen.functions = functions;
    codegen.constants = constants;
    return codegen;
}

},{"vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"674qo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selectionIdTest", ()=>selectionIdTest);
parcelHelpers.export(exports, "selectionResolve", ()=>selectionResolve);
parcelHelpers.export(exports, "selectionTest", ()=>selectionTest);
parcelHelpers.export(exports, "selectionTuples", ()=>selectionTuples);
parcelHelpers.export(exports, "selectionVisitor", ()=>selectionVisitor);
var _d3Array = require("d3-array");
var _vegaUtil = require("vega-util");
var _vegaExpression = require("vega-expression");
const Intersect = "intersect";
const Union = "union";
const VlMulti = "vlMulti";
const VlPoint = "vlPoint";
const Or = "or";
const And = "and";
const SelectionId = "_vgsid_";
const $selectionId = (0, _vegaUtil.field)(SelectionId);
const TYPE_ENUM = "E", TYPE_RANGE_INC = "R", TYPE_RANGE_EXC = "R-E", TYPE_RANGE_LE = "R-LE", TYPE_RANGE_RE = "R-RE", UNIT_INDEX = "index:unit"; // TODO: revisit date coercion?
function testPoint(datum, entry) {
    var fields = entry.fields, values = entry.values, n = fields.length, i = 0, dval, f;
    for(; i < n; ++i){
        f = fields[i];
        f.getter = (0, _vegaUtil.field).getter || (0, _vegaUtil.field)(f.field);
        dval = f.getter(datum);
        if ((0, _vegaUtil.isDate)(dval)) dval = (0, _vegaUtil.toNumber)(dval);
        if ((0, _vegaUtil.isDate)(values[i])) values[i] = (0, _vegaUtil.toNumber)(values[i]);
        if ((0, _vegaUtil.isDate)(values[i][0])) values[i] = values[i].map((0, _vegaUtil.toNumber));
        if (f.type === TYPE_ENUM) {
            // Enumerated fields can either specify individual values (single/multi selections)
            // or an array of values (interval selections).
            if ((0, _vegaUtil.isArray)(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) return false;
        } else {
            if (f.type === TYPE_RANGE_INC) {
                if (!(0, _vegaUtil.inrange)(dval, values[i])) return false;
            } else if (f.type === TYPE_RANGE_RE) {
                // Discrete selection of bins test within the range [bin_start, bin_end).
                if (!(0, _vegaUtil.inrange)(dval, values[i], true, false)) return false;
            } else if (f.type === TYPE_RANGE_EXC) {
                // 'R-E'/'R-LE' included for completeness.
                if (!(0, _vegaUtil.inrange)(dval, values[i], false, false)) return false;
            } else if (f.type === TYPE_RANGE_LE) {
                if (!(0, _vegaUtil.inrange)(dval, values[i], false, true)) return false;
            }
        }
    }
    return true;
}
/**
 * Tests if a tuple is contained within an interactive selection.
 * @param {string} name - The name of the data set representing the selection.
 *  Tuples in the dataset are of the form
 *  {unit: string, fields: array<fielddef>, values: array<*>}.
 *  Fielddef is of the form
 *  {field: string, channel: string, type: 'E' | 'R'} where
 *  'type' identifies whether tuples in the dataset enumerate
 *  values for the field, or specify a continuous range.
 * @param {object} datum - The tuple to test for inclusion.
 * @param {string} op - The set operation for combining selections.
 *   One of 'intersect' or 'union' (default).
 * @return {boolean} - True if the datum is in the selection, false otherwise.
 */ function selectionTest(name, datum, op) {
    var data = this.context.data[name], entries = data ? data.values.value : [], unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined, intersect = op === Intersect, n = entries.length, i = 0, entry, miss, count, unit, b;
    for(; i < n; ++i){
        entry = entries[i];
        if (unitIdx && intersect) {
            // multi selections union within the same unit and intersect across units.
            miss = miss || {};
            count = miss[unit = entry.unit] || 0; // if we've already matched this unit, skip.
            if (count === -1) continue;
            b = testPoint(datum, entry);
            miss[unit] = b ? -1 : ++count; // if we match and there are no other units return true
            // if we've missed against all tuples in this unit return false
            if (b && unitIdx.size === 1) return true;
            if (!b && count === unitIdx.get(unit).count) return false;
        } else {
            b = testPoint(datum, entry); // if we find a miss and we do require intersection return false
            // if we find a match and we don't require intersection return true
            if (intersect ^ b) return b;
        }
    } // if intersecting and we made it here, then we saw no misses
    // if not intersecting, then we saw no matches
    // if no active selections, return false
    return n && intersect;
}
const bisect = (0, _d3Array.bisector)($selectionId), bisectLeft = bisect.left, bisectRight = bisect.right;
function selectionIdTest(name, datum, op) {
    const data = this.context.data[name], entries = data ? data.values.value : [], unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined, intersect = op === Intersect, value = $selectionId(datum), index = bisectLeft(entries, value);
    if (index === entries.length) return false;
    if ($selectionId(entries[index]) !== value) return false;
    if (unitIdx && intersect) {
        if (unitIdx.size === 1) return true;
        if (bisectRight(entries, value) - index < unitIdx.size) return false;
    }
    return true;
}
/**
 * Maps an array of scene graph items to an array of selection tuples.
 * @param {string} name  - The name of the dataset representing the selection.
 * @param {string} base  - The base object that generated tuples extend.
 *
 * @returns {array} An array of selection entries for the given unit.
 */ function selectionTuples(array, base) {
    return array.map((x)=>(0, _vegaUtil.extend)(base.fields ? {
            values: base.fields.map((f)=>(f.getter || (f.getter = (0, _vegaUtil.field)(f.field)))(x.datum))
        } : {
            [SelectionId]: $selectionId(x.datum)
        }, base));
}
/**
 * Resolves selection for use as a scale domain or reads via the API.
 * @param {string} name - The name of the dataset representing the selection
 * @param {string} [op='union'] - The set operation for combining selections.
 *                 One of 'intersect' or 'union' (default).
 * @param {boolean} isMulti - Identifies a "multi" selection to perform more
 *                 expensive resolution computation.
 * @param {boolean} vl5 - With Vega-Lite v5, "multi" selections are now called "point"
 *                 selections, and thus the resolved tuple should reflect this name.
 *                 This parameter allows us to reflect this change without triggering
 *                 a major version bump for Vega.
 * @returns {object} An object of selected fields and values.
 */ function selectionResolve(name, op, isMulti, vl5) {
    var data = this.context.data[name], entries = data ? data.values.value : [], resolved = {}, multiRes = {}, types = {}, entry, fields, values, unit, field, value, res, resUnit, type, union, n = entries.length, i = 0, j, m; // First union all entries within the same unit.
    for(; i < n; ++i){
        entry = entries[i];
        unit = entry.unit;
        fields = entry.fields;
        values = entry.values;
        if (fields && values) {
            // Intentional selection stores
            for(j = 0, m = fields.length; j < m; ++j){
                field = fields[j];
                res = resolved[field.field] || (resolved[field.field] = {});
                resUnit = res[unit] || (res[unit] = []);
                types[field.field] = type = field.type.charAt(0);
                union = ops["".concat(type, "_union")];
                res[unit] = union(resUnit, (0, _vegaUtil.array)(values[j]));
            } // If the same multi-selection is repeated over views and projected over
            // an encoding, it may operate over different fields making it especially
            // tricky to reliably resolve it. At best, we can de-dupe identical entries
            // but doing so may be more computationally expensive than it is worth.
            // Instead, for now, we simply transform our store representation into
            // a more human-friendly one.
            if (isMulti) {
                resUnit = multiRes[unit] || (multiRes[unit] = []);
                resUnit.push((0, _vegaUtil.array)(values).reduce((obj, curr, j)=>(obj[fields[j].field] = curr, obj), {}));
            }
        } else {
            // Short circuit extensional selectionId stores which hold sorted IDs unique to each unit.
            field = SelectionId;
            value = $selectionId(entry);
            res = resolved[field] || (resolved[field] = {});
            resUnit = res[unit] || (res[unit] = []);
            resUnit.push(value);
            if (isMulti) {
                resUnit = multiRes[unit] || (multiRes[unit] = []);
                resUnit.push({
                    [SelectionId]: value
                });
            }
        }
    } // Then resolve fields across units as per the op.
    op = op || Union;
    if (resolved[SelectionId]) resolved[SelectionId] = ops["".concat(SelectionId, "_").concat(op)](...Object.values(resolved[SelectionId]));
    else Object.keys(resolved).forEach((field)=>{
        resolved[field] = Object.keys(resolved[field]).map((unit)=>resolved[field][unit]).reduce((acc, curr)=>acc === undefined ? curr : ops["".concat(types[field], "_").concat(op)](acc, curr));
    });
    entries = Object.keys(multiRes);
    if (isMulti && entries.length) {
        const key = vl5 ? VlPoint : VlMulti;
        resolved[key] = op === Union ? {
            [Or]: entries.reduce((acc, k)=>(acc.push(...multiRes[k]), acc), [])
        } : {
            [And]: entries.map((k)=>({
                    [Or]: multiRes[k]
                }))
        };
    }
    return resolved;
}
var ops = {
    ["".concat(SelectionId, "_union")]: (0, _d3Array.union),
    ["".concat(SelectionId, "_intersect")]: (0, _d3Array.intersection),
    E_union: function(base, value) {
        if (!base.length) return value;
        var i = 0, n = value.length;
        for(; i < n; ++i)if (base.indexOf(value[i]) < 0) base.push(value[i]);
        return base;
    },
    E_intersect: function(base, value) {
        return !base.length ? value : base.filter((v)=>value.indexOf(v) >= 0);
    },
    R_union: function(base, value) {
        var lo = (0, _vegaUtil.toNumber)(value[0]), hi = (0, _vegaUtil.toNumber)(value[1]);
        if (lo > hi) {
            lo = value[1];
            hi = value[0];
        }
        if (!base.length) return [
            lo,
            hi
        ];
        if (base[0] > lo) base[0] = lo;
        if (base[1] < hi) base[1] = hi;
        return base;
    },
    R_intersect: function(base, value) {
        var lo = (0, _vegaUtil.toNumber)(value[0]), hi = (0, _vegaUtil.toNumber)(value[1]);
        if (lo > hi) {
            lo = value[1];
            hi = value[0];
        }
        if (!base.length) return [
            lo,
            hi
        ];
        if (hi < base[0] || base[1] < lo) return [];
        else {
            if (base[0] < lo) base[0] = lo;
            if (base[1] > hi) base[1] = hi;
        }
        return base;
    }
};
const DataPrefix = ":", IndexPrefix = "@";
function selectionVisitor(name, args, scope, params) {
    if (args[0].type !== (0, _vegaExpression.Literal)) (0, _vegaUtil.error)("First argument to selection functions must be a string literal.");
    const data = args[0].value, op = args.length >= 2 && (0, _vegaUtil.peek)(args).value, field = "unit", indexName = IndexPrefix + field, dataName = DataPrefix + data; // eslint-disable-next-line no-prototype-builtins
    if (op === Intersect && !(0, _vegaUtil.hasOwnProperty)(params, indexName)) params[indexName] = scope.getData(data).indataRef(scope, field);
     // eslint-disable-next-line no-prototype-builtins
    if (!(0, _vegaUtil.hasOwnProperty)(params, dataName)) params[dataName] = scope.getData(data).tuplesRef();
}

},{"d3-array":"lLsmU","vega-util":"bApja","vega-expression":"9KcWf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lLsmU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisect", ()=>(0, _bisectJsDefault.default));
parcelHelpers.export(exports, "bisectRight", ()=>(0, _bisectJs.bisectRight));
parcelHelpers.export(exports, "bisectLeft", ()=>(0, _bisectJs.bisectLeft));
parcelHelpers.export(exports, "bisectCenter", ()=>(0, _bisectJs.bisectCenter));
parcelHelpers.export(exports, "ascending", ()=>(0, _ascendingJsDefault.default));
parcelHelpers.export(exports, "bisector", ()=>(0, _bisectorJsDefault.default));
parcelHelpers.export(exports, "count", ()=>(0, _countJsDefault.default));
parcelHelpers.export(exports, "cross", ()=>(0, _crossJsDefault.default));
parcelHelpers.export(exports, "cumsum", ()=>(0, _cumsumJsDefault.default));
parcelHelpers.export(exports, "descending", ()=>(0, _descendingJsDefault.default));
parcelHelpers.export(exports, "deviation", ()=>(0, _deviationJsDefault.default));
parcelHelpers.export(exports, "extent", ()=>(0, _extentJsDefault.default));
parcelHelpers.export(exports, "Adder", ()=>(0, _fsumJs.Adder));
parcelHelpers.export(exports, "fsum", ()=>(0, _fsumJs.fsum));
parcelHelpers.export(exports, "fcumsum", ()=>(0, _fsumJs.fcumsum));
parcelHelpers.export(exports, "group", ()=>(0, _groupJsDefault.default));
parcelHelpers.export(exports, "flatGroup", ()=>(0, _groupJs.flatGroup));
parcelHelpers.export(exports, "flatRollup", ()=>(0, _groupJs.flatRollup));
parcelHelpers.export(exports, "groups", ()=>(0, _groupJs.groups));
parcelHelpers.export(exports, "index", ()=>(0, _groupJs.index));
parcelHelpers.export(exports, "indexes", ()=>(0, _groupJs.indexes));
parcelHelpers.export(exports, "rollup", ()=>(0, _groupJs.rollup));
parcelHelpers.export(exports, "rollups", ()=>(0, _groupJs.rollups));
parcelHelpers.export(exports, "groupSort", ()=>(0, _groupSortJsDefault.default));
parcelHelpers.export(exports, "bin", ()=>(0, _binJsDefault.default)) // Deprecated; use bin.
;
parcelHelpers.export(exports, "histogram", ()=>(0, _binJsDefault.default));
parcelHelpers.export(exports, "thresholdFreedmanDiaconis", ()=>(0, _freedmanDiaconisJsDefault.default));
parcelHelpers.export(exports, "thresholdScott", ()=>(0, _scottJsDefault.default));
parcelHelpers.export(exports, "thresholdSturges", ()=>(0, _sturgesJsDefault.default));
parcelHelpers.export(exports, "max", ()=>(0, _maxJsDefault.default));
parcelHelpers.export(exports, "maxIndex", ()=>(0, _maxIndexJsDefault.default));
parcelHelpers.export(exports, "mean", ()=>(0, _meanJsDefault.default));
parcelHelpers.export(exports, "median", ()=>(0, _medianJsDefault.default));
parcelHelpers.export(exports, "merge", ()=>(0, _mergeJsDefault.default));
parcelHelpers.export(exports, "min", ()=>(0, _minJsDefault.default));
parcelHelpers.export(exports, "minIndex", ()=>(0, _minIndexJsDefault.default));
parcelHelpers.export(exports, "mode", ()=>(0, _modeJsDefault.default));
parcelHelpers.export(exports, "nice", ()=>(0, _niceJsDefault.default));
parcelHelpers.export(exports, "pairs", ()=>(0, _pairsJsDefault.default));
parcelHelpers.export(exports, "permute", ()=>(0, _permuteJsDefault.default));
parcelHelpers.export(exports, "quantile", ()=>(0, _quantileJsDefault.default));
parcelHelpers.export(exports, "quantileSorted", ()=>(0, _quantileJs.quantileSorted));
parcelHelpers.export(exports, "quickselect", ()=>(0, _quickselectJsDefault.default));
parcelHelpers.export(exports, "range", ()=>(0, _rangeJsDefault.default));
parcelHelpers.export(exports, "rank", ()=>(0, _rankJsDefault.default));
parcelHelpers.export(exports, "least", ()=>(0, _leastJsDefault.default));
parcelHelpers.export(exports, "leastIndex", ()=>(0, _leastIndexJsDefault.default));
parcelHelpers.export(exports, "greatest", ()=>(0, _greatestJsDefault.default));
parcelHelpers.export(exports, "greatestIndex", ()=>(0, _greatestIndexJsDefault.default));
parcelHelpers.export(exports, "scan", ()=>(0, _scanJsDefault.default)) // Deprecated; use leastIndex.
;
parcelHelpers.export(exports, "shuffle", ()=>(0, _shuffleJsDefault.default));
parcelHelpers.export(exports, "shuffler", ()=>(0, _shuffleJs.shuffler));
parcelHelpers.export(exports, "sum", ()=>(0, _sumJsDefault.default));
parcelHelpers.export(exports, "ticks", ()=>(0, _ticksJsDefault.default));
parcelHelpers.export(exports, "tickIncrement", ()=>(0, _ticksJs.tickIncrement));
parcelHelpers.export(exports, "tickStep", ()=>(0, _ticksJs.tickStep));
parcelHelpers.export(exports, "transpose", ()=>(0, _transposeJsDefault.default));
parcelHelpers.export(exports, "variance", ()=>(0, _varianceJsDefault.default));
parcelHelpers.export(exports, "zip", ()=>(0, _zipJsDefault.default));
parcelHelpers.export(exports, "every", ()=>(0, _everyJsDefault.default));
parcelHelpers.export(exports, "some", ()=>(0, _someJsDefault.default));
parcelHelpers.export(exports, "filter", ()=>(0, _filterJsDefault.default));
parcelHelpers.export(exports, "map", ()=>(0, _mapJsDefault.default));
parcelHelpers.export(exports, "reduce", ()=>(0, _reduceJsDefault.default));
parcelHelpers.export(exports, "reverse", ()=>(0, _reverseJsDefault.default));
parcelHelpers.export(exports, "sort", ()=>(0, _sortJsDefault.default));
parcelHelpers.export(exports, "difference", ()=>(0, _differenceJsDefault.default));
parcelHelpers.export(exports, "disjoint", ()=>(0, _disjointJsDefault.default));
parcelHelpers.export(exports, "intersection", ()=>(0, _intersectionJsDefault.default));
parcelHelpers.export(exports, "subset", ()=>(0, _subsetJsDefault.default));
parcelHelpers.export(exports, "superset", ()=>(0, _supersetJsDefault.default));
parcelHelpers.export(exports, "union", ()=>(0, _unionJsDefault.default));
parcelHelpers.export(exports, "InternMap", ()=>(0, _internmap.InternMap));
parcelHelpers.export(exports, "InternSet", ()=>(0, _internmap.InternSet));
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _crossJs = require("./cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _cumsumJs = require("./cumsum.js");
var _cumsumJsDefault = parcelHelpers.interopDefault(_cumsumJs);
var _descendingJs = require("./descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _deviationJs = require("./deviation.js");
var _deviationJsDefault = parcelHelpers.interopDefault(_deviationJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _fsumJs = require("./fsum.js");
var _groupJs = require("./group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _groupSortJs = require("./groupSort.js");
var _groupSortJsDefault = parcelHelpers.interopDefault(_groupSortJs);
var _binJs = require("./bin.js");
var _binJsDefault = parcelHelpers.interopDefault(_binJs);
var _freedmanDiaconisJs = require("./threshold/freedmanDiaconis.js");
var _freedmanDiaconisJsDefault = parcelHelpers.interopDefault(_freedmanDiaconisJs);
var _scottJs = require("./threshold/scott.js");
var _scottJsDefault = parcelHelpers.interopDefault(_scottJs);
var _sturgesJs = require("./threshold/sturges.js");
var _sturgesJsDefault = parcelHelpers.interopDefault(_sturgesJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _medianJs = require("./median.js");
var _medianJsDefault = parcelHelpers.interopDefault(_medianJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
var _modeJs = require("./mode.js");
var _modeJsDefault = parcelHelpers.interopDefault(_modeJs);
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _pairsJs = require("./pairs.js");
var _pairsJsDefault = parcelHelpers.interopDefault(_pairsJs);
var _permuteJs = require("./permute.js");
var _permuteJsDefault = parcelHelpers.interopDefault(_permuteJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _rankJs = require("./rank.js");
var _rankJsDefault = parcelHelpers.interopDefault(_rankJs);
var _leastJs = require("./least.js");
var _leastJsDefault = parcelHelpers.interopDefault(_leastJs);
var _leastIndexJs = require("./leastIndex.js");
var _leastIndexJsDefault = parcelHelpers.interopDefault(_leastIndexJs);
var _greatestJs = require("./greatest.js");
var _greatestJsDefault = parcelHelpers.interopDefault(_greatestJs);
var _greatestIndexJs = require("./greatestIndex.js");
var _greatestIndexJsDefault = parcelHelpers.interopDefault(_greatestIndexJs);
var _scanJs = require("./scan.js");
var _scanJsDefault = parcelHelpers.interopDefault(_scanJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _ticksJs = require("./ticks.js");
var _ticksJsDefault = parcelHelpers.interopDefault(_ticksJs);
var _transposeJs = require("./transpose.js");
var _transposeJsDefault = parcelHelpers.interopDefault(_transposeJs);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _disjointJs = require("./disjoint.js");
var _disjointJsDefault = parcelHelpers.interopDefault(_disjointJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _subsetJs = require("./subset.js");
var _subsetJsDefault = parcelHelpers.interopDefault(_subsetJs);
var _supersetJs = require("./superset.js");
var _supersetJsDefault = parcelHelpers.interopDefault(_supersetJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _internmap = require("internmap");

},{"./bisect.js":false,"./ascending.js":"iBXNJ","./bisector.js":"7xgyC","./count.js":false,"./cross.js":false,"./cumsum.js":false,"./descending.js":false,"./deviation.js":false,"./extent.js":false,"./fsum.js":false,"./group.js":false,"./groupSort.js":false,"./bin.js":false,"./threshold/freedmanDiaconis.js":false,"./threshold/scott.js":false,"./threshold/sturges.js":false,"./max.js":false,"./maxIndex.js":false,"./mean.js":false,"./median.js":false,"./merge.js":false,"./min.js":false,"./minIndex.js":false,"./mode.js":false,"./nice.js":false,"./pairs.js":false,"./permute.js":false,"./quantile.js":false,"./quickselect.js":false,"./range.js":false,"./rank.js":false,"./least.js":false,"./leastIndex.js":false,"./greatest.js":false,"./greatestIndex.js":false,"./scan.js":false,"./shuffle.js":false,"./sum.js":false,"./ticks.js":false,"./transpose.js":false,"./variance.js":false,"./zip.js":false,"./every.js":false,"./some.js":false,"./filter.js":false,"./map.js":false,"./reduce.js":false,"./reverse.js":false,"./sort.js":false,"./difference.js":false,"./disjoint.js":false,"./intersection.js":"7k2Rl","./subset.js":false,"./superset.js":false,"./union.js":"9JG19","internmap":"3ULAv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iBXNJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ascending(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
exports.default = ascending;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7xgyC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function bisector(f) {
    let delta = f;
    let compare1 = f;
    let compare2 = f;
    if (f.length !== 2) {
        delta = (d, x)=>f(d) - x;
        compare1 = (0, _ascendingJsDefault.default);
        compare2 = (d, x)=>(0, _ascendingJsDefault.default)(f(d), x);
    }
    function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) <= 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left,
        center,
        right
    };
}
exports.default = bisector;

},{"./ascending.js":"iBXNJ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7k2Rl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function intersection(values, ...others) {
    values = new (0, _internmap.InternSet)(values);
    others = others.map(set);
    out: for (const value of values){
        for (const other of others)if (!other.has(value)) {
            values.delete(value);
            continue out;
        }
    }
    return values;
}
exports.default = intersection;
function set(values) {
    return values instanceof (0, _internmap.InternSet) ? values : new (0, _internmap.InternSet)(values);
}

},{"internmap":"3ULAv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9JG19":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function union(...others) {
    const set = new (0, _internmap.InternSet)();
    for (const other of others)for (const o of other)set.add(o);
    return set;
}
exports.default = union;

},{"internmap":"3ULAv","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9KcWf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ASTNode", ()=>ASTNode);
parcelHelpers.export(exports, "ArrayExpression", ()=>ArrayExpression);
parcelHelpers.export(exports, "BinaryExpression", ()=>BinaryExpression);
parcelHelpers.export(exports, "CallExpression", ()=>CallExpression);
parcelHelpers.export(exports, "ConditionalExpression", ()=>ConditionalExpression);
parcelHelpers.export(exports, "Identifier", ()=>Identifier);
parcelHelpers.export(exports, "Literal", ()=>Literal);
parcelHelpers.export(exports, "LogicalExpression", ()=>LogicalExpression);
parcelHelpers.export(exports, "MemberExpression", ()=>MemberExpression);
parcelHelpers.export(exports, "ObjectExpression", ()=>ObjectExpression);
parcelHelpers.export(exports, "Property", ()=>Property);
parcelHelpers.export(exports, "RawCode", ()=>RawCode);
parcelHelpers.export(exports, "UnaryExpression", ()=>UnaryExpression);
parcelHelpers.export(exports, "codegenExpression", ()=>codegen);
parcelHelpers.export(exports, "constants", ()=>Constants);
parcelHelpers.export(exports, "functions", ()=>Functions);
parcelHelpers.export(exports, "parseExpression", ()=>parser);
var _vegaUtil = require("vega-util");
const RawCode = "RawCode";
const Literal = "Literal";
const Property = "Property";
const Identifier = "Identifier";
const ArrayExpression = "ArrayExpression";
const BinaryExpression = "BinaryExpression";
const CallExpression = "CallExpression";
const ConditionalExpression = "ConditionalExpression";
const LogicalExpression = "LogicalExpression";
const MemberExpression = "MemberExpression";
const ObjectExpression = "ObjectExpression";
const UnaryExpression = "UnaryExpression";
function ASTNode(type) {
    this.type = type;
}
ASTNode.prototype.visit = function(visitor) {
    let c, i, n;
    if (visitor(this)) return 1;
    for(c = children(this), i = 0, n = c.length; i < n; ++i){
        if (c[i].visit(visitor)) return 1;
    }
};
function children(node) {
    switch(node.type){
        case ArrayExpression:
            return node.elements;
        case BinaryExpression:
        case LogicalExpression:
            return [
                node.left,
                node.right
            ];
        case CallExpression:
            return [
                node.callee
            ].concat(node.arguments);
        case ConditionalExpression:
            return [
                node.test,
                node.consequent,
                node.alternate
            ];
        case MemberExpression:
            return [
                node.object,
                node.property
            ];
        case ObjectExpression:
            return node.properties;
        case Property:
            return [
                node.key,
                node.value
            ];
        case UnaryExpression:
            return [
                node.argument
            ];
        case Identifier:
        case Literal:
        case RawCode:
        default:
            return [];
    }
}
/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ var TokenName, source, index, length, lookahead;
var TokenBooleanLiteral = 1, TokenEOF = 2, TokenIdentifier = 3, TokenKeyword = 4, TokenNullLiteral = 5, TokenNumericLiteral = 6, TokenPunctuator = 7, TokenStringLiteral = 8, TokenRegularExpression = 9;
TokenName = {};
TokenName[TokenBooleanLiteral] = "Boolean";
TokenName[TokenEOF] = "<end>";
TokenName[TokenIdentifier] = "Identifier";
TokenName[TokenKeyword] = "Keyword";
TokenName[TokenNullLiteral] = "Null";
TokenName[TokenNumericLiteral] = "Numeric";
TokenName[TokenPunctuator] = "Punctuator";
TokenName[TokenStringLiteral] = "String";
TokenName[TokenRegularExpression] = "RegularExpression";
var SyntaxArrayExpression = "ArrayExpression", SyntaxBinaryExpression = "BinaryExpression", SyntaxCallExpression = "CallExpression", SyntaxConditionalExpression = "ConditionalExpression", SyntaxIdentifier = "Identifier", SyntaxLiteral = "Literal", SyntaxLogicalExpression = "LogicalExpression", SyntaxMemberExpression = "MemberExpression", SyntaxObjectExpression = "ObjectExpression", SyntaxProperty = "Property", SyntaxUnaryExpression = "UnaryExpression"; // Error messages should be identical to V8.
var MessageUnexpectedToken = "Unexpected token %0", MessageUnexpectedNumber = "Unexpected number", MessageUnexpectedString = "Unexpected string", MessageUnexpectedIdentifier = "Unexpected identifier", MessageUnexpectedReserved = "Unexpected reserved word", MessageUnexpectedEOS = "Unexpected end of input", MessageInvalidRegExp = "Invalid regular expression", MessageUnterminatedRegExp = "Invalid regular expression: missing /", MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.", MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
var ILLEGAL = "ILLEGAL", DISABLED = "Disabled."; // See also tools/generate-unicode-regex.py.
var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), // eslint-disable-next-line no-misleading-character-class
RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.
function assert(condition, message) {
    /* istanbul ignore next */ if (!condition) throw new Error("ASSERT: " + message);
}
function isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
}
function isHexDigit(ch) {
    return "0123456789abcdefABCDEF".indexOf(ch) >= 0;
}
function isOctalDigit(ch) {
    return "01234567".indexOf(ch) >= 0;
} // 7.2 White Space
function isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [
        0x1680,
        0x180E,
        0x2000,
        0x2001,
        0x2002,
        0x2003,
        0x2004,
        0x2005,
        0x2006,
        0x2007,
        0x2008,
        0x2009,
        0x200A,
        0x202F,
        0x205F,
        0x3000,
        0xFEFF
    ].indexOf(ch) >= 0;
} // 7.3 Line Terminators
function isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
} // 7.6 Identifier Names and Identifiers
function isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch === 0x5C || ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}
function isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch >= 0x30 && ch <= 0x39 || ch === 0x5C || ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
} // 7.6.1.1 Keywords
const keywords = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
};
function skipComment() {
    while(index < length){
        const ch = source.charCodeAt(index);
        if (isWhiteSpace(ch) || isLineTerminator(ch)) ++index;
        else break;
    }
}
function scanHexEscape(prefix) {
    var i, len, ch, code = 0;
    len = prefix === "u" ? 4 : 2;
    for(i = 0; i < len; ++i)if (index < length && isHexDigit(source[index])) {
        ch = source[index++];
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    } else throwError({}, MessageUnexpectedToken, ILLEGAL);
    return String.fromCharCode(code);
}
function scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = source[index];
    code = 0; // At least, one hex digit is required.
    if (ch === "}") throwError({}, MessageUnexpectedToken, ILLEGAL);
    while(index < length){
        ch = source[index++];
        if (!isHexDigit(ch)) break;
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    }
    if (code > 0x10FFFF || ch !== "}") throwError({}, MessageUnexpectedToken, ILLEGAL);
     // UTF-16 Encoding
    if (code <= 0xFFFF) return String.fromCharCode(code);
    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
}
function getEscapedIdentifier() {
    var ch, id;
    ch = source.charCodeAt(index++);
    id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
        if (source.charCodeAt(index) !== 0x75) throwError({}, MessageUnexpectedToken, ILLEGAL);
        ++index;
        ch = scanHexEscape("u");
        if (!ch || ch === "\\" || !isIdentifierStart(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
        id = ch;
    }
    while(index < length){
        ch = source.charCodeAt(index);
        if (!isIdentifierPart(ch)) break;
        ++index;
        id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            id = id.substr(0, id.length - 1);
            if (source.charCodeAt(index) !== 0x75) throwError({}, MessageUnexpectedToken, ILLEGAL);
            ++index;
            ch = scanHexEscape("u");
            if (!ch || ch === "\\" || !isIdentifierPart(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
            id += ch;
        }
    }
    return id;
}
function getIdentifier() {
    var start, ch;
    start = index++;
    while(index < length){
        ch = source.charCodeAt(index);
        if (ch === 0x5C) {
            // Blackslash (U+005C) marks Unicode escape sequence.
            index = start;
            return getEscapedIdentifier();
        }
        if (isIdentifierPart(ch)) ++index;
        else break;
    }
    return source.slice(start, index);
}
function scanIdentifier() {
    var start, id, type;
    start = index; // Backslash (U+005C) starts an escaped character.
    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) type = TokenIdentifier;
    else if (keywords.hasOwnProperty(id)) // eslint-disable-line no-prototype-builtins
    type = TokenKeyword;
    else if (id === "null") type = TokenNullLiteral;
    else if (id === "true" || id === "false") type = TokenBooleanLiteral;
    else type = TokenIdentifier;
    return {
        type: type,
        value: id,
        start: start,
        end: index
    };
} // 7.7 Punctuators
function scanPunctuator() {
    var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2, ch3, ch4;
    switch(code){
        // Check for most common single-character punctuators.
        case 0x2E:
        case 0x28:
        case 0x29:
        case 0x3B:
        case 0x2C:
        case 0x7B:
        case 0x7D:
        case 0x5B:
        case 0x5D:
        case 0x3A:
        case 0x3F:
        case 0x7E:
            // ~
            ++index;
            return {
                type: TokenPunctuator,
                value: String.fromCharCode(code),
                start: start,
                end: index
            };
        default:
            code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) switch(code){
                case 0x2B:
                case 0x2D:
                case 0x2F:
                case 0x3C:
                case 0x3E:
                case 0x5E:
                case 0x7C:
                case 0x25:
                case 0x26:
                case 0x2A:
                    // *
                    index += 2;
                    return {
                        type: TokenPunctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        start: start,
                        end: index
                    };
                case 0x21:
                case 0x3D:
                    // =
                    index += 2; // !== and ===
                    if (source.charCodeAt(index) === 0x3D) ++index;
                    return {
                        type: TokenPunctuator,
                        value: source.slice(start, index),
                        start: start,
                        end: index
                    };
            }
    } // 4-character punctuator: >>>=
    ch4 = source.substr(index, 4);
    if (ch4 === ">>>=") {
        index += 4;
        return {
            type: TokenPunctuator,
            value: ch4,
            start: start,
            end: index
        };
    } // 3-character punctuators: === !== >>> <<= >>=
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
        index += 3;
        return {
            type: TokenPunctuator,
            value: ch3,
            start: start,
            end: index
        };
    } // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".indexOf(ch1) >= 0 || ch2 === "=>") {
        index += 2;
        return {
            type: TokenPunctuator,
            value: ch2,
            start: start,
            end: index
        };
    }
    if (ch2 === "//") throwError({}, MessageUnexpectedToken, ILLEGAL);
     // 1-character punctuators: < > = ! + - * % & | ^ /
    if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
        ++index;
        return {
            type: TokenPunctuator,
            value: ch1,
            start: start,
            end: index
        };
    }
    throwError({}, MessageUnexpectedToken, ILLEGAL);
} // 7.8.3 Numeric Literals
function scanHexLiteral(start) {
    let number = "";
    while(index < length){
        if (!isHexDigit(source[index])) break;
        number += source[index++];
    }
    if (number.length === 0) throwError({}, MessageUnexpectedToken, ILLEGAL);
    if (isIdentifierStart(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseInt("0x" + number, 16),
        start: start,
        end: index
    };
}
function scanOctalLiteral(start) {
    let number = "0" + source[index++];
    while(index < length){
        if (!isOctalDigit(source[index])) break;
        number += source[index++];
    }
    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: index
    };
}
function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = index;
    number = "";
    if (ch !== ".") {
        number = source[index++];
        ch = source[index]; // Hex number starts with '0x'.
        // Octal number starts with '0'.
        if (number === "0") {
            if (ch === "x" || ch === "X") {
                ++index;
                return scanHexLiteral(start);
            }
            if (isOctalDigit(ch)) return scanOctalLiteral(start);
             // decimal number starts with '0' such as '09' is illegal.
            if (ch && isDecimalDigit(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        ch = source[index];
    }
    if (ch === ".") {
        number += source[index++];
        while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        ch = source[index];
    }
    if (ch === "e" || ch === "E") {
        number += source[index++];
        ch = source[index];
        if (ch === "+" || ch === "-") number += source[index++];
        if (isDecimalDigit(source.charCodeAt(index))) while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        else throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if (isIdentifierStart(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: index
    };
} // 7.8.4 String Literals
function scanStringLiteral() {
    var str = "", quote, start, ch, code, octal = false;
    quote = source[index];
    assert(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = index;
    ++index;
    while(index < length){
        ch = source[index++];
        if (ch === quote) {
            quote = "";
            break;
        } else if (ch === "\\") {
            ch = source[index++];
            if (!ch || !isLineTerminator(ch.charCodeAt(0))) switch(ch){
                case "u":
                case "x":
                    if (source[index] === "{") {
                        ++index;
                        str += scanUnicodeCodePointEscape();
                    } else str += scanHexEscape(ch);
                    break;
                case "n":
                    str += "\n";
                    break;
                case "r":
                    str += "\r";
                    break;
                case "t":
                    str += "	";
                    break;
                case "b":
                    str += "\b";
                    break;
                case "f":
                    str += "\f";
                    break;
                case "v":
                    str += "\v";
                    break;
                default:
                    if (isOctalDigit(ch)) {
                        code = "01234567".indexOf(ch); // \0 is not octal escape sequence
                        if (code !== 0) octal = true;
                        if (index < length && isOctalDigit(source[index])) {
                            octal = true;
                            code = code * 8 + "01234567".indexOf(source[index++]); // 3 digits are only allowed when string starts
                            // with 0, 1, 2, 3
                            if ("0123".indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) code = code * 8 + "01234567".indexOf(source[index++]);
                        }
                        str += String.fromCharCode(code);
                    } else str += ch;
                    break;
            }
            else if (ch === "\r" && source[index] === "\n") ++index;
        } else if (isLineTerminator(ch.charCodeAt(0))) break;
        else str += ch;
    }
    if (quote !== "") throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: index
    };
}
function testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.indexOf("u") >= 0) // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1)=>{
        if (parseInt($1, 16) <= 0x10FFFF) return "x";
        throwError({}, MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
     // First, detect invalid regular expressions.
    try {
        new RegExp(tmp);
    } catch (e) {
        throwError({}, MessageInvalidRegExp);
    } // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
        return new RegExp(pattern, flags);
    } catch (exception) {
        return null;
    }
}
function scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = source[index];
    assert(ch === "/", "Regular expression literal must start with a slash");
    str = source[index++];
    classMarker = false;
    terminated = false;
    while(index < length){
        ch = source[index++];
        str += ch;
        if (ch === "\\") {
            ch = source[index++]; // ECMA-262 7.8.5
            if (isLineTerminator(ch.charCodeAt(0))) throwError({}, MessageUnterminatedRegExp);
            str += ch;
        } else if (isLineTerminator(ch.charCodeAt(0))) throwError({}, MessageUnterminatedRegExp);
        else if (classMarker) {
            if (ch === "]") classMarker = false;
        } else {
            if (ch === "/") {
                terminated = true;
                break;
            } else if (ch === "[") classMarker = true;
        }
    }
    if (!terminated) throwError({}, MessageUnterminatedRegExp);
     // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
        value: body,
        literal: str
    };
}
function scanRegExpFlags() {
    var ch, str, flags;
    str = "";
    flags = "";
    while(index < length){
        ch = source[index];
        if (!isIdentifierPart(ch.charCodeAt(0))) break;
        ++index;
        if (ch === "\\" && index < length) throwError({}, MessageUnexpectedToken, ILLEGAL);
        else {
            flags += ch;
            str += ch;
        }
    }
    if (flags.search(/[^gimuy]/g) >= 0) throwError({}, MessageInvalidRegExp, flags);
    return {
        value: flags,
        literal: str
    };
}
function scanRegExp() {
    var start, body, flags, value;
    lookahead = null;
    skipComment();
    start = index;
    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value = testRegExp(body.value, flags.value);
    return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
            pattern: body.value,
            flags: flags.value
        },
        start: start,
        end: index
    };
}
function isIdentifierName(token) {
    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
}
function advance() {
    skipComment();
    if (index >= length) return {
        type: TokenEOF,
        start: index,
        end: index
    };
    const ch = source.charCodeAt(index);
    if (isIdentifierStart(ch)) return scanIdentifier();
     // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) return scanPunctuator();
     // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) return scanStringLiteral();
     // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
        if (isDecimalDigit(source.charCodeAt(index + 1))) return scanNumericLiteral();
        return scanPunctuator();
    }
    if (isDecimalDigit(ch)) return scanNumericLiteral();
    return scanPunctuator();
}
function lex() {
    const token = lookahead;
    index = token.end;
    lookahead = advance();
    index = token.end;
    return token;
}
function peek() {
    const pos = index;
    lookahead = advance();
    index = pos;
}
function finishArrayExpression(elements) {
    const node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
}
function finishBinaryExpression(operator, left, right) {
    const node = new ASTNode(operator === "||" || operator === "&&" ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
}
function finishCallExpression(callee, args) {
    const node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
}
function finishConditionalExpression(test, consequent, alternate) {
    const node = new ASTNode(SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
}
function finishIdentifier(name) {
    const node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
}
function finishLiteral(token) {
    const node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source.slice(token.start, token.end);
    if (token.regex) {
        if (node.raw === "//") node.raw = "/(?:)/";
        node.regex = token.regex;
    }
    return node;
}
function finishMemberExpression(accessor, object, property) {
    const node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor === "[";
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
}
function finishObjectExpression(properties) {
    const node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
}
function finishProperty(kind, key, value) {
    const node = new ASTNode(SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
}
function finishUnaryExpression(operator, argument) {
    const node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
} // Throw an exception
function throwError(token, messageFormat) {
    var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index)=>{
        assert(index < args.length, "Message reference must be in range");
        return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
} // Throw an exception because of the token.
function throwUnexpected(token) {
    if (token.type === TokenEOF) throwError(token, MessageUnexpectedEOS);
    if (token.type === TokenNumericLiteral) throwError(token, MessageUnexpectedNumber);
    if (token.type === TokenStringLiteral) throwError(token, MessageUnexpectedString);
    if (token.type === TokenIdentifier) throwError(token, MessageUnexpectedIdentifier);
    if (token.type === TokenKeyword) throwError(token, MessageUnexpectedReserved);
     // BooleanLiteral, NullLiteral, or Punctuator.
    throwError(token, MessageUnexpectedToken, token.value);
} // Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.
function expect(value) {
    const token = lex();
    if (token.type !== TokenPunctuator || token.value !== value) throwUnexpected(token);
} // Return true if the next token matches the specified punctuator.
function match(value) {
    return lookahead.type === TokenPunctuator && lookahead.value === value;
} // Return true if the next token matches the specified keyword
function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
} // 11.1.4 Array Initialiser
function parseArrayInitialiser() {
    const elements = [];
    index = lookahead.start;
    expect("[");
    while(!match("]"))if (match(",")) {
        lex();
        elements.push(null);
    } else {
        elements.push(parseConditionalExpression());
        if (!match("]")) expect(",");
    }
    lex();
    return finishArrayExpression(elements);
} // 11.1.5 Object Initialiser
function parseObjectPropertyKey() {
    index = lookahead.start;
    const token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.
    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
        if (token.octal) throwError(token, MessageStrictOctalLiteral);
        return finishLiteral(token);
    }
    return finishIdentifier(token.value);
}
function parseObjectProperty() {
    var token, key, id, value;
    index = lookahead.start;
    token = lookahead;
    if (token.type === TokenIdentifier) {
        id = parseObjectPropertyKey();
        expect(":");
        value = parseConditionalExpression();
        return finishProperty("init", id, value);
    }
    if (token.type === TokenEOF || token.type === TokenPunctuator) throwUnexpected(token);
    else {
        key = parseObjectPropertyKey();
        expect(":");
        value = parseConditionalExpression();
        return finishProperty("init", key, value);
    }
}
function parseObjectInitialiser() {
    var properties = [], property, name, key, map = {}, toString = String;
    index = lookahead.start;
    expect("{");
    while(!match("}")){
        property = parseObjectProperty();
        if (property.key.type === SyntaxIdentifier) name = property.key.name;
        else name = toString(property.key.value);
        key = "$" + name;
        if (Object.prototype.hasOwnProperty.call(map, key)) throwError({}, MessageStrictDuplicateProperty);
        else map[key] = true;
        properties.push(property);
        if (!match("}")) expect(",");
    }
    expect("}");
    return finishObjectExpression(properties);
} // 11.1.6 The Grouping Operator
function parseGroupExpression() {
    expect("(");
    const expr = parseExpression();
    expect(")");
    return expr;
} // 11.1 Primary Expressions
const legalKeywords = {
    "if": 1
};
function parsePrimaryExpression() {
    var type, token, expr;
    if (match("(")) return parseGroupExpression();
    if (match("[")) return parseArrayInitialiser();
    if (match("{")) return parseObjectInitialiser();
    type = lookahead.type;
    index = lookahead.start;
    if (type === TokenIdentifier || legalKeywords[lookahead.value]) expr = finishIdentifier(lex().value);
    else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
        if (lookahead.octal) throwError(lookahead, MessageStrictOctalLiteral);
        expr = finishLiteral(lex());
    } else if (type === TokenKeyword) throw new Error(DISABLED);
    else if (type === TokenBooleanLiteral) {
        token = lex();
        token.value = token.value === "true";
        expr = finishLiteral(token);
    } else if (type === TokenNullLiteral) {
        token = lex();
        token.value = null;
        expr = finishLiteral(token);
    } else if (match("/") || match("/=")) {
        expr = finishLiteral(scanRegExp());
        peek();
    } else throwUnexpected(lex());
    return expr;
} // 11.2 Left-Hand-Side Expressions
function parseArguments() {
    const args = [];
    expect("(");
    if (!match(")")) while(index < length){
        args.push(parseConditionalExpression());
        if (match(")")) break;
        expect(",");
    }
    expect(")");
    return args;
}
function parseNonComputedProperty() {
    index = lookahead.start;
    const token = lex();
    if (!isIdentifierName(token)) throwUnexpected(token);
    return finishIdentifier(token.value);
}
function parseNonComputedMember() {
    expect(".");
    return parseNonComputedProperty();
}
function parseComputedMember() {
    expect("[");
    const expr = parseExpression();
    expect("]");
    return expr;
}
function parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = parsePrimaryExpression();
    for(;;){
        if (match(".")) {
            property = parseNonComputedMember();
            expr = finishMemberExpression(".", expr, property);
        } else if (match("(")) {
            args = parseArguments();
            expr = finishCallExpression(expr, args);
        } else if (match("[")) {
            property = parseComputedMember();
            expr = finishMemberExpression("[", expr, property);
        } else break;
    }
    return expr;
} // 11.3 Postfix Expressions
function parsePostfixExpression() {
    const expr = parseLeftHandSideExpressionAllowCall();
    if (lookahead.type === TokenPunctuator) {
        if (match("++") || match("--")) throw new Error(DISABLED);
    }
    return expr;
} // 11.4 Unary Operators
function parseUnaryExpression() {
    var token, expr;
    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) expr = parsePostfixExpression();
    else if (match("++") || match("--")) throw new Error(DISABLED);
    else if (match("+") || match("-") || match("~") || match("!")) {
        token = lex();
        expr = parseUnaryExpression();
        expr = finishUnaryExpression(token.value, expr);
    } else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) throw new Error(DISABLED);
    else expr = parsePostfixExpression();
    return expr;
}
function binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) return 0;
    switch(token.value){
        case "||":
            prec = 1;
            break;
        case "&&":
            prec = 2;
            break;
        case "|":
            prec = 3;
            break;
        case "^":
            prec = 4;
            break;
        case "&":
            prec = 5;
            break;
        case "==":
        case "!=":
        case "===":
        case "!==":
            prec = 6;
            break;
        case "<":
        case ">":
        case "<=":
        case ">=":
        case "instanceof":
        case "in":
            prec = 7;
            break;
        case "<<":
        case ">>":
        case ">>>":
            prec = 8;
            break;
        case "+":
        case "-":
            prec = 9;
            break;
        case "*":
        case "/":
        case "%":
            prec = 11;
            break;
    }
    return prec;
} // 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators
function parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = lookahead;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);
    if (prec === 0) return left;
    token.prec = prec;
    lex();
    markers = [
        marker,
        lookahead
    ];
    right = parseUnaryExpression();
    stack = [
        left,
        token,
        right
    ];
    while((prec = binaryPrecedence(lookahead)) > 0){
        // Reduce: make a binary expression from the three topmost entries.
        while(stack.length > 2 && prec <= stack[stack.length - 2].prec){
            right = stack.pop();
            operator = stack.pop().value;
            left = stack.pop();
            markers.pop();
            expr = finishBinaryExpression(operator, left, right);
            stack.push(expr);
        } // Shift.
        token = lex();
        token.prec = prec;
        stack.push(token);
        markers.push(lookahead);
        expr = parseUnaryExpression();
        stack.push(expr);
    } // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while(i > 1){
        markers.pop();
        expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
    }
    return expr;
} // 11.12 Conditional Operator
function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();
    if (match("?")) {
        lex();
        consequent = parseConditionalExpression();
        expect(":");
        alternate = parseConditionalExpression();
        expr = finishConditionalExpression(expr, consequent, alternate);
    }
    return expr;
} // 11.14 Comma Operator
function parseExpression() {
    const expr = parseConditionalExpression();
    if (match(",")) throw new Error(DISABLED); // no sequence expressions
    return expr;
}
function parser(code) {
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    peek();
    const expr = parseExpression();
    if (lookahead.type !== TokenEOF) throw new Error("Unexpect token after expression.");
    return expr;
}
var Constants = {
    NaN: "NaN",
    E: "Math.E",
    LN2: "Math.LN2",
    LN10: "Math.LN10",
    LOG2E: "Math.LOG2E",
    LOG10E: "Math.LOG10E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    MIN_VALUE: "Number.MIN_VALUE",
    MAX_VALUE: "Number.MAX_VALUE"
};
function Functions(codegen) {
    function fncall(name, args, cast, type) {
        let obj = codegen(args[0]);
        if (cast) {
            obj = cast + "(" + obj + ")";
            if (cast.lastIndexOf("new ", 0) === 0) obj = "(" + obj + ")";
        }
        return obj + "." + name + (type < 0 ? "" : type === 0 ? "()" : "(" + args.slice(1).map(codegen).join(",") + ")");
    }
    function fn(name, cast, type) {
        return (args)=>fncall(name, args, cast, type);
    }
    const DATE = "new Date", STRING = "String", REGEXP = "RegExp";
    return {
        // MATH functions
        isNaN: "Number.isNaN",
        isFinite: "Number.isFinite",
        abs: "Math.abs",
        acos: "Math.acos",
        asin: "Math.asin",
        atan: "Math.atan",
        atan2: "Math.atan2",
        ceil: "Math.ceil",
        cos: "Math.cos",
        exp: "Math.exp",
        floor: "Math.floor",
        log: "Math.log",
        max: "Math.max",
        min: "Math.min",
        pow: "Math.pow",
        random: "Math.random",
        round: "Math.round",
        sin: "Math.sin",
        sqrt: "Math.sqrt",
        tan: "Math.tan",
        clamp: function(args) {
            if (args.length < 3) (0, _vegaUtil.error)("Missing arguments to clamp function.");
            if (args.length > 3) (0, _vegaUtil.error)("Too many arguments to clamp function.");
            const a = args.map(codegen);
            return "Math.max(" + a[1] + ", Math.min(" + a[2] + "," + a[0] + "))";
        },
        // DATE functions
        now: "Date.now",
        utc: "Date.UTC",
        datetime: DATE,
        date: fn("getDate", DATE, 0),
        day: fn("getDay", DATE, 0),
        year: fn("getFullYear", DATE, 0),
        month: fn("getMonth", DATE, 0),
        hours: fn("getHours", DATE, 0),
        minutes: fn("getMinutes", DATE, 0),
        seconds: fn("getSeconds", DATE, 0),
        milliseconds: fn("getMilliseconds", DATE, 0),
        time: fn("getTime", DATE, 0),
        timezoneoffset: fn("getTimezoneOffset", DATE, 0),
        utcdate: fn("getUTCDate", DATE, 0),
        utcday: fn("getUTCDay", DATE, 0),
        utcyear: fn("getUTCFullYear", DATE, 0),
        utcmonth: fn("getUTCMonth", DATE, 0),
        utchours: fn("getUTCHours", DATE, 0),
        utcminutes: fn("getUTCMinutes", DATE, 0),
        utcseconds: fn("getUTCSeconds", DATE, 0),
        utcmilliseconds: fn("getUTCMilliseconds", DATE, 0),
        // sequence functions
        length: fn("length", null, -1),
        // STRING functions
        parseFloat: "parseFloat",
        parseInt: "parseInt",
        upper: fn("toUpperCase", STRING, 0),
        lower: fn("toLowerCase", STRING, 0),
        substring: fn("substring", STRING),
        split: fn("split", STRING),
        trim: fn("trim", STRING, 0),
        // REGEXP functions
        regexp: REGEXP,
        test: fn("test", REGEXP),
        // Control Flow functions
        if: function(args) {
            if (args.length < 3) (0, _vegaUtil.error)("Missing arguments to if function.");
            if (args.length > 3) (0, _vegaUtil.error)("Too many arguments to if function.");
            const a = args.map(codegen);
            return "(" + a[0] + "?" + a[1] + ":" + a[2] + ")";
        }
    };
}
function stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === "'" && s[n] === "'") ? s.slice(1, -1) : s;
}
function codegen(opt) {
    opt = opt || {};
    const allowed = opt.allowed ? (0, _vegaUtil.toSet)(opt.allowed) : {}, forbidden = opt.forbidden ? (0, _vegaUtil.toSet)(opt.forbidden) : {}, constants = opt.constants || Constants, functions = (opt.functions || Functions)(visit), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = (0, _vegaUtil.isFunction)(globalvar) ? globalvar : (id)=>`${globalvar}["${id}"]`;
    let globals = {}, fields = {}, memberDepth = 0;
    function visit(ast) {
        if ((0, _vegaUtil.isString)(ast)) return ast;
        const generator = Generators[ast.type];
        if (generator == null) (0, _vegaUtil.error)("Unsupported type: " + ast.type);
        return generator(ast);
    }
    const Generators = {
        Literal: (n)=>n.raw,
        Identifier: (n)=>{
            const id = n.name;
            if (memberDepth > 0) return id;
            else if ((0, _vegaUtil.hasOwnProperty)(forbidden, id)) return (0, _vegaUtil.error)("Illegal identifier: " + id);
            else if ((0, _vegaUtil.hasOwnProperty)(constants, id)) return constants[id];
            else if ((0, _vegaUtil.hasOwnProperty)(allowed, id)) return id;
            else {
                globals[id] = 1;
                return outputGlobal(id);
            }
        },
        MemberExpression: (n)=>{
            const d = !n.computed, o = visit(n.object);
            if (d) memberDepth += 1;
            const p = visit(n.property);
            if (o === fieldvar) // strip quotes to sanitize field name (#1653)
            fields[stripQuotes(p)] = 1;
            if (d) memberDepth -= 1;
            return o + (d ? "." + p : "[" + p + "]");
        },
        CallExpression: (n)=>{
            if (n.callee.type !== "Identifier") (0, _vegaUtil.error)("Illegal callee type: " + n.callee.type);
            const callee = n.callee.name, args = n.arguments, fn = (0, _vegaUtil.hasOwnProperty)(functions, callee) && functions[callee];
            if (!fn) (0, _vegaUtil.error)("Unrecognized function: " + callee);
            return (0, _vegaUtil.isFunction)(fn) ? fn(args) : fn + "(" + args.map(visit).join(",") + ")";
        },
        ArrayExpression: (n)=>"[" + n.elements.map(visit).join(",") + "]",
        BinaryExpression: (n)=>"(" + visit(n.left) + " " + n.operator + " " + visit(n.right) + ")",
        UnaryExpression: (n)=>"(" + n.operator + visit(n.argument) + ")",
        ConditionalExpression: (n)=>"(" + visit(n.test) + "?" + visit(n.consequent) + ":" + visit(n.alternate) + ")",
        LogicalExpression: (n)=>"(" + visit(n.left) + n.operator + visit(n.right) + ")",
        ObjectExpression: (n)=>"{" + n.properties.map(visit).join(",") + "}",
        Property: (n)=>{
            memberDepth += 1;
            const k = visit(n.key);
            memberDepth -= 1;
            return k + ":" + visit(n.value);
        }
    };
    function codegen(ast) {
        const result = {
            code: visit(ast),
            globals: Object.keys(globals),
            fields: Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
    }
    codegen.functions = functions;
    codegen.constants = constants;
    return codegen;
}

},{"vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"k7ppL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "context", ()=>context);
var _vegaUtil = require("vega-util");
var _vegaDataflow = require("vega-dataflow");
/**
 * Parse a serialized dataflow specification.
 */ function parse(spec) {
    const ctx = this, operators = spec.operators || []; // parse background
    if (spec.background) ctx.background = spec.background;
     // parse event configuration
    if (spec.eventConfig) ctx.eventConfig = spec.eventConfig;
     // parse locale configuration
    if (spec.locale) ctx.locale = spec.locale;
     // parse operators
    operators.forEach((entry)=>ctx.parseOperator(entry)); // parse operator parameters
    operators.forEach((entry)=>ctx.parseOperatorParameters(entry)); // parse streams
    (spec.streams || []).forEach((entry)=>ctx.parseStream(entry)); // parse updates
    (spec.updates || []).forEach((entry)=>ctx.parseUpdate(entry));
    return ctx.resolve();
}
const Skip = (0, _vegaUtil.toSet)([
    "rule"
]), Swap = (0, _vegaUtil.toSet)([
    "group",
    "image",
    "rect"
]);
function adjustSpatial(encode, marktype) {
    let code = "";
    if (Skip[marktype]) return code;
    if (encode.x2) {
        if (encode.x) {
            if (Swap[marktype]) code += "if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;";
            code += "o.width=o.x2-o.x;";
        } else code += "o.x=o.x2-(o.width||0);";
    }
    if (encode.xc) code += "o.x=o.xc-(o.width||0)/2;";
    if (encode.y2) {
        if (encode.y) {
            if (Swap[marktype]) code += "if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;";
            code += "o.height=o.y2-o.y;";
        } else code += "o.y=o.y2-(o.height||0);";
    }
    if (encode.yc) code += "o.y=o.yc-(o.height||0)/2;";
    return code;
}
function canonicalType(type) {
    return (type + "").toLowerCase();
}
function isOperator(type) {
    return canonicalType(type) === "operator";
}
function isCollect(type) {
    return canonicalType(type) === "collect";
}
function expression(ctx, args, code) {
    // wrap code in return statement if expression does not terminate
    if (code[code.length - 1] !== ";") code = "return(" + code + ");";
    const fn = Function(...args.concat(code));
    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
} // generate code for comparing a single field
function _compare(u, v, lt, gt) {
    return "((u = ".concat(u, ") < (v = ").concat(v, ") || u == null) && v != null ? ").concat(lt, "\n  : (u > v || v == null) && u != null ? ").concat(gt, "\n  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ").concat(lt, "\n  : v !== v && u === u ? ").concat(gt, " : ");
}
var expressionCodegen = {
    /**
   * Parse an expression used to update an operator value.
   */ operator: (ctx, expr)=>expression(ctx, [
            "_"
        ], expr.code),
    /**
   * Parse an expression provided as an operator parameter value.
   */ parameter: (ctx, expr)=>expression(ctx, [
            "datum",
            "_"
        ], expr.code),
    /**
   * Parse an expression applied to an event stream.
   */ event: (ctx, expr)=>expression(ctx, [
            "event"
        ], expr.code),
    /**
   * Parse an expression used to handle an event-driven operator update.
   */ handler: (ctx, expr)=>{
        const code = "var datum=event.item&&event.item.datum;return ".concat(expr.code, ";");
        return expression(ctx, [
            "_",
            "event"
        ], code);
    },
    /**
   * Parse an expression that performs visual encoding.
   */ encode: (ctx, encode)=>{
        const { marktype , channels  } = encode;
        let code = "var o=item,datum=o.datum,m=0,$;";
        for(const name in channels){
            const o = "o[" + (0, _vegaUtil.stringValue)(name) + "]";
            code += "$=".concat(channels[name].code, ";if(").concat(o, "!==$)").concat(o, "=$,m=1;");
        }
        code += adjustSpatial(channels, marktype);
        code += "return m;";
        return expression(ctx, [
            "item",
            "_"
        ], code);
    },
    /**
   * Optimized code generators for access and comparison.
   */ codegen: {
        get (path) {
            const ref = "[".concat(path.map((0, _vegaUtil.stringValue)).join("]["), "]");
            const get = Function("_", "return _".concat(ref, ";"));
            get.path = ref;
            return get;
        },
        comparator (fields, orders) {
            let t;
            const map = (f, i)=>{
                const o = orders[i];
                let u, v;
                if (f.path) {
                    u = "a".concat(f.path);
                    v = "b".concat(f.path);
                } else {
                    (t = t || {})["f" + i] = f;
                    u = "this.f".concat(i, "(a)");
                    v = "this.f".concat(i, "(b)");
                }
                return _compare(u, v, -o, o);
            };
            const fn = Function("a", "b", "var u, v; return " + fields.map(map).join("") + "0;");
            return t ? fn.bind(t) : fn;
        }
    }
};
/**
 * Parse a dataflow operator.
 */ function parseOperator(spec) {
    const ctx = this;
    if (isOperator(spec.type) || !spec.type) ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);
    else ctx.transform(spec, spec.type);
}
/**
 * Parse and assign operator parameters.
 */ function parseOperatorParameters(spec) {
    const ctx = this;
    if (spec.params) {
        const op = ctx.get(spec.id);
        if (!op) (0, _vegaUtil.error)("Invalid operator id: " + spec.id);
        ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));
    }
}
/**
 * Parse a set of operator parameters.
 */ function parseParameters(spec, params) {
    params = params || {};
    const ctx = this;
    for(const key in spec){
        const value = spec[key];
        params[key] = (0, _vegaUtil.isArray)(value) ? value.map((v)=>parseParameter(v, ctx, params)) : parseParameter(value, ctx, params);
    }
    return params;
}
/**
 * Parse a single parameter.
 */ function parseParameter(spec, ctx, params) {
    if (!spec || !(0, _vegaUtil.isObject)(spec)) return spec;
    for(let i = 0, n = PARSERS.length, p; i < n; ++i){
        p = PARSERS[i];
        if ((0, _vegaUtil.hasOwnProperty)(spec, p.key)) return p.parse(spec, ctx, params);
    }
    return spec;
}
/** Reference parsers. */ var PARSERS = [
    {
        key: "$ref",
        parse: getOperator
    },
    {
        key: "$key",
        parse: getKey
    },
    {
        key: "$expr",
        parse: getExpression
    },
    {
        key: "$field",
        parse: getField
    },
    {
        key: "$encode",
        parse: getEncode
    },
    {
        key: "$compare",
        parse: getCompare
    },
    {
        key: "$context",
        parse: getContext
    },
    {
        key: "$subflow",
        parse: getSubflow
    },
    {
        key: "$tupleid",
        parse: getTupleId
    }
];
/**
 * Resolve an operator reference.
 */ function getOperator(_, ctx) {
    return ctx.get(_.$ref) || (0, _vegaUtil.error)("Operator not defined: " + _.$ref);
}
/**
 * Resolve an expression reference.
 */ function getExpression(_, ctx, params) {
    if (_.$params) // parse expression parameters
    ctx.parseParameters(_.$params, params);
    const k = "e:" + _.$expr.code + "_" + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.accessor)(ctx.parameterExpression(_.$expr), _.$fields, _.$name));
}
/**
 * Resolve a key accessor reference.
 */ function getKey(_, ctx) {
    const k = "k:" + _.$key + "_" + !!_.$flat;
    return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.key)(_.$key, _.$flat, ctx.expr.codegen));
}
/**
 * Resolve a field accessor reference.
 */ function getField(_, ctx) {
    if (!_.$field) return null;
    const k = "f:" + _.$field + "_" + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.field)(_.$field, _.$name, ctx.expr.codegen));
}
/**
 * Resolve a comparator function reference.
 */ function getCompare(_, ctx) {
    // As of Vega 5.5.3, $tupleid sort is no longer used.
    // Keep here for now for backwards compatibility.
    const k = "c:" + _.$compare + "_" + _.$order, c = (0, _vegaUtil.array)(_.$compare).map((_)=>_ && _.$tupleid ? (0, _vegaDataflow.tupleid) : _);
    return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.compare)(c, _.$order, ctx.expr.codegen));
}
/**
 * Resolve an encode operator reference.
 */ function getEncode(_, ctx) {
    const spec = _.$encode, encode = {};
    for(const name in spec){
        const enc = spec[name];
        encode[name] = (0, _vegaUtil.accessor)(ctx.encodeExpression(enc.$expr), enc.$fields);
        encode[name].output = enc.$output;
    }
    return encode;
}
/**
 * Resolve a context reference.
 */ function getContext(_, ctx) {
    return ctx;
}
/**
 * Resolve a recursive subflow specification.
 */ function getSubflow(_, ctx) {
    const spec = _.$subflow;
    return function(dataflow, key, parent) {
        const subctx = ctx.fork().parse(spec), op = subctx.get(spec.operators[0].id), p = subctx.signals.parent;
        if (p) p.set(parent);
        op.detachSubflow = ()=>ctx.detach(subctx);
        return op;
    };
}
/**
 * Resolve a tuple id reference.
 */ function getTupleId() {
    return 0, _vegaDataflow.tupleid;
}
/**
 * Parse an event stream specification.
 */ function parseStream(spec) {
    var ctx = this, filter = spec.filter != null ? ctx.eventExpression(spec.filter) : undefined, stream = spec.stream != null ? ctx.get(spec.stream) : undefined, args;
    if (spec.source) stream = ctx.events(spec.source, spec.type, filter);
    else if (spec.merge) {
        args = spec.merge.map((_)=>ctx.get(_));
        stream = args[0].merge.apply(args[0], args.slice(1));
    }
    if (spec.between) {
        args = spec.between.map((_)=>ctx.get(_));
        stream = stream.between(args[0], args[1]);
    }
    if (spec.filter) stream = stream.filter(filter);
    if (spec.throttle != null) stream = stream.throttle(+spec.throttle);
    if (spec.debounce != null) stream = stream.debounce(+spec.debounce);
    if (stream == null) (0, _vegaUtil.error)("Invalid stream definition: " + JSON.stringify(spec));
    if (spec.consume) stream.consume(true);
    ctx.stream(spec, stream);
}
/**
 * Parse an event-driven operator update.
 */ function parseUpdate(spec) {
    var ctx = this, srcid = (0, _vegaUtil.isObject)(srcid = spec.source) ? srcid.$ref : srcid, source = ctx.get(srcid), target = null, update = spec.update, params = undefined;
    if (!source) (0, _vegaUtil.error)("Source not defined: " + spec.source);
    target = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);
    if (update && update.$expr) {
        if (update.$params) params = ctx.parseParameters(update.$params);
        update = ctx.handlerExpression(update.$expr);
    }
    ctx.update(spec, source, target, update, params);
}
const SKIP = {
    skip: true
};
function getState(options) {
    var ctx = this, state = {};
    if (options.signals) {
        var signals = state.signals = {};
        Object.keys(ctx.signals).forEach((key)=>{
            const op = ctx.signals[key];
            if (options.signals(key, op)) signals[key] = op.value;
        });
    }
    if (options.data) {
        var data = state.data = {};
        Object.keys(ctx.data).forEach((key)=>{
            const dataset = ctx.data[key];
            if (options.data(key, dataset)) data[key] = dataset.input.value;
        });
    }
    if (ctx.subcontext && options.recurse !== false) state.subcontext = ctx.subcontext.map((ctx)=>ctx.getState(options));
    return state;
}
function setState(state) {
    var ctx = this, df = ctx.dataflow, data = state.data, signals = state.signals;
    Object.keys(signals || {}).forEach((key)=>{
        df.update(ctx.signals[key], signals[key], SKIP);
    });
    Object.keys(data || {}).forEach((key)=>{
        df.pulse(ctx.data[key].input, df.changeset().remove((0, _vegaUtil.truthy)).insert(data[key]));
    });
    (state.subcontext || []).forEach((substate, i)=>{
        const subctx = ctx.subcontext[i];
        if (subctx) subctx.setState(substate);
    });
}
/**
 * Context objects store the current parse state.
 * Enables lookup of parsed operators, event streams, accessors, etc.
 * Provides a 'fork' method for creating child contexts for subflows.
 */ function context(df, transforms, functions, expr) {
    return new Context(df, transforms, functions, expr);
}
function Context(df, transforms, functions, expr) {
    this.dataflow = df;
    this.transforms = transforms;
    this.events = df.events.bind(df);
    this.expr = expr || expressionCodegen, this.signals = {};
    this.scales = {};
    this.nodes = {};
    this.data = {};
    this.fn = {};
    if (functions) {
        this.functions = Object.create(functions);
        this.functions.context = this;
    }
}
function Subcontext(ctx) {
    this.dataflow = ctx.dataflow;
    this.transforms = ctx.transforms;
    this.events = ctx.events;
    this.expr = ctx.expr;
    this.signals = Object.create(ctx.signals);
    this.scales = Object.create(ctx.scales);
    this.nodes = Object.create(ctx.nodes);
    this.data = Object.create(ctx.data);
    this.fn = Object.create(ctx.fn);
    if (ctx.functions) {
        this.functions = Object.create(ctx.functions);
        this.functions.context = this;
    }
}
Context.prototype = Subcontext.prototype = {
    fork () {
        const ctx = new Subcontext(this);
        (this.subcontext || (this.subcontext = [])).push(ctx);
        return ctx;
    },
    detach (ctx) {
        this.subcontext = this.subcontext.filter((c)=>c !== ctx); // disconnect all nodes in the subcontext
        // wipe out targets first for better efficiency
        const keys = Object.keys(ctx.nodes);
        for (const key of keys)ctx.nodes[key]._targets = null;
        for (const key1 of keys)ctx.nodes[key1].detach();
        ctx.nodes = null;
    },
    get (id) {
        return this.nodes[id];
    },
    set (id, node) {
        return this.nodes[id] = node;
    },
    add (spec, op) {
        const ctx = this, df = ctx.dataflow, data = spec.value;
        ctx.set(spec.id, op);
        if (isCollect(spec.type) && data) {
            if (data.$ingest) df.ingest(op, data.$ingest, data.$format);
            else if (data.$request) df.preload(op, data.$request, data.$format);
            else df.pulse(op, df.changeset().insert(data));
        }
        if (spec.root) ctx.root = op;
        if (spec.parent) {
            let p = ctx.get(spec.parent.$ref);
            if (p) {
                df.connect(p, [
                    op
                ]);
                op.targets().add(p);
            } else (ctx.unresolved = ctx.unresolved || []).push(()=>{
                p = ctx.get(spec.parent.$ref);
                df.connect(p, [
                    op
                ]);
                op.targets().add(p);
            });
        }
        if (spec.signal) ctx.signals[spec.signal] = op;
        if (spec.scale) ctx.scales[spec.scale] = op;
        if (spec.data) for(const name in spec.data){
            const data1 = ctx.data[name] || (ctx.data[name] = {});
            spec.data[name].forEach((role)=>data1[role] = op);
        }
    },
    resolve () {
        (this.unresolved || []).forEach((fn)=>fn());
        delete this.unresolved;
        return this;
    },
    operator (spec, update) {
        this.add(spec, this.dataflow.add(spec.value, update));
    },
    transform (spec, type) {
        this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));
    },
    stream (spec, stream) {
        this.set(spec.id, stream);
    },
    update (spec, stream, target, update, params) {
        this.dataflow.on(stream, target, update, params, spec.options);
    },
    // expression parsing
    operatorExpression (expr) {
        return this.expr.operator(this, expr);
    },
    parameterExpression (expr) {
        return this.expr.parameter(this, expr);
    },
    eventExpression (expr) {
        return this.expr.event(this, expr);
    },
    handlerExpression (expr) {
        return this.expr.handler(this, expr);
    },
    encodeExpression (encode) {
        return this.expr.encode(this, encode);
    },
    // parse methods
    parse,
    parseOperator,
    parseOperatorParameters,
    parseParameters,
    parseStream,
    parseUpdate,
    // state methods
    getState,
    setState
};

},{"vega-util":"bApja","vega-dataflow":"3NitK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hsy9Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AxisDomainRole", ()=>AxisDomainRole);
parcelHelpers.export(exports, "AxisGridRole", ()=>AxisGridRole);
parcelHelpers.export(exports, "AxisLabelRole", ()=>AxisLabelRole);
parcelHelpers.export(exports, "AxisRole", ()=>AxisRole);
parcelHelpers.export(exports, "AxisTickRole", ()=>AxisTickRole);
parcelHelpers.export(exports, "AxisTitleRole", ()=>AxisTitleRole);
parcelHelpers.export(exports, "DataScope", ()=>DataScope);
parcelHelpers.export(exports, "FrameRole", ()=>FrameRole);
parcelHelpers.export(exports, "LegendEntryRole", ()=>LegendEntryRole);
parcelHelpers.export(exports, "LegendLabelRole", ()=>LegendLabelRole);
parcelHelpers.export(exports, "LegendRole", ()=>LegendRole);
parcelHelpers.export(exports, "LegendSymbolRole", ()=>LegendSymbolRole);
parcelHelpers.export(exports, "LegendTitleRole", ()=>LegendTitleRole);
parcelHelpers.export(exports, "MarkRole", ()=>MarkRole);
parcelHelpers.export(exports, "Scope", ()=>Scope);
parcelHelpers.export(exports, "ScopeRole", ()=>ScopeRole);
parcelHelpers.export(exports, "config", ()=>defaults);
parcelHelpers.export(exports, "parse", ()=>parse);
parcelHelpers.export(exports, "signal", ()=>parseSignal);
parcelHelpers.export(exports, "signalUpdates", ()=>parseSignalUpdates);
parcelHelpers.export(exports, "stream", ()=>parseStream);
var _vegaUtil = require("vega-util");
var _vegaFunctions = require("vega-functions");
var _vegaEventSelector = require("vega-event-selector");
var _vegaScale = require("vega-scale");
var _vegaDataflow = require("vega-dataflow");
function parseAutosize(spec) {
    return (0, _vegaUtil.isObject)(spec) ? spec : {
        type: spec || "pad"
    };
}
const number = (_)=>+_ || 0;
const paddingObject = (_)=>({
        top: _,
        bottom: _,
        left: _,
        right: _
    });
function parsePadding(spec) {
    return !(0, _vegaUtil.isObject)(spec) ? paddingObject(number(spec)) : spec.signal ? spec : {
        top: number(spec.top),
        bottom: number(spec.bottom),
        left: number(spec.left),
        right: number(spec.right)
    };
}
const encoder = (_)=>(0, _vegaUtil.isObject)(_) && !(0, _vegaUtil.isArray)(_) ? (0, _vegaUtil.extend)({}, _) : {
        value: _
    };
function addEncode(object, name, value, set) {
    if (value != null) {
        const isEncoder = (0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isArray)(value) || (0, _vegaUtil.isArray)(value) && value.length && (0, _vegaUtil.isObject)(value[0]); // Always assign signal to update, even if the signal is from the enter block
        if (isEncoder) object.update[name] = value;
        else object[set || "enter"][name] = {
            value: value
        };
        return 1;
    } else return 0;
}
function addEncoders(object, enter, update) {
    for(const name in enter)addEncode(object, name, enter[name]);
    for(const name1 in update)addEncode(object, name1, update[name1], "update");
}
function extendEncode(encode, extra, skip) {
    for(const name in extra){
        if (skip && (0, _vegaUtil.hasOwnProperty)(skip, name)) continue;
        encode[name] = (0, _vegaUtil.extend)(encode[name] || {}, extra[name]);
    }
    return encode;
}
function has(key, encode) {
    return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);
}
const MarkRole = "mark";
const FrameRole = "frame";
const ScopeRole = "scope";
const AxisRole = "axis";
const AxisDomainRole = "axis-domain";
const AxisGridRole = "axis-grid";
const AxisLabelRole = "axis-label";
const AxisTickRole = "axis-tick";
const AxisTitleRole = "axis-title";
const LegendRole = "legend";
const LegendBandRole = "legend-band";
const LegendEntryRole = "legend-entry";
const LegendGradientRole = "legend-gradient";
const LegendLabelRole = "legend-label";
const LegendSymbolRole = "legend-symbol";
const LegendTitleRole = "legend-title";
const TitleRole = "title";
const TitleTextRole = "title-text";
const TitleSubtitleRole = "title-subtitle";
function applyDefaults(encode, type, role, style, config) {
    const defaults = {}, enter = {};
    let update, key, skip, props; // if text mark, apply global lineBreak settings (#2370)
    key = "lineBreak";
    if (type === "text" && config[key] != null && !has(key, encode)) applyDefault(defaults, key, config[key]);
     // ignore legend and axis roles
    if (role == "legend" || String(role).startsWith("axis")) role = null;
     // resolve mark config
    props = role === FrameRole ? config.group : role === MarkRole ? (0, _vegaUtil.extend)({}, config.mark, config[type]) : null;
    for(key in props){
        // do not apply defaults if relevant fields are defined
        skip = has(key, encode) || (key === "fill" || key === "stroke") && (has("fill", encode) || has("stroke", encode));
        if (!skip) applyDefault(defaults, key, props[key]);
    } // resolve styles, apply with increasing precedence
    (0, _vegaUtil.array)(style).forEach((name)=>{
        const props = config.style && config.style[name];
        for(const key in props)if (!has(key, encode)) applyDefault(defaults, key, props[key]);
    });
    encode = (0, _vegaUtil.extend)({}, encode); // defensive copy
    for(key in defaults){
        props = defaults[key];
        if (props.signal) (update = update || {})[key] = props;
        else enter[key] = props;
    }
    encode.enter = (0, _vegaUtil.extend)(enter, encode.enter);
    if (update) encode.update = (0, _vegaUtil.extend)(update, encode.update);
    return encode;
}
function applyDefault(defaults, key, value) {
    defaults[key] = value && value.signal ? {
        signal: value.signal
    } : {
        value: value
    };
}
const scaleRef = (scale)=>(0, _vegaUtil.isString)(scale) ? (0, _vegaUtil.stringValue)(scale) : scale.signal ? `(${scale.signal})` : field(scale);
function entry$1(enc) {
    if (enc.gradient != null) return gradient(enc);
    let value = enc.signal ? `(${enc.signal})` : enc.color ? color(enc.color) : enc.field != null ? field(enc.field) : enc.value !== undefined ? (0, _vegaUtil.stringValue)(enc.value) : undefined;
    if (enc.scale != null) value = scale(enc, value);
    if (value === undefined) value = null;
    if (enc.exponent != null) value = `pow(${value},${property(enc.exponent)})`;
    if (enc.mult != null) value += `*${property(enc.mult)}`;
    if (enc.offset != null) value += `+${property(enc.offset)}`;
    if (enc.round) value = `round(${value})`;
    return value;
}
const _color = (type, x, y, z)=>`(${type}(${[
        x,
        y,
        z
    ].map(entry$1).join(",")})+'')`;
function color(enc) {
    return enc.c ? _color("hcl", enc.h, enc.c, enc.l) : enc.h || enc.s ? _color("hsl", enc.h, enc.s, enc.l) : enc.l || enc.a ? _color("lab", enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color("rgb", enc.r, enc.g, enc.b) : null;
}
function gradient(enc) {
    // map undefined to null; expression lang does not allow undefined
    const args = [
        enc.start,
        enc.stop,
        enc.count
    ].map((_)=>_ == null ? null : (0, _vegaUtil.stringValue)(_)); // trim null inputs from the end
    while(args.length && (0, _vegaUtil.peek)(args) == null)args.pop();
    args.unshift(scaleRef(enc.gradient));
    return `gradient(${args.join(",")})`;
}
function property(property) {
    return (0, _vegaUtil.isObject)(property) ? "(" + entry$1(property) + ")" : property;
}
function field(ref) {
    return resolveField((0, _vegaUtil.isObject)(ref) ? ref : {
        datum: ref
    });
}
function resolveField(ref) {
    let object, level, field;
    if (ref.signal) {
        object = "datum";
        field = ref.signal;
    } else if (ref.group || ref.parent) {
        level = Math.max(1, ref.level || 1);
        object = "item";
        while(level-- > 0)object += ".mark.group";
        if (ref.parent) {
            field = ref.parent;
            object += ".datum";
        } else field = ref.group;
    } else if (ref.datum) {
        object = "datum";
        field = ref.datum;
    } else (0, _vegaUtil.error)("Invalid field reference: " + (0, _vegaUtil.stringValue)(ref));
    if (!ref.signal) field = (0, _vegaUtil.isString)(field) ? (0, _vegaUtil.splitAccessPath)(field).map((0, _vegaUtil.stringValue)).join("][") : resolveField(field);
    return object + "[" + field + "]";
}
function scale(enc, value) {
    const scale = scaleRef(enc.scale);
    if (enc.range != null) // pull value from scale range
    value = `lerp(_range(${scale}), ${+enc.range})`;
    else {
        // run value through scale and/or pull scale bandwidth
        if (value !== undefined) value = `_scale(${scale}, ${value})`;
        if (enc.band) {
            value = (value ? value + "+" : "") + `_bandwidth(${scale})` + (+enc.band === 1 ? "" : "*" + property(enc.band));
            if (enc.extra) // include logic to handle extraneous elements
            value = `(datum.extra ? _scale(${scale}, datum.extra.value) : ${value})`;
        }
        if (value == null) value = "0";
    }
    return value;
}
function rule(enc) {
    let code = "";
    enc.forEach((rule)=>{
        const value = entry$1(rule);
        code += rule.test ? `(${rule.test})?${value}:` : value;
    }); // if no else clause, terminate with null (#1366)
    if ((0, _vegaUtil.peek)(code) === ":") code += "null";
    return code;
}
function parseEncode(encode, type, role, style, scope, params) {
    const enc = {};
    params = params || {};
    params.encoders = {
        $encode: enc
    };
    encode = applyDefaults(encode, type, role, style, scope.config);
    for(const key in encode)enc[key] = parseBlock(encode[key], type, params, scope);
    return params;
}
function parseBlock(block, marktype, params, scope) {
    const channels = {}, fields = {};
    for(const name in block)if (block[name] != null) // skip any null entries
    channels[name] = parse$1(expr(block[name]), scope, params, fields);
    return {
        $expr: {
            marktype,
            channels
        },
        $fields: Object.keys(fields),
        $output: Object.keys(block)
    };
}
function expr(enc) {
    return (0, _vegaUtil.isArray)(enc) ? rule(enc) : entry$1(enc);
}
function parse$1(code, scope, params, fields) {
    const expr = (0, _vegaFunctions.parseExpression)(code, scope);
    expr.$fields.forEach((name)=>fields[name] = 1);
    (0, _vegaUtil.extend)(params, expr.$params);
    return expr.$expr;
}
const OUTER = "outer", OUTER_INVALID = [
    "value",
    "update",
    "init",
    "react",
    "bind"
];
function outerError(prefix, name) {
    (0, _vegaUtil.error)(prefix + ' for "outer" push: ' + (0, _vegaUtil.stringValue)(name));
}
function parseSignal(signal, scope) {
    const name = signal.name;
    if (signal.push === OUTER) {
        // signal must already be defined, raise error if not
        if (!scope.signals[name]) outerError("No prior signal definition", name); // signal push must not use properties reserved for standard definition
        OUTER_INVALID.forEach((prop)=>{
            if (signal[prop] !== undefined) outerError("Invalid property ", prop);
        });
    } else {
        // define a new signal in the current scope
        const op = scope.addSignal(name, signal.value);
        if (signal.react === false) op.react = false;
        if (signal.bind) scope.addBinding(name, signal.bind);
    }
}
function Entry(type, value, params, parent) {
    this.id = -1;
    this.type = type;
    this.value = value;
    this.params = params;
    if (parent) this.parent = parent;
}
function entry(type, value, params, parent) {
    return new Entry(type, value, params, parent);
}
function operator(value, params) {
    return entry("operator", value, params);
} // -----
function ref(op) {
    const ref = {
        $ref: op.id
    }; // if operator not yet registered, cache ref to resolve later
    if (op.id < 0) (op.refs = op.refs || []).push(ref);
    return ref;
}
function fieldRef$1(field, name) {
    return name ? {
        $field: field,
        $name: name
    } : {
        $field: field
    };
}
const keyFieldRef = fieldRef$1("key");
function compareRef(fields, orders) {
    return {
        $compare: fields,
        $order: orders
    };
}
function keyRef(fields, flat) {
    const ref = {
        $key: fields
    };
    if (flat) ref.$flat = true;
    return ref;
} // -----
const Ascending = "ascending";
const Descending = "descending";
function sortKey(sort) {
    return !(0, _vegaUtil.isObject)(sort) ? "" : (sort.order === Descending ? "-" : "+") + aggrField(sort.op, sort.field);
}
function aggrField(op, field) {
    return (op && op.signal ? "$" + op.signal : op || "") + (op && field ? "_" : "") + (field && field.signal ? "$" + field.signal : field || "");
} // -----
const Scope$1 = "scope";
const View = "view";
function isSignal(_) {
    return _ && _.signal;
}
function isExpr$1(_) {
    return _ && _.expr;
}
function hasSignal(_) {
    if (isSignal(_)) return true;
    if ((0, _vegaUtil.isObject)(_)) for(const key in _){
        if (hasSignal(_[key])) return true;
    }
    return false;
}
function value(specValue, defaultValue) {
    return specValue != null ? specValue : defaultValue;
}
function deref(v) {
    return v && v.signal || v;
}
const Timer = "timer";
function parseStream(stream, scope) {
    const method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : (0, _vegaUtil.error)("Invalid stream specification: " + (0, _vegaUtil.stringValue)(stream));
    return method(stream, scope);
}
function eventSource(source) {
    return source === Scope$1 ? View : source || View;
}
function mergeStream(stream, scope) {
    const list = stream.merge.map((s)=>parseStream(s, scope)), entry = streamParameters({
        merge: list
    }, stream, scope);
    return scope.addStream(entry).id;
}
function nestedStream(stream, scope) {
    const id = parseStream(stream.stream, scope), entry = streamParameters({
        stream: id
    }, stream, scope);
    return scope.addStream(entry).id;
}
function eventStream(stream, scope) {
    let id;
    if (stream.type === Timer) {
        id = scope.event(Timer, stream.throttle);
        stream = {
            between: stream.between,
            filter: stream.filter
        };
    } else id = scope.event(eventSource(stream.source), stream.type);
    const entry = streamParameters({
        stream: id
    }, stream, scope);
    return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;
}
function streamParameters(entry, stream, scope) {
    let param = stream.between;
    if (param) {
        if (param.length !== 2) (0, _vegaUtil.error)('Stream "between" parameter must have 2 entries: ' + (0, _vegaUtil.stringValue)(stream));
        entry.between = [
            parseStream(param[0], scope),
            parseStream(param[1], scope)
        ];
    }
    param = stream.filter ? [].concat(stream.filter) : [];
    if (stream.marktype || stream.markname || stream.markrole) // add filter for mark type, name and/or role
    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
    if (stream.source === Scope$1) // add filter to limit events from sub-scope only
    param.push("inScope(event.item)");
    if (param.length) entry.filter = (0, _vegaFunctions.parseExpression)("(" + param.join(")&&(") + ")", scope).$expr;
    if ((param = stream.throttle) != null) entry.throttle = +param;
    if ((param = stream.debounce) != null) entry.debounce = +param;
    if (stream.consume) entry.consume = true;
    return entry;
}
function filterMark(type, name, role) {
    const item = "event.item";
    return item + (type && type !== "*" ? "&&" + item + ".mark.marktype==='" + type + "'" : "") + (role ? "&&" + item + ".mark.role==='" + role + "'" : "") + (name ? "&&" + item + ".mark.name==='" + name + "'" : "");
}
const OP_VALUE_EXPR = {
    code: "_.$value",
    ast: {
        type: "Identifier",
        value: "value"
    }
};
function parseUpdate(spec, scope, target) {
    const encode = spec.encode, entry = {
        target: target
    };
    let events = spec.events, update = spec.update, sources = [];
    if (!events) (0, _vegaUtil.error)("Signal update missing events specification.");
     // interpret as an event selector string
    if ((0, _vegaUtil.isString)(events)) events = (0, _vegaEventSelector.parseSelector)(events, scope.isSubscope() ? Scope$1 : View);
     // separate event streams from signal updates
    events = (0, _vegaUtil.array)(events).filter((s)=>s.signal || s.scale ? (sources.push(s), 0) : 1); // merge internal operator listeners
    if (sources.length > 1) sources = [
        mergeSources(sources)
    ];
     // merge event streams, include as source
    if (events.length) sources.push(events.length > 1 ? {
        merge: events
    } : events[0]);
    if (encode != null) {
        if (update) (0, _vegaUtil.error)("Signal encode and update are mutually exclusive.");
        update = "encode(item()," + (0, _vegaUtil.stringValue)(encode) + ")";
    } // resolve update value
    entry.update = (0, _vegaUtil.isString)(update) ? (0, _vegaFunctions.parseExpression)(update, scope) : update.expr != null ? (0, _vegaFunctions.parseExpression)(update.expr, scope) : update.value != null ? update.value : update.signal != null ? {
        $expr: OP_VALUE_EXPR,
        $params: {
            $value: scope.signalRef(update.signal)
        }
    } : (0, _vegaUtil.error)("Invalid signal update specification.");
    if (spec.force) entry.options = {
        force: true
    };
    sources.forEach((source)=>scope.addUpdate((0, _vegaUtil.extend)(streamSource(source, scope), entry)));
}
function streamSource(stream, scope) {
    return {
        source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : parseStream(stream, scope)
    };
}
function mergeSources(sources) {
    return {
        signal: "[" + sources.map((s)=>s.scale ? 'scale("' + s.scale + '")' : s.signal) + "]"
    };
}
function parseSignalUpdates(signal, scope) {
    const op = scope.getSignal(signal.name);
    let expr = signal.update;
    if (signal.init) {
        if (expr) (0, _vegaUtil.error)("Signals can not include both init and update expressions.");
        else {
            expr = signal.init;
            op.initonly = true;
        }
    }
    if (expr) {
        expr = (0, _vegaFunctions.parseExpression)(expr, scope);
        op.update = expr.$expr;
        op.params = expr.$params;
    }
    if (signal.on) signal.on.forEach((_)=>parseUpdate(_, scope, op.id));
}
const transform = (name)=>(params, value, parent)=>entry(name, value, params || undefined, parent);
const Aggregate = transform("aggregate");
const AxisTicks = transform("axisticks");
const Bound = transform("bound");
const Collect = transform("collect");
const Compare = transform("compare");
const DataJoin = transform("datajoin");
const Encode = transform("encode");
const Expression = transform("expression");
const Facet = transform("facet");
const Field = transform("field");
const Key = transform("key");
const LegendEntries = transform("legendentries");
const Load = transform("load");
const Mark = transform("mark");
const MultiExtent = transform("multiextent");
const MultiValues = transform("multivalues");
const Overlap = transform("overlap");
const Params = transform("params");
const PreFacet = transform("prefacet");
const Projection = transform("projection");
const Proxy = transform("proxy");
const Relay = transform("relay");
const Render = transform("render");
const Scale = transform("scale");
const Sieve = transform("sieve");
const SortItems = transform("sortitems");
const ViewLayout = transform("viewlayout");
const Values = transform("values");
let FIELD_REF_ID = 0;
const MULTIDOMAIN_SORT_OPS = {
    min: "min",
    max: "max",
    count: "sum"
};
function initScale(spec, scope) {
    const type = spec.type || "linear";
    if (!(0, _vegaScale.isValidScaleType)(type)) (0, _vegaUtil.error)("Unrecognized scale type: " + (0, _vegaUtil.stringValue)(type));
    scope.addScale(spec.name, {
        type,
        domain: undefined
    });
}
function parseScale(spec, scope) {
    const params = scope.getScale(spec.name).params;
    let key;
    params.domain = parseScaleDomain(spec.domain, spec, scope);
    if (spec.range != null) params.range = parseScaleRange(spec, scope, params);
    if (spec.interpolate != null) parseScaleInterpolate(spec.interpolate, params);
    if (spec.nice != null) params.nice = parseScaleNice(spec.nice);
    if (spec.bins != null) params.bins = parseScaleBins(spec.bins, scope);
    for(key in spec){
        if ((0, _vegaUtil.hasOwnProperty)(params, key) || key === "name") continue;
        params[key] = parseLiteral(spec[key], scope);
    }
}
function parseLiteral(v, scope) {
    return !(0, _vegaUtil.isObject)(v) ? v : v.signal ? scope.signalRef(v.signal) : (0, _vegaUtil.error)("Unsupported object: " + (0, _vegaUtil.stringValue)(v));
}
function parseArray(v, scope) {
    return v.signal ? scope.signalRef(v.signal) : v.map((v)=>parseLiteral(v, scope));
}
function dataLookupError(name) {
    (0, _vegaUtil.error)("Can not find data set: " + (0, _vegaUtil.stringValue)(name));
} // -- SCALE DOMAIN ----
function parseScaleDomain(domain, spec, scope) {
    if (!domain) {
        if (spec.domainMin != null || spec.domainMax != null) (0, _vegaUtil.error)("No scale domain defined for domainMin/domainMax to override.");
        return; // default domain
    }
    return domain.signal ? scope.signalRef(domain.signal) : ((0, _vegaUtil.isArray)(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);
}
function explicitDomain(domain, spec, scope) {
    return domain.map((v)=>parseLiteral(v, scope));
}
function singularDomain(domain, spec, scope) {
    const data = scope.getData(domain.data);
    if (!data) dataLookupError(domain.data);
    return (0, _vegaScale.isDiscrete)(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : (0, _vegaScale.isQuantile)(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);
}
function multipleDomain(domain, spec, scope) {
    const data = domain.data, fields = domain.fields.reduce((dom, d)=>{
        d = (0, _vegaUtil.isString)(d) ? {
            data: data,
            field: d
        } : (0, _vegaUtil.isArray)(d) || d.signal ? fieldRef(d, scope) : d;
        dom.push(d);
        return dom;
    }, []);
    return ((0, _vegaScale.isDiscrete)(spec.type) ? ordinalMultipleDomain : (0, _vegaScale.isQuantile)(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);
}
function fieldRef(data, scope) {
    const name = "_:vega:_" + FIELD_REF_ID++, coll = Collect({});
    if ((0, _vegaUtil.isArray)(data)) coll.value = {
        $ingest: data
    };
    else if (data.signal) {
        const code = "setdata(" + (0, _vegaUtil.stringValue)(name) + "," + data.signal + ")";
        coll.params.input = scope.signalRef(code);
    }
    scope.addDataPipeline(name, [
        coll,
        Sieve({})
    ]);
    return {
        data: name,
        field: "data"
    };
}
function ordinalMultipleDomain(domain, scope, fields) {
    const sort = parseSort(domain.sort, true);
    let a, v; // get value counts for each domain field
    const counts = fields.map((f)=>{
        const data = scope.getData(f.data);
        if (!data) dataLookupError(f.data);
        return data.countsRef(scope, f.field, sort);
    }); // aggregate the results from each domain field
    const p = {
        groupby: keyFieldRef,
        pulse: counts
    };
    if (sort) {
        a = sort.op || "count";
        v = sort.field ? aggrField(a, sort.field) : "count";
        p.ops = [
            MULTIDOMAIN_SORT_OPS[a]
        ];
        p.fields = [
            scope.fieldRef(v)
        ];
        p.as = [
            v
        ];
    }
    a = scope.add(Aggregate(p)); // collect aggregate output
    const c = scope.add(Collect({
        pulse: ref(a)
    })); // extract values for combined domain
    v = scope.add(Values({
        field: keyFieldRef,
        sort: scope.sortRef(sort),
        pulse: ref(c)
    }));
    return ref(v);
}
function parseSort(sort, multidomain) {
    if (sort) {
        if (!sort.field && !sort.op) {
            if ((0, _vegaUtil.isObject)(sort)) sort.field = "key";
            else sort = {
                field: "key"
            };
        } else if (!sort.field && sort.op !== "count") (0, _vegaUtil.error)("No field provided for sort aggregate op: " + sort.op);
        else if (multidomain && sort.field) {
            if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) (0, _vegaUtil.error)("Multiple domain scales can not be sorted using " + sort.op);
        }
    }
    return sort;
}
function quantileMultipleDomain(domain, scope, fields) {
    // get value arrays for each domain field
    const values = fields.map((f)=>{
        const data = scope.getData(f.data);
        if (!data) dataLookupError(f.data);
        return data.domainRef(scope, f.field);
    }); // combine value arrays
    return ref(scope.add(MultiValues({
        values: values
    })));
}
function numericMultipleDomain(domain, scope, fields) {
    // get extents for each domain field
    const extents = fields.map((f)=>{
        const data = scope.getData(f.data);
        if (!data) dataLookupError(f.data);
        return data.extentRef(scope, f.field);
    }); // combine extents
    return ref(scope.add(MultiExtent({
        extents: extents
    })));
} // -- SCALE BINS -----
function parseScaleBins(v, scope) {
    return v.signal || (0, _vegaUtil.isArray)(v) ? parseArray(v, scope) : scope.objectProperty(v);
} // -- SCALE NICE -----
function parseScaleNice(nice) {
    return (0, _vegaUtil.isObject)(nice) ? {
        interval: parseLiteral(nice.interval),
        step: parseLiteral(nice.step)
    } : parseLiteral(nice);
} // -- SCALE INTERPOLATION -----
function parseScaleInterpolate(interpolate, params) {
    params.interpolate = parseLiteral(interpolate.type || interpolate);
    if (interpolate.gamma != null) params.interpolateGamma = parseLiteral(interpolate.gamma);
} // -- SCALE RANGE -----
function parseScaleRange(spec, scope, params) {
    const config = scope.config.range;
    let range = spec.range;
    if (range.signal) return scope.signalRef(range.signal);
    else if ((0, _vegaUtil.isString)(range)) {
        if (config && (0, _vegaUtil.hasOwnProperty)(config, range)) {
            spec = (0, _vegaUtil.extend)({}, spec, {
                range: config[range]
            });
            return parseScaleRange(spec, scope, params);
        } else if (range === "width") range = [
            0,
            {
                signal: "width"
            }
        ];
        else if (range === "height") range = (0, _vegaScale.isDiscrete)(spec.type) ? [
            0,
            {
                signal: "height"
            }
        ] : [
            {
                signal: "height"
            },
            0
        ];
        else (0, _vegaUtil.error)("Unrecognized scale range value: " + (0, _vegaUtil.stringValue)(range));
    } else if (range.scheme) {
        params.scheme = (0, _vegaUtil.isArray)(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);
        if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
        if (range.count) params.schemeCount = parseLiteral(range.count, scope);
        return;
    } else if (range.step) {
        params.rangeStep = parseLiteral(range.step, scope);
        return;
    } else if ((0, _vegaScale.isDiscrete)(spec.type) && !(0, _vegaUtil.isArray)(range)) return parseScaleDomain(range, spec, scope);
    else if (!(0, _vegaUtil.isArray)(range)) (0, _vegaUtil.error)("Unsupported range type: " + (0, _vegaUtil.stringValue)(range));
    return range.map((v)=>((0, _vegaUtil.isArray)(v) ? parseArray : parseLiteral)(v, scope));
}
function parseProjection(proj, scope) {
    const config = scope.config.projection || {}, params = {};
    for(const name in proj){
        if (name === "name") continue;
        params[name] = parseParameter$1(proj[name], name, scope);
    } // apply projection defaults from config
    for(const name1 in config)if (params[name1] == null) params[name1] = parseParameter$1(config[name1], name1, scope);
    scope.addProjection(proj.name, params);
}
function parseParameter$1(_, name, scope) {
    return (0, _vegaUtil.isArray)(_) ? _.map((_)=>parseParameter$1(_, name, scope)) : !(0, _vegaUtil.isObject)(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === "fit" ? _ : (0, _vegaUtil.error)("Unsupported parameter object: " + (0, _vegaUtil.stringValue)(_));
}
const Top = "top";
const Left = "left";
const Right = "right";
const Bottom = "bottom";
const Center = "center";
const Vertical = "vertical";
const Start = "start";
const Middle = "middle";
const End = "end";
const Index = "index";
const Label = "label";
const Offset = "offset";
const Perc = "perc";
const Perc2 = "perc2";
const Value = "value";
const GuideLabelStyle = "guide-label";
const GuideTitleStyle = "guide-title";
const GroupTitleStyle = "group-title";
const GroupSubtitleStyle = "group-subtitle";
const Symbols = "symbol";
const Gradient = "gradient";
const Discrete = "discrete";
const Size = "size";
const Shape = "shape";
const Fill = "fill";
const Stroke = "stroke";
const StrokeWidth = "strokeWidth";
const StrokeDash = "strokeDash";
const Opacity = "opacity"; // Encoding channels supported by legends
// In priority order of 'canonical' scale
const LegendScales = [
    Size,
    Shape,
    Fill,
    Stroke,
    StrokeWidth,
    StrokeDash,
    Opacity
];
const Skip = {
    name: 1,
    style: 1,
    interactive: 1
};
const zero = {
    value: 0
};
const one = {
    value: 1
};
const GroupMark = "group";
const RectMark = "rect";
const RuleMark = "rule";
const SymbolMark = "symbol";
const TextMark = "text";
function guideGroup(mark) {
    mark.type = GroupMark;
    mark.interactive = mark.interactive || false;
    return mark;
}
function lookup(spec, config) {
    const _ = (name, dflt)=>value(spec[name], value(config[name], dflt));
    _.isVertical = (s)=>Vertical === value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));
    _.gradientLength = ()=>value(spec.gradientLength, config.gradientLength || config.gradientWidth);
    _.gradientThickness = ()=>value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
    _.entryColumns = ()=>value(spec.columns, value(config.columns, +_.isVertical(true)));
    return _;
}
function getEncoding(name, encode) {
    const v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);
    return v && v.signal ? v : v ? v.value : null;
}
function getStyle(name, scope, style) {
    const s = scope.config.style[style];
    return s && s[name];
}
function anchorExpr(s, e, m) {
    return `item.anchor === '${Start}' ? ${s} : item.anchor === '${End}' ? ${e} : ${m}`;
}
const alignExpr$1 = anchorExpr((0, _vegaUtil.stringValue)(Left), (0, _vegaUtil.stringValue)(Right), (0, _vegaUtil.stringValue)(Center));
function tickBand(_) {
    const v = _("tickBand");
    let offset = _("tickOffset"), band, extra;
    if (!v) {
        // if no tick band entry, fall back on other properties
        band = _("bandPosition");
        extra = _("tickExtra");
    } else if (v.signal) {
        // if signal, augment code to interpret values
        band = {
            signal: `(${v.signal}) === 'extent' ? 1 : 0.5`
        };
        extra = {
            signal: `(${v.signal}) === 'extent'`
        };
        if (!(0, _vegaUtil.isObject)(offset)) offset = {
            signal: `(${v.signal}) === 'extent' ? 0 : ${offset}`
        };
    } else if (v === "extent") {
        // if constant, simply set values
        band = 1;
        extra = true;
        offset = 0;
    } else {
        band = 0.5;
        extra = false;
    }
    return {
        extra,
        band,
        offset
    };
}
function extendOffset(value, offset) {
    return !offset ? value : !value ? offset : !(0, _vegaUtil.isObject)(value) ? {
        value,
        offset
    } : Object.assign({}, value, {
        offset: extendOffset(value.offset, offset)
    });
}
function guideMark(mark, extras) {
    if (extras) {
        mark.name = extras.name;
        mark.style = extras.style || mark.style;
        mark.interactive = !!extras.interactive;
        mark.encode = extendEncode(mark.encode, extras, Skip);
    } else mark.interactive = false;
    return mark;
}
function legendGradient(spec, scale, config, userEncode) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length = _.gradientLength();
    let enter, start, stop, width, height;
    if (vertical) {
        start = [
            0,
            1
        ];
        stop = [
            0,
            0
        ];
        width = thickness;
        height = length;
    } else {
        start = [
            0,
            0
        ];
        stop = [
            1,
            0
        ];
        width = length;
        height = thickness;
    }
    const encode = {
        enter: enter = {
            opacity: zero,
            x: zero,
            y: zero,
            width: encoder(width),
            height: encoder(height)
        },
        update: (0, _vegaUtil.extend)({}, enter, {
            opacity: one,
            fill: {
                gradient: scale,
                start: start,
                stop: stop
            }
        }),
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("gradientStrokeColor"),
        strokeWidth: _("gradientStrokeWidth")
    }, {
        // update
        opacity: _("gradientOpacity")
    });
    return guideMark({
        type: RectMark,
        role: LegendGradientRole,
        encode
    }, userEncode);
}
function legendGradientDiscrete(spec, scale, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length = _.gradientLength();
    let u, v, uu, vv, adjust = "";
    vertical ? (u = "y", uu = "y2", v = "x", vv = "width", adjust = "1-") : (u = "x", uu = "x2", v = "y", vv = "height");
    const enter = {
        opacity: zero,
        fill: {
            scale: scale,
            field: Value
        }
    };
    enter[u] = {
        signal: adjust + "datum." + Perc,
        mult: length
    };
    enter[v] = zero;
    enter[uu] = {
        signal: adjust + "datum." + Perc2,
        mult: length
    };
    enter[vv] = encoder(thickness);
    const encode = {
        enter: enter,
        update: (0, _vegaUtil.extend)({}, enter, {
            opacity: one
        }),
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("gradientStrokeColor"),
        strokeWidth: _("gradientStrokeWidth")
    }, {
        // update
        opacity: _("gradientOpacity")
    });
    return guideMark({
        type: RectMark,
        role: LegendBandRole,
        key: Value,
        from: dataRef,
        encode
    }, userEncode);
}
const alignExpr = `datum.${Perc}<=0?"${Left}":datum.${Perc}>=1?"${Right}":"${Center}"`, baselineExpr = `datum.${Perc}<=0?"${Bottom}":datum.${Perc}>=1?"${Top}":"${Middle}"`;
function legendGradientLabels(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = encoder(_.gradientThickness()), length = _.gradientLength();
    let overlap = _("labelOverlap"), enter, update, u, v, adjust = "";
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one,
            text: {
                field: Label
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        fill: _("labelColor"),
        fillOpacity: _("labelOpacity"),
        font: _("labelFont"),
        fontSize: _("labelFontSize"),
        fontStyle: _("labelFontStyle"),
        fontWeight: _("labelFontWeight"),
        limit: value(spec.labelLimit, config.gradientLabelLimit)
    });
    if (vertical) {
        enter.align = {
            value: "left"
        };
        enter.baseline = update.baseline = {
            signal: baselineExpr
        };
        u = "y";
        v = "x";
        adjust = "1-";
    } else {
        enter.align = update.align = {
            signal: alignExpr
        };
        enter.baseline = {
            value: "top"
        };
        u = "x";
        v = "y";
    }
    enter[u] = update[u] = {
        signal: adjust + "datum." + Perc,
        mult: length
    };
    enter[v] = update[v] = thickness;
    thickness.offset = value(spec.labelOffset, config.gradientLabelOffset) || 0;
    overlap = overlap ? {
        separation: _("labelSeparation"),
        method: overlap,
        order: "datum." + Index
    } : undefined; // type, role, style, key, dataRef, encode, extras
    return guideMark({
        type: TextMark,
        role: LegendLabelRole,
        style: GuideLabelStyle,
        key: Value,
        from: dataRef,
        encode,
        overlap
    }, userEncode);
}
function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {
    const _ = lookup(spec, config), entries = userEncode.entries, interactive = !!(entries && entries.interactive), name = entries ? entries.name : undefined, height = _("clipHeight"), symbolOffset = _("symbolOffset"), valueRef = {
        data: "value"
    }, xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`, yEncode = height ? encoder(height) : {
        field: Size
    }, index = `datum.${Index}`, ncols = `max(1, ${columns})`;
    let encode, enter, update, nrows, sort;
    yEncode.mult = 0.5; // -- LEGEND SYMBOLS --
    encode = {
        enter: enter = {
            opacity: zero,
            x: {
                signal: xSignal,
                mult: 0.5,
                offset: symbolOffset
            },
            y: yEncode
        },
        update: update = {
            opacity: one,
            x: enter.x,
            y: enter.y
        },
        exit: {
            opacity: zero
        }
    };
    let baseFill = null, baseStroke = null;
    if (!spec.fill) {
        baseFill = config.symbolBaseFillColor;
        baseStroke = config.symbolBaseStrokeColor;
    }
    addEncoders(encode, {
        fill: _("symbolFillColor", baseFill),
        shape: _("symbolType"),
        size: _("symbolSize"),
        stroke: _("symbolStrokeColor", baseStroke),
        strokeDash: _("symbolDash"),
        strokeDashOffset: _("symbolDashOffset"),
        strokeWidth: _("symbolStrokeWidth")
    }, {
        // update
        opacity: _("symbolOpacity")
    });
    LegendScales.forEach((scale)=>{
        if (spec[scale]) update[scale] = enter[scale] = {
            scale: spec[scale],
            field: Value
        };
    });
    const symbols = guideMark({
        type: SymbolMark,
        role: LegendSymbolRole,
        key: Value,
        from: valueRef,
        clip: height ? true : undefined,
        encode
    }, userEncode.symbols); // -- LEGEND LABELS --
    const labelOffset = encoder(symbolOffset);
    labelOffset.offset = _("labelOffset");
    encode = {
        enter: enter = {
            opacity: zero,
            x: {
                signal: xSignal,
                offset: labelOffset
            },
            y: yEncode
        },
        update: update = {
            opacity: one,
            text: {
                field: Label
            },
            x: enter.x,
            y: enter.y
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        align: _("labelAlign"),
        baseline: _("labelBaseline"),
        fill: _("labelColor"),
        fillOpacity: _("labelOpacity"),
        font: _("labelFont"),
        fontSize: _("labelFontSize"),
        fontStyle: _("labelFontStyle"),
        fontWeight: _("labelFontWeight"),
        limit: _("labelLimit")
    });
    const labels = guideMark({
        type: TextMark,
        role: LegendLabelRole,
        style: GuideLabelStyle,
        key: Value,
        from: valueRef,
        encode
    }, userEncode.labels); // -- LEGEND ENTRY GROUPS --
    encode = {
        enter: {
            noBound: {
                value: !height
            },
            // ignore width/height in bounds calc
            width: zero,
            height: height ? encoder(height) : zero,
            opacity: zero
        },
        exit: {
            opacity: zero
        },
        update: update = {
            opacity: one,
            row: {
                signal: null
            },
            column: {
                signal: null
            }
        }
    }; // annotate and sort groups to ensure correct ordering
    if (_.isVertical(true)) {
        nrows = `ceil(item.mark.items.length / ${ncols})`;
        update.row.signal = `${index}%${nrows}`;
        update.column.signal = `floor(${index} / ${nrows})`;
        sort = {
            field: [
                "row",
                index
            ]
        };
    } else {
        update.row.signal = `floor(${index} / ${ncols})`;
        update.column.signal = `${index} % ${ncols}`;
        sort = {
            field: index
        };
    } // handle zero column case (implies infinite columns)
    update.column.signal = `(${columns})?${update.column.signal}:${index}`; // facet legend entries into sub-groups
    dataRef = {
        facet: {
            data: dataRef,
            name: "value",
            groupby: Index
        }
    };
    return guideGroup({
        role: ScopeRole,
        from: dataRef,
        encode: extendEncode(encode, entries, Skip),
        marks: [
            symbols,
            labels
        ],
        name,
        interactive,
        sort
    });
}
function legendSymbolLayout(spec, config) {
    const _ = lookup(spec, config); // layout parameters for legend entries
    return {
        align: _("gridAlign"),
        columns: _.entryColumns(),
        center: {
            row: true,
            column: false
        },
        padding: {
            row: _("rowPadding"),
            column: _("columnPadding")
        }
    };
}
const isL = 'item.orient === "left"', isR = 'item.orient === "right"', isLR = `(${isL} || ${isR})`, isVG = `datum.vgrad && ${isLR}`, baseline = anchorExpr('"top"', '"bottom"', '"middle"'), alignFlip = anchorExpr('"right"', '"left"', '"center"'), exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? "left" : ${alignExpr$1}`, exprAnchor = `item._anchor || (${isLR} ? "middle" : "start")`, exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`, exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? "bottom" : "top") : ${baseline}) : "top"`;
function legendTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config);
    const encode = {
        enter: {
            opacity: zero
        },
        update: {
            opacity: one,
            x: {
                field: {
                    group: "padding"
                }
            },
            y: {
                field: {
                    group: "padding"
                }
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        orient: _("titleOrient"),
        _anchor: _("titleAnchor"),
        anchor: {
            signal: exprAnchor
        },
        angle: {
            signal: exprAngle
        },
        align: {
            signal: exprAlign
        },
        baseline: {
            signal: exprBaseline
        },
        text: spec.title,
        fill: _("titleColor"),
        fillOpacity: _("titleOpacity"),
        font: _("titleFont"),
        fontSize: _("titleFontSize"),
        fontStyle: _("titleFontStyle"),
        fontWeight: _("titleFontWeight"),
        limit: _("titleLimit"),
        lineHeight: _("titleLineHeight")
    }, {
        // require update
        align: _("titleAlign"),
        baseline: _("titleBaseline")
    });
    return guideMark({
        type: TextMark,
        role: LegendTitleRole,
        style: GuideTitleStyle,
        from: dataRef,
        encode
    }, userEncode);
}
function clip(clip, scope) {
    let expr;
    if ((0, _vegaUtil.isObject)(clip)) {
        if (clip.signal) expr = clip.signal;
        else if (clip.path) expr = "pathShape(" + param(clip.path) + ")";
        else if (clip.sphere) expr = "geoShape(" + param(clip.sphere) + ', {type: "Sphere"})';
    }
    return expr ? scope.signalRef(expr) : !!clip;
}
function param(value) {
    return (0, _vegaUtil.isObject)(value) && value.signal ? value.signal : (0, _vegaUtil.stringValue)(value);
}
function getRole(spec) {
    const role = spec.role || "";
    return !role.indexOf("axis") || !role.indexOf("legend") || !role.indexOf("title") ? role : spec.type === GroupMark ? ScopeRole : role || MarkRole;
}
function definition(spec) {
    return {
        marktype: spec.type,
        name: spec.name || undefined,
        role: spec.role || getRole(spec),
        zindex: +spec.zindex || undefined,
        aria: spec.aria,
        description: spec.description
    };
}
function interactive(spec, scope) {
    return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
}
/**
 * Parse a data transform specification.
 */ function parseTransform(spec, scope) {
    const def = (0, _vegaDataflow.definition)(spec.type);
    if (!def) (0, _vegaUtil.error)("Unrecognized transform type: " + (0, _vegaUtil.stringValue)(spec.type));
    const t = entry(def.type.toLowerCase(), null, parseParameters(def, spec, scope));
    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
    t.metadata = def.metadata || {};
    return t;
}
/**
 * Parse all parameters of a data transform.
 */ function parseParameters(def, spec, scope) {
    const params = {}, n = def.params.length;
    for(let i = 0; i < n; ++i){
        const pdef = def.params[i];
        params[pdef.name] = parseParameter(pdef, spec, scope);
    }
    return params;
}
/**
 * Parse a data transform parameter.
 */ function parseParameter(def, spec, scope) {
    const type = def.type, value = spec[def.name];
    if (type === "index") return parseIndexParameter(def, spec, scope);
    else if (value === undefined) {
        if (def.required) (0, _vegaUtil.error)("Missing required " + (0, _vegaUtil.stringValue)(spec.type) + " parameter: " + (0, _vegaUtil.stringValue)(def.name));
        return;
    } else if (type === "param") return parseSubParameters(def, spec, scope);
    else if (type === "projection") return scope.projectionRef(spec[def.name]);
    return def.array && !isSignal(value) ? value.map((v)=>parameterValue(def, v, scope)) : parameterValue(def, value, scope);
}
/**
 * Parse a single parameter value.
 */ function parameterValue(def, value, scope) {
    const type = def.type;
    if (isSignal(value)) return isExpr(type) ? (0, _vegaUtil.error)("Expression references can not be signals.") : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);
    else {
        const expr = def.expr || isField(type);
        return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : expr && outerField(value) ? fieldRef$1(value.field, value.as) : isExpr(type) ? (0, _vegaFunctions.parseExpression)(value, scope) : isData(type) ? ref(scope.getData(value).values) : isField(type) ? fieldRef$1(value) : isCompare(type) ? scope.compareRef(value) : value;
    }
}
/**
 * Parse parameter for accessing an index of another data set.
 */ function parseIndexParameter(def, spec, scope) {
    if (!(0, _vegaUtil.isString)(spec.from)) (0, _vegaUtil.error)('Lookup "from" parameter must be a string literal.');
    return scope.getData(spec.from).lookupRef(scope, spec.key);
}
/**
 * Parse a parameter that contains one or more sub-parameter objects.
 */ function parseSubParameters(def, spec, scope) {
    const value = spec[def.name];
    if (def.array) {
        if (!(0, _vegaUtil.isArray)(value)) // signals not allowed!
        (0, _vegaUtil.error)("Expected an array of sub-parameters. Instead: " + (0, _vegaUtil.stringValue)(value));
        return value.map((v)=>parseSubParameter(def, v, scope));
    } else return parseSubParameter(def, value, scope);
}
/**
 * Parse a sub-parameter object.
 */ function parseSubParameter(def, value, scope) {
    const n = def.params.length;
    let pdef; // loop over defs to find matching key
    for(let i = 0; i < n; ++i){
        pdef = def.params[i];
        for(const k in pdef.key)if (pdef.key[k] !== value[k]) {
            pdef = null;
            break;
        }
        if (pdef) break;
    } // raise error if matching key not found
    if (!pdef) (0, _vegaUtil.error)("Unsupported parameter: " + (0, _vegaUtil.stringValue)(value)); // parse params, create Params transform, return ref
    const params = (0, _vegaUtil.extend)(parseParameters(pdef, value, scope), pdef.key);
    return ref(scope.add(Params(params)));
} // -- Utilities -----
const outerExpr = (_)=>_ && _.expr;
const outerField = (_)=>_ && _.field;
const isData = (_)=>_ === "data";
const isExpr = (_)=>_ === "expr";
const isField = (_)=>_ === "field";
const isCompare = (_)=>_ === "compare";
function parseData$1(from, group, scope) {
    let facet, key, op, dataRef, parent; // if no source data, generate singleton datum
    if (!from) dataRef = ref(scope.add(Collect(null, [
        {}
    ])));
    else if (facet = from.facet) {
        if (!group) (0, _vegaUtil.error)("Only group marks can be faceted."); // use pre-faceted source data, if available
        if (facet.field != null) dataRef = parent = getDataRef(facet, scope);
        else {
            // generate facet aggregates if no direct data specification
            if (!from.data) {
                op = parseTransform((0, _vegaUtil.extend)({
                    type: "aggregate",
                    groupby: (0, _vegaUtil.array)(facet.groupby)
                }, facet.aggregate), scope);
                op.params.key = scope.keyRef(facet.groupby);
                op.params.pulse = getDataRef(facet, scope);
                dataRef = parent = ref(scope.add(op));
            } else parent = ref(scope.getData(from.data).aggregate);
            key = scope.keyRef(facet.groupby, true);
        }
    } // if not yet defined, get source data reference
    if (!dataRef) dataRef = getDataRef(from, scope);
    return {
        key: key,
        pulse: dataRef,
        parent: parent
    };
}
function getDataRef(from, scope) {
    return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
}
function DataScope(scope, input, output, values, aggr) {
    this.scope = scope; // parent scope object
    this.input = input; // first operator in pipeline (tuple input)
    this.output = output; // last operator in pipeline (tuple output)
    this.values = values; // operator for accessing tuples (but not tuple flow)
    // last aggregate in transform pipeline
    this.aggregate = aggr; // lookup table of field indices
    this.index = {};
}
DataScope.fromEntries = function(scope, entries) {
    const n = entries.length, values = entries[n - 1], output = entries[n - 2];
    let input = entries[0], aggr = null, i = 1;
    if (input && input.type === "load") input = entries[1];
     // add operator entries to this scope, wire up pulse chain
    scope.add(entries[0]);
    for(; i < n; ++i){
        entries[i].params.pulse = ref(entries[i - 1]);
        scope.add(entries[i]);
        if (entries[i].type === "aggregate") aggr = entries[i];
    }
    return new DataScope(scope, input, output, values, aggr);
};
function fieldKey(field) {
    return (0, _vegaUtil.isString)(field) ? field : null;
}
function addSortField(scope, p, sort) {
    const as = aggrField(sort.op, sort.field);
    let s;
    if (p.ops) for(let i = 0, n = p.as.length; i < n; ++i){
        if (p.as[i] === as) return;
    }
    else {
        p.ops = [
            "count"
        ];
        p.fields = [
            null
        ];
        p.as = [
            "count"
        ];
    }
    if (sort.op) {
        p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);
        p.fields.push(scope.fieldRef(sort.field));
        p.as.push(as);
    }
}
function cache(scope, ds, name, optype, field, counts, index) {
    const cache = ds[name] || (ds[name] = {}), sort = sortKey(counts);
    let k = fieldKey(field), v, op;
    if (k != null) {
        scope = ds.scope;
        k = k + (sort ? "|" + sort : "");
        v = cache[k];
    }
    if (!v) {
        const params = counts ? {
            field: keyFieldRef,
            pulse: ds.countsRef(scope, field, counts)
        } : {
            field: scope.fieldRef(field),
            pulse: ref(ds.output)
        };
        if (sort) params.sort = scope.sortRef(counts);
        op = scope.add(entry(optype, undefined, params));
        if (index) ds.index[field] = op;
        v = ref(op);
        if (k != null) cache[k] = v;
    }
    return v;
}
DataScope.prototype = {
    countsRef (scope, field, sort) {
        const ds = this, cache = ds.counts || (ds.counts = {}), k = fieldKey(field);
        let v, a, p;
        if (k != null) {
            scope = ds.scope;
            v = cache[k];
        }
        if (!v) {
            p = {
                groupby: scope.fieldRef(field, "key"),
                pulse: ref(ds.output)
            };
            if (sort && sort.field) addSortField(scope, p, sort);
            a = scope.add(Aggregate(p));
            v = scope.add(Collect({
                pulse: ref(a)
            }));
            v = {
                agg: a,
                ref: ref(v)
            };
            if (k != null) cache[k] = v;
        } else if (sort && sort.field) addSortField(scope, v.agg.params, sort);
        return v.ref;
    },
    tuplesRef () {
        return ref(this.values);
    },
    extentRef (scope, field) {
        return cache(scope, this, "extent", "extent", field, false);
    },
    domainRef (scope, field) {
        return cache(scope, this, "domain", "values", field, false);
    },
    valuesRef (scope, field, sort) {
        return cache(scope, this, "vals", "values", field, sort || true);
    },
    lookupRef (scope, field) {
        return cache(scope, this, "lookup", "tupleindex", field, false);
    },
    indataRef (scope, field) {
        return cache(scope, this, "indata", "tupleindex", field, true, true);
    }
};
function parseFacet(spec, scope, group) {
    const facet = spec.from.facet, name = facet.name, data = getDataRef(facet, scope);
    let op;
    if (!facet.name) (0, _vegaUtil.error)("Facet must have a name: " + (0, _vegaUtil.stringValue)(facet));
    if (!facet.data) (0, _vegaUtil.error)("Facet must reference a data set: " + (0, _vegaUtil.stringValue)(facet));
    if (facet.field) op = scope.add(PreFacet({
        field: scope.fieldRef(facet.field),
        pulse: data
    }));
    else if (facet.groupby) op = scope.add(Facet({
        key: scope.keyRef(facet.groupby),
        group: ref(scope.proxy(group.parent)),
        pulse: data
    }));
    else (0, _vegaUtil.error)("Facet must specify groupby or field: " + (0, _vegaUtil.stringValue)(facet));
     // initialize facet subscope
    const subscope = scope.fork(), source = subscope.add(Collect()), values = subscope.add(Sieve({
        pulse: ref(source)
    }));
    subscope.addData(name, new DataScope(subscope, source, source, values));
    subscope.addSignal("parent", null); // parse faceted subflow
    op.params.subflow = {
        $subflow: subscope.parse(spec).toRuntime()
    };
}
function parseSubflow(spec, scope, input) {
    const op = scope.add(PreFacet({
        pulse: input.pulse
    })), subscope = scope.fork();
    subscope.add(Sieve());
    subscope.addSignal("parent", null); // parse group mark subflow
    op.params.subflow = {
        $subflow: subscope.parse(spec).toRuntime()
    };
}
function parseTrigger(spec, scope, name) {
    const remove = spec.remove, insert = spec.insert, toggle = spec.toggle, modify = spec.modify, values = spec.values, op = scope.add(operator());
    const update = "if(" + spec.trigger + ',modify("' + name + '",' + [
        insert,
        remove,
        toggle,
        modify,
        values
    ].map((_)=>_ == null ? "null" : _).join(",") + "),0)";
    const expr = (0, _vegaFunctions.parseExpression)(update, scope);
    op.update = expr.$expr;
    op.params = expr.$params;
}
function parseMark(spec, scope) {
    const role = getRole(spec), group = spec.type === GroupMark, facet = spec.from && spec.from.facet, overlap = spec.overlap;
    let layout = spec.layout || role === ScopeRole || role === FrameRole, ops, op, store, enc, name, layoutRef, boundRef;
    const nested = role === MarkRole || layout || facet; // resolve input data
    const input = parseData$1(spec.from, group, scope); // data join to map tuples to visual items
    op = scope.add(DataJoin({
        key: input.key || (spec.key ? fieldRef$1(spec.key) : undefined),
        pulse: input.pulse,
        clean: !group
    }));
    const joinRef = ref(op); // collect visual items
    op = store = scope.add(Collect({
        pulse: joinRef
    })); // connect visual items to scenegraph
    op = scope.add(Mark({
        markdef: definition(spec),
        interactive: interactive(spec.interactive, scope),
        clip: clip(spec.clip, scope),
        context: {
            $context: true
        },
        groups: scope.lookup(),
        parent: scope.signals.parent ? scope.signalRef("parent") : null,
        index: scope.markpath(),
        pulse: ref(op)
    }));
    const markRef = ref(op); // add visual encoders
    op = enc = scope.add(Encode(parseEncode(spec.encode, spec.type, role, spec.style, scope, {
        mod: false,
        pulse: markRef
    }))); // monitor parent marks to propagate changes
    op.params.parent = scope.encode(); // add post-encoding transforms, if defined
    if (spec.transform) spec.transform.forEach((_)=>{
        const tx = parseTransform(_, scope), md = tx.metadata;
        if (md.generates || md.changes) (0, _vegaUtil.error)("Mark transforms should not generate new data.");
        if (!md.nomod) enc.params.mod = true; // update encode mod handling
        tx.params.pulse = ref(op);
        scope.add(op = tx);
    });
     // if item sort specified, perform post-encoding
    if (spec.sort) op = scope.add(SortItems({
        sort: scope.compareRef(spec.sort),
        pulse: ref(op)
    }));
    const encodeRef = ref(op); // add view layout operator if needed
    if (facet || layout) {
        layout = scope.add(ViewLayout({
            layout: scope.objectProperty(spec.layout),
            legends: scope.legends,
            mark: markRef,
            pulse: encodeRef
        }));
        layoutRef = ref(layout);
    } // compute bounding boxes
    const bound = scope.add(Bound({
        mark: markRef,
        pulse: layoutRef || encodeRef
    }));
    boundRef = ref(bound); // if group mark, recurse to parse nested content
    if (group) {
        // juggle layout & bounds to ensure they run *after* any faceting transforms
        if (nested) {
            ops = scope.operators;
            ops.pop();
            if (layout) ops.pop();
        }
        scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
        facet ? parseFacet(spec, scope, input) // explicit facet
         : nested ? parseSubflow(spec, scope, input) // standard mark group
         : scope.parse(spec); // guide group, we can avoid nested scopes
        scope.popState();
        if (nested) {
            if (layout) ops.push(layout);
            ops.push(bound);
        }
    } // if requested, add overlap removal transform
    if (overlap) boundRef = parseOverlap(overlap, boundRef, scope);
     // render / sieve items
    const render = scope.add(Render({
        pulse: boundRef
    })), sieve = scope.add(Sieve({
        pulse: ref(render)
    }, undefined, scope.parent())); // if mark is named, make accessible as reactive geometry
    // add trigger updates if defined
    if (spec.name != null) {
        name = spec.name;
        scope.addData(name, new DataScope(scope, store, render, sieve));
        if (spec.on) spec.on.forEach((on)=>{
            if (on.insert || on.remove || on.toggle) (0, _vegaUtil.error)("Marks only support modify triggers.");
            parseTrigger(on, scope, name);
        });
    }
}
function parseOverlap(overlap, source, scope) {
    const method = overlap.method, bound = overlap.bound, sep = overlap.separation;
    const params = {
        separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
        method: isSignal(method) ? scope.signalRef(method.signal) : method,
        pulse: source
    };
    if (overlap.order) params.sort = scope.compareRef({
        field: overlap.order
    });
    if (bound) {
        const tol = bound.tolerance;
        params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
        params.boundScale = scope.scaleRef(bound.scale);
        params.boundOrient = bound.orient;
    }
    return ref(scope.add(Overlap(params)));
}
function parseLegend(spec, scope) {
    const config = scope.config.legend, encode = spec.encode || {}, _ = lookup(spec, config), legendEncode = encode.legend || {}, name = legendEncode.name || undefined, interactive = legendEncode.interactive, style = legendEncode.style, scales = {};
    let scale = 0, entryLayout, params, children; // resolve scales and 'canonical' scale name
    LegendScales.forEach((s)=>spec[s] ? (scales[s] = spec[s], scale = scale || spec[s]) : 0);
    if (!scale) (0, _vegaUtil.error)("Missing valid scale for legend."); // resolve legend type (symbol, gradient, or discrete gradient)
    const type = legendType(spec, scope.scaleType(scale)); // single-element data source for legend group
    const datum = {
        title: spec.title != null,
        scales: scales,
        type: type,
        vgrad: type !== "symbol" && _.isVertical()
    };
    const dataRef = ref(scope.add(Collect(null, [
        datum
    ]))); // encoding properties for legend entry sub-group
    const entryEncode = {
        enter: {
            x: {
                value: 0
            },
            y: {
                value: 0
            }
        }
    }; // data source for legend values
    const entryRef = ref(scope.add(LegendEntries(params = {
        type: type,
        scale: scope.scaleRef(scale),
        count: scope.objectProperty(_("tickCount")),
        limit: scope.property(_("symbolLimit")),
        values: scope.objectProperty(spec.values),
        minstep: scope.property(spec.tickMinStep),
        formatType: scope.property(spec.formatType),
        formatSpecifier: scope.property(spec.format)
    }))); // continuous gradient legend
    if (type === Gradient) {
        children = [
            legendGradient(spec, scale, config, encode.gradient),
            legendGradientLabels(spec, config, encode.labels, entryRef)
        ]; // adjust default tick count based on the gradient length
        params.count = params.count || scope.signalRef(`max(2,2*floor((${deref(_.gradientLength())})/100))`);
    } else if (type === Discrete) children = [
        legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef),
        legendGradientLabels(spec, config, encode.labels, entryRef)
    ];
    else {
        // determine legend symbol group layout
        entryLayout = legendSymbolLayout(spec, config);
        children = [
            legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))
        ]; // pass symbol size information to legend entry generator
        params.size = sizeExpression(spec, scope, children[0].marks);
    } // generate legend marks
    children = [
        guideGroup({
            role: LegendEntryRole,
            from: dataRef,
            encode: entryEncode,
            marks: children,
            layout: entryLayout,
            interactive
        })
    ]; // include legend title if defined
    if (datum.title) children.push(legendTitle(spec, config, encode.title, dataRef));
     // parse legend specification
    return parseMark(guideGroup({
        role: LegendRole,
        from: dataRef,
        encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, Skip),
        marks: children,
        aria: _("aria"),
        description: _("description"),
        zindex: _("zindex"),
        name,
        interactive,
        style
    }), scope);
}
function legendType(spec, scaleType) {
    let type = spec.type || Symbols;
    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) type = (0, _vegaScale.isContinuous)(scaleType) ? Gradient : (0, _vegaScale.isDiscretizing)(scaleType) ? Discrete : Symbols;
    return type !== Gradient ? type : (0, _vegaScale.isDiscretizing)(scaleType) ? Discrete : Gradient;
}
function scaleCount(spec) {
    return LegendScales.reduce((count, type)=>count + (spec[type] ? 1 : 0), 0);
}
function buildLegendEncode(_, spec, config) {
    const encode = {
        enter: {},
        update: {}
    };
    addEncoders(encode, {
        orient: _("orient"),
        offset: _("offset"),
        padding: _("padding"),
        titlePadding: _("titlePadding"),
        cornerRadius: _("cornerRadius"),
        fill: _("fillColor"),
        stroke: _("strokeColor"),
        strokeWidth: config.strokeWidth,
        strokeDash: config.strokeDash,
        x: _("legendX"),
        y: _("legendY"),
        // accessibility support
        format: spec.format,
        formatType: spec.formatType
    });
    return encode;
}
function sizeExpression(spec, scope, marks) {
    const size = deref(getChannel("size", spec, marks)), strokeWidth = deref(getChannel("strokeWidth", spec, marks)), fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
    return (0, _vegaFunctions.parseExpression)(`max(ceil(sqrt(${size})+${strokeWidth}),${fontSize})`, scope);
}
function getChannel(name, spec, marks) {
    return spec[name] ? `scale("${spec[name]}",datum)` : getEncoding(name, marks[0].encode);
}
function getFontSize(encode, scope, style) {
    return getEncoding("fontSize", encode) || getStyle("fontSize", scope, style);
}
const angleExpr = `item.orient==="${Left}"?-90:item.orient==="${Right}"?90:0`;
function parseTitle(spec, scope) {
    spec = (0, _vegaUtil.isString)(spec) ? {
        text: spec
    } : spec;
    const _ = lookup(spec, scope.config.title), encode = spec.encode || {}, userEncode = encode.group || {}, name = userEncode.name || undefined, interactive = userEncode.interactive, style = userEncode.style, children = []; // single-element data source for group title
    const datum = {}, dataRef = ref(scope.add(Collect(null, [
        datum
    ]))); // include title text
    children.push(buildTitle(spec, _, titleEncode(spec), dataRef)); // include subtitle text
    if (spec.subtitle) children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));
     // parse title specification
    return parseMark(guideGroup({
        role: TitleRole,
        from: dataRef,
        encode: groupEncode(_, userEncode),
        marks: children,
        aria: _("aria"),
        description: _("description"),
        zindex: _("zindex"),
        name,
        interactive,
        style
    }), scope);
} // provide backwards-compatibility for title custom encode;
// the top-level encode block has been *deprecated*.
function titleEncode(spec) {
    const encode = spec.encode;
    return encode && encode.title || (0, _vegaUtil.extend)({
        name: spec.name,
        interactive: spec.interactive,
        style: spec.style
    }, encode);
}
function groupEncode(_, userEncode) {
    const encode = {
        enter: {},
        update: {}
    };
    addEncoders(encode, {
        orient: _("orient"),
        anchor: _("anchor"),
        align: {
            signal: alignExpr$1
        },
        angle: {
            signal: angleExpr
        },
        limit: _("limit"),
        frame: _("frame"),
        offset: _("offset") || 0,
        padding: _("subtitlePadding")
    });
    return extendEncode(encode, userEncode, Skip);
}
function buildTitle(spec, _, userEncode, dataRef) {
    const zero = {
        value: 0
    }, text = spec.text, encode = {
        enter: {
            opacity: zero
        },
        update: {
            opacity: {
                value: 1
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        text: text,
        align: {
            signal: "item.mark.group.align"
        },
        angle: {
            signal: "item.mark.group.angle"
        },
        limit: {
            signal: "item.mark.group.limit"
        },
        baseline: "top",
        dx: _("dx"),
        dy: _("dy"),
        fill: _("color"),
        font: _("font"),
        fontSize: _("fontSize"),
        fontStyle: _("fontStyle"),
        fontWeight: _("fontWeight"),
        lineHeight: _("lineHeight")
    }, {
        // update
        align: _("align"),
        angle: _("angle"),
        baseline: _("baseline")
    });
    return guideMark({
        type: TextMark,
        role: TitleTextRole,
        style: GroupTitleStyle,
        from: dataRef,
        encode
    }, userEncode);
}
function buildSubTitle(spec, _, userEncode, dataRef) {
    const zero = {
        value: 0
    }, text = spec.subtitle, encode = {
        enter: {
            opacity: zero
        },
        update: {
            opacity: {
                value: 1
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        text: text,
        align: {
            signal: "item.mark.group.align"
        },
        angle: {
            signal: "item.mark.group.angle"
        },
        limit: {
            signal: "item.mark.group.limit"
        },
        baseline: "top",
        dx: _("dx"),
        dy: _("dy"),
        fill: _("subtitleColor"),
        font: _("subtitleFont"),
        fontSize: _("subtitleFontSize"),
        fontStyle: _("subtitleFontStyle"),
        fontWeight: _("subtitleFontWeight"),
        lineHeight: _("subtitleLineHeight")
    }, {
        // update
        align: _("align"),
        angle: _("angle"),
        baseline: _("baseline")
    });
    return guideMark({
        type: TextMark,
        role: TitleSubtitleRole,
        style: GroupSubtitleStyle,
        from: dataRef,
        encode
    }, userEncode);
}
function parseData(data, scope) {
    const transforms = [];
    if (data.transform) data.transform.forEach((tx)=>{
        transforms.push(parseTransform(tx, scope));
    });
    if (data.on) data.on.forEach((on)=>{
        parseTrigger(on, scope, data.name);
    });
    scope.addDataPipeline(data.name, analyze(data, scope, transforms));
}
/**
 * Analyze a data pipeline, add needed operators.
 */ function analyze(data, scope, ops) {
    const output = [];
    let source = null, modify = false, generate = false, upstream, i, n, t, m;
    if (data.values) {
        // hard-wired input data set
        if (isSignal(data.values) || hasSignal(data.format)) {
            // if either values is signal or format has signal, use dynamic loader
            output.push(load(scope, data));
            output.push(source = collect());
        } else // otherwise, ingest upon dataflow init
        output.push(source = collect({
            $ingest: data.values,
            $format: data.format
        }));
    } else if (data.url) {
        // load data from external source
        if (hasSignal(data.url) || hasSignal(data.format)) {
            // if either url or format has signal, use dynamic loader
            output.push(load(scope, data));
            output.push(source = collect());
        } else // otherwise, request load upon dataflow init
        output.push(source = collect({
            $request: data.url,
            $format: data.format
        }));
    } else if (data.source) {
        // derives from one or more other data sets
        source = upstream = (0, _vegaUtil.array)(data.source).map((d)=>ref(scope.getData(d).output));
        output.push(null); // populate later
    } // scan data transforms, add collectors as needed
    for(i = 0, n = ops.length; i < n; ++i){
        t = ops[i];
        m = t.metadata;
        if (!source && !m.source) output.push(source = collect());
        output.push(t);
        if (m.generates) generate = true;
        if (m.modifies && !generate) modify = true;
        if (m.source) source = t;
        else if (m.changes) source = null;
    }
    if (upstream) {
        n = upstream.length - 1;
        output[0] = Relay({
            derive: modify,
            pulse: n ? upstream : upstream[0]
        });
        if (modify || n) // collect derived and multi-pulse tuples
        output.splice(1, 0, collect());
    }
    if (!source) output.push(collect());
    output.push(Sieve({}));
    return output;
}
function collect(values) {
    const s = Collect({}, values);
    s.metadata = {
        source: true
    };
    return s;
}
function load(scope, data) {
    return Load({
        url: data.url ? scope.property(data.url) : undefined,
        async: data.async ? scope.property(data.async) : undefined,
        values: data.values ? scope.property(data.values) : undefined,
        format: scope.objectProperty(data.format)
    });
}
const isX = (orient)=>orient === Bottom || orient === Top; // get sign coefficient based on axis orient
const getSign = (orient, a, b)=>isSignal(orient) ? ifLeftTopExpr(orient.signal, a, b) : orient === Left || orient === Top ? a : b; // condition on axis x-direction
const ifX = (orient, a, b)=>isSignal(orient) ? ifXEnc(orient.signal, a, b) : isX(orient) ? a : b; // condition on axis y-direction
const ifY = (orient, a, b)=>isSignal(orient) ? ifYEnc(orient.signal, a, b) : isX(orient) ? b : a;
const ifTop = (orient, a, b)=>isSignal(orient) ? ifTopExpr(orient.signal, a, b) : orient === Top ? {
        value: a
    } : {
        value: b
    };
const ifRight = (orient, a, b)=>isSignal(orient) ? ifRightExpr(orient.signal, a, b) : orient === Right ? {
        value: a
    } : {
        value: b
    };
const ifXEnc = ($orient, a, b)=>ifEnc(`${$orient} === '${Top}' || ${$orient} === '${Bottom}'`, a, b);
const ifYEnc = ($orient, a, b)=>ifEnc(`${$orient} !== '${Top}' && ${$orient} !== '${Bottom}'`, a, b);
const ifLeftTopExpr = ($orient, a, b)=>ifExpr(`${$orient} === '${Left}' || ${$orient} === '${Top}'`, a, b);
const ifTopExpr = ($orient, a, b)=>ifExpr(`${$orient} === '${Top}'`, a, b);
const ifRightExpr = ($orient, a, b)=>ifExpr(`${$orient} === '${Right}'`, a, b);
const ifEnc = (test, a, b)=>{
    // ensure inputs are encoder objects (or null)
    a = a != null ? encoder(a) : a;
    b = b != null ? encoder(b) : b;
    if (isSimple(a) && isSimple(b)) {
        // if possible generate simple signal expression
        a = a ? a.signal || (0, _vegaUtil.stringValue)(a.value) : null;
        b = b ? b.signal || (0, _vegaUtil.stringValue)(b.value) : null;
        return {
            signal: `${test} ? (${a}) : (${b})`
        };
    } else // otherwise generate rule set
    return [
        (0, _vegaUtil.extend)({
            test
        }, a)
    ].concat(b || []);
};
const isSimple = (enc)=>enc == null || Object.keys(enc).length === 1;
const ifExpr = (test, a, b)=>({
        signal: `${test} ? (${toExpr(a)}) : (${toExpr(b)})`
    });
const ifOrient = ($orient, t, b, l, r)=>({
        signal: (l != null ? `${$orient} === '${Left}' ? (${toExpr(l)}) : ` : "") + (b != null ? `${$orient} === '${Bottom}' ? (${toExpr(b)}) : ` : "") + (r != null ? `${$orient} === '${Right}' ? (${toExpr(r)}) : ` : "") + (t != null ? `${$orient} === '${Top}' ? (${toExpr(t)}) : ` : "") + "(null)"
    });
const toExpr = (v)=>isSignal(v) ? v.signal : v == null ? null : (0, _vegaUtil.stringValue)(v);
const mult = (sign, value)=>value === 0 ? 0 : isSignal(sign) ? {
        signal: `(${sign.signal}) * ${value}`
    } : {
        value: sign * value
    };
const patch = (value, base)=>{
    const s = value.signal;
    return s && s.endsWith("(null)") ? {
        signal: s.slice(0, -6) + base.signal
    } : value;
};
function fallback(prop, config, axisConfig, style) {
    let styleProp;
    if (config && (0, _vegaUtil.hasOwnProperty)(config, prop)) return config[prop];
    else if ((0, _vegaUtil.hasOwnProperty)(axisConfig, prop)) return axisConfig[prop];
    else if (prop.startsWith("title")) {
        switch(prop){
            case "titleColor":
                styleProp = "fill";
                break;
            case "titleFont":
            case "titleFontSize":
            case "titleFontWeight":
                styleProp = prop[5].toLowerCase() + prop.slice(6);
        }
        return style[GuideTitleStyle][styleProp];
    } else if (prop.startsWith("label")) {
        switch(prop){
            case "labelColor":
                styleProp = "fill";
                break;
            case "labelFont":
            case "labelFontSize":
                styleProp = prop[5].toLowerCase() + prop.slice(6);
        }
        return style[GuideLabelStyle][styleProp];
    }
    return null;
}
function keys(objects) {
    const map = {};
    for (const obj of objects){
        if (!obj) continue;
        for(const key in obj)map[key] = 1;
    }
    return Object.keys(map);
}
function axisConfig(spec, scope) {
    var config = scope.config, style = config.style, axis = config.axis, band = scope.scaleType(spec.scale) === "band" && config.axisBand, orient = spec.orient, xy, or, key;
    if (isSignal(orient)) {
        const xyKeys = keys([
            config.axisX,
            config.axisY
        ]), orientKeys = keys([
            config.axisTop,
            config.axisBottom,
            config.axisLeft,
            config.axisRight
        ]);
        xy = {};
        for (key of xyKeys)xy[key] = ifX(orient, fallback(key, config.axisX, axis, style), fallback(key, config.axisY, axis, style));
        or = {};
        for (key of orientKeys)or[key] = ifOrient(orient.signal, fallback(key, config.axisTop, axis, style), fallback(key, config.axisBottom, axis, style), fallback(key, config.axisLeft, axis, style), fallback(key, config.axisRight, axis, style));
    } else {
        xy = orient === Top || orient === Bottom ? config.axisX : config.axisY;
        or = config["axis" + orient[0].toUpperCase() + orient.slice(1)];
    }
    const result = xy || or || band ? (0, _vegaUtil.extend)({}, axis, xy, or, band) : axis;
    return result;
}
function axisDomain(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient = spec.orient;
    let enter, update;
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("domainColor"),
        strokeCap: _("domainCap"),
        strokeDash: _("domainDash"),
        strokeDashOffset: _("domainDashOffset"),
        strokeWidth: _("domainWidth"),
        strokeOpacity: _("domainOpacity")
    });
    const pos0 = position(spec, 0);
    const pos1 = position(spec, 1);
    enter.x = update.x = ifX(orient, pos0, zero);
    enter.x2 = update.x2 = ifX(orient, pos1);
    enter.y = update.y = ifY(orient, pos0, zero);
    enter.y2 = update.y2 = ifY(orient, pos1);
    return guideMark({
        type: RuleMark,
        role: AxisDomainRole,
        from: dataRef,
        encode
    }, userEncode);
}
function position(spec, pos) {
    return {
        scale: spec.scale,
        range: pos
    };
}
function axisGrid(spec, config, userEncode, dataRef, band) {
    const _ = lookup(spec, config), orient = spec.orient, vscale = spec.gridScale, sign = getSign(orient, 1, -1), offset = offsetValue(spec.offset, sign);
    let enter, exit, update;
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one
        },
        exit: exit = {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("gridColor"),
        strokeCap: _("gridCap"),
        strokeDash: _("gridDash"),
        strokeDashOffset: _("gridDashOffset"),
        strokeOpacity: _("gridOpacity"),
        strokeWidth: _("gridWidth")
    });
    const tickPos = {
        scale: spec.scale,
        field: Value,
        band: band.band,
        extra: band.extra,
        offset: band.offset,
        round: _("tickRound")
    };
    const sz = ifX(orient, {
        signal: "height"
    }, {
        signal: "width"
    });
    const gridStart = vscale ? {
        scale: vscale,
        range: 0,
        mult: sign,
        offset: offset
    } : {
        value: 0,
        offset: offset
    };
    const gridEnd = vscale ? {
        scale: vscale,
        range: 1,
        mult: sign,
        offset: offset
    } : (0, _vegaUtil.extend)(sz, {
        mult: sign,
        offset: offset
    });
    enter.x = update.x = ifX(orient, tickPos, gridStart);
    enter.y = update.y = ifY(orient, tickPos, gridStart);
    enter.x2 = update.x2 = ifY(orient, gridEnd);
    enter.y2 = update.y2 = ifX(orient, gridEnd);
    exit.x = ifX(orient, tickPos);
    exit.y = ifY(orient, tickPos);
    return guideMark({
        type: RuleMark,
        role: AxisGridRole,
        key: Value,
        from: dataRef,
        encode
    }, userEncode);
}
function offsetValue(offset, sign) {
    if (sign === 1) ;
    else if (!(0, _vegaUtil.isObject)(offset)) offset = isSignal(sign) ? {
        signal: `(${sign.signal}) * (${offset || 0})`
    } : sign * (offset || 0);
    else {
        let entry = offset = (0, _vegaUtil.extend)({}, offset);
        while(entry.mult != null)if (!(0, _vegaUtil.isObject)(entry.mult)) {
            entry.mult = isSignal(sign) // no offset if sign === 1
             ? {
                signal: `(${entry.mult}) * (${sign.signal})`
            } : entry.mult * sign;
            return offset;
        } else entry = entry.mult = (0, _vegaUtil.extend)({}, entry.mult);
        entry.mult = sign;
    }
    return offset;
}
function axisTicks(spec, config, userEncode, dataRef, size, band) {
    const _ = lookup(spec, config), orient = spec.orient, sign = getSign(orient, -1, 1);
    let enter, exit, update;
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one
        },
        exit: exit = {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("tickColor"),
        strokeCap: _("tickCap"),
        strokeDash: _("tickDash"),
        strokeDashOffset: _("tickDashOffset"),
        strokeOpacity: _("tickOpacity"),
        strokeWidth: _("tickWidth")
    });
    const tickSize = encoder(size);
    tickSize.mult = sign;
    const tickPos = {
        scale: spec.scale,
        field: Value,
        band: band.band,
        extra: band.extra,
        offset: band.offset,
        round: _("tickRound")
    };
    update.y = enter.y = ifX(orient, zero, tickPos);
    update.y2 = enter.y2 = ifX(orient, tickSize);
    exit.x = ifX(orient, tickPos);
    update.x = enter.x = ifY(orient, zero, tickPos);
    update.x2 = enter.x2 = ifY(orient, tickSize);
    exit.y = ifY(orient, tickPos);
    return guideMark({
        type: RuleMark,
        role: AxisTickRole,
        key: Value,
        from: dataRef,
        encode
    }, userEncode);
}
function flushExpr(scale, threshold, a, b, c) {
    return {
        signal: 'flush(range("' + scale + '"), ' + 'scale("' + scale + '", datum.value), ' + threshold + "," + a + "," + b + "," + c + ")"
    };
}
function axisLabels(spec, config, userEncode, dataRef, size, band) {
    const _ = lookup(spec, config), orient = spec.orient, scale = spec.scale, sign = getSign(orient, -1, 1), flush = deref(_("labelFlush")), flushOffset = deref(_("labelFlushOffset")), labelAlign = _("labelAlign"), labelBaseline = _("labelBaseline");
    let flushOn = flush === 0 || !!flush, update;
    const tickSize = encoder(size);
    tickSize.mult = sign;
    tickSize.offset = encoder(_("labelPadding") || 0);
    tickSize.offset.mult = sign;
    const tickPos = {
        scale: scale,
        field: Value,
        band: 0.5,
        offset: extendOffset(band.offset, _("labelOffset"))
    };
    const align = ifX(orient, flushOn ? flushExpr(scale, flush, '"left"', '"right"', '"center"') : {
        value: "center"
    }, ifRight(orient, "left", "right"));
    const baseline = ifX(orient, ifTop(orient, "bottom", "top"), flushOn ? flushExpr(scale, flush, '"top"', '"bottom"', '"middle"') : {
        value: "middle"
    });
    const offsetExpr = flushExpr(scale, flush, `-(${flushOffset})`, flushOffset, 0);
    flushOn = flushOn && flushOffset;
    const enter = {
        opacity: zero,
        x: ifX(orient, tickPos, tickSize),
        y: ifY(orient, tickPos, tickSize)
    };
    const encode = {
        enter: enter,
        update: update = {
            opacity: one,
            text: {
                field: Label
            },
            x: enter.x,
            y: enter.y,
            align,
            baseline
        },
        exit: {
            opacity: zero,
            x: enter.x,
            y: enter.y
        }
    };
    addEncoders(encode, {
        dx: !labelAlign && flushOn ? ifX(orient, offsetExpr) : null,
        dy: !labelBaseline && flushOn ? ifY(orient, offsetExpr) : null
    });
    addEncoders(encode, {
        angle: _("labelAngle"),
        fill: _("labelColor"),
        fillOpacity: _("labelOpacity"),
        font: _("labelFont"),
        fontSize: _("labelFontSize"),
        fontWeight: _("labelFontWeight"),
        fontStyle: _("labelFontStyle"),
        limit: _("labelLimit"),
        lineHeight: _("labelLineHeight")
    }, {
        align: labelAlign,
        baseline: labelBaseline
    });
    const bound = _("labelBound");
    let overlap = _("labelOverlap"); // if overlap method or bound defined, request label overlap removal
    overlap = overlap || bound ? {
        separation: _("labelSeparation"),
        method: overlap,
        order: "datum.index",
        bound: bound ? {
            scale,
            orient,
            tolerance: bound
        } : null
    } : undefined;
    if (update.align !== align) update.align = patch(update.align, align);
    if (update.baseline !== baseline) update.baseline = patch(update.baseline, baseline);
    return guideMark({
        type: TextMark,
        role: AxisLabelRole,
        style: GuideLabelStyle,
        key: Value,
        from: dataRef,
        encode,
        overlap
    }, userEncode);
}
function axisTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient = spec.orient, sign = getSign(orient, -1, 1);
    let enter, update;
    const encode = {
        enter: enter = {
            opacity: zero,
            anchor: encoder(_("titleAnchor", null)),
            align: {
                signal: alignExpr$1
            }
        },
        update: update = (0, _vegaUtil.extend)({}, enter, {
            opacity: one,
            text: encoder(spec.title)
        }),
        exit: {
            opacity: zero
        }
    };
    const titlePos = {
        signal: `lerp(range("${spec.scale}"), ${anchorExpr(0, 1, 0.5)})`
    };
    update.x = ifX(orient, titlePos);
    update.y = ifY(orient, titlePos);
    enter.angle = ifX(orient, zero, mult(sign, 90));
    enter.baseline = ifX(orient, ifTop(orient, Bottom, Top), {
        value: Bottom
    });
    update.angle = enter.angle;
    update.baseline = enter.baseline;
    addEncoders(encode, {
        fill: _("titleColor"),
        fillOpacity: _("titleOpacity"),
        font: _("titleFont"),
        fontSize: _("titleFontSize"),
        fontStyle: _("titleFontStyle"),
        fontWeight: _("titleFontWeight"),
        limit: _("titleLimit"),
        lineHeight: _("titleLineHeight")
    }, {
        // require update
        align: _("titleAlign"),
        angle: _("titleAngle"),
        baseline: _("titleBaseline")
    });
    autoLayout(_, orient, encode, userEncode);
    encode.update.align = patch(encode.update.align, enter.align);
    encode.update.angle = patch(encode.update.angle, enter.angle);
    encode.update.baseline = patch(encode.update.baseline, enter.baseline);
    return guideMark({
        type: TextMark,
        role: AxisTitleRole,
        style: GuideTitleStyle,
        from: dataRef,
        encode
    }, userEncode);
}
function autoLayout(_, orient, encode, userEncode) {
    const auto = (value, dim)=>value != null ? (encode.update[dim] = patch(encoder(value), encode.update[dim]), false) : !has(dim, userEncode) ? true : false;
    const autoY = auto(_("titleX"), "x"), autoX = auto(_("titleY"), "y");
    encode.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient, encoder(autoX), encoder(autoY));
}
function parseAxis(spec, scope) {
    const config = axisConfig(spec, scope), encode = spec.encode || {}, axisEncode = encode.axis || {}, name = axisEncode.name || undefined, interactive = axisEncode.interactive, style = axisEncode.style, _ = lookup(spec, config), band = tickBand(_); // single-element data source for axis group
    const datum = {
        scale: spec.scale,
        ticks: !!_("ticks"),
        labels: !!_("labels"),
        grid: !!_("grid"),
        domain: !!_("domain"),
        title: spec.title != null
    };
    const dataRef = ref(scope.add(Collect({}, [
        datum
    ]))); // data source for axis ticks
    const ticksRef = ref(scope.add(AxisTicks({
        scale: scope.scaleRef(spec.scale),
        extra: scope.property(band.extra),
        count: scope.objectProperty(spec.tickCount),
        values: scope.objectProperty(spec.values),
        minstep: scope.property(spec.tickMinStep),
        formatType: scope.property(spec.formatType),
        formatSpecifier: scope.property(spec.format)
    }))); // generate axis marks
    const children = [];
    let size; // include axis gridlines if requested
    if (datum.grid) children.push(axisGrid(spec, config, encode.grid, ticksRef, band));
     // include axis ticks if requested
    if (datum.ticks) {
        size = _("tickSize");
        children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));
    } // include axis labels if requested
    if (datum.labels) {
        size = datum.ticks ? size : 0;
        children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));
    } // include axis domain path if requested
    if (datum.domain) children.push(axisDomain(spec, config, encode.domain, dataRef));
     // include axis title if defined
    if (datum.title) children.push(axisTitle(spec, config, encode.title, dataRef));
     // parse axis specification
    return parseMark(guideGroup({
        role: AxisRole,
        from: dataRef,
        encode: extendEncode(buildAxisEncode(_, spec), axisEncode, Skip),
        marks: children,
        aria: _("aria"),
        description: _("description"),
        zindex: _("zindex"),
        name,
        interactive,
        style
    }), scope);
}
function buildAxisEncode(_, spec) {
    const encode = {
        enter: {},
        update: {}
    };
    addEncoders(encode, {
        orient: _("orient"),
        offset: _("offset") || 0,
        position: value(spec.position, 0),
        titlePadding: _("titlePadding"),
        minExtent: _("minExtent"),
        maxExtent: _("maxExtent"),
        range: {
            signal: `abs(span(range("${spec.scale}")))`
        },
        translate: _("translate"),
        // accessibility support
        format: spec.format,
        formatType: spec.formatType
    });
    return encode;
}
function parseScope(spec, scope, preprocessed) {
    const signals = (0, _vegaUtil.array)(spec.signals), scales = (0, _vegaUtil.array)(spec.scales); // parse signal definitions, if not already preprocessed
    if (!preprocessed) signals.forEach((_)=>parseSignal(_, scope)); // parse cartographic projection definitions
    (0, _vegaUtil.array)(spec.projections).forEach((_)=>parseProjection(_, scope)); // initialize scale references
    scales.forEach((_)=>initScale(_, scope)); // parse data sources
    (0, _vegaUtil.array)(spec.data).forEach((_)=>parseData(_, scope)); // parse scale definitions
    scales.forEach((_)=>parseScale(_, scope)); // parse signal updates
    (preprocessed || signals).forEach((_)=>parseSignalUpdates(_, scope)); // parse axis definitions
    (0, _vegaUtil.array)(spec.axes).forEach((_)=>parseAxis(_, scope)); // parse mark definitions
    (0, _vegaUtil.array)(spec.marks).forEach((_)=>parseMark(_, scope)); // parse legend definitions
    (0, _vegaUtil.array)(spec.legends).forEach((_)=>parseLegend(_, scope)); // parse title, if defined
    if (spec.title) parseTitle(spec.title, scope); // parse collected lambda (anonymous) expressions
    scope.parseLambdas();
    return scope;
}
const rootEncode = (spec)=>extendEncode({
        enter: {
            x: {
                value: 0
            },
            y: {
                value: 0
            }
        },
        update: {
            width: {
                signal: "width"
            },
            height: {
                signal: "height"
            }
        }
    }, spec);
function parseView(spec, scope) {
    const config = scope.config; // add scenegraph root
    const root = ref(scope.root = scope.add(operator())); // parse top-level signal definitions
    const signals = collectSignals(spec, config);
    signals.forEach((_)=>parseSignal(_, scope)); // assign description, event, legend, and locale configuration
    scope.description = spec.description || config.description;
    scope.eventConfig = config.events;
    scope.legends = scope.objectProperty(config.legend && config.legend.layout);
    scope.locale = config.locale; // store root group item
    const input = scope.add(Collect()); // encode root group item
    const encode = scope.add(Encode(parseEncode(rootEncode(spec.encode), GroupMark, FrameRole, spec.style, scope, {
        pulse: ref(input)
    }))); // perform view layout
    const parent = scope.add(ViewLayout({
        layout: scope.objectProperty(spec.layout),
        legends: scope.legends,
        autosize: scope.signalRef("autosize"),
        mark: root,
        pulse: ref(encode)
    }));
    scope.operators.pop(); // parse remainder of specification
    scope.pushState(ref(encode), ref(parent), null);
    parseScope(spec, scope, signals);
    scope.operators.push(parent); // bound / render / sieve root item
    let op = scope.add(Bound({
        mark: root,
        pulse: ref(parent)
    }));
    op = scope.add(Render({
        pulse: ref(op)
    }));
    op = scope.add(Sieve({
        pulse: ref(op)
    })); // track metadata for root item
    scope.addData("root", new DataScope(scope, input, input, op));
    return scope;
}
function signalObject(name, value) {
    return value && value.signal ? {
        name,
        update: value.signal
    } : {
        name,
        value
    };
}
/**
 * Collect top-level signals, merging values as needed. Signals
 * defined in the config signals arrays are added only if that
 * signal is not explicitly defined in the specification.
 * Built-in signals (autosize, background, padding, width, height)
 * receive special treatment. They are initialized using the
 * top-level spec property, or, if undefined in the spec, using
 * the corresponding top-level config property. If this property
 * is a signal reference object, the signal expression maps to the
 * signal 'update' property. If the spec's top-level signal array
 * contains an entry that matches a built-in signal, that entry
 * will be merged with the built-in specification, potentially
 * overwriting existing 'value' or 'update' properties.
 */ function collectSignals(spec, config) {
    const _ = (name)=>value(spec[name], config[name]), signals = [
        signalObject("background", _("background")),
        signalObject("autosize", parseAutosize(_("autosize"))),
        signalObject("padding", parsePadding(_("padding"))),
        signalObject("width", _("width") || 0),
        signalObject("height", _("height") || 0)
    ], pre = signals.reduce((p, s)=>(p[s.name] = s, p), {}), map = {}; // add spec signal array
    (0, _vegaUtil.array)(spec.signals).forEach((s)=>{
        if ((0, _vegaUtil.hasOwnProperty)(pre, s.name)) // merge if built-in signal
        s = (0, _vegaUtil.extend)(pre[s.name], s);
        else // otherwise add to signal list
        signals.push(s);
        map[s.name] = s;
    }); // add config signal array
    (0, _vegaUtil.array)(config.signals).forEach((s)=>{
        if (!(0, _vegaUtil.hasOwnProperty)(map, s.name) && !(0, _vegaUtil.hasOwnProperty)(pre, s.name)) // add to signal list if not already defined
        signals.push(s);
    });
    return signals;
}
function Scope(config, options) {
    this.config = config || {};
    this.options = options || {};
    this.bindings = [];
    this.field = {};
    this.signals = {};
    this.lambdas = {};
    this.scales = {};
    this.events = {};
    this.data = {};
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this.eventConfig = null;
    this.locale = null;
    this._id = 0;
    this._subid = 0;
    this._nextsub = [
        0
    ];
    this._parent = [];
    this._encode = [];
    this._lookup = [];
    this._markpath = [];
}
function Subscope(scope) {
    this.config = scope.config;
    this.options = scope.options;
    this.legends = scope.legends;
    this.field = Object.create(scope.field);
    this.signals = Object.create(scope.signals);
    this.lambdas = Object.create(scope.lambdas);
    this.scales = Object.create(scope.scales);
    this.events = Object.create(scope.events);
    this.data = Object.create(scope.data);
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this._id = 0;
    this._subid = ++scope._nextsub[0];
    this._nextsub = scope._nextsub;
    this._parent = scope._parent.slice();
    this._encode = scope._encode.slice();
    this._lookup = scope._lookup.slice();
    this._markpath = scope._markpath;
}
Scope.prototype = Subscope.prototype = {
    parse (spec) {
        return parseScope(spec, this);
    },
    fork () {
        return new Subscope(this);
    },
    isSubscope () {
        return this._subid > 0;
    },
    toRuntime () {
        this.finish();
        return {
            description: this.description,
            operators: this.operators,
            streams: this.streams,
            updates: this.updates,
            bindings: this.bindings,
            eventConfig: this.eventConfig,
            locale: this.locale
        };
    },
    id () {
        return (this._subid ? this._subid + ":" : 0) + this._id++;
    },
    add (op) {
        this.operators.push(op);
        op.id = this.id(); // if pre-registration references exist, resolve them now
        if (op.refs) {
            op.refs.forEach((ref)=>{
                ref.$ref = op.id;
            });
            op.refs = null;
        }
        return op;
    },
    proxy (op) {
        const vref = op instanceof Entry ? ref(op) : op;
        return this.add(Proxy({
            value: vref
        }));
    },
    addStream (stream) {
        this.streams.push(stream);
        stream.id = this.id();
        return stream;
    },
    addUpdate (update) {
        this.updates.push(update);
        return update;
    },
    // Apply metadata
    finish () {
        let name, ds; // annotate root
        if (this.root) this.root.root = true; // annotate signals
        for(name in this.signals)this.signals[name].signal = name;
         // annotate scales
        for(name in this.scales)this.scales[name].scale = name;
         // annotate data sets
        function annotate(op, name, type) {
            let data, list;
            if (op) {
                data = op.data || (op.data = {});
                list = data[name] || (data[name] = []);
                list.push(type);
            }
        }
        for(name in this.data){
            ds = this.data[name];
            annotate(ds.input, name, "input");
            annotate(ds.output, name, "output");
            annotate(ds.values, name, "values");
            for(const field in ds.index)annotate(ds.index[field], name, "index:" + field);
        }
        return this;
    },
    // ----
    pushState (encode, parent, lookup) {
        this._encode.push(ref(this.add(Sieve({
            pulse: encode
        }))));
        this._parent.push(parent);
        this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);
        this._markpath.push(-1);
    },
    popState () {
        this._encode.pop();
        this._parent.pop();
        this._lookup.pop();
        this._markpath.pop();
    },
    parent () {
        return (0, _vegaUtil.peek)(this._parent);
    },
    encode () {
        return (0, _vegaUtil.peek)(this._encode);
    },
    lookup () {
        return (0, _vegaUtil.peek)(this._lookup);
    },
    markpath () {
        const p = this._markpath;
        return ++p[p.length - 1];
    },
    // ----
    fieldRef (field, name) {
        if ((0, _vegaUtil.isString)(field)) return fieldRef$1(field, name);
        if (!field.signal) (0, _vegaUtil.error)("Unsupported field reference: " + (0, _vegaUtil.stringValue)(field));
        const s = field.signal;
        let f = this.field[s];
        if (!f) {
            const params = {
                name: this.signalRef(s)
            };
            if (name) params.as = name;
            this.field[s] = f = ref(this.add(Field(params)));
        }
        return f;
    },
    compareRef (cmp) {
        let signal = false;
        const check = (_)=>isSignal(_) ? (signal = true, this.signalRef(_.signal)) : isExpr$1(_) ? (signal = true, this.exprRef(_.expr)) : _;
        const fields = (0, _vegaUtil.array)(cmp.field).map(check), orders = (0, _vegaUtil.array)(cmp.order).map(check);
        return signal ? ref(this.add(Compare({
            fields: fields,
            orders: orders
        }))) : compareRef(fields, orders);
    },
    keyRef (fields, flat) {
        let signal = false;
        const check = (_)=>isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;
        const sig = this.signals;
        fields = (0, _vegaUtil.array)(fields).map(check);
        return signal ? ref(this.add(Key({
            fields: fields,
            flat: flat
        }))) : keyRef(fields, flat);
    },
    sortRef (sort) {
        if (!sort) return sort; // including id ensures stable sorting
        const a = aggrField(sort.op, sort.field), o = sort.order || Ascending;
        return o.signal ? ref(this.add(Compare({
            fields: a,
            orders: this.signalRef(o.signal)
        }))) : compareRef(a, o);
    },
    // ----
    event (source, type) {
        const key = source + ":" + type;
        if (!this.events[key]) {
            const id = this.id();
            this.streams.push({
                id: id,
                source: source,
                type: type
            });
            this.events[key] = id;
        }
        return this.events[key];
    },
    // ----
    hasOwnSignal (name) {
        return (0, _vegaUtil.hasOwnProperty)(this.signals, name);
    },
    addSignal (name, value) {
        if (this.hasOwnSignal(name)) (0, _vegaUtil.error)("Duplicate signal name: " + (0, _vegaUtil.stringValue)(name));
        const op = value instanceof Entry ? value : this.add(operator(value));
        return this.signals[name] = op;
    },
    getSignal (name) {
        if (!this.signals[name]) (0, _vegaUtil.error)("Unrecognized signal name: " + (0, _vegaUtil.stringValue)(name));
        return this.signals[name];
    },
    signalRef (s) {
        if (this.signals[s]) return ref(this.signals[s]);
        else if (!(0, _vegaUtil.hasOwnProperty)(this.lambdas, s)) this.lambdas[s] = this.add(operator(null));
        return ref(this.lambdas[s]);
    },
    parseLambdas () {
        const code = Object.keys(this.lambdas);
        for(let i = 0, n = code.length; i < n; ++i){
            const s = code[i], e = (0, _vegaFunctions.parseExpression)(s, this), op = this.lambdas[s];
            op.params = e.$params;
            op.update = e.$expr;
        }
    },
    property (spec) {
        return spec && spec.signal ? this.signalRef(spec.signal) : spec;
    },
    objectProperty (spec) {
        return !spec || !(0, _vegaUtil.isObject)(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
    },
    exprRef (code, name) {
        const params = {
            expr: (0, _vegaFunctions.parseExpression)(code, this)
        };
        if (name) params.expr.$name = name;
        return ref(this.add(Expression(params)));
    },
    addBinding (name, bind) {
        if (!this.bindings) (0, _vegaUtil.error)("Nested signals do not support binding: " + (0, _vegaUtil.stringValue)(name));
        this.bindings.push((0, _vegaUtil.extend)({
            signal: name
        }, bind));
    },
    // ----
    addScaleProj (name, transform) {
        if ((0, _vegaUtil.hasOwnProperty)(this.scales, name)) (0, _vegaUtil.error)("Duplicate scale or projection name: " + (0, _vegaUtil.stringValue)(name));
        this.scales[name] = this.add(transform);
    },
    addScale (name, params) {
        this.addScaleProj(name, Scale(params));
    },
    addProjection (name, params) {
        this.addScaleProj(name, Projection(params));
    },
    getScale (name) {
        if (!this.scales[name]) (0, _vegaUtil.error)("Unrecognized scale name: " + (0, _vegaUtil.stringValue)(name));
        return this.scales[name];
    },
    scaleRef (name) {
        return ref(this.getScale(name));
    },
    scaleType (name) {
        return this.getScale(name).params.type;
    },
    projectionRef (name) {
        return this.scaleRef(name);
    },
    projectionType (name) {
        return this.scaleType(name);
    },
    // ----
    addData (name, dataScope) {
        if ((0, _vegaUtil.hasOwnProperty)(this.data, name)) (0, _vegaUtil.error)("Duplicate data set name: " + (0, _vegaUtil.stringValue)(name));
        return this.data[name] = dataScope;
    },
    getData (name) {
        if (!this.data[name]) (0, _vegaUtil.error)("Undefined data set name: " + (0, _vegaUtil.stringValue)(name));
        return this.data[name];
    },
    addDataPipeline (name, entries) {
        if ((0, _vegaUtil.hasOwnProperty)(this.data, name)) (0, _vegaUtil.error)("Duplicate data set name: " + (0, _vegaUtil.stringValue)(name));
        return this.addData(name, DataScope.fromEntries(this, entries));
    }
};
function propertyLambda(spec) {
    return ((0, _vegaUtil.isArray)(spec) ? arrayLambda : objectLambda)(spec);
}
function arrayLambda(array) {
    const n = array.length;
    let code = "[";
    for(let i = 0; i < n; ++i){
        const value = array[i];
        code += (i > 0 ? "," : "") + ((0, _vegaUtil.isObject)(value) ? value.signal || propertyLambda(value) : (0, _vegaUtil.stringValue)(value));
    }
    return code + "]";
}
function objectLambda(obj) {
    let code = "{", i = 0, key, value;
    for(key in obj){
        value = obj[key];
        code += (++i > 1 ? "," : "") + (0, _vegaUtil.stringValue)(key) + ":" + ((0, _vegaUtil.isObject)(value) ? value.signal || propertyLambda(value) : (0, _vegaUtil.stringValue)(value));
    }
    return code + "}";
}
/**
 * Standard configuration defaults for Vega specification parsing.
 * Users can provide their own (sub-)set of these default values
 * by passing in a config object to the top-level parse method.
 */ function defaults() {
    const defaultFont = "sans-serif", defaultSymbolSize = 30, defaultStrokeWidth = 2, defaultColor = "#4c78a8", black = "#000", gray = "#888", lightGray = "#ddd";
    return {
        // default visualization description
        description: "Vega visualization",
        // default padding around visualization
        padding: 0,
        // default for automatic sizing; options: 'none', 'pad', 'fit'
        // or provide an object (e.g., {'type': 'pad', 'resize': true})
        autosize: "pad",
        // default view background color
        // covers the entire view component
        background: null,
        // default event handling configuration
        // preventDefault for view-sourced event types except 'wheel'
        events: {
            defaults: {
                allow: [
                    "wheel"
                ]
            }
        },
        // defaults for top-level group marks
        // accepts mark properties (fill, stroke, etc)
        // covers the data rectangle within group width/height
        group: null,
        // defaults for basic mark types
        // each subset accepts mark properties (fill, stroke, etc)
        mark: null,
        arc: {
            fill: defaultColor
        },
        area: {
            fill: defaultColor
        },
        image: null,
        line: {
            stroke: defaultColor,
            strokeWidth: defaultStrokeWidth
        },
        path: {
            stroke: defaultColor
        },
        rect: {
            fill: defaultColor
        },
        rule: {
            stroke: black
        },
        shape: {
            stroke: defaultColor
        },
        symbol: {
            fill: defaultColor,
            size: 64
        },
        text: {
            fill: black,
            font: defaultFont,
            fontSize: 11
        },
        trail: {
            fill: defaultColor,
            size: defaultStrokeWidth
        },
        // style definitions
        style: {
            // axis & legend labels
            "guide-label": {
                fill: black,
                font: defaultFont,
                fontSize: 10
            },
            // axis & legend titles
            "guide-title": {
                fill: black,
                font: defaultFont,
                fontSize: 11,
                fontWeight: "bold"
            },
            // headers, including chart title
            "group-title": {
                fill: black,
                font: defaultFont,
                fontSize: 13,
                fontWeight: "bold"
            },
            // chart subtitle
            "group-subtitle": {
                fill: black,
                font: defaultFont,
                fontSize: 12
            },
            // defaults for styled point marks in Vega-Lite
            point: {
                size: defaultSymbolSize,
                strokeWidth: defaultStrokeWidth,
                shape: "circle"
            },
            circle: {
                size: defaultSymbolSize,
                strokeWidth: defaultStrokeWidth
            },
            square: {
                size: defaultSymbolSize,
                strokeWidth: defaultStrokeWidth,
                shape: "square"
            },
            // defaults for styled group marks in Vega-Lite
            cell: {
                fill: "transparent",
                stroke: lightGray
            }
        },
        // defaults for title
        title: {
            orient: "top",
            anchor: "middle",
            offset: 4,
            subtitlePadding: 3
        },
        // defaults for axes
        axis: {
            minExtent: 0,
            maxExtent: 200,
            bandPosition: 0.5,
            domain: true,
            domainWidth: 1,
            domainColor: gray,
            grid: false,
            gridWidth: 1,
            gridColor: lightGray,
            labels: true,
            labelAngle: 0,
            labelLimit: 180,
            labelOffset: 0,
            labelPadding: 2,
            ticks: true,
            tickColor: gray,
            tickOffset: 0,
            tickRound: true,
            tickSize: 5,
            tickWidth: 1,
            titlePadding: 4
        },
        // correction for centering bias
        axisBand: {
            tickOffset: -0.5
        },
        // defaults for cartographic projection
        projection: {
            type: "mercator"
        },
        // defaults for legends
        legend: {
            orient: "right",
            padding: 0,
            gridAlign: "each",
            columnPadding: 10,
            rowPadding: 2,
            symbolDirection: "vertical",
            gradientDirection: "vertical",
            gradientLength: 200,
            gradientThickness: 16,
            gradientStrokeColor: lightGray,
            gradientStrokeWidth: 0,
            gradientLabelOffset: 2,
            labelAlign: "left",
            labelBaseline: "middle",
            labelLimit: 160,
            labelOffset: 4,
            labelOverlap: true,
            symbolLimit: 30,
            symbolType: "circle",
            symbolSize: 100,
            symbolOffset: 0,
            symbolStrokeWidth: 1.5,
            symbolBaseFillColor: "transparent",
            symbolBaseStrokeColor: gray,
            titleLimit: 180,
            titleOrient: "top",
            titlePadding: 5,
            layout: {
                offset: 18,
                direction: "horizontal",
                left: {
                    direction: "vertical"
                },
                right: {
                    direction: "vertical"
                }
            }
        },
        // defaults for scale ranges
        range: {
            category: {
                scheme: "tableau10"
            },
            ordinal: {
                scheme: "blues"
            },
            heatmap: {
                scheme: "yellowgreenblue"
            },
            ramp: {
                scheme: "blues"
            },
            diverging: {
                scheme: "blueorange",
                extent: [
                    1,
                    0
                ]
            },
            symbol: [
                "circle",
                "square",
                "triangle-up",
                "cross",
                "diamond",
                "triangle-right",
                "triangle-down",
                "triangle-left"
            ]
        }
    };
}
function parse(spec, config, options) {
    if (!(0, _vegaUtil.isObject)(spec)) (0, _vegaUtil.error)("Input Vega specification must be an object.");
    config = (0, _vegaUtil.mergeConfig)(defaults(), config, spec.config);
    return parseView(spec, new Scope(config, options)).toRuntime();
}

},{"vega-util":"bApja","vega-functions":"iuqsd","vega-event-selector":"fFzhr","vega-scale":"bEydG","vega-dataflow":"3NitK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fFzhr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseSelector", ()=>eventSelector);
const VIEW = "view", LBRACK = "[", RBRACK = "]", LBRACE = "{", RBRACE = "}", COLON = ":", COMMA = ",", NAME = "@", GT = ">", ILLEGAL = /[[\]{}]/, DEFAULT_MARKS = {
    "*": 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
};
let DEFAULT_SOURCE, MARKS;
/**
 * Parse an event selector string.
 * Returns an array of event stream definitions.
 */ function eventSelector(selector, source, marks) {
    DEFAULT_SOURCE = source || VIEW;
    MARKS = marks || DEFAULT_MARKS;
    return parseMerge(selector.trim()).map(parseSelector);
}
function isMarkType(type) {
    return MARKS[type];
}
function find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count = 0, c;
    for(; i < n; ++i){
        c = s[i];
        if (!count && c === endChar) return i;
        else if (popChar && popChar.indexOf(c) >= 0) --count;
        else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }
    return i;
}
function parseMerge(s) {
    const output = [], n = s.length;
    let start = 0, i = 0;
    while(i < n){
        i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
        output.push(s.substring(start, i).trim());
        start = ++i;
    }
    if (output.length === 0) throw "Empty event selector: " + s;
    return output;
}
function parseSelector(s) {
    return s[0] === "[" ? parseBetween(s) : parseStream(s);
}
function parseBetween(s) {
    const n = s.length;
    let i = 1, b;
    i = find(s, i, RBRACK, LBRACK, RBRACK);
    if (i === n) throw "Empty between selector: " + s;
    b = parseMerge(s.substring(1, i));
    if (b.length !== 2) throw "Between selector must have two elements: " + s;
    s = s.slice(i + 1).trim();
    if (s[0] !== GT) throw "Expected '>' after between selector: " + s;
    b = b.map(parseSelector);
    const stream = parseSelector(s.slice(1).trim());
    if (stream.between) return {
        between: b,
        stream: stream
    };
    else stream.between = b;
    return stream;
}
function parseStream(s) {
    const stream = {
        source: DEFAULT_SOURCE
    }, source = [];
    let throttle = [
        0,
        0
    ], markname = 0, start = 0, n = s.length, i = 0, j, filter; // extract throttle from end
    if (s[n - 1] === RBRACE) {
        i = s.lastIndexOf(LBRACE);
        if (i >= 0) {
            try {
                throttle = parseThrottle(s.substring(i + 1, n - 1));
            } catch (e) {
                throw "Invalid throttle specification: " + s;
            }
            s = s.slice(0, i).trim();
            n = s.length;
        } else throw "Unmatched right brace: " + s;
        i = 0;
    }
    if (!n) throw s; // set name flag based on first char
    if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector
    j = find(s, i, COLON);
    if (j < n) {
        source.push(s.substring(start, j).trim());
        start = i = ++j;
    } // extract remaining part of stream selector
    i = find(s, i, LBRACK);
    if (i === n) source.push(s.substring(start, n).trim());
    else {
        source.push(s.substring(start, i).trim());
        filter = [];
        start = ++i;
        if (start === n) throw "Unmatched left bracket: " + s;
    } // extract filters
    while(i < n){
        i = find(s, i, RBRACK);
        if (i === n) throw "Unmatched left bracket: " + s;
        filter.push(s.substring(start, i).trim());
        if (i < n - 1 && s[++i] !== LBRACK) throw "Expected left bracket: " + s;
        start = ++i;
    } // marshall event stream specification
    if (!(n = source.length) || ILLEGAL.test(source[n - 1])) throw "Invalid event selector: " + s;
    if (n > 1) {
        stream.type = source[1];
        if (markname) stream.markname = source[0].slice(1);
        else if (isMarkType(source[0])) stream.marktype = source[0];
        else stream.source = source[0];
    } else stream.type = source[0];
    if (stream.type.slice(-1) === "!") {
        stream.consume = true;
        stream.type = stream.type.slice(0, -1);
    }
    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
}
function parseThrottle(s) {
    const a = s.split(COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map((_)=>{
        const x = +_;
        if (x !== x) throw s;
        return x;
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2l1no":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ASTNode", ()=>ASTNode);
parcelHelpers.export(exports, "ArrayExpression", ()=>ArrayExpression);
parcelHelpers.export(exports, "BinaryExpression", ()=>BinaryExpression);
parcelHelpers.export(exports, "CallExpression", ()=>CallExpression);
parcelHelpers.export(exports, "ConditionalExpression", ()=>ConditionalExpression);
parcelHelpers.export(exports, "Identifier", ()=>Identifier);
parcelHelpers.export(exports, "Literal", ()=>Literal);
parcelHelpers.export(exports, "LogicalExpression", ()=>LogicalExpression);
parcelHelpers.export(exports, "MemberExpression", ()=>MemberExpression);
parcelHelpers.export(exports, "ObjectExpression", ()=>ObjectExpression);
parcelHelpers.export(exports, "Property", ()=>Property);
parcelHelpers.export(exports, "RawCode", ()=>RawCode);
parcelHelpers.export(exports, "UnaryExpression", ()=>UnaryExpression);
parcelHelpers.export(exports, "codegen", ()=>codegen);
parcelHelpers.export(exports, "constants", ()=>Constants);
parcelHelpers.export(exports, "functions", ()=>Functions);
parcelHelpers.export(exports, "parse", ()=>parser);
var _vegaUtil = require("vega-util");
const RawCode = "RawCode";
const Literal = "Literal";
const Property = "Property";
const Identifier = "Identifier";
const ArrayExpression = "ArrayExpression";
const BinaryExpression = "BinaryExpression";
const CallExpression = "CallExpression";
const ConditionalExpression = "ConditionalExpression";
const LogicalExpression = "LogicalExpression";
const MemberExpression = "MemberExpression";
const ObjectExpression = "ObjectExpression";
const UnaryExpression = "UnaryExpression";
function ASTNode(type) {
    this.type = type;
}
ASTNode.prototype.visit = function(visitor) {
    let c, i, n;
    if (visitor(this)) return 1;
    for(c = children(this), i = 0, n = c.length; i < n; ++i){
        if (c[i].visit(visitor)) return 1;
    }
};
function children(node) {
    switch(node.type){
        case ArrayExpression:
            return node.elements;
        case BinaryExpression:
        case LogicalExpression:
            return [
                node.left,
                node.right
            ];
        case CallExpression:
            return [
                node.callee
            ].concat(node.arguments);
        case ConditionalExpression:
            return [
                node.test,
                node.consequent,
                node.alternate
            ];
        case MemberExpression:
            return [
                node.object,
                node.property
            ];
        case ObjectExpression:
            return node.properties;
        case Property:
            return [
                node.key,
                node.value
            ];
        case UnaryExpression:
            return [
                node.argument
            ];
        case Identifier:
        case Literal:
        case RawCode:
        default:
            return [];
    }
}
/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ var TokenName, source, index, length, lookahead;
var TokenBooleanLiteral = 1, TokenEOF = 2, TokenIdentifier = 3, TokenKeyword = 4, TokenNullLiteral = 5, TokenNumericLiteral = 6, TokenPunctuator = 7, TokenStringLiteral = 8, TokenRegularExpression = 9;
TokenName = {};
TokenName[TokenBooleanLiteral] = "Boolean";
TokenName[TokenEOF] = "<end>";
TokenName[TokenIdentifier] = "Identifier";
TokenName[TokenKeyword] = "Keyword";
TokenName[TokenNullLiteral] = "Null";
TokenName[TokenNumericLiteral] = "Numeric";
TokenName[TokenPunctuator] = "Punctuator";
TokenName[TokenStringLiteral] = "String";
TokenName[TokenRegularExpression] = "RegularExpression";
var SyntaxArrayExpression = "ArrayExpression", SyntaxBinaryExpression = "BinaryExpression", SyntaxCallExpression = "CallExpression", SyntaxConditionalExpression = "ConditionalExpression", SyntaxIdentifier = "Identifier", SyntaxLiteral = "Literal", SyntaxLogicalExpression = "LogicalExpression", SyntaxMemberExpression = "MemberExpression", SyntaxObjectExpression = "ObjectExpression", SyntaxProperty = "Property", SyntaxUnaryExpression = "UnaryExpression"; // Error messages should be identical to V8.
var MessageUnexpectedToken = "Unexpected token %0", MessageUnexpectedNumber = "Unexpected number", MessageUnexpectedString = "Unexpected string", MessageUnexpectedIdentifier = "Unexpected identifier", MessageUnexpectedReserved = "Unexpected reserved word", MessageUnexpectedEOS = "Unexpected end of input", MessageInvalidRegExp = "Invalid regular expression", MessageUnterminatedRegExp = "Invalid regular expression: missing /", MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.", MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
var ILLEGAL = "ILLEGAL", DISABLED = "Disabled."; // See also tools/generate-unicode-regex.py.
var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), // eslint-disable-next-line no-misleading-character-class
RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.
function assert(condition, message) {
    /* istanbul ignore next */ if (!condition) throw new Error("ASSERT: " + message);
}
function isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
}
function isHexDigit(ch) {
    return "0123456789abcdefABCDEF".indexOf(ch) >= 0;
}
function isOctalDigit(ch) {
    return "01234567".indexOf(ch) >= 0;
} // 7.2 White Space
function isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [
        0x1680,
        0x180E,
        0x2000,
        0x2001,
        0x2002,
        0x2003,
        0x2004,
        0x2005,
        0x2006,
        0x2007,
        0x2008,
        0x2009,
        0x200A,
        0x202F,
        0x205F,
        0x3000,
        0xFEFF
    ].indexOf(ch) >= 0;
} // 7.3 Line Terminators
function isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
} // 7.6 Identifier Names and Identifiers
function isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch === 0x5C || ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}
function isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch >= 0x30 && ch <= 0x39 || ch === 0x5C || ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
} // 7.6.1.1 Keywords
const keywords = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
};
function skipComment() {
    while(index < length){
        const ch = source.charCodeAt(index);
        if (isWhiteSpace(ch) || isLineTerminator(ch)) ++index;
        else break;
    }
}
function scanHexEscape(prefix) {
    var i, len, ch, code = 0;
    len = prefix === "u" ? 4 : 2;
    for(i = 0; i < len; ++i)if (index < length && isHexDigit(source[index])) {
        ch = source[index++];
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    } else throwError({}, MessageUnexpectedToken, ILLEGAL);
    return String.fromCharCode(code);
}
function scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = source[index];
    code = 0; // At least, one hex digit is required.
    if (ch === "}") throwError({}, MessageUnexpectedToken, ILLEGAL);
    while(index < length){
        ch = source[index++];
        if (!isHexDigit(ch)) break;
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    }
    if (code > 0x10FFFF || ch !== "}") throwError({}, MessageUnexpectedToken, ILLEGAL);
     // UTF-16 Encoding
    if (code <= 0xFFFF) return String.fromCharCode(code);
    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
}
function getEscapedIdentifier() {
    var ch, id;
    ch = source.charCodeAt(index++);
    id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
        if (source.charCodeAt(index) !== 0x75) throwError({}, MessageUnexpectedToken, ILLEGAL);
        ++index;
        ch = scanHexEscape("u");
        if (!ch || ch === "\\" || !isIdentifierStart(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
        id = ch;
    }
    while(index < length){
        ch = source.charCodeAt(index);
        if (!isIdentifierPart(ch)) break;
        ++index;
        id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            id = id.substr(0, id.length - 1);
            if (source.charCodeAt(index) !== 0x75) throwError({}, MessageUnexpectedToken, ILLEGAL);
            ++index;
            ch = scanHexEscape("u");
            if (!ch || ch === "\\" || !isIdentifierPart(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
            id += ch;
        }
    }
    return id;
}
function getIdentifier() {
    var start, ch;
    start = index++;
    while(index < length){
        ch = source.charCodeAt(index);
        if (ch === 0x5C) {
            // Blackslash (U+005C) marks Unicode escape sequence.
            index = start;
            return getEscapedIdentifier();
        }
        if (isIdentifierPart(ch)) ++index;
        else break;
    }
    return source.slice(start, index);
}
function scanIdentifier() {
    var start, id, type;
    start = index; // Backslash (U+005C) starts an escaped character.
    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) type = TokenIdentifier;
    else if (keywords.hasOwnProperty(id)) // eslint-disable-line no-prototype-builtins
    type = TokenKeyword;
    else if (id === "null") type = TokenNullLiteral;
    else if (id === "true" || id === "false") type = TokenBooleanLiteral;
    else type = TokenIdentifier;
    return {
        type: type,
        value: id,
        start: start,
        end: index
    };
} // 7.7 Punctuators
function scanPunctuator() {
    var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2, ch3, ch4;
    switch(code){
        // Check for most common single-character punctuators.
        case 0x2E:
        case 0x28:
        case 0x29:
        case 0x3B:
        case 0x2C:
        case 0x7B:
        case 0x7D:
        case 0x5B:
        case 0x5D:
        case 0x3A:
        case 0x3F:
        case 0x7E:
            // ~
            ++index;
            return {
                type: TokenPunctuator,
                value: String.fromCharCode(code),
                start: start,
                end: index
            };
        default:
            code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) switch(code){
                case 0x2B:
                case 0x2D:
                case 0x2F:
                case 0x3C:
                case 0x3E:
                case 0x5E:
                case 0x7C:
                case 0x25:
                case 0x26:
                case 0x2A:
                    // *
                    index += 2;
                    return {
                        type: TokenPunctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        start: start,
                        end: index
                    };
                case 0x21:
                case 0x3D:
                    // =
                    index += 2; // !== and ===
                    if (source.charCodeAt(index) === 0x3D) ++index;
                    return {
                        type: TokenPunctuator,
                        value: source.slice(start, index),
                        start: start,
                        end: index
                    };
            }
    } // 4-character punctuator: >>>=
    ch4 = source.substr(index, 4);
    if (ch4 === ">>>=") {
        index += 4;
        return {
            type: TokenPunctuator,
            value: ch4,
            start: start,
            end: index
        };
    } // 3-character punctuators: === !== >>> <<= >>=
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
        index += 3;
        return {
            type: TokenPunctuator,
            value: ch3,
            start: start,
            end: index
        };
    } // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".indexOf(ch1) >= 0 || ch2 === "=>") {
        index += 2;
        return {
            type: TokenPunctuator,
            value: ch2,
            start: start,
            end: index
        };
    }
    if (ch2 === "//") throwError({}, MessageUnexpectedToken, ILLEGAL);
     // 1-character punctuators: < > = ! + - * % & | ^ /
    if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
        ++index;
        return {
            type: TokenPunctuator,
            value: ch1,
            start: start,
            end: index
        };
    }
    throwError({}, MessageUnexpectedToken, ILLEGAL);
} // 7.8.3 Numeric Literals
function scanHexLiteral(start) {
    let number = "";
    while(index < length){
        if (!isHexDigit(source[index])) break;
        number += source[index++];
    }
    if (number.length === 0) throwError({}, MessageUnexpectedToken, ILLEGAL);
    if (isIdentifierStart(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseInt("0x" + number, 16),
        start: start,
        end: index
    };
}
function scanOctalLiteral(start) {
    let number = "0" + source[index++];
    while(index < length){
        if (!isOctalDigit(source[index])) break;
        number += source[index++];
    }
    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: index
    };
}
function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = index;
    number = "";
    if (ch !== ".") {
        number = source[index++];
        ch = source[index]; // Hex number starts with '0x'.
        // Octal number starts with '0'.
        if (number === "0") {
            if (ch === "x" || ch === "X") {
                ++index;
                return scanHexLiteral(start);
            }
            if (isOctalDigit(ch)) return scanOctalLiteral(start);
             // decimal number starts with '0' such as '09' is illegal.
            if (ch && isDecimalDigit(ch.charCodeAt(0))) throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        ch = source[index];
    }
    if (ch === ".") {
        number += source[index++];
        while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        ch = source[index];
    }
    if (ch === "e" || ch === "E") {
        number += source[index++];
        ch = source[index];
        if (ch === "+" || ch === "-") number += source[index++];
        if (isDecimalDigit(source.charCodeAt(index))) while(isDecimalDigit(source.charCodeAt(index)))number += source[index++];
        else throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if (isIdentifierStart(source.charCodeAt(index))) throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: index
    };
} // 7.8.4 String Literals
function scanStringLiteral() {
    var str = "", quote, start, ch, code, octal = false;
    quote = source[index];
    assert(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = index;
    ++index;
    while(index < length){
        ch = source[index++];
        if (ch === quote) {
            quote = "";
            break;
        } else if (ch === "\\") {
            ch = source[index++];
            if (!ch || !isLineTerminator(ch.charCodeAt(0))) switch(ch){
                case "u":
                case "x":
                    if (source[index] === "{") {
                        ++index;
                        str += scanUnicodeCodePointEscape();
                    } else str += scanHexEscape(ch);
                    break;
                case "n":
                    str += "\n";
                    break;
                case "r":
                    str += "\r";
                    break;
                case "t":
                    str += "	";
                    break;
                case "b":
                    str += "\b";
                    break;
                case "f":
                    str += "\f";
                    break;
                case "v":
                    str += "\v";
                    break;
                default:
                    if (isOctalDigit(ch)) {
                        code = "01234567".indexOf(ch); // \0 is not octal escape sequence
                        if (code !== 0) octal = true;
                        if (index < length && isOctalDigit(source[index])) {
                            octal = true;
                            code = code * 8 + "01234567".indexOf(source[index++]); // 3 digits are only allowed when string starts
                            // with 0, 1, 2, 3
                            if ("0123".indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) code = code * 8 + "01234567".indexOf(source[index++]);
                        }
                        str += String.fromCharCode(code);
                    } else str += ch;
                    break;
            }
            else if (ch === "\r" && source[index] === "\n") ++index;
        } else if (isLineTerminator(ch.charCodeAt(0))) break;
        else str += ch;
    }
    if (quote !== "") throwError({}, MessageUnexpectedToken, ILLEGAL);
    return {
        type: TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: index
    };
}
function testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.indexOf("u") >= 0) // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1)=>{
        if (parseInt($1, 16) <= 0x10FFFF) return "x";
        throwError({}, MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
     // First, detect invalid regular expressions.
    try {
        new RegExp(tmp);
    } catch (e) {
        throwError({}, MessageInvalidRegExp);
    } // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
        return new RegExp(pattern, flags);
    } catch (exception) {
        return null;
    }
}
function scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = source[index];
    assert(ch === "/", "Regular expression literal must start with a slash");
    str = source[index++];
    classMarker = false;
    terminated = false;
    while(index < length){
        ch = source[index++];
        str += ch;
        if (ch === "\\") {
            ch = source[index++]; // ECMA-262 7.8.5
            if (isLineTerminator(ch.charCodeAt(0))) throwError({}, MessageUnterminatedRegExp);
            str += ch;
        } else if (isLineTerminator(ch.charCodeAt(0))) throwError({}, MessageUnterminatedRegExp);
        else if (classMarker) {
            if (ch === "]") classMarker = false;
        } else {
            if (ch === "/") {
                terminated = true;
                break;
            } else if (ch === "[") classMarker = true;
        }
    }
    if (!terminated) throwError({}, MessageUnterminatedRegExp);
     // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
        value: body,
        literal: str
    };
}
function scanRegExpFlags() {
    var ch, str, flags;
    str = "";
    flags = "";
    while(index < length){
        ch = source[index];
        if (!isIdentifierPart(ch.charCodeAt(0))) break;
        ++index;
        if (ch === "\\" && index < length) throwError({}, MessageUnexpectedToken, ILLEGAL);
        else {
            flags += ch;
            str += ch;
        }
    }
    if (flags.search(/[^gimuy]/g) >= 0) throwError({}, MessageInvalidRegExp, flags);
    return {
        value: flags,
        literal: str
    };
}
function scanRegExp() {
    var start, body, flags, value;
    lookahead = null;
    skipComment();
    start = index;
    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value = testRegExp(body.value, flags.value);
    return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
            pattern: body.value,
            flags: flags.value
        },
        start: start,
        end: index
    };
}
function isIdentifierName(token) {
    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
}
function advance() {
    skipComment();
    if (index >= length) return {
        type: TokenEOF,
        start: index,
        end: index
    };
    const ch = source.charCodeAt(index);
    if (isIdentifierStart(ch)) return scanIdentifier();
     // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) return scanPunctuator();
     // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) return scanStringLiteral();
     // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
        if (isDecimalDigit(source.charCodeAt(index + 1))) return scanNumericLiteral();
        return scanPunctuator();
    }
    if (isDecimalDigit(ch)) return scanNumericLiteral();
    return scanPunctuator();
}
function lex() {
    const token = lookahead;
    index = token.end;
    lookahead = advance();
    index = token.end;
    return token;
}
function peek() {
    const pos = index;
    lookahead = advance();
    index = pos;
}
function finishArrayExpression(elements) {
    const node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
}
function finishBinaryExpression(operator, left, right) {
    const node = new ASTNode(operator === "||" || operator === "&&" ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
}
function finishCallExpression(callee, args) {
    const node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
}
function finishConditionalExpression(test, consequent, alternate) {
    const node = new ASTNode(SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
}
function finishIdentifier(name) {
    const node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
}
function finishLiteral(token) {
    const node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source.slice(token.start, token.end);
    if (token.regex) {
        if (node.raw === "//") node.raw = "/(?:)/";
        node.regex = token.regex;
    }
    return node;
}
function finishMemberExpression(accessor, object, property) {
    const node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor === "[";
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
}
function finishObjectExpression(properties) {
    const node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
}
function finishProperty(kind, key, value) {
    const node = new ASTNode(SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
}
function finishUnaryExpression(operator, argument) {
    const node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
} // Throw an exception
function throwError(token, messageFormat) {
    var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index)=>{
        assert(index < args.length, "Message reference must be in range");
        return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
} // Throw an exception because of the token.
function throwUnexpected(token) {
    if (token.type === TokenEOF) throwError(token, MessageUnexpectedEOS);
    if (token.type === TokenNumericLiteral) throwError(token, MessageUnexpectedNumber);
    if (token.type === TokenStringLiteral) throwError(token, MessageUnexpectedString);
    if (token.type === TokenIdentifier) throwError(token, MessageUnexpectedIdentifier);
    if (token.type === TokenKeyword) throwError(token, MessageUnexpectedReserved);
     // BooleanLiteral, NullLiteral, or Punctuator.
    throwError(token, MessageUnexpectedToken, token.value);
} // Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.
function expect(value) {
    const token = lex();
    if (token.type !== TokenPunctuator || token.value !== value) throwUnexpected(token);
} // Return true if the next token matches the specified punctuator.
function match(value) {
    return lookahead.type === TokenPunctuator && lookahead.value === value;
} // Return true if the next token matches the specified keyword
function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
} // 11.1.4 Array Initialiser
function parseArrayInitialiser() {
    const elements = [];
    index = lookahead.start;
    expect("[");
    while(!match("]"))if (match(",")) {
        lex();
        elements.push(null);
    } else {
        elements.push(parseConditionalExpression());
        if (!match("]")) expect(",");
    }
    lex();
    return finishArrayExpression(elements);
} // 11.1.5 Object Initialiser
function parseObjectPropertyKey() {
    index = lookahead.start;
    const token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.
    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
        if (token.octal) throwError(token, MessageStrictOctalLiteral);
        return finishLiteral(token);
    }
    return finishIdentifier(token.value);
}
function parseObjectProperty() {
    var token, key, id, value;
    index = lookahead.start;
    token = lookahead;
    if (token.type === TokenIdentifier) {
        id = parseObjectPropertyKey();
        expect(":");
        value = parseConditionalExpression();
        return finishProperty("init", id, value);
    }
    if (token.type === TokenEOF || token.type === TokenPunctuator) throwUnexpected(token);
    else {
        key = parseObjectPropertyKey();
        expect(":");
        value = parseConditionalExpression();
        return finishProperty("init", key, value);
    }
}
function parseObjectInitialiser() {
    var properties = [], property, name, key, map = {}, toString = String;
    index = lookahead.start;
    expect("{");
    while(!match("}")){
        property = parseObjectProperty();
        if (property.key.type === SyntaxIdentifier) name = property.key.name;
        else name = toString(property.key.value);
        key = "$" + name;
        if (Object.prototype.hasOwnProperty.call(map, key)) throwError({}, MessageStrictDuplicateProperty);
        else map[key] = true;
        properties.push(property);
        if (!match("}")) expect(",");
    }
    expect("}");
    return finishObjectExpression(properties);
} // 11.1.6 The Grouping Operator
function parseGroupExpression() {
    expect("(");
    const expr = parseExpression();
    expect(")");
    return expr;
} // 11.1 Primary Expressions
const legalKeywords = {
    "if": 1
};
function parsePrimaryExpression() {
    var type, token, expr;
    if (match("(")) return parseGroupExpression();
    if (match("[")) return parseArrayInitialiser();
    if (match("{")) return parseObjectInitialiser();
    type = lookahead.type;
    index = lookahead.start;
    if (type === TokenIdentifier || legalKeywords[lookahead.value]) expr = finishIdentifier(lex().value);
    else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
        if (lookahead.octal) throwError(lookahead, MessageStrictOctalLiteral);
        expr = finishLiteral(lex());
    } else if (type === TokenKeyword) throw new Error(DISABLED);
    else if (type === TokenBooleanLiteral) {
        token = lex();
        token.value = token.value === "true";
        expr = finishLiteral(token);
    } else if (type === TokenNullLiteral) {
        token = lex();
        token.value = null;
        expr = finishLiteral(token);
    } else if (match("/") || match("/=")) {
        expr = finishLiteral(scanRegExp());
        peek();
    } else throwUnexpected(lex());
    return expr;
} // 11.2 Left-Hand-Side Expressions
function parseArguments() {
    const args = [];
    expect("(");
    if (!match(")")) while(index < length){
        args.push(parseConditionalExpression());
        if (match(")")) break;
        expect(",");
    }
    expect(")");
    return args;
}
function parseNonComputedProperty() {
    index = lookahead.start;
    const token = lex();
    if (!isIdentifierName(token)) throwUnexpected(token);
    return finishIdentifier(token.value);
}
function parseNonComputedMember() {
    expect(".");
    return parseNonComputedProperty();
}
function parseComputedMember() {
    expect("[");
    const expr = parseExpression();
    expect("]");
    return expr;
}
function parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = parsePrimaryExpression();
    for(;;){
        if (match(".")) {
            property = parseNonComputedMember();
            expr = finishMemberExpression(".", expr, property);
        } else if (match("(")) {
            args = parseArguments();
            expr = finishCallExpression(expr, args);
        } else if (match("[")) {
            property = parseComputedMember();
            expr = finishMemberExpression("[", expr, property);
        } else break;
    }
    return expr;
} // 11.3 Postfix Expressions
function parsePostfixExpression() {
    const expr = parseLeftHandSideExpressionAllowCall();
    if (lookahead.type === TokenPunctuator) {
        if (match("++") || match("--")) throw new Error(DISABLED);
    }
    return expr;
} // 11.4 Unary Operators
function parseUnaryExpression() {
    var token, expr;
    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) expr = parsePostfixExpression();
    else if (match("++") || match("--")) throw new Error(DISABLED);
    else if (match("+") || match("-") || match("~") || match("!")) {
        token = lex();
        expr = parseUnaryExpression();
        expr = finishUnaryExpression(token.value, expr);
    } else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) throw new Error(DISABLED);
    else expr = parsePostfixExpression();
    return expr;
}
function binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) return 0;
    switch(token.value){
        case "||":
            prec = 1;
            break;
        case "&&":
            prec = 2;
            break;
        case "|":
            prec = 3;
            break;
        case "^":
            prec = 4;
            break;
        case "&":
            prec = 5;
            break;
        case "==":
        case "!=":
        case "===":
        case "!==":
            prec = 6;
            break;
        case "<":
        case ">":
        case "<=":
        case ">=":
        case "instanceof":
        case "in":
            prec = 7;
            break;
        case "<<":
        case ">>":
        case ">>>":
            prec = 8;
            break;
        case "+":
        case "-":
            prec = 9;
            break;
        case "*":
        case "/":
        case "%":
            prec = 11;
            break;
    }
    return prec;
} // 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators
function parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = lookahead;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);
    if (prec === 0) return left;
    token.prec = prec;
    lex();
    markers = [
        marker,
        lookahead
    ];
    right = parseUnaryExpression();
    stack = [
        left,
        token,
        right
    ];
    while((prec = binaryPrecedence(lookahead)) > 0){
        // Reduce: make a binary expression from the three topmost entries.
        while(stack.length > 2 && prec <= stack[stack.length - 2].prec){
            right = stack.pop();
            operator = stack.pop().value;
            left = stack.pop();
            markers.pop();
            expr = finishBinaryExpression(operator, left, right);
            stack.push(expr);
        } // Shift.
        token = lex();
        token.prec = prec;
        stack.push(token);
        markers.push(lookahead);
        expr = parseUnaryExpression();
        stack.push(expr);
    } // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while(i > 1){
        markers.pop();
        expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
    }
    return expr;
} // 11.12 Conditional Operator
function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();
    if (match("?")) {
        lex();
        consequent = parseConditionalExpression();
        expect(":");
        alternate = parseConditionalExpression();
        expr = finishConditionalExpression(expr, consequent, alternate);
    }
    return expr;
} // 11.14 Comma Operator
function parseExpression() {
    const expr = parseConditionalExpression();
    if (match(",")) throw new Error(DISABLED); // no sequence expressions
    return expr;
}
function parser(code) {
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    peek();
    const expr = parseExpression();
    if (lookahead.type !== TokenEOF) throw new Error("Unexpect token after expression.");
    return expr;
}
var Constants = {
    NaN: "NaN",
    E: "Math.E",
    LN2: "Math.LN2",
    LN10: "Math.LN10",
    LOG2E: "Math.LOG2E",
    LOG10E: "Math.LOG10E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    MIN_VALUE: "Number.MIN_VALUE",
    MAX_VALUE: "Number.MAX_VALUE"
};
function Functions(codegen) {
    function fncall(name, args, cast, type) {
        let obj = codegen(args[0]);
        if (cast) {
            obj = cast + "(" + obj + ")";
            if (cast.lastIndexOf("new ", 0) === 0) obj = "(" + obj + ")";
        }
        return obj + "." + name + (type < 0 ? "" : type === 0 ? "()" : "(" + args.slice(1).map(codegen).join(",") + ")");
    }
    function fn(name, cast, type) {
        return (args)=>fncall(name, args, cast, type);
    }
    const DATE = "new Date", STRING = "String", REGEXP = "RegExp";
    return {
        // MATH functions
        isNaN: "Number.isNaN",
        isFinite: "Number.isFinite",
        abs: "Math.abs",
        acos: "Math.acos",
        asin: "Math.asin",
        atan: "Math.atan",
        atan2: "Math.atan2",
        ceil: "Math.ceil",
        cos: "Math.cos",
        exp: "Math.exp",
        floor: "Math.floor",
        log: "Math.log",
        max: "Math.max",
        min: "Math.min",
        pow: "Math.pow",
        random: "Math.random",
        round: "Math.round",
        sin: "Math.sin",
        sqrt: "Math.sqrt",
        tan: "Math.tan",
        clamp: function(args) {
            if (args.length < 3) (0, _vegaUtil.error)("Missing arguments to clamp function.");
            if (args.length > 3) (0, _vegaUtil.error)("Too many arguments to clamp function.");
            const a = args.map(codegen);
            return "Math.max(" + a[1] + ", Math.min(" + a[2] + "," + a[0] + "))";
        },
        // DATE functions
        now: "Date.now",
        utc: "Date.UTC",
        datetime: DATE,
        date: fn("getDate", DATE, 0),
        day: fn("getDay", DATE, 0),
        year: fn("getFullYear", DATE, 0),
        month: fn("getMonth", DATE, 0),
        hours: fn("getHours", DATE, 0),
        minutes: fn("getMinutes", DATE, 0),
        seconds: fn("getSeconds", DATE, 0),
        milliseconds: fn("getMilliseconds", DATE, 0),
        time: fn("getTime", DATE, 0),
        timezoneoffset: fn("getTimezoneOffset", DATE, 0),
        utcdate: fn("getUTCDate", DATE, 0),
        utcday: fn("getUTCDay", DATE, 0),
        utcyear: fn("getUTCFullYear", DATE, 0),
        utcmonth: fn("getUTCMonth", DATE, 0),
        utchours: fn("getUTCHours", DATE, 0),
        utcminutes: fn("getUTCMinutes", DATE, 0),
        utcseconds: fn("getUTCSeconds", DATE, 0),
        utcmilliseconds: fn("getUTCMilliseconds", DATE, 0),
        // sequence functions
        length: fn("length", null, -1),
        // STRING functions
        parseFloat: "parseFloat",
        parseInt: "parseInt",
        upper: fn("toUpperCase", STRING, 0),
        lower: fn("toLowerCase", STRING, 0),
        substring: fn("substring", STRING),
        split: fn("split", STRING),
        trim: fn("trim", STRING, 0),
        // REGEXP functions
        regexp: REGEXP,
        test: fn("test", REGEXP),
        // Control Flow functions
        if: function(args) {
            if (args.length < 3) (0, _vegaUtil.error)("Missing arguments to if function.");
            if (args.length > 3) (0, _vegaUtil.error)("Too many arguments to if function.");
            const a = args.map(codegen);
            return "(" + a[0] + "?" + a[1] + ":" + a[2] + ")";
        }
    };
}
function stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === "'" && s[n] === "'") ? s.slice(1, -1) : s;
}
function codegen(opt) {
    opt = opt || {};
    const allowed = opt.allowed ? (0, _vegaUtil.toSet)(opt.allowed) : {}, forbidden = opt.forbidden ? (0, _vegaUtil.toSet)(opt.forbidden) : {}, constants = opt.constants || Constants, functions = (opt.functions || Functions)(visit), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = (0, _vegaUtil.isFunction)(globalvar) ? globalvar : (id)=>"".concat(globalvar, '["').concat(id, '"]');
    let globals = {}, fields = {}, memberDepth = 0;
    function visit(ast) {
        if ((0, _vegaUtil.isString)(ast)) return ast;
        const generator = Generators[ast.type];
        if (generator == null) (0, _vegaUtil.error)("Unsupported type: " + ast.type);
        return generator(ast);
    }
    const Generators = {
        Literal: (n)=>n.raw,
        Identifier: (n)=>{
            const id = n.name;
            if (memberDepth > 0) return id;
            else if ((0, _vegaUtil.hasOwnProperty)(forbidden, id)) return (0, _vegaUtil.error)("Illegal identifier: " + id);
            else if ((0, _vegaUtil.hasOwnProperty)(constants, id)) return constants[id];
            else if ((0, _vegaUtil.hasOwnProperty)(allowed, id)) return id;
            else {
                globals[id] = 1;
                return outputGlobal(id);
            }
        },
        MemberExpression: (n)=>{
            const d = !n.computed, o = visit(n.object);
            if (d) memberDepth += 1;
            const p = visit(n.property);
            if (o === fieldvar) // strip quotes to sanitize field name (#1653)
            fields[stripQuotes(p)] = 1;
            if (d) memberDepth -= 1;
            return o + (d ? "." + p : "[" + p + "]");
        },
        CallExpression: (n)=>{
            if (n.callee.type !== "Identifier") (0, _vegaUtil.error)("Illegal callee type: " + n.callee.type);
            const callee = n.callee.name, args = n.arguments, fn = (0, _vegaUtil.hasOwnProperty)(functions, callee) && functions[callee];
            if (!fn) (0, _vegaUtil.error)("Unrecognized function: " + callee);
            return (0, _vegaUtil.isFunction)(fn) ? fn(args) : fn + "(" + args.map(visit).join(",") + ")";
        },
        ArrayExpression: (n)=>"[" + n.elements.map(visit).join(",") + "]",
        BinaryExpression: (n)=>"(" + visit(n.left) + " " + n.operator + " " + visit(n.right) + ")",
        UnaryExpression: (n)=>"(" + n.operator + visit(n.argument) + ")",
        ConditionalExpression: (n)=>"(" + visit(n.test) + "?" + visit(n.consequent) + ":" + visit(n.alternate) + ")",
        LogicalExpression: (n)=>"(" + visit(n.left) + n.operator + visit(n.right) + ")",
        ObjectExpression: (n)=>"{" + n.properties.map(visit).join(",") + "}",
        Property: (n)=>{
            memberDepth += 1;
            const k = visit(n.key);
            memberDepth -= 1;
            return k + ":" + visit(n.value);
        }
    };
    function codegen(ast) {
        const result = {
            code: visit(ast),
            globals: Object.keys(globals),
            fields: Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
    }
    codegen.functions = functions;
    codegen.constants = constants;
    return codegen;
}

},{"vega-util":"bApja","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gXMNx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selector", ()=>eventSelector);
const VIEW = "view", LBRACK = "[", RBRACK = "]", LBRACE = "{", RBRACE = "}", COLON = ":", COMMA = ",", NAME = "@", GT = ">", ILLEGAL = /[[\]{}]/, DEFAULT_MARKS = {
    "*": 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
};
let DEFAULT_SOURCE, MARKS;
/**
 * Parse an event selector string.
 * Returns an array of event stream definitions.
 */ function eventSelector(selector, source, marks) {
    DEFAULT_SOURCE = source || VIEW;
    MARKS = marks || DEFAULT_MARKS;
    return parseMerge(selector.trim()).map(parseSelector);
}
function isMarkType(type) {
    return MARKS[type];
}
function find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count = 0, c;
    for(; i < n; ++i){
        c = s[i];
        if (!count && c === endChar) return i;
        else if (popChar && popChar.indexOf(c) >= 0) --count;
        else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }
    return i;
}
function parseMerge(s) {
    const output = [], n = s.length;
    let start = 0, i = 0;
    while(i < n){
        i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
        output.push(s.substring(start, i).trim());
        start = ++i;
    }
    if (output.length === 0) throw "Empty event selector: " + s;
    return output;
}
function parseSelector(s) {
    return s[0] === "[" ? parseBetween(s) : parseStream(s);
}
function parseBetween(s) {
    const n = s.length;
    let i = 1, b;
    i = find(s, i, RBRACK, LBRACK, RBRACK);
    if (i === n) throw "Empty between selector: " + s;
    b = parseMerge(s.substring(1, i));
    if (b.length !== 2) throw "Between selector must have two elements: " + s;
    s = s.slice(i + 1).trim();
    if (s[0] !== GT) throw "Expected '>' after between selector: " + s;
    b = b.map(parseSelector);
    const stream = parseSelector(s.slice(1).trim());
    if (stream.between) return {
        between: b,
        stream: stream
    };
    else stream.between = b;
    return stream;
}
function parseStream(s) {
    const stream = {
        source: DEFAULT_SOURCE
    }, source = [];
    let throttle = [
        0,
        0
    ], markname = 0, start = 0, n = s.length, i = 0, j, filter; // extract throttle from end
    if (s[n - 1] === RBRACE) {
        i = s.lastIndexOf(LBRACE);
        if (i >= 0) {
            try {
                throttle = parseThrottle(s.substring(i + 1, n - 1));
            } catch (e) {
                throw "Invalid throttle specification: " + s;
            }
            s = s.slice(0, i).trim();
            n = s.length;
        } else throw "Unmatched right brace: " + s;
        i = 0;
    }
    if (!n) throw s; // set name flag based on first char
    if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector
    j = find(s, i, COLON);
    if (j < n) {
        source.push(s.substring(start, j).trim());
        start = i = ++j;
    } // extract remaining part of stream selector
    i = find(s, i, LBRACK);
    if (i === n) source.push(s.substring(start, n).trim());
    else {
        source.push(s.substring(start, i).trim());
        filter = [];
        start = ++i;
        if (start === n) throw "Unmatched left bracket: " + s;
    } // extract filters
    while(i < n){
        i = find(s, i, RBRACK);
        if (i === n) throw "Unmatched left bracket: " + s;
        filter.push(s.substring(start, i).trim());
        if (i < n - 1 && s[++i] !== LBRACK) throw "Expected left bracket: " + s;
        start = ++i;
    } // marshall event stream specification
    if (!(n = source.length) || ILLEGAL.test(source[n - 1])) throw "Invalid event selector: " + s;
    if (n > 1) {
        stream.type = source[1];
        if (markname) stream.markname = source[0].slice(1);
        else if (isMarkType(source[0])) stream.marktype = source[0];
        else stream.source = source[0];
    } else stream.type = source[0];
    if (stream.type.slice(-1) === "!") {
        stream.consume = true;
        stream.type = stream.type.slice(0, -1);
    }
    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
}
function parseThrottle(s) {
    const a = s.split(COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map((_)=>{
        const x = +_;
        if (x !== x) throw s;
        return x;
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dysWg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base", ()=>(0, _base.base));
parcelHelpers.export(exports, "use", ()=>(0, _base.use));
parcelHelpers.export(exports, "Presenter", ()=>(0, _presenter.Presenter));
parcelHelpers.export(exports, "ViewGl", ()=>(0, _viewGl.ViewGl));
parcelHelpers.export(exports, "controls", ()=>_controls);
parcelHelpers.export(exports, "defaults", ()=>_defaults);
parcelHelpers.export(exports, "types", ()=>_types);
parcelHelpers.export(exports, "util", ()=>_util);
parcelHelpers.export(exports, "version", ()=>(0, _version.version));
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _controls = require("./exports/controls");
var _types = require("./exports/types");
var _util = require("./exports/util");
var _defaults = require("./defaults");
var _base = require("./base");
var _presenter = require("./presenter");
var _viewGl = require("./vega-classes/viewGl");
var _enums = require("./enums");
parcelHelpers.exportAll(_enums, exports);
var _version = require("./version");

},{"./exports/controls":"7YVdE","./exports/types":"dqNiW","./exports/util":"eR5Ig","./defaults":"rYstm","./base":"4hPDY","./presenter":"bqYNS","./vega-classes/viewGl":"fQ572","./enums":"gGi06","./version":"aUbEh","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7YVdE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//alphabetize variables for documentation
parcelHelpers.export(exports, "Table", ()=>(0, _controls.Table));
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ /**
 * This file is for external facing export only, do not use this for internal references,
 * as it may cause circular dependencies in Rollup.
 */ var _controls = require("../controls");

},{"../controls":"8CX6f","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8CX6f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Table", ()=>Table);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _tsxCreateElement = require("tsx-create-element");
const KeyCodes = {
    ENTER: "Enter"
};
const Table = (props)=>{
    return (0, _tsxCreateElement.createElement)("table", {
        className: props.className
    }, props.children, props.rows.map((row, i)=>(0, _tsxCreateElement.createElement)("tr", {
            className: props.rowClassName || "",
            onClick: (e)=>props.onRowClick && props.onRowClick(e, i),
            tabIndex: props.onRowClick ? 0 : -1,
            onKeyUp: (e)=>{
                if (e.key === KeyCodes.ENTER && props.onRowClick) props.onRowClick(e, i);
            }
        }, row.cells.map((cell, i)=>(0, _tsxCreateElement.createElement)("td", {
                className: cell.className || "",
                title: cell.title || ""
            }, cell.content)))));
};

},{"tsx-create-element":"1Cr5U","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1Cr5U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createElement", ()=>createElement);
parcelHelpers.export(exports, "addChild", ()=>addChild);
parcelHelpers.export(exports, "mount", ()=>mount);
parcelHelpers.export(exports, "findElementByChildPositions", ()=>findElementByChildPositions);
parcelHelpers.export(exports, "focusActiveElement", ()=>focusActiveElement);
parcelHelpers.export(exports, "setActiveElement", ()=>setActiveElement);
parcelHelpers.export(exports, "getActiveElementInfo", ()=>getActiveElementInfo);
var _htmlTags = require("html-tags");
var _svgTags = require("svg-tags");
const htmlTagArray = _htmlTags.default || _htmlTags;
const svgTagArray = _svgTags.default || _svgTags;
/**
 * Decamelizes a string with/without a custom separator (hyphen by default).
 * from: https://ourcodeworld.com/articles/read/608/how-to-camelize-and-decamelize-strings-in-javascript
 *
 * @param str String in camelcase
 * @param separator Separator for the new decamelized string.
 */ function decamelize(str, separator = "-") {
    return str.replace(/([a-z\d])([A-Z])/g, "$1" + separator + "$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1" + separator + "$2").toLowerCase();
}
function createElement(tag, attrs, ...children) {
    if (typeof tag === "function") {
        const fn = tag;
        const props = attrs;
        props.children = children;
        return fn(props);
    } else {
        const ns = tagNamespace(tag);
        const el = ns ? document.createElementNS(ns, tag) : document.createElement(tag);
        const map = attrs;
        let ref;
        for(let name in map)if (name && map.hasOwnProperty(name)) {
            let value = map[name];
            if (name === "className" && value !== void 0) setAttribute(el, ns, "class", value.toString());
            else if (name === "disabled" && !value) ;
            else if (value === null || value === undefined) continue;
            else if (value === true) setAttribute(el, ns, name, name);
            else if (typeof value === "function") {
                if (name === "ref") ref = value;
                else el[name.toLowerCase()] = value;
            } else if (typeof value === "object") setAttribute(el, ns, name, flatten(value));
            else setAttribute(el, ns, name, value.toString());
        }
        if (children && children.length > 0) appendChildren(el, children);
        if (ref) ref(el);
        return el;
    }
}
function setAttribute(el, ns, name, value) {
    if (ns) el.setAttributeNS(null, name, value);
    else el.setAttribute(name, value);
}
function flatten(o) {
    const arr = [];
    for(let prop in o)arr.push(`${decamelize(prop, "-")}:${o[prop]}`);
    return arr.join(";");
}
function addChild(parentElement, child) {
    if (child === null || child === undefined || typeof child === "boolean") return;
    else if (Array.isArray(child)) appendChildren(parentElement, child);
    else if (isElement(child)) parentElement.appendChild(child);
    else parentElement.appendChild(document.createTextNode(child.toString()));
}
function appendChildren(parentElement, children) {
    children.forEach((child)=>addChild(parentElement, child));
}
function isElement(el) {
    //nodeType cannot be zero https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
    return !!el.nodeType;
}
function mount(element, container) {
    container.innerHTML = "";
    if (element) addChild(container, element);
}
function findElementByChildPositions(childPositions, container) {
    let element = container || document.body;
    let childPosition;
    while(element && childPositions.length){
        childPosition = childPositions.shift();
        element = element.children.item(childPosition);
    }
    if (element) return element;
}
function focusActiveElement(element, activeElementInfo) {
    element.focus();
    element.scrollTop = activeElementInfo.scrollTop;
    const input = element;
    if (input.setSelectionRange && activeElementInfo && activeElementInfo.selectionStart != null && activeElementInfo.selectionEnd != null) input.setSelectionRange(activeElementInfo.selectionStart, activeElementInfo.selectionEnd, activeElementInfo.selectionDirection);
}
function setActiveElement(activeElementInfo, container) {
    if (activeElementInfo) {
        const element = findElementByChildPositions(activeElementInfo.childPositions, container);
        if (element) focusActiveElement(element, activeElementInfo);
    }
}
function getActiveElementInfo(container) {
    let element = document.activeElement;
    const { scrollTop , selectionDirection , selectionEnd , selectionStart  } = element;
    const activeElementInfo = {
        childPositions: [],
        scrollTop,
        selectionDirection,
        selectionEnd,
        selectionStart
    };
    while(element && element !== document.body && element !== container){
        activeElementInfo.childPositions.unshift(getChildPosition(element));
        element = element.parentElement;
    }
    if ((element === document.body || element === container) && activeElementInfo.childPositions.length) return activeElementInfo;
}
function getChildPosition(element) {
    let childPosition = 0;
    while(element = element.previousElementSibling)childPosition++;
    return childPosition;
}
function tagNamespace(tag) {
    //issue: this won't disambiguate certain tags which exist in both svg and html: <a>, <title> ...
    if (tag === "svg" || svgTagArray.indexOf(tag) >= 0 && !(htmlTagArray.indexOf(tag) >= 0)) return "http://www.w3.org/2000/svg";
}

},{"html-tags":"35b7B","svg-tags":"6xY34","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"35b7B":[function(require,module,exports) {
"use strict";
module.exports = require("./html-tags.json");

},{"./html-tags.json":"gpoMG"}],"gpoMG":[function(require,module,exports) {
module.exports = JSON.parse('["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"]');

},{}],"6xY34":[function(require,module,exports) {
module.exports = require("./svg-tags.json");

},{"./svg-tags.json":"1rC1e"}],"1rC1e":[function(require,module,exports) {
module.exports = JSON.parse('["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"]');

},{}],"dqNiW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//alphabetize interfaces  for documentation
parcelHelpers.export(exports, "MorphChartsCore", ()=>(0, _interfaces.MorphChartsCore));
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ /**
 * This file is for external facing export only, do not use this for internal references,
 * as it may cause circular dependencies in Rollup.
 */ var _interfaces = require("../interfaces");

},{"../interfaces":"eiX6Q","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eiX6Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MorphChartsCore", ()=>(0, _morphcharts.Core));
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");

},{"morphcharts":"dzm75","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dzm75":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Core", ()=>(0, _mainJs.Core));
parcelHelpers.export(exports, "PlotType", ()=>(0, _mainJs.PlotType));
parcelHelpers.export(exports, "SingleTouchAction", ()=>(0, _mainJs.SingleTouchAction));
parcelHelpers.export(exports, "UnitType", ()=>(0, _mainJs.UnitType));
parcelHelpers.export(exports, "Theme", ()=>(0, _mainJs.Theme));
parcelHelpers.export(exports, "PickType", ()=>(0, _mainJs.PickType));
parcelHelpers.export(exports, "SelectionMode", ()=>(0, _mainJs.SelectionMode));
parcelHelpers.export(exports, "FilterMode", ()=>(0, _mainJs.FilterMode));
parcelHelpers.export(exports, "AxesTextOrientation", ()=>(0, _mainJs.AxesTextOrientation));
parcelHelpers.export(exports, "Orientation", ()=>(0, _mainJs.Orientation));
parcelHelpers.export(exports, "StereoMode", ()=>(0, _mainJs.StereoMode));
parcelHelpers.export(exports, "HorizontalAlignment", ()=>(0, _mainJs.HorizontalAlignment));
parcelHelpers.export(exports, "VerticalAlignment", ()=>(0, _mainJs.VerticalAlignment));
parcelHelpers.export(exports, "LogLevel", ()=>(0, _mainJs.LogLevel));
parcelHelpers.export(exports, "AxesVisibility", ()=>(0, _mainJs.AxesVisibility));
parcelHelpers.export(exports, "Edge2D", ()=>(0, _mainJs.Edge2D));
parcelHelpers.export(exports, "Edge3D", ()=>(0, _mainJs.Edge3D));
parcelHelpers.export(exports, "Face2D", ()=>(0, _mainJs.Face2D));
parcelHelpers.export(exports, "Face3D", ()=>(0, _mainJs.Face3D));
parcelHelpers.export(exports, "PaletteName", ()=>(0, _paletteJs.PaletteName));
parcelHelpers.export(exports, "PaletteResources", ()=>(0, _paletteJs.PaletteResources));
parcelHelpers.export(exports, "PaletteType", ()=>(0, _paletteJs.PaletteType));
parcelHelpers.export(exports, "Config", ()=>(0, _configJs.Config));
parcelHelpers.export(exports, "Constants", ()=>(0, _constantsJs.Constants));
parcelHelpers.export(exports, "Colors", ()=>(0, _colorsJs.Colors));
parcelHelpers.export(exports, "Font", ()=>(0, _fontJs.Font));
parcelHelpers.export(exports, "FontRasterizer", ()=>(0, _fontJs.FontRasterizer));
parcelHelpers.export(exports, "FontAtlas", ()=>(0, _fontJs.FontAtlas));
parcelHelpers.export(exports, "Components", ()=>_indexJs);
parcelHelpers.export(exports, "Axes", ()=>_indexJs1);
parcelHelpers.export(exports, "Helpers", ()=>_indexJs2);
parcelHelpers.export(exports, "Layouts", ()=>_indexJs3);
parcelHelpers.export(exports, "Input", ()=>_indexJs4);
parcelHelpers.export(exports, "Providers", ()=>_indexJs5);
parcelHelpers.export(exports, "Meshes", ()=>_indexJs6);
parcelHelpers.export(exports, "Renderers", ()=>_indexJs7);
parcelHelpers.export(exports, "Tables", ()=>_indexJs8);
parcelHelpers.export(exports, "Cameras", ()=>_indexJs9);
var _indexJs = require("./components/index.js");
var _indexJs1 = require("./components/axes/index.js");
var _indexJs2 = require("./helpers/index.js");
var _indexJs3 = require("./layouts/index.js");
var _indexJs4 = require("./input/index.js");
var _indexJs5 = require("./providers/index.js");
var _indexJs6 = require("./meshes/index.js");
var _indexJs7 = require("./renderers/index.js");
var _indexJs8 = require("./tables/index.js");
var _indexJs9 = require("./cameras/index.js");
var _mainJs = require("./main.js");
var _paletteJs = require("./palette.js");
var _configJs = require("./config.js");
var _constantsJs = require("./constants.js");
var _colorsJs = require("./colors.js");
var _fontJs = require("./font.js");

},{"./components/index.js":"4rO89","./components/axes/index.js":"lAxFS","./helpers/index.js":"5z9T4","./layouts/index.js":"kOIH4","./input/index.js":"2rYa8","./providers/index.js":"iBjFD","./meshes/index.js":"cnTlF","./renderers/index.js":"kHIAn","./tables/index.js":"7tmC7","./cameras/index.js":"iYXYc","./main.js":"2JYph","./palette.js":"46mvC","./config.js":"01Ouk","./constants.js":"dtECF","./colors.js":"4TCpK","./font.js":"kD06g","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4rO89":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Controller", ()=>(0, _controllerJs.Controller));
parcelHelpers.export(exports, "ControllerVisual", ()=>(0, _controllerJs.ControllerVisual));
parcelHelpers.export(exports, "Label", ()=>(0, _labelsJs.Label));
parcelHelpers.export(exports, "LabelVisual", ()=>(0, _labelsJs.LabelVisual));
parcelHelpers.export(exports, "LabelSet", ()=>(0, _labelsJs.LabelSet));
parcelHelpers.export(exports, "LabelSetVisual", ()=>(0, _labelsJs.LabelSetVisual));
parcelHelpers.export(exports, "ImageVisual", ()=>(0, _imageJs.ImageVisual));
parcelHelpers.export(exports, "ImageQuad", ()=>(0, _imageJs.ImageQuad));
parcelHelpers.export(exports, "ImageSphere", ()=>(0, _imageJs.ImageSphere));
parcelHelpers.export(exports, "NominalKey", ()=>(0, _keysJs.NominalKey));
var _controllerJs = require("./controller.js");
var _labelsJs = require("./labels.js");
var _imageJs = require("./image.js");
var _keysJs = require("./keys.js");

},{"./controller.js":"9Kfa8","./labels.js":"4PuF6","./image.js":"8weU6","./keys.js":"dcCvf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9Kfa8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ControllerVisual", ()=>ControllerVisual);
parcelHelpers.export(exports, "Controller", ()=>Controller);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../main.js");
var _objJs = require("../helpers/obj.js");
var _glMatrix = require("gl-matrix");
var _cubeJs = require("../meshes/cube.js");
var _vertexJs = require("../vertex.js");
class ControllerVisual {
    constructor(controller){
        this.controller = controller;
    }
    render(elapsedTime, xrFrame) {}
    update(elapsedTime) {}
}
class Controller {
    constructor(core, options){
        this._cubeObj = `o Cube
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
v 1.000000 1.000000 -0.999999
v 0.999999 1.000000 1.000001
v -1.000000 1.000000 1.000000
v -1.000000 1.000000 -1.000000
vt 1.000000 0.333333
vt 1.000000 0.666667
vt 0.666667 0.666667
vt 0.666667 0.333333
vt 0.666667 0.000000
vt 0.000000 0.333333
vt 0.000000 0.000000
vt 0.333333 0.000000
vt 0.333333 1.000000
vt 0.000000 1.000000
vt 0.000000 0.666667
vt 0.333333 0.333333
vt 0.333333 0.666667
vt 1.000000 0.000000
vn 0.000000 -1.000000 0.000000
vn 0.000000 1.000000 0.000000
vn 1.000000 0.000000 0.000000
vn -0.000000 0.000000 1.000000
vn -1.000000 -0.000000 -0.000000
vn 0.000000 0.000000 -1.000000
s off
f 2/1/1 3/2/1 4/3/1
f 8/1/2 7/4/2 6/5/2
f 5/6/3 6/7/3 2/8/3
f 6/8/4 7/5/4 3/4/4
f 3/9/5 7/10/5 8/11/5
f 1/12/6 4/13/6 8/11/6
f 1/4/1 2/1/1 4/3/1
f 5/14/2 8/1/2 6/5/2
f 1/12/3 5/6/3 2/8/3
f 2/12/4 6/8/4 3/4/4
f 4/13/5 3/9/5 8/11/5
f 5/6/6 1/12/6 8/11/6`;
        this._core = core;
        this._obj = options.obj;
        this._texture = options.texture || new ImageData(new Uint8ClampedArray([
            0,
            0,
            0,
            255
        ]), 1, 1);
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get mMatrix() {
        return this._mMatrix;
    }
    get indexCount() {
        return this._indexCount;
    }
    get vertices() {
        return this._vertices;
    }
    get indices() {
        return this._indices;
    }
    get texture() {
        return this._texture;
    }
    get rayMMatrix() {
        return this._rayMMatrix;
    }
    get rayIndexCount() {
        return this._rayIndexCount;
    }
    get rayVertices() {
        return this._rayVertices;
    }
    get rayIndices() {
        return this._rayIndices;
    }
    initialize() {
        const _vec3 = (0, _glMatrix.vec3).create();
        this._mMatrix = (0, _glMatrix.mat4).create();
        const objMesh = new (0, _objJs.ObjHelper)(this._core).read(this._obj || this._cubeObj);
        if (!this._obj) {
            this.useRayPose = true;
            const modelThickness = 0.02;
            const modelLength = 0.1;
            (0, _glMatrix.vec3).set(_vec3, modelThickness, modelThickness, modelLength);
            (0, _glMatrix.mat4).fromScaling(this._mMatrix, _vec3);
            (0, _glMatrix.vec3).set(_vec3, 0, 0, 1);
            (0, _glMatrix.mat4).translate(this._mMatrix, this._mMatrix, _vec3);
        }
        this._vertices = objMesh.vertices;
        this._indices = objMesh.indices;
        this._indexCount = objMesh.indexCount;
        this._rayMMatrix = (0, _glMatrix.mat4).create();
        const rayVertices = (0, _cubeJs.Cube).POSITIONS;
        this._rayVertices = new ArrayBuffer((0, _vertexJs.PositionColorVertex).SIZE_BYTES * rayVertices.length / (0, _vertexJs.PositionVertex).SIZE);
        const rayVerticesView = new DataView(this._rayVertices);
        const rayIndices = (0, _cubeJs.Cube).INDICES;
        this._rayIndices = new Uint16Array(rayIndices);
        const rayVertexCount = rayVertices.length / (0, _vertexJs.PositionVertex).SIZE;
        this._rayIndexCount = rayIndices.length;
        for(let i = 0; i < rayVertexCount; i++){
            (0, _glMatrix.vec3).set(_vec3, rayVertices[i * (0, _vertexJs.PositionVertex).SIZE], rayVertices[i * (0, _vertexJs.PositionVertex).SIZE + 1], rayVertices[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _vertexJs.PositionColorVertex).setPosition(rayVerticesView, i, _vec3);
            (0, _vertexJs.PositionColorVertex).setColor(rayVerticesView, i, this._core.config.xrControllerRayColor);
        }
        const rayThickness = 0.0025;
        const rayLength = 10;
        (0, _glMatrix.vec3).set(_vec3, rayThickness, rayThickness, rayLength);
        (0, _glMatrix.mat4).fromScaling(this._rayMMatrix, _vec3);
        (0, _glMatrix.vec3).set(_vec3, 0, 0, -0.5);
        (0, _glMatrix.mat4).translate(this._rayMMatrix, this._rayMMatrix, _vec3);
        this._isInitialized = true;
        this._core.log.write((0, _mainJs.LogLevel).info, "controller initialized");
    }
    update(elapsedTime) {}
}

},{"../main.js":"2JYph","../helpers/obj.js":"aHITK","gl-matrix":"3mrln","../meshes/cube.js":"dgOpu","../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2JYph":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Core", ()=>Core);
parcelHelpers.export(exports, "CameraMode", ()=>CameraMode);
parcelHelpers.export(exports, "StereoMode", ()=>StereoMode);
parcelHelpers.export(exports, "SelectionMode", ()=>SelectionMode);
parcelHelpers.export(exports, "FilterMode", ()=>FilterMode);
parcelHelpers.export(exports, "HorizontalAlignment", ()=>HorizontalAlignment);
parcelHelpers.export(exports, "VerticalAlignment", ()=>VerticalAlignment);
parcelHelpers.export(exports, "TextAlignment", ()=>TextAlignment);
parcelHelpers.export(exports, "Orientation", ()=>Orientation);
parcelHelpers.export(exports, "AxesTextOrientation", ()=>AxesTextOrientation);
parcelHelpers.export(exports, "AxesVisibility", ()=>AxesVisibility);
parcelHelpers.export(exports, "PickType", ()=>PickType);
parcelHelpers.export(exports, "Theme", ()=>Theme);
parcelHelpers.export(exports, "HighlightMode", ()=>HighlightMode);
parcelHelpers.export(exports, "UnitType", ()=>UnitType);
parcelHelpers.export(exports, "PlotType", ()=>PlotType);
parcelHelpers.export(exports, "SingleTouchAction", ()=>SingleTouchAction);
parcelHelpers.export(exports, "MouseWheelAction", ()=>MouseWheelAction);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
parcelHelpers.export(exports, "Edge2D", ()=>Edge2D);
parcelHelpers.export(exports, "Face2D", ()=>Face2D);
parcelHelpers.export(exports, "Edge3D", ()=>Edge3D);
parcelHelpers.export(exports, "Face3D", ()=>Face3D);
parcelHelpers.export(exports, "HexOrientation", ()=>HexOrientation);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _altazimuthJs = require("./cameras/altazimuth.js");
var _configJs = require("./config.js");
var _constantsJs = require("./constants.js");
var _debugJs = require("./debug.js");
var _fpsJs = require("./fps.js");
var _angleJs = require("./helpers/angle.js");
var _paletteJs = require("./palette.js");
var _controllerJs = require("./components/controller.js");
var _matrixJs = require("./helpers/matrix.js");
var _cartesian3DJs = require("./components/axes/cartesian3d.js");
var _cartesian2DJs = require("./components/axes/cartesian2d.js");
var _fontJs = require("./font.js");
var _vertexJs = require("./vertex.js");
var _managerJs = require("./input/manager.js");
var _logJs = require("./log.js");
class Core {
    constructor(options){
        (0, _glMatrix.glMatrix).setMatrixArrayType(Array);
        this._vec3 = (0, _glMatrix.vec3).create();
        this._mat4 = (0, _glMatrix.mat4).create();
        this._container = options && options.container ? options.container : document.body;
        this._config = new (0, _configJs.Config)(this);
        this._log = new (0, _logJs.Log)(this);
        this._debugText = new (0, _debugJs.DebugText)();
        this._inputManager = options && options.useInputManager === false ? null : new (0, _managerJs.Manager)(this);
        const fontRasterizerOptions = options && options.fontRasterizerOptions ? options.fontRasterizerOptions : {
            fontAtlas: new (0, _fontJs.FontAtlas)(256, 512),
            fontSize: 24,
            border: 3,
            fontFamily: '"segoe ui semibold", sans-serif',
            fontWeight: "normal",
            fontStyle: "normal",
            baseline: "alphabetic",
            maxDistance: 8,
            edgeValue: 0xc0
        };
        const fontRasterizer = new (0, _fontJs.FontRasterizer)(this, fontRasterizerOptions);
        this._font = fontRasterizer.font;
        this._paletteResources = new (0, _paletteJs.PaletteResources)();
        this._previousTime = 0;
        this._fps = new (0, _fpsJs.Fps)(this);
        this._modelMMatrix = (0, _glMatrix.mat4).create();
        this._modelPosition = (0, _glMatrix.vec3).create();
        this._modelRotation = (0, _glMatrix.quat).create();
        this._modelScale = (0, _glMatrix.vec3).create();
        this._smoothedModelPosition = (0, _glMatrix.vec3).create();
        this._smoothedModelRotation = (0, _glMatrix.quat).create();
        this._smoothedModelScale = (0, _glMatrix.vec3).create();
        this._modelManipulationOrigin = (0, _glMatrix.vec3).create();
        this._camera = new (0, _altazimuthJs.AltAzimuthCamera)(this);
        this.resetModel(false);
    }
    get container() {
        return this._container;
    }
    get started() {
        return this._started;
    }
    get debugText() {
        return this._debugText;
    }
    get log() {
        return this._log;
    }
    get totalFrames() {
        return this._fps.totalFrames;
    }
    get camera() {
        return this._camera;
    }
    set camera(value) {
        this._camera = value;
    }
    getModelRotation(value) {
        (0, _glMatrix.quat).copy(value, this._modelRotation);
    }
    setModelRotation(value, isSmooth) {
        (0, _glMatrix.quat).copy(this._modelRotation, value);
        if (!isSmooth) (0, _glMatrix.quat).copy(this._smoothedModelRotation, this._modelRotation);
    }
    getModelScale() {
        return this._modelScale[0];
    }
    setModelScale(value, isSmooth) {
        (0, _glMatrix.vec3).set(this._modelScale, value, value, value);
        if (!isSmooth) (0, _glMatrix.vec3).copy(this._smoothedModelScale, this._modelScale);
    }
    getModelManipulationOrigin(value) {
        (0, _glMatrix.vec3).copy(value, this._modelManipulationOrigin);
    }
    setModelManipulationOrigin(value) {
        this._updateManipulationOrigin(value);
    }
    getModelPosition(value) {
        (0, _glMatrix.vec3).copy(value, this._modelPosition);
    }
    setModelPosition(value, isSmooth) {
        (0, _glMatrix.vec3).copy(this._modelPosition, value);
        if (!isSmooth) (0, _glMatrix.vec3).copy(this._smoothedModelPosition, this._modelPosition);
    }
    get webXRSession() {
        return this._webXRSession;
    }
    get renderer() {
        return this._renderer;
    }
    set renderer(renderer) {
        if (this._renderer) {
            this.stop();
            this._renderer.remove();
        }
        renderer.initialize(this);
        if (this._renderer) {
            renderer.transitionTime = this._renderer.transitionTime;
            for(let i = 0; i < this._renderer.transitionBuffers.length; i++){
                const previousTransitionBuffer = this._renderer.transitionBuffers[i];
                const transitionBuffer = renderer.createTransitionBuffer(previousTransitionBuffer.currentBuffer.ids);
                transitionBuffer.copyFrom(previousTransitionBuffer);
                renderer.transitionBuffers.push(transitionBuffer);
            }
            const currentAxes = this._renderer.currentAxes;
            if (currentAxes) {
                renderer.currentAxes = [];
                for(let i1 = 0; i1 < currentAxes.length; i1++){
                    const axesVisual = currentAxes[i1];
                    const axes = axesVisual.axes;
                    if (axes instanceof (0, _cartesian3DJs.Cartesian3dAxes)) {
                        const cartesian3dAxesVisual = renderer.createCartesian3dAxesVisual(axes);
                        renderer.currentAxes.push(cartesian3dAxesVisual);
                    } else if (axes instanceof (0, _cartesian2DJs.Cartesian2dAxes)) renderer.currentAxes.push(renderer.createCartesian2dAxesVisual(axes));
                }
            }
            const labelSets = this._renderer.labelSets;
            if (labelSets) {
                renderer.labelSets = [];
                for(let i2 = 0; i2 < labelSets.length; i2++)renderer.labelSets.push(renderer.createLabelSetVisual(labelSets[i2].label));
            }
            const images = this._renderer.images;
            if (images) {
                renderer.images = [];
                for(let i3 = 0; i3 < images.length; i3++)renderer.images.push(renderer.createImageVisual(images[i3].image));
            }
            const fonts = this._renderer.fonts;
            if (fonts) for(const key in fonts){
                const font = fonts[key].font;
                renderer.fonts[font.name] = renderer.createFontVisual(font);
            }
            if (this._renderer) this._renderer.finalize();
        } else renderer.fonts[this._font.name] = renderer.createFontVisual(this._font);
        if (this._renderer) this._renderer.finalize();
        this._renderer = renderer;
        this._fps.reset();
        this.start();
    }
    get font() {
        return this._font;
    }
    get paletteResources() {
        return this._paletteResources;
    }
    get config() {
        return this._config;
    }
    get inputManager() {
        return this._inputManager;
    }
    resetModel(isSmooth) {
        (0, _glMatrix.vec3).set(this._modelPosition, 0, 0, -this._config.modelDistance);
        (0, _glMatrix.vec3).set(this._modelScale, this._config.modelSize, this._config.modelSize, this._config.modelSize);
        (0, _glMatrix.quat).set(this._modelRotation, 0, 0, 0, 1);
        if (!isSmooth) this._syncSmooth();
    }
    resetManipulationOrigin() {
        if (!(0, _glMatrix.vec3).exactEquals(this._modelManipulationOrigin, (0, _constantsJs.Constants).VECTOR3_ZERO)) this._updateManipulationOrigin((0, _constantsJs.Constants).VECTOR3_ZERO);
    }
    reset(isSmooth) {
        this.resetModel(isSmooth);
        this.resetManipulationOrigin();
        this._camera.reset(isSmooth);
    }
    start() {
        if (!this._started && this._renderer) {
            this._windowAnimationFrame = window.requestAnimationFrame((currentTime)=>this._tick(currentTime));
            this._started = true;
            this._log.write(LogLevel.info, "render loop started");
        }
    }
    stop() {
        if (this._started) {
            this._started = false;
            if (this._windowAnimationFrame != null) {
                window.cancelAnimationFrame(this._windowAnimationFrame);
                this._windowAnimationFrame = null;
                this._log.write(LogLevel.info, "render loop stopped");
            }
        }
    }
    checkWebXRSupport() {
        const xrSystem = navigator.xr;
        if (xrSystem) xrSystem.isSessionSupported("immersive-vr").then((supported)=>{
            if (supported) {
                if (this.webXRSupportedCallback) this.webXRSupportedCallback();
                this._log.write(LogLevel.info, "WebXR supported");
            }
        });
    }
    requestWebXRSession() {
        if (this._webXRSession) this._webXRSession.end();
        else navigator.xr.requestSession("immersive-vr").then((session)=>this._webXRSessionStarted(session));
    }
    _webXRSessionStarted(session) {
        if (this.webXRSessionStartedCallback) this.webXRSessionStartedCallback();
        this._webXRSession = session;
        session.onend = ()=>this._webXRSessionEnded();
        this._renderer.initializeWebXR(session).then(()=>{
            if (this._windowAnimationFrame) {
                window.cancelAnimationFrame(this._windowAnimationFrame);
                this._windowAnimationFrame = null;
            }
            session.requestAnimationFrame((currentTime, xrframe)=>this._tick(currentTime, xrframe));
        });
        session.oninputsourceschange = (event)=>this._webXRInputSourcesChanged(event);
    }
    _webXRSessionEnded() {
        if (this.webXRSessionEndedCallback) this.webXRSessionEndedCallback();
        this._webXRSession = null;
        this._renderer.controllers.length = 0;
        this.start();
    }
    _webXRInputSourcesChanged(event) {
        if (event.added.length > 0) {
            const added = event.added[0];
            if (added.targetRayMode == "tracked-pointer") {
                const profiles = added.profiles;
                const handedness = added.handedness;
                if (this.webXRInputSourceRequestCallback) this.webXRInputSourceRequestCallback(profiles, handedness, (response)=>{
                    const options = {
                        profiles: profiles,
                        handedness: handedness,
                        obj: response.obj,
                        texture: response.texture
                    };
                    const controller = new (0, _controllerJs.Controller)(this, options);
                    this.renderer.controllers.push(this.renderer.createControllerVisual(controller));
                }, (e)=>{
                    this._log.write(LogLevel.error, e);
                });
                else {
                    const options = {};
                    const controller = new (0, _controllerJs.Controller)(this, options);
                    this.renderer.controllers.push(this.renderer.createControllerVisual(controller));
                }
            }
        }
        if (event.removed.length > 0) this.renderer.controllers.length = 0;
    }
    _tick(currentTime, xrFrame) {
        let elapsedTime = currentTime - this._previousTime;
        this._previousTime = currentTime;
        if (elapsedTime > 0) {
            if (elapsedTime > 100) elapsedTime = 100;
            this.update(elapsedTime, xrFrame);
            this.render(elapsedTime, xrFrame);
        }
        if (xrFrame) xrFrame.session.requestAnimationFrame((currentTime, xrframe)=>this._tick(currentTime, xrframe));
        else if (this._started) this._windowAnimationFrame = window.requestAnimationFrame((currentTime)=>this._tick(currentTime));
    }
    update(elapsedTime, xrFrame) {
        this._renderer.setSize(elapsedTime);
        if (this.updateCallback) this.updateCallback(elapsedTime, xrFrame);
        if (this._config.isDebugVisible) this._debugText.clear();
        this._fps.update(elapsedTime);
        if (this._inputManager) {
            this._inputManager.isPickingEnabled = this._renderer.transitionTime == 1;
            this._inputManager.update(elapsedTime, xrFrame);
        }
        let amount = Math.min(elapsedTime * this._config.positionSmoothing, 1);
        (0, _glMatrix.vec3).lerp(this._smoothedModelPosition, this._smoothedModelPosition, this._modelPosition, amount);
        amount = Math.min(elapsedTime * this._config.rotationSmoothing, 1);
        (0, _glMatrix.quat).slerp(this._smoothedModelRotation, this._smoothedModelRotation, this._modelRotation, amount);
        amount = Math.min(elapsedTime * this._config.scaleSmoothing, 1);
        (0, _glMatrix.vec3).lerp(this._smoothedModelScale, this._smoothedModelScale, this._modelScale, amount);
        (0, _glMatrix.mat4).fromRotationTranslationScaleOrigin(this._modelMMatrix, this._smoothedModelRotation, this._smoothedModelPosition, this._smoothedModelScale, this._modelManipulationOrigin);
        this._renderer.mMatrix = this._modelMMatrix;
        if (this._config.isDebugVisible) {
            this._debugText.addLine(`mod pos ${this._smoothedModelPosition[0] < 0 ? "" : " "}${this._smoothedModelPosition[0].toFixed(3)},${this._smoothedModelPosition[1] < 0 ? "" : " "}${this._smoothedModelPosition[1].toFixed(3)},${this._smoothedModelPosition[2] < 0 ? "" : " "}${this._smoothedModelPosition[2].toFixed(3)}`);
            this._debugText.addLine(`mod rot ${this._smoothedModelRotation[0] < 0 ? "" : " "}${this._smoothedModelRotation[0].toFixed(3)},${this._smoothedModelRotation[1] < 0 ? "" : " "}${this._smoothedModelRotation[1].toFixed(3)},${this._smoothedModelRotation[2] < 0 ? "" : " "}${this._smoothedModelRotation[2].toFixed(3)},${this._smoothedModelRotation[3] < 0 ? "" : " "}${this._smoothedModelRotation[3].toFixed(3)}`);
            this._debugText.addLine(`mod siz  ${this._smoothedModelScale[0].toFixed(3)}`);
            this._debugText.addLine(`man ori ${this._modelManipulationOrigin[0] < 0 ? "" : " "}${this._modelManipulationOrigin[0].toFixed(3)},${this._modelManipulationOrigin[1] < 0 ? "" : " "}${this._modelManipulationOrigin[1].toFixed(3)},${this._modelManipulationOrigin[2] < 0 ? "" : " "}${this._modelManipulationOrigin[2].toFixed(3)}`);
            this._debugText.addLine(`scr dst  ${this._config.screenDistance.toFixed(3)}`);
            this._debugText.addLine(`cam fov  ${Math.round((0, _angleJs.AngleHelper).radiansToDegrees(this._config.fov))}`);
            this._debugText.addLine(`tbf tot  ${this._renderer.transitionBuffers.length}`);
        }
        if (!xrFrame) {
            this._camera.width = this._renderer.width;
            this._camera.height = this._renderer.height;
            this._camera.modelMMatrix = this._modelMMatrix;
            this._camera.modelPosition = this._smoothedModelPosition;
            this._camera.modelRotation = this._smoothedModelRotation;
            this._camera.modelScale = this._smoothedModelScale;
            this._camera.modelManipulationOrigin = this._modelManipulationOrigin;
            this._camera.update(elapsedTime);
            this._renderer.vMatrices = this._camera.vMatrices;
            this._renderer.mvMatrices = this._camera.mvMatrices;
            this._renderer.pMatrices = this._camera.pMatrices;
            this._renderer.inverseVMatrices = this._camera.inverseVMatrices;
            this._renderer.inversePMatrices = this._camera.inversePMatrices;
        }
        this._renderer.prepare(xrFrame);
        if (!xrFrame && this._config.stereoMode == StereoMode.none) this._renderer.pickPMatrix = this._camera.pMatrices[0];
        else {
            const fov = (0, _matrixJs.MatrixHelper).fieldOfViewFromProjectionMatrix(this._renderer.pMatrices[0]);
            (0, _glMatrix.mat4).perspective(this._mat4, fov, this._renderer.width / this._renderer.height, this._config.nearPlane, this._config.farPlane);
            this._renderer.pickPMatrix = this._mat4;
        }
        this._renderer.update(elapsedTime);
    }
    render(elapsedTime, xrFrame) {
        this._fps.render();
        this._renderer.render(elapsedTime, xrFrame);
        if (this.afterRenderCallback) this.afterRenderCallback();
    }
    _syncSmooth() {
        (0, _glMatrix.vec3).copy(this._smoothedModelPosition, this._modelPosition);
        (0, _glMatrix.vec3).copy(this._smoothedModelScale, this._modelScale);
        (0, _glMatrix.quat).copy(this._smoothedModelRotation, this._modelRotation);
    }
    _updateManipulationOrigin(position) {
        this._camera.updateModelManipulationOrigin(this._modelManipulationOrigin, position);
        (0, _glMatrix.vec3).copy(this._modelManipulationOrigin, position);
        (0, _glMatrix.vec3).transformMat4(this._vec3, this._modelManipulationOrigin, this._modelMMatrix);
        (0, _glMatrix.vec3).subtract(this._modelPosition, this._vec3, this._modelManipulationOrigin);
        (0, _glMatrix.vec3).copy(this._smoothedModelPosition, this._modelPosition);
        if (this.manipulationOriginChangedCallback) {
            const result = {
                x: position[0],
                y: position[1],
                z: position[2]
            };
            this.manipulationOriginChangedCallback(result);
        }
        this._log.write(LogLevel.info, `manipulation origin ${position[0].toFixed(3)},${position[1].toFixed(3)},${position[2].toFixed(3)}`);
    }
    pickLasso(x0, y0, x1, y1, pickType) {
        const inverseMMatrix = (0, _glMatrix.mat4).create();
        (0, _glMatrix.mat4).invert(inverseMMatrix, this._modelMMatrix);
        const sets = [];
        const nearPositions = [
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create()
        ];
        const farPositions = [
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create()
        ];
        const directions = [
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create()
        ];
        this._camera.unproject(nearPositions[0], x0, y1, -1);
        this._camera.unproject(farPositions[0], x0, y1, 1);
        this._camera.unproject(nearPositions[1], x1, y1, -1);
        this._camera.unproject(farPositions[1], x1, y1, 1);
        this._camera.unproject(nearPositions[2], x1, y0, -1);
        this._camera.unproject(farPositions[2], x1, y0, 1);
        this._camera.unproject(nearPositions[3], x0, y0, -1);
        this._camera.unproject(farPositions[3], x0, y0, 1);
        for(let i = 0; i < 4; i++){
            (0, _glMatrix.vec3).transformMat4(nearPositions[i], nearPositions[i], inverseMMatrix);
            (0, _glMatrix.vec3).transformMat4(farPositions[i], farPositions[i], inverseMMatrix);
            (0, _glMatrix.vec3).subtract(directions[i], farPositions[i], nearPositions[i]);
            (0, _glMatrix.vec3).normalize(directions[i], directions[i]);
        }
        const normals = [
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create()
        ];
        const d = [];
        for(let i1 = 0; i1 < 4; i1++){
            (0, _glMatrix.vec3).cross(normals[i1], directions[(i1 + 1) % 4], directions[i1]);
            (0, _glMatrix.vec3).normalize(normals[i1], normals[i1]);
            d.push(-(0, _glMatrix.vec3).dot(normals[i1], nearPositions[i1]));
        }
        if (pickType == PickType.data) {
            const translation = (0, _glMatrix.vec3).create();
            for(let i2 = 0; i2 < this._renderer.transitionBuffers.length; i2++){
                const transitionBuffer = this._renderer.transitionBuffers[i2];
                const set = new Set();
                if (transitionBuffer.isVisible) {
                    const start = window.performance.now();
                    const currentBuffer = transitionBuffer.currentBuffer;
                    const lookup = currentBuffer.lookup;
                    for(let j = 0; j < currentBuffer.length; j++){
                        const id = currentBuffer.ids[j];
                        const index = lookup[id];
                        if (index != null) {
                            (0, _vertexJs.UnitVertex).getTranslation(currentBuffer.dataView, index, translation);
                            let isInside = true;
                            for(let k = 0; k < 4; k++){
                                let distance = (0, _glMatrix.vec3).dot(normals[k], translation);
                                distance += d[k];
                                if (distance < 0) {
                                    isInside = false;
                                    break;
                                }
                            }
                            if (isInside) set.add(id);
                        }
                    }
                    if (set.size > 0) this._log.write(LogLevel.info, `lasso transition buffer ${i2} picked ${set.size} ${Math.round(window.performance.now() - start)}ms`);
                }
                sets.push(set);
            }
        }
        return sets;
    }
}
const CameraMode = {
    orbit: "orbit",
    altAzimuth: "altAzimuth"
};
const StereoMode = {
    none: "none",
    split: "split",
    anaglyph: "anaglyph",
    left: "left",
    right: "right"
};
const SelectionMode = {
    new: "new",
    add: "add",
    subtract: "subtract",
    intersect: "intersect"
};
const FilterMode = {
    isolate: "isolate",
    exclude: "exclude"
};
const HorizontalAlignment = {
    left: "left",
    center: "center",
    right: "right"
};
const VerticalAlignment = {
    top: "top",
    center: "center",
    bottom: "bottom"
};
const TextAlignment = {
    left: "left",
    center: "center",
    right: "right"
};
const Orientation = {
    horizontal: "horizontal",
    vertical: "vertical"
};
const AxesTextOrientation = {
    parallel: "parallel",
    perpendicular: "perpendicular"
};
const AxesVisibility = {
    none: "none",
    current: "current",
    previous: "previous"
};
const PickType = {
    none: 0,
    data: 1,
    label: 2,
    axesDivision: 3,
    axesTitle: 4,
    axesLabel: 5,
    axesHeading: 6
};
const Theme = {
    dark: "dark",
    light: "light"
};
const HighlightMode = {
    luminance: "luminance",
    color: "color"
};
const UnitType = {
    block: "block",
    blockSdf: "blockSdf",
    boxFrameSdf: "boxFrameSdf",
    sphere: "sphere",
    sphereSdf: "sphereSdf",
    cylinder: "cylinder",
    cylinderSdf: "cylinderSdf",
    hexPrism: "hexPrism",
    hexPrismSdf: "hexPrismSdf"
};
const PlotType = {
    scatter: "scatter",
    stack: "stack",
    line: "line",
    nodeLink: "nodeLink",
    squarifiedTreeMap: "squarifiedTreeMap"
};
const SingleTouchAction = {
    none: "none",
    translate: "translate",
    rotate: "rotate",
    lasso: "lasso"
};
const MouseWheelAction = {
    none: "none",
    zoom: "zoom",
    rotateY: "rotateY"
};
const LogLevel = {
    trace: 0,
    debug: 1,
    info: 2,
    warn: 3,
    error: 4
};
const Edge2D = {
    top: 0,
    right: 1,
    bottom: 2,
    left: 3
};
const Face2D = {
    front: 0,
    back: 1
};
const Edge3D = {
    topFront: 0,
    topRight: 1,
    topBack: 2,
    topLeft: 3,
    bottomFront: 4,
    bottomRight: 5,
    bottomBack: 6,
    bottomLeft: 7,
    frontRight: 8,
    backRight: 9,
    backLeft: 10,
    frontLeft: 11
};
const Face3D = {
    top: 0,
    right: 1,
    bottom: 2,
    left: 3,
    front: 4,
    back: 5
};
const HexOrientation = {
    pointyTop: "pointyTop",
    flatTop: "flatTop"
};

},{"gl-matrix":"3mrln","./cameras/altazimuth.js":"jbaDq","./config.js":"01Ouk","./constants.js":"dtECF","./debug.js":"8y4TE","./fps.js":"hgbGA","./helpers/angle.js":"3PBRj","./palette.js":"46mvC","./components/controller.js":"9Kfa8","./helpers/matrix.js":"b0nxw","./components/axes/cartesian3d.js":"9v1Q6","./components/axes/cartesian2d.js":"23fwZ","./font.js":"kD06g","./vertex.js":"7T2qu","./input/manager.js":"a5l41","./log.js":"2oDqL","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3mrln":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "glMatrix", ()=>_commonJs);
parcelHelpers.export(exports, "mat2", ()=>_mat2Js);
parcelHelpers.export(exports, "mat2d", ()=>_mat2DJs);
parcelHelpers.export(exports, "mat3", ()=>_mat3Js);
parcelHelpers.export(exports, "mat4", ()=>_mat4Js);
parcelHelpers.export(exports, "quat", ()=>_quatJs);
parcelHelpers.export(exports, "quat2", ()=>_quat2Js);
parcelHelpers.export(exports, "vec2", ()=>_vec2Js);
parcelHelpers.export(exports, "vec3", ()=>_vec3Js);
parcelHelpers.export(exports, "vec4", ()=>_vec4Js);
var _commonJs = require("./common.js");
var _mat2Js = require("./mat2.js");
var _mat2DJs = require("./mat2d.js");
var _mat3Js = require("./mat3.js");
var _mat4Js = require("./mat4.js");
var _quatJs = require("./quat.js");
var _quat2Js = require("./quat2.js");
var _vec2Js = require("./vec2.js");
var _vec3Js = require("./vec3.js");
var _vec4Js = require("./vec4.js");

},{"./common.js":"ceXpS","./mat2.js":"kyNED","./mat2d.js":"2Lv6X","./mat3.js":"lCzKX","./mat4.js":"7t3Ne","./quat.js":"fFEca","./quat2.js":"jBQem","./vec2.js":"akwrc","./vec3.js":"fhYnv","./vec4.js":"jE8fJ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ceXpS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EPSILON", ()=>EPSILON);
parcelHelpers.export(exports, "ARRAY_TYPE", ()=>ARRAY_TYPE);
parcelHelpers.export(exports, "RANDOM", ()=>RANDOM);
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */ parcelHelpers.export(exports, "setMatrixArrayType", ()=>setMatrixArrayType);
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */ parcelHelpers.export(exports, "toRadian", ()=>toRadian);
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var RANDOM = Math.random;
function setMatrixArrayType(type) {
    ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
function toRadian(a) {
    return a * degree;
}
function equals(a, b) {
    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function() {
    var y = 0, i = arguments.length;
    while(i--)y += arguments[i] * arguments[i];
    return Math.sqrt(y);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kyNED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 2x2 Matrix
 * @module mat2
 */ /**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "transpose", ()=>transpose);
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "adjoint", ()=>adjoint);
/**
 * Calculates the determinant of a mat2
 *
 * @param {ReadonlyMat2} a the source matrix
 * @returns {Number} determinant of a
 */ parcelHelpers.export(exports, "determinant", ()=>determinant);
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "fromRotation", ()=>fromRotation);
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "fromScaling", ()=>fromScaling);
/**
 * Returns a string representation of a mat2
 *
 * @param {ReadonlyMat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ parcelHelpers.export(exports, "frob", ()=>frob);
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {ReadonlyMat2} L the lower triangular matrix
 * @param {ReadonlyMat2} D the diagonal matrix
 * @param {ReadonlyMat2} U the upper triangular matrix
 * @param {ReadonlyMat2} a the input matrix to factorize
 */ parcelHelpers.export(exports, "LDU", ()=>LDU);
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "multiplyScalar", ()=>multiplyScalar);
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */ parcelHelpers.export(exports, "multiplyScalarAndAdd", ()=>multiplyScalarAndAdd);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "sub", ()=>sub);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(4);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
}
function fromValues(m00, m01, m10, m11) {
    var out = new _commonJs.ARRAY_TYPE(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
}
function set(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
}
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache
    // some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    return out;
}
function invert(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3]; // Calculate the determinant
    var det = a0 * a3 - a2 * a1;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] = a0 * det;
    return out;
}
function adjoint(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] = a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a0;
    return out;
}
function determinant(a) {
    return a[0] * a[3] - a[2] * a[1];
}
function multiply(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
}
function rotate(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
}
function scale(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
}
function fromRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
}
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
}
function str(a) {
    return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3]);
}
function LDU(L, D, U, a) {
    L[2] = a[2] / a[0];
    U[0] = a[0];
    U[1] = a[1];
    U[3] = a[3] - L[2] * U[1];
    return [
        L,
        D,
        U
    ];
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
}
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    return out;
}
var mul = multiply;
var sub = subtract;

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2Lv6X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 2x3 Matrix
 * @module mat2d
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */ /**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the determinant of a mat2d
 *
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {Number} determinant of a
 */ parcelHelpers.export(exports, "determinant", ()=>determinant);
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/ parcelHelpers.export(exports, "translate", ()=>translate);
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "fromRotation", ()=>fromRotation);
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "fromScaling", ()=>fromScaling);
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "fromTranslation", ()=>fromTranslation);
/**
 * Returns a string representation of a mat2d
 *
 * @param {ReadonlyMat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ parcelHelpers.export(exports, "frob", ()=>frob);
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "multiplyScalar", ()=>multiplyScalar);
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */ parcelHelpers.export(exports, "multiplyScalarAndAdd", ()=>multiplyScalarAndAdd);
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "sub", ()=>sub);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(6);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[4] = 0;
        out[5] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
}
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
}
function fromValues(a, b, c, d, tx, ty) {
    var out = new _commonJs.ARRAY_TYPE(6);
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
}
function set(out, a, b, c, d, tx, ty) {
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
}
function invert(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3];
    var atx = a[4], aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
}
function determinant(a) {
    return a[0] * a[3] - a[1] * a[2];
}
function multiply(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
}
function rotate(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
}
function scale(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
}
function translate(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
}
function fromRotation(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
}
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
}
function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
}
function str(a) {
    return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
}
function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    return out;
}
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    return out;
}
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    return out;
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
var mul = multiply;
var sub = subtract;

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lCzKX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 3x3 Matrix
 * @module mat3
 */ /**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "fromMat4", ()=>fromMat4);
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "transpose", ()=>transpose);
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "adjoint", ()=>adjoint);
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */ parcelHelpers.export(exports, "determinant", ()=>determinant);
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "translate", ()=>translate);
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "fromTranslation", ()=>fromTranslation);
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "fromRotation", ()=>fromRotation);
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "fromScaling", ()=>fromScaling);
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/ parcelHelpers.export(exports, "fromMat2d", ()=>fromMat2d);
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "fromQuat", ()=>fromQuat);
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "normalFromMat4", ()=>normalFromMat4);
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "projection", ()=>projection);
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ parcelHelpers.export(exports, "frob", ()=>frob);
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "multiplyScalar", ()=>multiplyScalar);
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */ parcelHelpers.export(exports, "multiplyScalarAndAdd", ()=>multiplyScalarAndAdd);
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "sub", ()=>sub);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(9);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
}
function fromMat4(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
}
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new _commonJs.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
}
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
}
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    return out;
}
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    var b01 = a22 * a11 - a12 * a21;
    var b11 = -a22 * a10 + a12 * a20;
    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant
    var det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
}
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    out[0] = a11 * a22 - a12 * a21;
    out[1] = a02 * a21 - a01 * a22;
    out[2] = a01 * a12 - a02 * a11;
    out[3] = a12 * a20 - a10 * a22;
    out[4] = a00 * a22 - a02 * a20;
    out[5] = a02 * a10 - a00 * a12;
    out[6] = a10 * a21 - a11 * a20;
    out[7] = a01 * a20 - a00 * a21;
    out[8] = a00 * a11 - a01 * a10;
    return out;
}
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    var b00 = b[0], b01 = b[1], b02 = b[2];
    var b10 = b[3], b11 = b[4], b12 = b[5];
    var b20 = b[6], b21 = b[7], b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
}
function translate(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
}
function rotate(out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
}
function scale(out, a, v) {
    var x = v[0], y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
}
function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}
function fromRotation(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}
function fromMat2d(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
}
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
}
function normalFromMat4(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
}
function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
}
function str(a) {
    return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
}
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
}
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    return out;
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
var mul = multiply;
var sub = subtract;

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7t3Ne":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */ /**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "transpose", ()=>transpose);
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "adjoint", ()=>adjoint);
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */ parcelHelpers.export(exports, "determinant", ()=>determinant);
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "translate", ()=>translate);
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotateX", ()=>rotateX);
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotateY", ()=>rotateY);
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotateZ", ()=>rotateZ);
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromTranslation", ()=>fromTranslation);
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromScaling", ()=>fromScaling);
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotation", ()=>fromRotation);
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromXRotation", ()=>fromXRotation);
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromYRotation", ()=>fromYRotation);
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromZRotation", ()=>fromZRotation);
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotationTranslation", ()=>fromRotationTranslation);
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */ parcelHelpers.export(exports, "fromQuat2", ()=>fromQuat2);
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */ parcelHelpers.export(exports, "getTranslation", ()=>getTranslation);
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */ parcelHelpers.export(exports, "getScaling", ()=>getScaling);
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */ parcelHelpers.export(exports, "getRotation", ()=>getRotation);
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotationTranslationScale", ()=>fromRotationTranslationScale);
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotationTranslationScaleOrigin", ()=>fromRotationTranslationScaleOrigin);
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromQuat", ()=>fromQuat);
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "frustum", ()=>frustum);
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "perspectiveNO", ()=>perspectiveNO);
parcelHelpers.export(exports, "perspective", ()=>perspective);
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "perspectiveZO", ()=>perspectiveZO);
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "perspectiveFromFieldOfView", ()=>perspectiveFromFieldOfView);
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "orthoNO", ()=>orthoNO);
parcelHelpers.export(exports, "ortho", ()=>ortho);
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "orthoZO", ()=>orthoZO);
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "lookAt", ()=>lookAt);
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "targetTo", ()=>targetTo);
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ parcelHelpers.export(exports, "frob", ()=>frob);
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "multiplyScalar", ()=>multiplyScalar);
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "multiplyScalarAndAdd", ()=>multiplyScalarAndAdd);
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "sub", ()=>sub);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(16);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new _commonJs.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
}
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
}
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3];
        var a12 = a[6], a13 = a[7];
        var a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    return out;
}
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
}
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
}
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; // Cache only the current line of the second matrix
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
}
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
}
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;
    if (len < _commonJs.EPSILON) return null;
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11]; // Construct the elements of the rotation matrix
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
}
function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    } // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
}
function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    } // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
}
function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    } // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
}
function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromRotation(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    if (len < _commonJs.EPSILON) return null;
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c; // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
function fromQuat2(out, a) {
    var translation = new _commonJs.ARRAY_TYPE(3);
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense
    if (magnitude > 0) {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
}
function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
}
function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
}
function getRotation(out, mat) {
    var scaling = new _commonJs.ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;
    if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out[3] = 0.25 * S;
        out[0] = (sm23 - sm32) / S;
        out[1] = (sm31 - sm13) / S;
        out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
        out[3] = (sm23 - sm32) / S;
        out[0] = 0.25 * S;
        out[1] = (sm12 + sm21) / S;
        out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
        out[3] = (sm31 - sm13) / S;
        out[0] = (sm12 + sm21) / S;
        out[1] = 0.25 * S;
        out[2] = (sm23 + sm32) / S;
    } else {
        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
        out[3] = (sm12 - sm21) / S;
        out[0] = (sm31 + sm13) / S;
        out[1] = (sm23 + sm32) / S;
        out[2] = 0.25 * S;
    }
    return out;
}
function fromRotationTranslationScale(out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
}
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
}
function perspectiveNO(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = 2 * far * near * nf;
    } else {
        out[10] = -1;
        out[14] = -2 * near;
    }
    return out;
}
var perspective = perspectiveNO;
function perspectiveZO(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = far * nf;
        out[14] = far * near * nf;
    } else {
        out[10] = -1;
        out[14] = -near;
    }
    return out;
}
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
    var xScale = 2.0 / (leftTan + rightTan);
    var yScale = 2.0 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = far * near / (near - far);
    out[15] = 0.0;
    return out;
}
function orthoNO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
}
var ortho = orthoNO;
function orthoZO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
}
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];
    if (Math.abs(eyex - centerx) < _commonJs.EPSILON && Math.abs(eyey - centery) < _commonJs.EPSILON && Math.abs(eyez - centerz) < _commonJs.EPSILON) return identity(out);
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.hypot(z0, z1, z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.hypot(x0, x1, x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.hypot(y0, y1, y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
}
function targetTo(out, eye, target, up) {
    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
    var len = z0 * z0 + z1 * z1 + z2 * z2;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        z0 *= len;
        z1 *= len;
        z2 *= len;
    }
    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
    len = x0 * x0 + x1 * x1 + x2 * x2;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
}
function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
}
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
}
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    out[9] = a[9] + b[9] * scale;
    out[10] = a[10] + b[10] * scale;
    out[11] = a[11] + b[11] * scale;
    out[12] = a[12] + b[12] * scale;
    out[13] = a[13] + b[13] * scale;
    out[14] = a[14] + b[14] * scale;
    out[15] = a[15] + b[15] * scale;
    return out;
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
var mul = multiply;
var sub = subtract;

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fFEca":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Quaternion
 * @module quat
 */ /**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/ parcelHelpers.export(exports, "setAxisAngle", ()=>setAxisAngle);
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */ parcelHelpers.export(exports, "getAxisAngle", ()=>getAxisAngle);
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */ parcelHelpers.export(exports, "getAngle", ()=>getAngle);
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */ parcelHelpers.export(exports, "rotateX", ()=>rotateX);
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */ parcelHelpers.export(exports, "rotateY", ()=>rotateY);
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */ parcelHelpers.export(exports, "rotateZ", ()=>rotateZ);
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */ parcelHelpers.export(exports, "calculateW", ()=>calculateW);
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */ parcelHelpers.export(exports, "exp", ()=>exp);
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */ parcelHelpers.export(exports, "ln", ()=>ln);
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */ parcelHelpers.export(exports, "pow", ()=>pow);
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */ parcelHelpers.export(exports, "slerp", ()=>slerp);
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */ parcelHelpers.export(exports, "conjugate", ()=>conjugate);
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */ parcelHelpers.export(exports, "fromMat3", ()=>fromMat3);
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */ parcelHelpers.export(exports, "fromEuler", ()=>fromEuler);
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
parcelHelpers.export(exports, "clone", ()=>clone);
parcelHelpers.export(exports, "fromValues", ()=>fromValues);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "set", ()=>set);
parcelHelpers.export(exports, "add", ()=>add);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "dot", ()=>dot);
parcelHelpers.export(exports, "lerp", ()=>lerp);
parcelHelpers.export(exports, "length", ()=>length);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "normalize", ()=>normalize);
parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "rotationTo", ()=>rotationTo);
parcelHelpers.export(exports, "sqlerp", ()=>sqlerp);
parcelHelpers.export(exports, "setAxes", ()=>setAxes);
var _commonJs = require("./common.js");
var _mat3Js = require("./mat3.js");
var _vec3Js = require("./vec3.js");
var _vec4Js = require("./vec4.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(4);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
    }
    out[3] = 1;
    return out;
}
function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
}
function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
}
function getAxisAngle(out_axis, q) {
    var rad = Math.acos(q[3]) * 2.0;
    var s = Math.sin(rad / 2.0);
    if (s > _commonJs.EPSILON) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
    } else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
    }
    return rad;
}
function getAngle(a, b) {
    var dotproduct = dot(a, b);
    return Math.acos(2 * dotproduct * dotproduct - 1);
}
function multiply(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
}
function rotateX(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
}
function rotateY(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
}
function rotateZ(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
}
function calculateW(out, a) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
}
function exp(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var et = Math.exp(w);
    var s = r > 0 ? et * Math.sin(r) / r : 0;
    out[0] = x * s;
    out[1] = y * s;
    out[2] = z * s;
    out[3] = et * Math.cos(r);
    return out;
}
function ln(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var t = r > 0 ? Math.atan2(r, w) / r : 0;
    out[0] = x * t;
    out[1] = y * t;
    out[2] = z * t;
    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
    return out;
}
function pow(out, a, b) {
    ln(out, a);
    scale(out, out, b);
    exp(out, out);
    return out;
}
function slerp(out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    var omega, cosom, sinom, scale0, scale1; // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)
    if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
    } // calculate coefficients
    if (1.0 - cosom > _commonJs.EPSILON) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    } // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
}
function random(out) {
    // Implementation of http://planning.cs.uiuc.edu/node198.html
    // TODO: Calling random 3 times is probably not the fastest solution
    var u1 = _commonJs.RANDOM();
    var u2 = _commonJs.RANDOM();
    var u3 = _commonJs.RANDOM();
    var sqrt1MinusU1 = Math.sqrt(1 - u1);
    var sqrtU1 = Math.sqrt(u1);
    out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
    out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
    out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
    out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
    return out;
}
function invert(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
    var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
}
function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
}
function fromMat3(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0.0) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0); // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot; // 1/(4w)
        out[0] = (m[5] - m[7]) * fRoot;
        out[1] = (m[6] - m[2]) * fRoot;
        out[2] = (m[1] - m[3]) * fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if (m[4] > m[0]) i = 1;
        if (m[8] > m[i * 3 + i]) i = 2;
        var j = (i + 1) % 3;
        var k = (i + 2) % 3;
        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
}
function fromEuler(out, x, y, z) {
    var halfToRad = 0.5 * Math.PI / 180.0;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;
    var sx = Math.sin(x);
    var cx = Math.cos(x);
    var sy = Math.sin(y);
    var cy = Math.cos(y);
    var sz = Math.sin(z);
    var cz = Math.cos(z);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
}
function str(a) {
    return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
var clone = _vec4Js.clone;
var fromValues = _vec4Js.fromValues;
var copy = _vec4Js.copy;
var set = _vec4Js.set;
var add = _vec4Js.add;
var mul = multiply;
var scale = _vec4Js.scale;
var dot = _vec4Js.dot;
var lerp = _vec4Js.lerp;
var length = _vec4Js.length;
var len = length;
var squaredLength = _vec4Js.squaredLength;
var sqrLen = squaredLength;
var normalize = _vec4Js.normalize;
var exactEquals = _vec4Js.exactEquals;
var equals = _vec4Js.equals;
var rotationTo = function() {
    var tmpvec3 = _vec3Js.create();
    var xUnitVec3 = _vec3Js.fromValues(1, 0, 0);
    var yUnitVec3 = _vec3Js.fromValues(0, 1, 0);
    return function(out, a, b) {
        var dot = _vec3Js.dot(a, b);
        if (dot < -0.999999) {
            _vec3Js.cross(tmpvec3, xUnitVec3, a);
            if (_vec3Js.len(tmpvec3) < 0.000001) _vec3Js.cross(tmpvec3, yUnitVec3, a);
            _vec3Js.normalize(tmpvec3, tmpvec3);
            setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            _vec3Js.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return normalize(out, out);
        }
    };
}();
var sqlerp = function() {
    var temp1 = create();
    var temp2 = create();
    return function(out, a, b, c, d, t) {
        slerp(temp1, a, d, t);
        slerp(temp2, b, c, t);
        slerp(out, temp1, temp2, 2 * t * (1 - t));
        return out;
    };
}();
var setAxes = function() {
    var matr = _mat3Js.create();
    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];
        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];
        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];
        return normalize(out, fromMat3(out, matr));
    };
}();

},{"./common.js":"ceXpS","./mat3.js":"lCzKX","./vec3.js":"fhYnv","./vec4.js":"jE8fJ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fhYnv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 3 Dimensional Vector
 * @module vec3
 */ /**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */ parcelHelpers.export(exports, "length", ()=>length);
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "divide", ()=>divide);
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "scaleAndAdd", ()=>scaleAndAdd);
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "negate", ()=>negate);
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "inverse", ()=>inverse);
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "cross", ()=>cross);
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "hermite", ()=>hermite);
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "bezier", ()=>bezier);
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "transformMat4", ()=>transformMat4);
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "transformMat3", ()=>transformMat3);
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "transformQuat", ()=>transformQuat);
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "rotateX", ()=>rotateX);
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "rotateY", ()=>rotateY);
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "rotateZ", ()=>rotateZ);
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */ parcelHelpers.export(exports, "angle", ()=>angle);
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "zero", ()=>zero);
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "dist", ()=>dist);
parcelHelpers.export(exports, "sqrDist", ()=>sqrDist);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "forEach", ()=>forEach);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(3);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
    }
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
}
function fromValues(x, y, z) {
    var out = new _commonJs.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
}
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
}
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
}
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
}
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
}
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
}
function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
}
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    return out;
}
function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return Math.hypot(x, y, z);
}
function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return x * x + y * y + z * z;
}
function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return x * x + y * y + z * z;
}
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
}
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
}
function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len = x * x + y * y + z * z;
    if (len > 0) //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
    return out;
}
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2];
    var bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
}
function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
}
function hermite(out, a, b, c, d, t) {
    var factorTimes2 = t * t;
    var factor1 = factorTimes2 * (2 * t - 3) + 1;
    var factor2 = factorTimes2 * (t - 2) + t;
    var factor3 = factorTimes2 * (t - 1);
    var factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
}
function bezier(out, a, b, c, d, t) {
    var inverseFactor = 1 - t;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t * t;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
}
function random(out, scale) {
    scale = scale || 1.0;
    var r = _commonJs.RANDOM() * 2.0 * Math.PI;
    var z = _commonJs.RANDOM() * 2.0 - 1.0;
    var zScale = Math.sqrt(1.0 - z * z) * scale;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
}
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
}
function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
}
function transformQuat(out, a, q) {
    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
    var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];
    // var uv = vec3.cross([], qvec, a);
    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);
    var w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2; // vec3.scale(uuv, uuv, 2);
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
}
function rotateX(out, a, b, rad) {
    var p = [], r = []; //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2]; //perform rotation
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
function rotateY(out, a, b, rad) {
    var p = [], r = []; //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2]; //perform rotation
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
function rotateZ(out, a, b, rad) {
    var p = [], r = []; //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2]; //perform rotation
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2]; //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
function angle(a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    out[2] = 0.0;
    return out;
}
function str(a) {
    return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) stride = 3;
        if (!offset) offset = 0;
        if (count) l = Math.min(count * stride + offset, a.length);
        else l = a.length;
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
        }
        return a;
    };
}();

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jE8fJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 4 Dimensional Vector
 * @module vec4
 */ /**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "divide", ()=>divide);
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "scaleAndAdd", ()=>scaleAndAdd);
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */ parcelHelpers.export(exports, "length", ()=>length);
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "negate", ()=>negate);
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "inverse", ()=>inverse);
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */ parcelHelpers.export(exports, "cross", ()=>cross);
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "transformMat4", ()=>transformMat4);
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "transformQuat", ()=>transformQuat);
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "zero", ()=>zero);
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "dist", ()=>dist);
parcelHelpers.export(exports, "sqrDist", ()=>sqrDist);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "forEach", ()=>forEach);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(4);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
    }
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function fromValues(x, y, z, w) {
    var out = new _commonJs.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function set(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
}
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
}
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
}
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
}
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
}
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
}
function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
}
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    return out;
}
function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return Math.hypot(x, y, z, w);
}
function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
}
function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return Math.hypot(x, y, z, w);
}
function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return x * x + y * y + z * z + w * w;
}
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
}
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
}
function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len = x * x + y * y + z * z + w * w;
    if (len > 0) len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
}
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
function cross(out, u, v, w) {
    var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
    var G = u[0];
    var H = u[1];
    var I = u[2];
    var J = u[3];
    out[0] = H * F - I * E + J * D;
    out[1] = -(G * F) + I * C - J * B;
    out[2] = G * E - H * C + J * A;
    out[3] = -(G * D) + H * B - I * A;
    return out;
}
function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
}
function random(out, scale) {
    scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
    // http://projecteuclid.org/euclid.aoms/1177692644;
    var v1, v2, v3, v4;
    var s1, s2;
    do {
        v1 = _commonJs.RANDOM() * 2 - 1;
        v2 = _commonJs.RANDOM() * 2 - 1;
        s1 = v1 * v1 + v2 * v2;
    }while (s1 >= 1);
    do {
        v3 = _commonJs.RANDOM() * 2 - 1;
        v4 = _commonJs.RANDOM() * 2 - 1;
        s2 = v3 * v3 + v4 * v4;
    }while (s2 >= 1);
    var d = Math.sqrt((1 - s1) / s2);
    out[0] = scale * v1;
    out[1] = scale * v2;
    out[2] = scale * v3 * d;
    out[3] = scale * v4 * d;
    return out;
}
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
}
function transformQuat(out, a, q) {
    var x = a[0], y = a[1], z = a[2];
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
}
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    return out;
}
function str(a) {
    return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) stride = 4;
        if (!offset) offset = 0;
        if (count) l = Math.min(count * stride + offset, a.length);
        else l = a.length;
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            vec[3] = a[i + 3];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
            a[i + 3] = vec[3];
        }
        return a;
    };
}();

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jBQem":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */ /**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */ parcelHelpers.export(exports, "fromRotationTranslationValues", ()=>fromRotationTranslationValues);
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q a normalized quaternion
 * @param {ReadonlyVec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */ parcelHelpers.export(exports, "fromRotationTranslation", ()=>fromRotationTranslation);
/**
 * Creates a dual quat from a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyVec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */ parcelHelpers.export(exports, "fromTranslation", ()=>fromTranslation);
/**
 * Creates a dual quat from a quaternion
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */ parcelHelpers.export(exports, "fromRotation", ()=>fromRotation);
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {ReadonlyMat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */ parcelHelpers.export(exports, "fromMat4", ()=>fromMat4);
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */ parcelHelpers.export(exports, "set", ()=>set);
parcelHelpers.export(exports, "getReal", ()=>getReal);
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} dual part
 */ parcelHelpers.export(exports, "getDual", ()=>getDual);
parcelHelpers.export(exports, "setReal", ()=>setReal);
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */ parcelHelpers.export(exports, "setDual", ()=>setDual);
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */ parcelHelpers.export(exports, "getTranslation", ()=>getTranslation);
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "translate", ()=>translate);
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "rotateX", ()=>rotateX);
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "rotateY", ()=>rotateY);
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "rotateZ", ()=>rotateZ);
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "rotateByQuatAppend", ()=>rotateByQuatAppend);
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "rotateByQuatPrepend", ()=>rotateByQuatPrepend);
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "rotateAroundAxis", ()=>rotateAroundAxis);
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 * @function
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
parcelHelpers.export(exports, "mul", ()=>mul);
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */ parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */ parcelHelpers.export(exports, "conjugate", ()=>conjugate);
parcelHelpers.export(exports, "length", ()=>length);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {ReadonlyQuat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat2} a the first dual quaternion.
 * @param {ReadonlyQuat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat2} a the first dual quat.
 * @param {ReadonlyQuat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
var _commonJs = require("./common.js");
var _quatJs = require("./quat.js");
var _mat4Js = require("./mat4.js");
function create() {
    var dq = new _commonJs.ARRAY_TYPE(8);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        dq[0] = 0;
        dq[1] = 0;
        dq[2] = 0;
        dq[4] = 0;
        dq[5] = 0;
        dq[6] = 0;
        dq[7] = 0;
    }
    dq[3] = 1;
    return dq;
}
function clone(a) {
    var dq = new _commonJs.ARRAY_TYPE(8);
    dq[0] = a[0];
    dq[1] = a[1];
    dq[2] = a[2];
    dq[3] = a[3];
    dq[4] = a[4];
    dq[5] = a[5];
    dq[6] = a[6];
    dq[7] = a[7];
    return dq;
}
function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
    var dq = new _commonJs.ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    dq[4] = x2;
    dq[5] = y2;
    dq[6] = z2;
    dq[7] = w2;
    return dq;
}
function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
    var dq = new _commonJs.ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
    dq[4] = ax * w1 + ay * z1 - az * y1;
    dq[5] = ay * w1 + az * x1 - ax * z1;
    dq[6] = az * w1 + ax * y1 - ay * x1;
    dq[7] = -ax * x1 - ay * y1 - az * z1;
    return dq;
}
function fromRotationTranslation(out, q, t) {
    var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q[0], by = q[1], bz = q[2], bw = q[3];
    out[0] = bx;
    out[1] = by;
    out[2] = bz;
    out[3] = bw;
    out[4] = ax * bw + ay * bz - az * by;
    out[5] = ay * bw + az * bx - ax * bz;
    out[6] = az * bw + ax * by - ay * bx;
    out[7] = -ax * bx - ay * by - az * bz;
    return out;
}
function fromTranslation(out, t) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = t[0] * 0.5;
    out[5] = t[1] * 0.5;
    out[6] = t[2] * 0.5;
    out[7] = 0;
    return out;
}
function fromRotation(out, q) {
    out[0] = q[0];
    out[1] = q[1];
    out[2] = q[2];
    out[3] = q[3];
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
}
function fromMat4(out, a) {
    //TODO Optimize this
    var outer = _quatJs.create();
    _mat4Js.getRotation(outer, a);
    var t = new _commonJs.ARRAY_TYPE(3);
    _mat4Js.getTranslation(t, a);
    fromRotationTranslation(out, outer, t);
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    return out;
}
function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
}
function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
    out[0] = x1;
    out[1] = y1;
    out[2] = z1;
    out[3] = w1;
    out[4] = x2;
    out[5] = y2;
    out[6] = z2;
    out[7] = w2;
    return out;
}
var getReal = _quatJs.copy;
function getDual(out, a) {
    out[0] = a[4];
    out[1] = a[5];
    out[2] = a[6];
    out[3] = a[7];
    return out;
}
var setReal = _quatJs.copy;
function setDual(out, q) {
    out[4] = q[0];
    out[5] = q[1];
    out[6] = q[2];
    out[7] = q[3];
    return out;
}
function getTranslation(out, a) {
    var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    return out;
}
function translate(out, a, v) {
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
    out[0] = ax1;
    out[1] = ay1;
    out[2] = az1;
    out[3] = aw1;
    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
    return out;
}
function rotateX(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    _quatJs.rotateX(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
}
function rotateY(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    _quatJs.rotateY(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
}
function rotateZ(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    _quatJs.rotateZ(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
}
function rotateByQuatAppend(out, a, q) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
    out[0] = ax * qw + aw * qx + ay * qz - az * qy;
    out[1] = ay * qw + aw * qy + az * qx - ax * qz;
    out[2] = az * qw + aw * qz + ax * qy - ay * qx;
    out[3] = aw * qw - ax * qx - ay * qy - az * qz;
    ax = a[4];
    ay = a[5];
    az = a[6];
    aw = a[7];
    out[4] = ax * qw + aw * qx + ay * qz - az * qy;
    out[5] = ay * qw + aw * qy + az * qx - ax * qz;
    out[6] = az * qw + aw * qz + ax * qy - ay * qx;
    out[7] = aw * qw - ax * qx - ay * qy - az * qz;
    return out;
}
function rotateByQuatPrepend(out, q, a) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
    out[0] = qx * bw + qw * bx + qy * bz - qz * by;
    out[1] = qy * bw + qw * by + qz * bx - qx * bz;
    out[2] = qz * bw + qw * bz + qx * by - qy * bx;
    out[3] = qw * bw - qx * bx - qy * by - qz * bz;
    bx = a[4];
    by = a[5];
    bz = a[6];
    bw = a[7];
    out[4] = qx * bw + qw * bx + qy * bz - qz * by;
    out[5] = qy * bw + qw * by + qz * bx - qx * bz;
    out[6] = qz * bw + qw * bz + qx * by - qy * bx;
    out[7] = qw * bw - qx * bx - qy * by - qz * bz;
    return out;
}
function rotateAroundAxis(out, a, axis, rad) {
    //Special case for rad = 0
    if (Math.abs(rad) < _commonJs.EPSILON) return copy(out, a);
    var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
    rad = rad * 0.5;
    var s = Math.sin(rad);
    var bx = s * axis[0] / axisLength;
    var by = s * axis[1] / axisLength;
    var bz = s * axis[2] / axisLength;
    var bw = Math.cos(rad);
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    var ax = a[4], ay = a[5], az = a[6], aw = a[7];
    out[4] = ax * bw + aw * bx + ay * bz - az * by;
    out[5] = ay * bw + aw * by + az * bx - ax * bz;
    out[6] = az * bw + aw * bz + ax * by - ay * bx;
    out[7] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    return out;
}
function multiply(out, a, b) {
    var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
    out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
    out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
    out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
    out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
    return out;
}
var mul = multiply;
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    return out;
}
var dot = _quatJs.dot;
function lerp(out, a, b, t) {
    var mt = 1 - t;
    if (dot(a, b) < 0) t = -t;
    out[0] = a[0] * mt + b[0] * t;
    out[1] = a[1] * mt + b[1] * t;
    out[2] = a[2] * mt + b[2] * t;
    out[3] = a[3] * mt + b[3] * t;
    out[4] = a[4] * mt + b[4] * t;
    out[5] = a[5] * mt + b[5] * t;
    out[6] = a[6] * mt + b[6] * t;
    out[7] = a[7] * mt + b[7] * t;
    return out;
}
function invert(out, a) {
    var sqlen = squaredLength(a);
    out[0] = -a[0] / sqlen;
    out[1] = -a[1] / sqlen;
    out[2] = -a[2] / sqlen;
    out[3] = a[3] / sqlen;
    out[4] = -a[4] / sqlen;
    out[5] = -a[5] / sqlen;
    out[6] = -a[6] / sqlen;
    out[7] = a[7] / sqlen;
    return out;
}
function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    out[4] = -a[4];
    out[5] = -a[5];
    out[6] = -a[6];
    out[7] = a[7];
    return out;
}
var length = _quatJs.length;
var len = length;
var squaredLength = _quatJs.squaredLength;
var sqrLen = squaredLength;
function normalize(out, a) {
    var magnitude = squaredLength(a);
    if (magnitude > 0) {
        magnitude = Math.sqrt(magnitude);
        var a0 = a[0] / magnitude;
        var a1 = a[1] / magnitude;
        var a2 = a[2] / magnitude;
        var a3 = a[3] / magnitude;
        var b0 = a[4];
        var b1 = a[5];
        var b2 = a[6];
        var b3 = a[7];
        var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
        out[0] = a0;
        out[1] = a1;
        out[2] = a2;
        out[3] = a3;
        out[4] = (b0 - a0 * a_dot_b) / magnitude;
        out[5] = (b1 - a1 * a_dot_b) / magnitude;
        out[6] = (b2 - a2 * a_dot_b) / magnitude;
        out[7] = (b3 - a3 * a_dot_b) / magnitude;
    }
    return out;
}
function str(a) {
    return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}

},{"./common.js":"ceXpS","./quat.js":"fFEca","./mat4.js":"7t3Ne","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"akwrc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 2 Dimensional Vector
 * @module vec2
 */ /**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "divide", ()=>divide);
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "scaleAndAdd", ()=>scaleAndAdd);
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */ parcelHelpers.export(exports, "length", ()=>length);
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "negate", ()=>negate);
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "inverse", ()=>inverse);
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "cross", ()=>cross);
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat2", ()=>transformMat2);
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat2d", ()=>transformMat2d);
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat3", ()=>transformMat3);
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat4", ()=>transformMat4);
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */ parcelHelpers.export(exports, "angle", ()=>angle);
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "zero", ()=>zero);
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "dist", ()=>dist);
parcelHelpers.export(exports, "sqrDist", ()=>sqrDist);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "forEach", ()=>forEach);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(2);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
    }
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
}
function fromValues(x, y) {
    var out = new _commonJs.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
}
function set(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
}
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
}
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
}
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
}
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
}
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
}
function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
}
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    return out;
}
function distance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return Math.hypot(x, y);
}
function squaredDistance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return x * x + y * y;
}
function length(a) {
    var x = a[0], y = a[1];
    return Math.hypot(x, y);
}
function squaredLength(a) {
    var x = a[0], y = a[1];
    return x * x + y * y;
}
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
}
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
}
function normalize(out, a) {
    var x = a[0], y = a[1];
    var len = x * x + y * y;
    if (len > 0) //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    return out;
}
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
}
function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
}
function lerp(out, a, b, t) {
    var ax = a[0], ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
}
function random(out, scale) {
    scale = scale || 1.0;
    var r = _commonJs.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
}
function transformMat2(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
}
function transformMat2d(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
}
function transformMat3(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
}
function transformMat4(out, a, m) {
    var x = a[0];
    var y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
}
function rotate(out, a, b, rad) {
    //Translate point to the origin
    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad); //perform rotation and translate to correct position
    out[0] = p0 * cosC - p1 * sinC + b[0];
    out[1] = p0 * sinC + p1 * cosC + b[1];
    return out;
}
function angle(a, b) {
    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], // mag is the product of the magnitudes of a and b
    mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), // mag &&.. short circuits if mag == 0
    cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    return out;
}
function str(a) {
    return "vec2(" + a[0] + ", " + a[1] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
var len = length;
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var sqrLen = squaredLength;
var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) stride = 2;
        if (!offset) offset = 0;
        if (count) l = Math.min(count * stride + offset, a.length);
        else l = a.length;
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
        }
        return a;
    };
}();

},{"./common.js":"ceXpS","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jbaDq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AltAzimuthCamera", ()=>AltAzimuthCamera);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _angleJs = require("../helpers/angle.js");
var _cameraJs = require("./camera.js");
class AltAzimuthCamera extends (0, _cameraJs.CameraBase) {
    update(elapsedTime) {
        super.update(elapsedTime);
        if (this._core.config.isDebugVisible) {
            const altitude = (0, _angleJs.AngleHelper).radiansToDegrees(this.altitude);
            const azimuth = (0, _angleJs.AngleHelper).radiansToDegrees(this.azimuth);
            this._core.debugText.addLine(`cam alt ${altitude < 0 ? "" : " "}${altitude.toFixed(1)}`);
            this._core.debugText.addLine(`cam azi ${azimuth < 0 ? "" : " "}${azimuth.toFixed(1)}`);
        }
    }
    get altitude() {
        (0, _glMatrix.vec3).transformQuat(this._up, (0, _constantsJs.Constants).VECTOR3_UNITY, this._combinedRotation);
        (0, _glMatrix.vec3).transformQuat(this._right, (0, _constantsJs.Constants).VECTOR3_UNITX, this._combinedRotation);
        return -(0, _angleJs.AngleHelper).signedAngleBetweenVectors((0, _constantsJs.Constants).VECTOR3_UNITY, this._up, this._right);
    }
    get azimuth() {
        (0, _glMatrix.vec3).transformQuat(this._up, (0, _constantsJs.Constants).VECTOR3_UNITY, this._combinedRotation);
        (0, _glMatrix.vec3).transformQuat(this._right, (0, _constantsJs.Constants).VECTOR3_UNITX, this._combinedRotation);
        return -(0, _angleJs.AngleHelper).signedAngleBetweenVectors((0, _constantsJs.Constants).VECTOR3_UNITX, this._right, this._up);
    }
    setAltAzimuth(altitude, azimuth, isSmooth) {
        (0, _glMatrix.quat).setAxisAngle(this._quat, (0, _constantsJs.Constants).VECTOR3_UNITX, altitude);
        (0, _glMatrix.quat).multiply(this._orbitRotation, this._quat, (0, _constantsJs.Constants).QUAT_IDENTITY);
        (0, _glMatrix.quat).setAxisAngle(this._quat, (0, _constantsJs.Constants).VECTOR3_UNITY, azimuth);
        (0, _glMatrix.quat).multiply(this._orbitRotation, this._orbitRotation, this._quat);
        if (!isSmooth) this.syncSmooth();
    }
    rotate(translationDelta) {
        const length = Math.min(this.width, this.height);
        let angle = translationDelta[1] * (0, _constantsJs.Constants).PI / length;
        (0, _glMatrix.quat).setAxisAngle(this._quat, (0, _constantsJs.Constants).VECTOR3_UNITX, angle);
        (0, _glMatrix.quat).multiply(this._orbitRotation, this._quat, this._orbitRotation);
        angle = translationDelta[0] * (0, _constantsJs.Constants).PI / length;
        (0, _glMatrix.quat).setAxisAngle(this._quat, (0, _constantsJs.Constants).VECTOR3_UNITY, angle);
        (0, _glMatrix.quat).multiply(this._orbitRotation, this._orbitRotation, this._quat);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/angle.js":"3PBRj","./camera.js":"ielbK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dtECF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Constants", ()=>Constants);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class Constants {
}
Constants.TWO_PI = 6.283185307179586;
Constants.PI = 3.141592653589793;
Constants.PI_OVER_TWO = 1.5707963267948966;
Constants.PI_OVER_THREE = 1.0471975511965976;
Constants.PI_OVER_FOUR = 0.7853981633974483;
Constants.PI_OVER_SIX = 0.5235987755982988;
Constants.LOG_2 = 0.6931471805599453;
Constants.RADIANS_PER_DEGREE = 0.017453292519943295;
Constants.DEGREES_PER_RADIAN = 57.29577951308232;
Constants.ROOT_TWO = 1.4142135623730951;
Constants.ROOT_TWO_OVER_TWO = 0.7071067811865476;
Constants.ROOT_THREE = 1.7320508075688772;
Constants.ROOT_THREE_OVER_TWO = 0.8660254037844386;
Constants.ROOT_THREE_OVER_THREE = 0.5773502691896257;
Constants.VECTOR2_ZERO = (0, _glMatrix.vec2).fromValues(0, 0);
Constants.VECTOR2_ONE = (0, _glMatrix.vec2).fromValues(1, 1);
Constants.VECTOR2_UNITX = (0, _glMatrix.vec2).fromValues(1, 0);
Constants.VECTOR2_UNITY = (0, _glMatrix.vec2).fromValues(0, 1);
Constants.VECTOR3_ZERO = (0, _glMatrix.vec3).fromValues(0, 0, 0);
Constants.VECTOR3_ONE = (0, _glMatrix.vec3).fromValues(1, 1, 1);
Constants.VECTOR3_UNITX = (0, _glMatrix.vec3).fromValues(1, 0, 0);
Constants.VECTOR3_UNITY = (0, _glMatrix.vec3).fromValues(0, 1, 0);
Constants.VECTOR3_UNITZ = (0, _glMatrix.vec3).fromValues(0, 0, 1);
Constants.VECTOR3_REFLECTX = (0, _glMatrix.vec3).fromValues(1, -1, -1);
Constants.VECTOR3_REFLECTY = (0, _glMatrix.vec3).fromValues(-1, 1, -1);
Constants.VECTOR3_REFLECTZ = (0, _glMatrix.vec3).fromValues(-1, -1, 1);
Constants.VECTOR4_ZERO = (0, _glMatrix.vec4).fromValues(0, 0, 0, 0);
Constants.VECTOR4_ONE = (0, _glMatrix.vec4).fromValues(1, 1, 1, 1);
Constants.VECTOR4_UNITX = (0, _glMatrix.vec4).fromValues(1, 0, 0, 0);
Constants.VECTOR4_UNITY = (0, _glMatrix.vec4).fromValues(0, 1, 0, 0);
Constants.VECTOR4_UNITZ = (0, _glMatrix.vec4).fromValues(0, 0, 1, 0);
Constants.VECTOR4_UNITW = (0, _glMatrix.vec4).fromValues(0, 0, 0, 1);
Constants.MAT3_IDENTITY = (0, _glMatrix.mat3).create();
Constants.MAT4_IDENTITY = (0, _glMatrix.mat4).create();
Constants.MAT4_ROTATION_MINUS_90 = (0, _glMatrix.mat4).fromValues(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
Constants.QUAT_IDENTITY = (0, _glMatrix.quat).create();
Constants.QUAT_ROTATEX_PLUS_90 = (0, _glMatrix.quat).fromValues(Constants.ROOT_TWO_OVER_TWO, 0, 0, Constants.ROOT_TWO_OVER_TWO);
Constants.QUAT_ROTATEX_MINUS_90 = (0, _glMatrix.quat).fromValues(-Constants.ROOT_TWO_OVER_TWO, 0, 0, Constants.ROOT_TWO_OVER_TWO);
Constants.QUAT_ROTATEY_PLUS_90 = (0, _glMatrix.quat).fromValues(0, Constants.ROOT_TWO_OVER_TWO, 0, Constants.ROOT_TWO_OVER_TWO);
Constants.QUAT_ROTATEY_MINUS_90 = (0, _glMatrix.quat).fromValues(0, -Constants.ROOT_TWO_OVER_TWO, 0, Constants.ROOT_TWO_OVER_TWO);
Constants.QUAT_ROTATEZ_PLUS_90 = (0, _glMatrix.quat).fromValues(0, 0, Constants.ROOT_TWO_OVER_TWO, Constants.ROOT_TWO_OVER_TWO);
Constants.QUAT_ROTATEZ_MINUS_90 = (0, _glMatrix.quat).fromValues(0, 0, -Constants.ROOT_TWO_OVER_TWO, Constants.ROOT_TWO_OVER_TWO);
Constants.MILLISECONDS_PER_DAY = 86400000;

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3PBRj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AngleHelper", ()=>AngleHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mathJs = require("./math.js");
var _constantsJs = require("../constants.js");
class AngleHelper {
    static degreesToRadians(degrees) {
        return degrees * (0, _constantsJs.Constants).RADIANS_PER_DEGREE;
    }
    static radiansToDegrees(radians) {
        return radians * (0, _constantsJs.Constants).DEGREES_PER_RADIAN;
    }
    static wrapAngle(angle) {
        if (angle > (0, _constantsJs.Constants).PI) angle = angle - (0, _constantsJs.Constants).TWO_PI;
        else if (angle < -(0, _constantsJs.Constants).prototype) angle += (0, _constantsJs.Constants).TWO_PI;
        return angle;
    }
    static sphericalToCartesian(altitude, longitude, latitude, result) {
        latitude = AngleHelper.degreesToRadians(latitude);
        longitude = AngleHelper.degreesToRadians(longitude);
        const scale = Math.cos(latitude);
        result[0] = altitude * scale * Math.sin(longitude);
        result[1] = altitude * Math.sin(latitude);
        result[2] = altitude * scale * Math.cos(longitude);
    }
    static cartesianToSpherical(x, y, z, result) {
        result[0] = Math.atan2(x, z);
        result[1] = Math.asin(y);
    }
    static angleBetweenVectors(from, to) {
        if ((0, _glMatrix.vec3).exactEquals(from, to)) return 0;
        else {
            const dot = (0, _mathJs.MathHelper).clamp((0, _glMatrix.vec3).dot(from, to), -1, 1);
            return Math.acos(dot);
        }
    }
    static signedAngleBetweenVectors(from, to, up) {
        if ((0, _glMatrix.vec3).exactEquals(from, to)) return 0;
        else {
            const dot = (0, _mathJs.MathHelper).clamp((0, _glMatrix.vec3).dot(from, to), -1, 1);
            let angle = Math.acos(dot);
            (0, _glMatrix.vec3).cross(AngleHelper._vec3, from, to);
            if ((0, _glMatrix.vec3).dot(AngleHelper._vec3, up) < 0) angle = -angle;
            return angle;
        }
    }
}
AngleHelper._vec3 = (0, _glMatrix.vec3).create();

},{"gl-matrix":"3mrln","./math.js":"jeH35","../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jeH35":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "MathHelper", ()=>MathHelper);
parcelHelpers.export(exports, "PseudoRandom", ()=>PseudoRandom);
class MathHelper {
    static clamp(value, min, max) {
        return Math.max(Math.min(value, max), min);
    }
    static lerp(value1, value2, amount) {
        return value1 + (value2 - value1) * amount;
    }
    static normalize(value, min, max, from = 0, to = 1) {
        return max - min == 0 ? 0 : (to - from) * (value - min) / (max - min) + from;
    }
    static splitExponent(value, result) {
        let exponent = Math.round(Math.log10(Math.abs(value)));
        let coefficient = value / Math.pow(10, exponent);
        if (coefficient < 1) {
            coefficient *= 10;
            exponent--;
        }
        result[0] = coefficient;
        result[1] = exponent;
    }
    static combineExponent(mantissa, exponent) {
        return mantissa * Math.pow(10, exponent);
    }
    static isPowerOf2(value) {
        return (value & value - 1) == 0;
    }
}
class PseudoRandom {
    constructor(seed){
        this._seed = seed % 2147483647;
        if (this._seed <= 0) this._seed += 2147483646;
    }
    next() {
        return this._seed = this._seed * 16807 % 2147483647;
    }
    nextFloat() {
        return (this.next() - 1) / 2147483646;
    }
    nextInteger(min, max) {
        return Math.floor(this.nextFloat() * (max - min + 1) + min);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ielbK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CameraBase", ()=>CameraBase);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
var _constantsJs = require("../constants.js");
class CameraBase {
    constructor(core){
        this._core = core;
        this._vec3 = (0, _glMatrix.vec3).create();
        this._quat = (0, _glMatrix.quat).create();
        this._mat3 = (0, _glMatrix.mat3).create();
        this._right = (0, _glMatrix.vec3).create();
        this._up = (0, _glMatrix.vec3).create();
        this._forward = (0, _glMatrix.vec3).create();
        this._modelManipulationOrigin = (0, _glMatrix.vec3).create();
        this.modelPosition = (0, _glMatrix.vec3).create();
        this.modelScale = (0, _glMatrix.vec3).create();
        this.modelRotation = (0, _glMatrix.quat).create();
        this._orbitRotation = (0, _glMatrix.quat).create();
        this._orbitDirection = (0, _glMatrix.quat).create();
        this._smoothedOrbitRotation = (0, _glMatrix.quat).create();
        this._smoothedCameraPosition = (0, _glMatrix.vec3).create();
        this._smoothedCameraRotation = (0, _glMatrix.quat).create();
        this._cameraPosition = (0, _glMatrix.vec3).create();
        this._cameraRotation = (0, _glMatrix.quat).create();
        this._combinedPosition = (0, _glMatrix.vec3).create();
        this._combinedRotation = (0, _glMatrix.quat).create();
        this._leftToRightEye = (0, _glMatrix.vec3).create();
        this._pickVMatrix = (0, _glMatrix.mat4).create();
        this._eyePositions = [
            (0, _glMatrix.vec3).create(),
            (0, _glMatrix.vec3).create()
        ];
        this._vMatrices = [
            (0, _glMatrix.mat4).create(),
            (0, _glMatrix.mat4).create()
        ];
        this._mvMatrices = [
            (0, _glMatrix.mat4).create(),
            (0, _glMatrix.mat4).create()
        ];
        this._pMatrices = [
            (0, _glMatrix.mat4).create(),
            (0, _glMatrix.mat4).create()
        ];
        this._inverseVMatrices = [
            (0, _glMatrix.mat4).create(),
            (0, _glMatrix.mat4).create()
        ];
        this._inversePMatrices = [
            (0, _glMatrix.mat4).create(),
            (0, _glMatrix.mat4).create()
        ];
    }
    get vMatrices() {
        return this._vMatrices;
    }
    get inverseVMatrices() {
        return this._inverseVMatrices;
    }
    get mvMatrices() {
        return this._mvMatrices;
    }
    get pMatrices() {
        return this._pMatrices;
    }
    get inversePMatrices() {
        return this._inversePMatrices;
    }
    get pickVMatrix() {
        return this._pickVMatrix;
    }
    get rMatrix() {
        return this._mat3;
    }
    getOrbit(value) {
        (0, _glMatrix.quat).copy(value, this._orbitRotation);
    }
    setOrbit(value, isSmooth) {
        (0, _glMatrix.quat).copy(this._orbitRotation, value);
        if (!isSmooth) (0, _glMatrix.quat).copy(this._smoothedOrbitRotation, value);
    }
    getPosition(value) {
        (0, _glMatrix.vec3).copy(value, this._cameraPosition);
    }
    setPosition(value, isSmooth) {
        (0, _glMatrix.vec3).copy(this._cameraPosition, value);
        if (!isSmooth) (0, _glMatrix.vec3).copy(this._smoothedCameraPosition, value);
    }
    reset(isSmooth) {
        (0, _glMatrix.vec3).copy(this._cameraPosition, (0, _constantsJs.Constants).VECTOR3_ZERO);
        (0, _glMatrix.quat).copy(this._cameraRotation, (0, _constantsJs.Constants).QUAT_IDENTITY);
        (0, _glMatrix.quat).copy(this._orbitRotation, (0, _constantsJs.Constants).QUAT_IDENTITY);
        if (!isSmooth) this.syncSmooth();
    }
    update(elapsedTime) {
        let amount = Math.min(elapsedTime * this._core.config.positionSmoothing, 1);
        (0, _glMatrix.vec3).lerp(this._smoothedCameraPosition, this._smoothedCameraPosition, this._cameraPosition, amount);
        amount = Math.min(elapsedTime * this._core.config.rotationSmoothing, 1);
        (0, _glMatrix.quat).slerp(this._smoothedCameraRotation, this._smoothedCameraRotation, this._cameraRotation, amount);
        (0, _glMatrix.quat).slerp(this._smoothedOrbitRotation, this._smoothedOrbitRotation, this._orbitRotation, amount);
        const epsilon = 0.000001;
        let x;
        let y;
        let z;
        let w;
        x = this._smoothedCameraPosition[0] - this._cameraPosition[0];
        y = this._smoothedCameraPosition[1] - this._cameraPosition[1];
        z = this._smoothedCameraPosition[2] - this._cameraPosition[2];
        if (Math.abs(x) < epsilon && Math.abs(y) < epsilon && Math.abs(z) < epsilon) (0, _glMatrix.vec3).copy(this._smoothedCameraPosition, this._cameraPosition);
        x = this._smoothedCameraRotation[0] - this._cameraRotation[0];
        y = this._smoothedCameraRotation[1] - this._cameraRotation[1];
        z = this._smoothedCameraRotation[2] - this._cameraRotation[2];
        w = this._smoothedCameraRotation[3] - this._cameraRotation[3];
        if (Math.abs(x) < epsilon && Math.abs(y) < epsilon && Math.abs(z) < epsilon && Math.abs(w) < epsilon) (0, _glMatrix.quat).copy(this._smoothedCameraRotation, this._cameraRotation);
        x = this._smoothedOrbitRotation[0] - this._orbitRotation[0];
        y = this._smoothedOrbitRotation[1] - this._orbitRotation[1];
        z = this._smoothedOrbitRotation[2] - this._orbitRotation[2];
        w = this._smoothedOrbitRotation[3] - this._orbitRotation[3];
        if (Math.abs(x) < epsilon && Math.abs(y) < epsilon && Math.abs(z) < epsilon && Math.abs(w) < epsilon) (0, _glMatrix.quat).copy(this._smoothedOrbitRotation, this._orbitRotation);
        (0, _glMatrix.quat).normalize(this._smoothedCameraRotation, this._smoothedCameraRotation);
        (0, _glMatrix.quat).normalize(this._smoothedOrbitRotation, this._smoothedOrbitRotation);
        (0, _glMatrix.quat).conjugate(this._orbitDirection, this._smoothedOrbitRotation);
        (0, _glMatrix.vec3).transformMat4(this._modelManipulationOrigin, this.modelManipulationOrigin, this.modelMMatrix);
        (0, _glMatrix.vec3).subtract(this._vec3, this._smoothedCameraPosition, this._modelManipulationOrigin);
        (0, _glMatrix.vec3).transformQuat(this._combinedPosition, this._vec3, this._orbitDirection);
        (0, _glMatrix.vec3).add(this._combinedPosition, this._combinedPosition, this._modelManipulationOrigin);
        (0, _glMatrix.quat).multiply(this._combinedRotation, this._orbitDirection, this._smoothedCameraRotation);
        (0, _glMatrix.mat3).fromQuat(this._mat3, this._combinedRotation);
        this._right[0] = this._mat3[0];
        this._right[1] = this._mat3[1];
        this._right[2] = this._mat3[2];
        this._up[0] = this._mat3[3];
        this._up[1] = this._mat3[4];
        this._up[2] = this._mat3[5];
        this._forward[0] = this._mat3[6];
        this._forward[1] = this._mat3[7];
        this._forward[2] = this._mat3[8];
        const view = this._vMatrices[0];
        view[0] = this._right[0];
        view[1] = this._up[0];
        view[2] = this._forward[0];
        view[4] = this._right[1];
        view[5] = this._up[1];
        view[6] = this._forward[1];
        view[8] = this._right[2];
        view[9] = this._up[2];
        view[10] = this._forward[2];
        view[12] = -(0, _glMatrix.vec3).dot(this._right, this._combinedPosition);
        view[13] = -(0, _glMatrix.vec3).dot(this._up, this._combinedPosition);
        view[14] = -(0, _glMatrix.vec3).dot(this._forward, this._combinedPosition);
        const aspectRatio = this.width / this.height;
        if (this._core.config.stereoMode == (0, _mainJs.StereoMode).none) {
            (0, _glMatrix.mat4).perspective(this.pMatrices[0], this._core.config.fov, aspectRatio, this._core.config.nearPlane, this._core.config.farPlane);
            (0, _glMatrix.mat4).multiply(this._mvMatrices[0], this._vMatrices[0], this.modelMMatrix);
            (0, _glMatrix.mat4).invert(this._inverseVMatrices[0], this.vMatrices[0]);
            (0, _glMatrix.mat4).invert(this._inversePMatrices[0], this.pMatrices[0]);
        } else {
            (0, _glMatrix.vec3).cross(this._leftToRightEye, this._forward, this._up);
            (0, _glMatrix.vec3).normalize(this._leftToRightEye, this._leftToRightEye);
            (0, _glMatrix.vec3).scaleAndAdd(this._eyePositions[0], this._combinedPosition, this._leftToRightEye, -this._core.config.ipd);
            (0, _glMatrix.vec3).scaleAndAdd(this._eyePositions[1], this._combinedPosition, this._leftToRightEye, this._core.config.ipd);
            this._vMatrices[0][12] += this._core.config.ipd * 0.5;
            (0, _glMatrix.mat4).copy(this._vMatrices[1], this._vMatrices[0]);
            this._vMatrices[1][12] -= this._core.config.ipd;
            const frustumShift = this._core.config.ipd * 0.5 * this._core.config.nearPlane / this._core.config.screenDistance;
            const top = Math.tan(this._core.config.fov * 0.5) * this._core.config.nearPlane;
            const bottom = -top;
            let left = -aspectRatio * top + frustumShift;
            let right = aspectRatio * top + frustumShift;
            (0, _glMatrix.mat4).frustum(this._pMatrices[0], left, right, bottom, top, this._core.config.nearPlane, this._core.config.farPlane);
            left = -aspectRatio * top - frustumShift;
            right = aspectRatio * top - frustumShift;
            (0, _glMatrix.mat4).frustum(this._pMatrices[1], left, right, bottom, top, this._core.config.nearPlane, this._core.config.farPlane);
            (0, _glMatrix.mat4).multiply(this._mvMatrices[0], this._vMatrices[0], this.modelMMatrix);
            (0, _glMatrix.mat4).multiply(this._mvMatrices[1], this._vMatrices[1], this.modelMMatrix);
            (0, _glMatrix.mat4).invert(this._inverseVMatrices[0], this._vMatrices[0]);
            (0, _glMatrix.mat4).invert(this._inversePMatrices[0], this._pMatrices[0]);
            (0, _glMatrix.mat4).copy(this._inverseVMatrices[1], this._inverseVMatrices[0]);
            this._inverseVMatrices[1][12] += this._core.config.ipd;
            (0, _glMatrix.mat4).invert(this._inversePMatrices[1], this._pMatrices[1]);
        }
        if (this._core.config.isDebugVisible) {
            this._core.debugText.addLine(`cam off ${this._cameraPosition[0] < 0 ? "" : " "}${this._cameraPosition[0].toFixed(3)},${this._cameraPosition[1] < 0 ? "" : " "}${this._cameraPosition[1].toFixed(3)},${this._cameraPosition[2] < 0 ? "" : " "}${this._cameraPosition[2].toFixed(3)}`);
            this._core.debugText.addLine(`cam pos ${this._combinedPosition[0] < 0 ? "" : " "}${this._combinedPosition[0].toFixed(3)},${this._combinedPosition[1] < 0 ? "" : " "}${this._combinedPosition[1].toFixed(3)},${this._combinedPosition[2] < 0 ? "" : " "}${this._combinedPosition[2].toFixed(3)}`);
            this._core.debugText.addLine(`cam rot ${this._combinedRotation[0] < 0 ? "" : " "}${this._combinedRotation[0].toFixed(3)},${this._combinedRotation[1] < 0 ? "" : " "}${this._combinedRotation[1].toFixed(3)},${this._combinedRotation[2] < 0 ? "" : " "}${this._combinedRotation[2].toFixed(3)},${this._combinedRotation[3] < 0 ? "" : " "}${this._combinedRotation[3].toFixed(3)}`);
        }
    }
    _zoom(direction, distance) {
        (0, _glMatrix.vec3).scaleAndAdd(this._cameraPosition, this._cameraPosition, direction, distance);
    }
    rotate(translationDelta) {}
    zoom(zoomDelta, x, y) {
        this.unproject(this._vec3, x, y, 1);
        (0, _glMatrix.vec3).normalize(this._vec3, this._vec3);
        const distance = zoomDelta * (0, _glMatrix.vec3).distance(this._combinedPosition, this.modelPosition);
        (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._orbitRotation);
        this._zoom(this._vec3, distance);
    }
    _twist(axis, angle) {}
    twist(angle, x, y) {}
    updatePickVMatrix(x, y) {
        this.unproject(this._vec3, x, y, 1);
        (0, _glMatrix.mat4).lookAt(this._pickVMatrix, this._combinedPosition, this._vec3, this._up);
    }
    syncSmooth() {
        (0, _glMatrix.vec3).copy(this._smoothedCameraPosition, this._cameraPosition);
        (0, _glMatrix.quat).copy(this._smoothedCameraRotation, this._cameraRotation);
        (0, _glMatrix.quat).copy(this._smoothedOrbitRotation, this._orbitRotation);
    }
    updateModelManipulationOrigin(from, to) {
        const a = (0, _glMatrix.vec3).create();
        const b = (0, _glMatrix.vec3).create();
        const c = (0, _glMatrix.vec3).create();
        const d = (0, _glMatrix.vec3).create();
        (0, _glMatrix.vec3).transformMat4(a, from, this.modelMMatrix);
        (0, _glMatrix.vec3).transformMat4(b, to, this.modelMMatrix);
        (0, _glMatrix.vec3).subtract(a, this._cameraPosition, a);
        (0, _glMatrix.vec3).subtract(b, this._cameraPosition, b);
        (0, _glMatrix.vec3).transformQuat(c, a, this._orbitDirection);
        (0, _glMatrix.vec3).transformQuat(d, b, this._orbitDirection);
        (0, _glMatrix.vec3).subtract(c, c, a);
        (0, _glMatrix.vec3).subtract(d, d, b);
        (0, _glMatrix.vec3).subtract(this._vec3, c, d);
        (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._orbitRotation);
        (0, _glMatrix.vec3).add(this._cameraPosition, this._cameraPosition, this._vec3);
        (0, _glMatrix.vec3).add(this._smoothedCameraPosition, this._smoothedCameraPosition, this._vec3);
    }
    unproject(position, x, y, z) {
        (0, _glMatrix.vec3).set(position, 2 * x / this.width - 1, 1 - 2 * y / this.height, z);
        (0, _glMatrix.vec3).transformMat4(position, position, this._inversePMatrices[0]);
        (0, _glMatrix.vec3).transformMat4(position, position, this._inverseVMatrices[0]);
    }
    translate(translationDelta) {
        const distance = (0, _glMatrix.vec3).distance(this.modelPosition, this._combinedPosition);
        const height = 2 * Math.tan(this._core.config.fov / 2) * distance / this.height;
        (0, _glMatrix.vec3).set(this._vec3, height * translationDelta[0], -height * translationDelta[1], 0);
        (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._combinedRotation);
        (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._orbitRotation);
        (0, _glMatrix.vec3).subtract(this._cameraPosition, this._cameraPosition, this._vec3);
    }
}

},{"gl-matrix":"3mrln","../main.js":"2JYph","../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"01Ouk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Config", ()=>Config);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("./constants.js");
var _mainJs = require("./main.js");
var _angleJs = require("./helpers/angle.js");
class Config {
    constructor(core){
        this.reset();
    }
    reset() {
        this.isDebugVisible = false;
        this.logLevel = (0, _mainJs.LogLevel).warn;
        this.shaderPath = "shaders";
        this.fontPath = "fonts";
        this.modelDistance = 0.5;
        this.modelSize = 0.25;
        this.stereoMode = (0, _mainJs.StereoMode).none;
        this.ipd = 0.06;
        this.screenDistance = 0.5;
        this.fov = (0, _angleJs.AngleHelper).degreesToRadians(30);
        this.nearPlane = 0.01;
        this.farPlane = 100;
        this.pickWidth = 512;
        this.pickHeight = 512;
        this.pickHoldDelay = 1000;
        this.pickSelectDelay = 100;
        this.resizeMinimumDelay = 250;
        this.rotationSmoothing = 0.02;
        this.positionSmoothing = 0.02;
        this.focusSmoothing = 0.01;
        this.scaleSmoothing = 0.02;
        this.mouseWheelZoomScale = -0.002;
        this.mouseWheelRotationScale = -0.002;
        this.dragToleranceSquared = 100;
        this.manipulatorMinRelativeDistanceSquared = 100;
        this.isMultiTouchEnabled = true;
        this.isMultiTouchZoomEnabled = true;
        this.isMultiTouchTwistEnabled = true;
        this.isMultiTouchRotateEnabled = true;
        this.isMultiTouchTranslateEnabled = true;
        this.multiTouchZoomScale = 1;
        this.cameraMinDistance = 0.1;
        this.cameraMaxDistance = 10;
        this.xrControllerRayColor = (0, _glMatrix.vec3).fromValues(0.5, 0.5, 0.5);
        this.xrControllerProfile = "windows-mixed-reality";
        this.xrControllerHandedness = "right";
        this.paletteColor = new Uint8Array([
            0x80,
            0x80,
            0x80,
            0
        ]);
        this.textColor = (0, _glMatrix.vec3).create();
        this.textHoverColor = (0, _glMatrix.vec3).create();
        this.textBorderColor = (0, _glMatrix.vec3).create();
        this.textBorderWidth = 0.1;
        this.identityRotation = (0, _constantsJs.Constants).VECTOR3_UNITY;
        this.axesTextLabelMaxGlyphs = 32;
        this.axesTextColor = (0, _glMatrix.vec3).create();
        this.axesTextBorderColor = (0, _glMatrix.vec3).create();
        this.axesTextHoverColor = (0, _glMatrix.vec3).create();
        this.axesTextLabelMajorSize = 0.03;
        this.axesTextLabelMinorSize = 0.02;
        this.axesTextTitleMaxGlyphs = 127;
        this.axesTextTitleSize = 0.05;
        this.axesTextHeadingMaxGlyphs = 128;
        this.axesTextHeadingSize = 0.075;
        this.axesGridMajorThickness = 0.0002;
        this.axesGridMinorThickness = 0.0001;
        this.axesGridZeroThickness = 0.002;
        this.axesGridPickDivisionHeight = 0.025;
        this.axesGridBackgroundColor = (0, _glMatrix.vec3).create();
        this.axesGridHighlightColor = (0, _glMatrix.vec3).create();
        this.axesGridMinorColor = (0, _glMatrix.vec3).create();
        this.axesGridMajorColor = (0, _glMatrix.vec3).create();
        this.axesGridZeroColor = (0, _glMatrix.vec3).create();
        this.axesGridDefaultDivisions = 10;
        this.keyTitleMaxGlyphs = 64;
        this.keyLabelMaxGlyphs = 64;
        this.selectionColor = (0, _glMatrix.vec3).create();
        this.hoverColor = (0, _glMatrix.vec3).create();
        this.activeColor = (0, _glMatrix.vec3).create();
        this.hightlightMode = (0, _mainJs.HighlightMode).color;
        this.lassoThickness = 4;
        this.lassoDashWidth = 2;
        this.lassoColor = (0, _glMatrix.vec3).create();
        this.minCubifiedTreeMapSlice = 0.01;
        this.transitionDuration = 400;
        this.transitionStaggering = 100;
        this.backgroundColor = (0, _glMatrix.vec3).create();
        this.theme = (0, _mainJs.Theme).light;
    }
    get theme() {
        return this._theme;
    }
    set theme(value) {
        if (this._theme != value) {
            this._theme = value;
            switch(value){
                case (0, _mainJs.Theme).dark:
                    (0, _glMatrix.vec3).set(this.backgroundColor, 0, 0, 0);
                    (0, _glMatrix.vec3).set(this.textColor, 0.9, 0.9, 0.9);
                    (0, _glMatrix.vec3).set(this.textHoverColor, 1, 1, 1);
                    (0, _glMatrix.vec3).set(this.textBorderColor, 0, 0, 0);
                    (0, _glMatrix.vec3).set(this.axesTextColor, 0.9, 0.9, 0.9);
                    (0, _glMatrix.vec3).set(this.axesTextBorderColor, 0, 0, 0);
                    (0, _glMatrix.vec3).set(this.axesTextHoverColor, 1, 1, 1);
                    (0, _glMatrix.vec3).set(this.axesGridBackgroundColor, 0.02, 0.02, 0.02);
                    (0, _glMatrix.vec3).set(this.axesGridHighlightColor, 0.04, 0.04, 0.04);
                    (0, _glMatrix.vec3).set(this.axesGridMinorColor, 0.05, 0.05, 0.05);
                    (0, _glMatrix.vec3).set(this.axesGridMajorColor, 0.1, 0.1, 0.1);
                    (0, _glMatrix.vec3).set(this.axesGridZeroColor, 0.05, 0.1, 0.1);
                    (0, _glMatrix.vec3).set(this.selectionColor, 1, 1, 0);
                    (0, _glMatrix.vec3).set(this.hoverColor, 1, 0, 1);
                    (0, _glMatrix.vec3).set(this.activeColor, 0, 1, 1);
                    (0, _glMatrix.vec3).set(this.lassoColor, 0.9, 0.9, 0.9);
                    break;
                case (0, _mainJs.Theme).light:
                    (0, _glMatrix.vec3).set(this.backgroundColor, 1, 1, 1);
                    (0, _glMatrix.vec3).set(this.textColor, 0, 0, 0);
                    (0, _glMatrix.vec3).set(this.textHoverColor, 0.1, 0.1, 0.1);
                    (0, _glMatrix.vec3).set(this.textBorderColor, 1, 1, 1);
                    (0, _glMatrix.vec3).set(this.axesTextColor, 0, 0, 0);
                    (0, _glMatrix.vec3).set(this.axesTextBorderColor, 1, 1, 1);
                    (0, _glMatrix.vec3).set(this.axesTextHoverColor, 0.1, 0.1, 0.1);
                    (0, _glMatrix.vec3).set(this.axesGridBackgroundColor, 1, 1, 1);
                    (0, _glMatrix.vec3).set(this.axesGridHighlightColor, 0.925, 0.925, 0.925);
                    (0, _glMatrix.vec3).set(this.axesGridMinorColor, 0.9, 0.9, 0.9);
                    (0, _glMatrix.vec3).set(this.axesGridMajorColor, 0.8, 0.8, 0.8);
                    (0, _glMatrix.vec3).set(this.axesGridZeroColor, 0.7, 0.9, 0.9);
                    (0, _glMatrix.vec3).set(this.selectionColor, 1, 1, 0);
                    (0, _glMatrix.vec3).set(this.hoverColor, 1, 0, 1);
                    (0, _glMatrix.vec3).set(this.activeColor, 0, 1, 1);
                    (0, _glMatrix.vec3).set(this.lassoColor, 0.1, 0.1, 0.1);
                    break;
            }
            if (this.themeChangedCallback) this.themeChangedCallback(this._theme);
        }
    }
}

},{"gl-matrix":"3mrln","./constants.js":"dtECF","./main.js":"2JYph","./helpers/angle.js":"3PBRj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8y4TE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "DebugText", ()=>DebugText);
class DebugText {
    constructor(){
        this.clear();
    }
    get text() {
        return this._text;
    }
    clear() {
        this._text = "";
    }
    addLine(value) {
        this._text += value + "\n";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hgbGA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Fps", ()=>Fps);
class Fps {
    constructor(core){
        this._core = core;
        this._totalFrames = 0;
        this.reset();
    }
    get frameCounter() {
        return this._frameCounter;
    }
    get totalFrames() {
        return this._totalFrames;
    }
    update(elapsedTime) {
        this._elapsedTime += elapsedTime;
        if (this._elapsedTime > 1000) {
            this._elapsedTime -= 1000;
            this._fps = this._frameCounter;
            this._frameCounter = 0;
        }
        if (this._core.config.isDebugVisible) this._core.debugText.addLine(`fps      ${this._fps}`);
    }
    render() {
        this._frameCounter++;
        this._totalFrames++;
    }
    reset() {
        this._fps = 0;
        this._frameCounter = 0;
        this._elapsedTime = 0;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"46mvC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PaletteType", ()=>PaletteType);
parcelHelpers.export(exports, "PaletteName", ()=>PaletteName);
parcelHelpers.export(exports, "PaletteResources", ()=>PaletteResources);
parcelHelpers.export(exports, "PaletteBase", ()=>PaletteBase);
parcelHelpers.export(exports, "Palette", ()=>Palette);
const PaletteType = {
    sequentialsinglehue: "sequentialsinglehue",
    sequentialmultihue: "sequentialmultihue",
    diverging: "diverging",
    qualitative: "qualitative"
};
const PaletteName = {
    blues: "blues",
    greens: "greens",
    greys: "greys",
    oranges: "oranges",
    purples: "purples",
    reds: "reds",
    viridis: "viridis",
    inferno: "inferno",
    magma: "magma",
    plasma: "plasma",
    bluegreen: "bluegreen",
    bluepurple: "bluepurple",
    greenblue: "greenblue",
    orangered: "orangered",
    purpleblue: "purpleblue",
    purplebluegreen: "purplebluegreen",
    purplered: "purplered",
    redpurple: "redpurple",
    yellowgreen: "yellowgreen",
    yellowgreenblue: "yellowgreenblue",
    yelloworangebrown: "yelloworangebrown",
    yelloworangered: "yelloworangered",
    brownbluegreen: "brownbluegreen",
    pinkyellowgreen: "pinkyellowgreen",
    purplegreen: "purplegreen",
    purpleorange: "purpleorange",
    redblue: "redblue",
    redgrey: "redgrey",
    redyellowblue: "redyellowblue",
    redyellowgreen: "redyellowgreen",
    spectral: "spectral",
    accent: "accent",
    dark2: "dark2",
    paired: "paired",
    pastel1: "pastel1",
    pastel2: "pastel2",
    set1: "set1",
    set2: "set2",
    set3: "set3"
};
class PaletteResources {
    constructor(){
        this.palettes = {
            "blues": {
                type: PaletteType.sequentialsinglehue,
                colors: new Uint8Array([
                    247,
                    251,
                    255,
                    222,
                    235,
                    247,
                    198,
                    219,
                    239,
                    158,
                    202,
                    225,
                    107,
                    174,
                    214,
                    66,
                    146,
                    198,
                    33,
                    113,
                    181,
                    8,
                    81,
                    156,
                    8,
                    48,
                    107
                ])
            },
            "greens": {
                type: PaletteType.sequentialsinglehue,
                colors: new Uint8Array([
                    247,
                    252,
                    245,
                    229,
                    245,
                    224,
                    199,
                    233,
                    192,
                    161,
                    217,
                    155,
                    116,
                    196,
                    118,
                    65,
                    171,
                    93,
                    35,
                    139,
                    69,
                    0,
                    109,
                    44,
                    0,
                    68,
                    27
                ])
            },
            "greys": {
                type: PaletteType.sequentialsinglehue,
                colors: new Uint8Array([
                    255,
                    255,
                    255,
                    240,
                    240,
                    240,
                    217,
                    217,
                    217,
                    189,
                    189,
                    189,
                    150,
                    150,
                    150,
                    115,
                    115,
                    115,
                    82,
                    82,
                    82,
                    37,
                    37,
                    37,
                    0,
                    0,
                    0
                ])
            },
            "oranges": {
                type: PaletteType.sequentialsinglehue,
                colors: new Uint8Array([
                    255,
                    245,
                    235,
                    254,
                    230,
                    206,
                    253,
                    208,
                    162,
                    253,
                    174,
                    107,
                    253,
                    141,
                    60,
                    241,
                    105,
                    19,
                    217,
                    72,
                    1,
                    166,
                    54,
                    3,
                    127,
                    39,
                    4
                ])
            },
            "purples": {
                type: PaletteType.sequentialsinglehue,
                colors: new Uint8Array([
                    252,
                    251,
                    253,
                    239,
                    237,
                    245,
                    218,
                    218,
                    235,
                    188,
                    189,
                    220,
                    158,
                    154,
                    200,
                    128,
                    125,
                    186,
                    106,
                    81,
                    163,
                    84,
                    39,
                    143,
                    63,
                    0,
                    125
                ])
            },
            "reds": {
                type: PaletteType.sequentialsinglehue,
                colors: new Uint8Array([
                    255,
                    245,
                    240,
                    254,
                    224,
                    210,
                    252,
                    187,
                    161,
                    252,
                    146,
                    114,
                    251,
                    106,
                    74,
                    239,
                    59,
                    44,
                    203,
                    24,
                    29,
                    165,
                    15,
                    21,
                    103,
                    0,
                    13
                ])
            },
            "viridis": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    0x48,
                    0x25,
                    0x75,
                    0x41,
                    0x44,
                    0x87,
                    0x35,
                    0x60,
                    0x8d,
                    0x2a,
                    0x78,
                    0x8e,
                    0x21,
                    0x91,
                    0x8d,
                    0x22,
                    0xa8,
                    0x84,
                    0x43,
                    0xbf,
                    0x71,
                    0x7a,
                    0xd1,
                    0x51,
                    0xbc,
                    0xdf,
                    0x27
                ])
            },
            "inferno": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    0x17,
                    0x0c,
                    0x3b,
                    0x42,
                    0x0a,
                    0x68,
                    0x6b,
                    0x17,
                    0x6e,
                    0x93,
                    0x26,
                    0x67,
                    0xbb,
                    0x37,
                    0x55,
                    0xdd,
                    0x51,
                    0x3a,
                    0xf3,
                    0x77,
                    0x1a,
                    0xfc,
                    0xa5,
                    0x0a,
                    0xf6,
                    0xd6,
                    0x45
                ])
            },
            "magma": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    0x15,
                    0x0e,
                    0x37,
                    0x3b,
                    0x0f,
                    0x70,
                    0x65,
                    0x1a,
                    0x80,
                    0x8c,
                    0x29,
                    0x81,
                    0xb6,
                    0x37,
                    0x7a,
                    0xde,
                    0x49,
                    0x68,
                    0xf7,
                    0x6f,
                    0x5c,
                    0xfe,
                    0x9f,
                    0x6d,
                    0xfe,
                    0xce,
                    0x91
                ])
            },
            "plasma": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    0x42,
                    0x03,
                    0x9d,
                    0x6a,
                    0x00,
                    0xa8,
                    0x90,
                    0x0d,
                    0xa4,
                    0xb1,
                    0x2a,
                    0x90,
                    0xcb,
                    0x47,
                    0x79,
                    0xe1,
                    0x64,
                    0x62,
                    0xf2,
                    0x83,
                    0x4c,
                    0xfc,
                    0xa6,
                    0x36,
                    0xfc,
                    0xce,
                    0x25
                ])
            },
            "bluegreen": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    247,
                    252,
                    253,
                    229,
                    245,
                    249,
                    204,
                    236,
                    230,
                    153,
                    216,
                    201,
                    102,
                    194,
                    164,
                    65,
                    174,
                    118,
                    35,
                    139,
                    69,
                    0,
                    109,
                    44,
                    0,
                    68,
                    27
                ])
            },
            "bluepurple": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    247,
                    252,
                    253,
                    224,
                    236,
                    244,
                    191,
                    211,
                    230,
                    158,
                    188,
                    218,
                    140,
                    150,
                    198,
                    140,
                    107,
                    177,
                    136,
                    65,
                    157,
                    129,
                    15,
                    124,
                    77,
                    0,
                    75
                ])
            },
            "greenblue": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    247,
                    252,
                    240,
                    224,
                    243,
                    219,
                    204,
                    235,
                    197,
                    168,
                    221,
                    181,
                    123,
                    204,
                    196,
                    78,
                    179,
                    211,
                    43,
                    140,
                    190,
                    8,
                    104,
                    172,
                    8,
                    64,
                    129
                ])
            },
            "orangered": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    247,
                    236,
                    254,
                    232,
                    200,
                    253,
                    212,
                    158,
                    253,
                    187,
                    132,
                    252,
                    141,
                    89,
                    239,
                    101,
                    72,
                    215,
                    48,
                    31,
                    179,
                    0,
                    0,
                    127,
                    0,
                    0
                ])
            },
            "purpleblue": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    247,
                    251,
                    236,
                    231,
                    242,
                    208,
                    209,
                    230,
                    166,
                    189,
                    219,
                    116,
                    169,
                    207,
                    54,
                    144,
                    192,
                    5,
                    112,
                    176,
                    4,
                    90,
                    141,
                    2,
                    56,
                    88
                ])
            },
            "purplebluegreen": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    247,
                    251,
                    236,
                    226,
                    240,
                    208,
                    209,
                    230,
                    166,
                    189,
                    219,
                    103,
                    169,
                    207,
                    54,
                    144,
                    192,
                    2,
                    129,
                    138,
                    1,
                    108,
                    89,
                    1,
                    70,
                    54
                ])
            },
            "purplered": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    247,
                    244,
                    249,
                    231,
                    225,
                    239,
                    212,
                    185,
                    218,
                    201,
                    148,
                    199,
                    223,
                    101,
                    176,
                    231,
                    41,
                    138,
                    206,
                    18,
                    86,
                    152,
                    0,
                    67,
                    103,
                    0,
                    31
                ])
            },
            "redpurple": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    247,
                    243,
                    253,
                    224,
                    221,
                    252,
                    197,
                    192,
                    250,
                    159,
                    181,
                    247,
                    104,
                    161,
                    221,
                    52,
                    151,
                    174,
                    1,
                    126,
                    122,
                    1,
                    119,
                    73,
                    0,
                    106
                ])
            },
            "yellowgreen": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    255,
                    229,
                    247,
                    252,
                    185,
                    217,
                    240,
                    163,
                    173,
                    221,
                    142,
                    120,
                    198,
                    121,
                    65,
                    171,
                    93,
                    35,
                    132,
                    67,
                    0,
                    104,
                    55,
                    0,
                    69,
                    41
                ])
            },
            "yellowgreenblue": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    255,
                    217,
                    237,
                    248,
                    177,
                    199,
                    233,
                    180,
                    127,
                    205,
                    187,
                    65,
                    182,
                    196,
                    29,
                    145,
                    192,
                    34,
                    94,
                    168,
                    37,
                    52,
                    148,
                    8,
                    29,
                    88
                ])
            },
            "yelloworangebrown": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    255,
                    229,
                    255,
                    247,
                    188,
                    254,
                    227,
                    145,
                    254,
                    196,
                    79,
                    254,
                    153,
                    41,
                    236,
                    112,
                    20,
                    204,
                    76,
                    2,
                    153,
                    52,
                    4,
                    102,
                    37,
                    6
                ])
            },
            "yelloworangered": {
                type: PaletteType.sequentialmultihue,
                colors: new Uint8Array([
                    255,
                    255,
                    204,
                    255,
                    237,
                    160,
                    254,
                    217,
                    118,
                    254,
                    178,
                    76,
                    253,
                    141,
                    60,
                    252,
                    78,
                    42,
                    227,
                    26,
                    28,
                    189,
                    0,
                    38,
                    128,
                    0,
                    38
                ])
            },
            "brownbluegreen": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    84,
                    48,
                    5,
                    140,
                    81,
                    10,
                    191,
                    129,
                    45,
                    223,
                    194,
                    125,
                    246,
                    232,
                    195,
                    245,
                    245,
                    245,
                    199,
                    234,
                    229,
                    128,
                    205,
                    193,
                    53,
                    151,
                    143,
                    1,
                    102,
                    94,
                    0,
                    60,
                    48
                ])
            },
            "pinkyellowgreen": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    142,
                    1,
                    82,
                    197,
                    27,
                    125,
                    222,
                    119,
                    174,
                    241,
                    182,
                    218,
                    253,
                    224,
                    239,
                    247,
                    247,
                    247,
                    230,
                    245,
                    208,
                    184,
                    225,
                    134,
                    127,
                    188,
                    65,
                    77,
                    146,
                    33,
                    39,
                    100,
                    25
                ])
            },
            "purplegreen": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    64,
                    0,
                    75,
                    118,
                    42,
                    131,
                    153,
                    112,
                    171,
                    194,
                    165,
                    207,
                    231,
                    212,
                    232,
                    247,
                    247,
                    247,
                    217,
                    240,
                    211,
                    166,
                    219,
                    160,
                    90,
                    174,
                    97,
                    27,
                    120,
                    55,
                    0,
                    68,
                    27
                ])
            },
            "purpleorange": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    127,
                    59,
                    8,
                    179,
                    88,
                    6,
                    224,
                    130,
                    20,
                    253,
                    184,
                    99,
                    254,
                    224,
                    182,
                    247,
                    247,
                    247,
                    216,
                    218,
                    235,
                    178,
                    171,
                    210,
                    128,
                    115,
                    172,
                    84,
                    39,
                    136,
                    45,
                    0,
                    75
                ])
            },
            "redblue": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    103,
                    0,
                    31,
                    178,
                    24,
                    43,
                    214,
                    96,
                    77,
                    244,
                    165,
                    130,
                    253,
                    219,
                    199,
                    247,
                    247,
                    247,
                    209,
                    229,
                    240,
                    146,
                    197,
                    222,
                    67,
                    147,
                    195,
                    33,
                    102,
                    172,
                    5,
                    48,
                    97
                ])
            },
            "redgrey": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    103,
                    0,
                    31,
                    178,
                    24,
                    43,
                    214,
                    96,
                    77,
                    244,
                    165,
                    130,
                    253,
                    219,
                    199,
                    255,
                    255,
                    255,
                    224,
                    224,
                    224,
                    186,
                    186,
                    186,
                    135,
                    135,
                    135,
                    77,
                    77,
                    77,
                    26,
                    26,
                    26
                ])
            },
            "redyellowblue": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    165,
                    0,
                    38,
                    215,
                    48,
                    39,
                    244,
                    109,
                    67,
                    253,
                    174,
                    97,
                    254,
                    224,
                    144,
                    255,
                    255,
                    191,
                    224,
                    243,
                    248,
                    171,
                    217,
                    233,
                    116,
                    173,
                    209,
                    69,
                    117,
                    180,
                    49,
                    54,
                    149
                ])
            },
            "redyellowgreen": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    165,
                    0,
                    38,
                    215,
                    48,
                    39,
                    244,
                    109,
                    67,
                    253,
                    174,
                    97,
                    254,
                    224,
                    139,
                    255,
                    255,
                    191,
                    217,
                    239,
                    139,
                    166,
                    217,
                    106,
                    102,
                    189,
                    99,
                    26,
                    152,
                    80,
                    0,
                    104,
                    55
                ])
            },
            "spectral": {
                type: PaletteType.diverging,
                colors: new Uint8Array([
                    158,
                    1,
                    66,
                    213,
                    62,
                    79,
                    244,
                    109,
                    67,
                    253,
                    174,
                    97,
                    254,
                    224,
                    139,
                    255,
                    255,
                    191,
                    230,
                    245,
                    152,
                    171,
                    221,
                    164,
                    102,
                    194,
                    165,
                    50,
                    136,
                    189,
                    94,
                    79,
                    162
                ])
            },
            "accent": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    127,
                    201,
                    127,
                    190,
                    174,
                    212,
                    253,
                    192,
                    134,
                    255,
                    255,
                    153,
                    56,
                    108,
                    176,
                    240,
                    2,
                    127,
                    191,
                    91,
                    23,
                    102,
                    102,
                    102
                ])
            },
            "dark2": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    27,
                    158,
                    119,
                    217,
                    95,
                    2,
                    117,
                    112,
                    179,
                    231,
                    41,
                    138,
                    102,
                    166,
                    30,
                    230,
                    171,
                    2,
                    166,
                    118,
                    29,
                    102,
                    102,
                    102
                ])
            },
            "paired": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    166,
                    206,
                    227,
                    31,
                    120,
                    180,
                    178,
                    223,
                    138,
                    51,
                    160,
                    44,
                    251,
                    154,
                    153,
                    227,
                    26,
                    28,
                    253,
                    191,
                    111,
                    255,
                    127,
                    0,
                    202,
                    178,
                    214,
                    106,
                    61,
                    154,
                    255,
                    255,
                    153,
                    177,
                    89,
                    40
                ])
            },
            "pastel1": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    251,
                    180,
                    174,
                    179,
                    205,
                    227,
                    204,
                    235,
                    197,
                    222,
                    203,
                    228,
                    254,
                    217,
                    166,
                    255,
                    255,
                    204,
                    229,
                    216,
                    189,
                    253,
                    218,
                    236,
                    242,
                    242,
                    242
                ])
            },
            "pastel2": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    179,
                    226,
                    205,
                    253,
                    205,
                    172,
                    203,
                    213,
                    232,
                    244,
                    202,
                    228,
                    230,
                    245,
                    201,
                    255,
                    242,
                    174,
                    241,
                    226,
                    204,
                    204,
                    204,
                    204
                ])
            },
            "set1": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    228,
                    26,
                    28,
                    55,
                    126,
                    184,
                    77,
                    175,
                    74,
                    152,
                    78,
                    163,
                    255,
                    127,
                    0,
                    255,
                    255,
                    51,
                    166,
                    86,
                    40,
                    247,
                    129,
                    191,
                    153,
                    153,
                    153
                ])
            },
            "set2": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    102,
                    194,
                    165,
                    252,
                    141,
                    98,
                    141,
                    160,
                    203,
                    231,
                    138,
                    195,
                    166,
                    216,
                    84,
                    255,
                    217,
                    47,
                    229,
                    196,
                    148,
                    179,
                    179,
                    179
                ])
            },
            "set3": {
                type: PaletteType.qualitative,
                colors: new Uint8Array([
                    141,
                    211,
                    199,
                    255,
                    255,
                    179,
                    190,
                    186,
                    218,
                    251,
                    128,
                    114,
                    128,
                    177,
                    211,
                    253,
                    180,
                    98,
                    179,
                    222,
                    105,
                    252,
                    205,
                    229,
                    217,
                    217,
                    217,
                    188,
                    128,
                    189,
                    204,
                    235,
                    197,
                    255,
                    237,
                    111
                ])
            }
        };
    }
}
class PaletteBase {
    constructor(){
        this._colors = null;
    }
    get colors() {
        return this._colors;
    }
    set colors(value) {
        if (this._colors != value) {
            this._colors = value;
            this._changed = true;
        }
    }
    copyFrom(palette) {
        if (palette.colors) this.colors = new Uint8Array(palette.colors);
        else this.colors = null;
    }
    update() {}
}
class Palette extends PaletteBase {
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"b0nxw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "MatrixHelper", ()=>MatrixHelper);
class MatrixHelper {
    static fieldOfViewFromProjectionMatrix(p) {
        return 2 * Math.atan(1 / p[5]);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9v1Q6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cartesian3dAxesHelper", ()=>Cartesian3dAxesHelper);
parcelHelpers.export(exports, "Cartesian3dAxes", ()=>Cartesian3dAxes);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../../constants.js");
var _mainJs = require("../../main.js");
var _axesJs = require("./axes.js");
var _quadJs = require("../../meshes/quad.js");
var _cubeJs = require("../../meshes/cube.js");
var _vertexJs = require("../../vertex.js");
var _axesJs1 = require("../../helpers/axes.js");
var _textJs = require("../../helpers/text.js");
var _pickJs = require("../../helpers/pick.js");
class Cartesian3dAxesHelper {
    static create(core, options) {
        const cartesian3dAxes = new Cartesian3dAxes(core);
        const minBoundsX = options.minBoundsX === undefined ? 0 : options.minBoundsX;
        const minBoundsY = options.minBoundsY === undefined ? 0 : options.minBoundsY;
        const minBoundsZ = options.minBoundsZ === undefined ? 0 : options.minBoundsZ;
        const maxBoundsX = options.maxBoundsX === undefined ? 1 : options.maxBoundsX;
        const maxBoundsY = options.maxBoundsY === undefined ? 1 : options.maxBoundsY;
        const maxBoundsZ = options.maxBoundsZ === undefined ? 1 : options.maxBoundsZ;
        const minValueX = options.minValueX === undefined ? 0 : options.minValueX;
        const minValueY = options.minValueY === undefined ? 0 : options.minValueY;
        const minValueZ = options.minValueZ === undefined ? 0 : options.minValueZ;
        const maxValueX = options.maxValueX === undefined ? 1 : options.maxValueX;
        const maxValueY = options.maxValueY === undefined ? 1 : options.maxValueY;
        const maxValueZ = options.maxValueZ === undefined ? 1 : options.maxValueZ;
        const scaling = options.scaling === undefined ? 1 : options.scaling;
        const tickPositions = [];
        const labelPositions = [];
        const labelScales = [];
        const labels = [];
        const fromValues = [];
        const toValues = [];
        cartesian3dAxes.minBoundsX = minBoundsX;
        cartesian3dAxes.minBoundsY = minBoundsY;
        cartesian3dAxes.minBoundsZ = minBoundsZ;
        cartesian3dAxes.maxBoundsX = maxBoundsX;
        cartesian3dAxes.maxBoundsY = maxBoundsY;
        cartesian3dAxes.maxBoundsZ = maxBoundsZ;
        cartesian3dAxes.scalingX = scaling;
        cartesian3dAxes.scalingY = scaling;
        cartesian3dAxes.scalingZ = scaling;
        const maxLength = Math.max(maxBoundsX - minBoundsX, Math.max(maxBoundsY - minBoundsY, maxBoundsZ - minBoundsZ));
        const requestedDivisions = [
            options.divisionsX == undefined ? Math.max(Math.floor(core.config.axesGridDefaultDivisions * (maxBoundsX - minBoundsX) / maxLength), 1) : options.divisionsX,
            options.divisionsY == undefined ? Math.max(Math.floor(core.config.axesGridDefaultDivisions * (maxBoundsY - minBoundsY) / maxLength), 1) : options.divisionsY,
            options.divisionsZ == undefined ? Math.max(Math.floor(core.config.axesGridDefaultDivisions * (maxBoundsZ - minBoundsZ) / maxLength), 1) : options.divisionsZ, 
        ];
        const minorGridlines = [
            options.minorGridlinesX == undefined ? 2 : options.minorGridlinesX,
            options.minorGridlinesY == undefined ? 2 : options.minorGridlinesY,
            options.minorGridlinesZ == undefined ? 2 : options.minorGridlinesZ
        ];
        const labelMajorSizes = [
            options.labelMajorSizeX === undefined ? core.config.axesTextLabelMajorSize : options.labelMajorSizeX,
            options.labelMajorSizeY === undefined ? core.config.axesTextLabelMajorSize : options.labelMajorSizeY,
            options.labelMajorSizeZ === undefined ? core.config.axesTextLabelMajorSize : options.labelMajorSizeZ
        ];
        const labelMinorSizes = [
            options.labelMinorSizeX === undefined ? core.config.axesTextLabelMinorSize : options.labelMinorSizeX,
            options.labelMinorSizeY === undefined ? core.config.axesTextLabelMinorSize : options.labelMinorSizeY,
            options.labelMinorSizeZ === undefined ? core.config.axesTextLabelMinorSize : options.labelMinorSizeZ
        ];
        cartesian3dAxes.isDiscreteX = options.isDiscreteX;
        cartesian3dAxes.isDiscreteY = options.isDiscreteY;
        cartesian3dAxes.isDiscreteZ = options.isDiscreteZ;
        cartesian3dAxes.isGridPickingEnabled = options.isGridPickingEnabled;
        const isDivisionPickingEnabledArray = [
            options.isDivisionPickingEnabledX,
            options.isDivisionPickingEnabledY,
            options.isDivisionPickingEnabledZ, 
        ];
        const isLabelPickingEnabledArray = [
            options.isLabelPickingEnabledX,
            options.isLabelPickingEnabledY,
            options.isLabelPickingEnabledZ, 
        ];
        const labelsArray = [
            options.labelsX,
            options.labelsY,
            options.labelsZ
        ];
        const labelOrientationsArray = [
            options.labelOrientationX,
            options.labelOrientationY,
            options.labelOrientationZ
        ];
        const labelOrientationDefaultArray = [
            (0, _mainJs.AxesTextOrientation).parallel,
            (0, _mainJs.AxesTextOrientation).perpendicular,
            (0, _mainJs.AxesTextOrientation).parallel
        ];
        const areTicksVisibleArray = [
            options.arePickDivisionsVisibleX,
            options.arePickDivisionsVisibleY,
            options.arePickDivisionsVisibleZ
        ];
        const minValueArray = [
            minValueX,
            minValueY,
            minValueZ
        ];
        const maxValueArray = [
            maxValueX,
            maxValueY,
            maxValueZ
        ];
        const isDiscreteArray = [
            options.isDiscreteX,
            options.isDiscreteY,
            options.isDiscreteZ
        ];
        const titleArray = [
            options.titleX,
            options.titleY,
            options.titleZ
        ];
        const titleSizeArray = [
            options.titleSizeX,
            options.titleSizeY,
            options.titleSizeZ
        ];
        const headingArray = [
            options.headingX,
            options.headingY,
            options.headingZ
        ];
        const headingSizeArray = [
            options.headingSizeX,
            options.headingSizeY,
            options.headingSizeZ
        ];
        for(let axisId = 0; axisId < 3; axisId++){
            tickPositions.push([]);
            labels.push([]);
            labelPositions.push([]);
            labelScales.push([]);
            fromValues.push([]);
            toValues.push([]);
            const label = labelsArray[axisId];
            const minValue = minValueArray[axisId];
            const maxValue = maxValueArray[axisId];
            const discrete = isDiscreteArray[axisId];
            if (discrete) {
                const totalDivisions = maxValue - minValue + 1;
                const maxDivisions = Math.min(requestedDivisions[axisId], totalDivisions);
                (0, _axesJs1.AxisHelper).discrete(minValue, maxValue, totalDivisions, maxDivisions, label, labels[axisId], labelPositions[axisId], tickPositions[axisId], fromValues[axisId], toValues[axisId]);
                for(let i = 0; i < labels[axisId].length; i++)labelScales[axisId].push(labelMajorSizes[axisId]);
                cartesian3dAxes.minorGridlines[axisId] = 1;
            } else {
                const divisions = requestedDivisions[axisId];
                (0, _axesJs1.AxisHelper).continuous(minValue, maxValue, divisions, label, labels[axisId], tickPositions[axisId], fromValues[axisId], toValues[axisId]);
                cartesian3dAxes.minorGridlines[axisId] = minorGridlines[axisId];
                for(let i1 = 0; i1 < labels[axisId].length; i1++){
                    labelPositions[axisId].push(tickPositions[axisId][i1]);
                    labelScales[axisId].push(i1 == 0 || i1 == divisions ? labelMajorSizes[axisId] : labelMinorSizes[axisId]);
                }
            }
            cartesian3dAxes.setTickPositions(axisId, tickPositions[axisId]);
            cartesian3dAxes.setLabelPositions(axisId, labelPositions[axisId]);
            cartesian3dAxes.setLabels(axisId, labels[axisId]);
            cartesian3dAxes.setLabelSizes(axisId, labelScales[axisId]);
            cartesian3dAxes.setFromValues(axisId, fromValues[axisId]);
            cartesian3dAxes.setToValues(axisId, toValues[axisId]);
            cartesian3dAxes.setLabelOrientation(axisId, labelOrientationsArray[axisId] === undefined ? labelOrientationDefaultArray[axisId] : labelOrientationsArray[axisId]);
            cartesian3dAxes.setTitle(axisId, titleArray[axisId]);
            cartesian3dAxes.setTitleSize(axisId, titleSizeArray[axisId] === undefined ? core.config.axesTextTitleSize : titleSizeArray[axisId]);
            cartesian3dAxes.setHeading(axisId, headingArray[axisId]);
            cartesian3dAxes.setHeadingSize(axisId, headingSizeArray[axisId] === undefined ? core.config.axesTextHeadingSize : headingSizeArray[axisId]);
            cartesian3dAxes.arePickDivisionsVisible[axisId] = areTicksVisibleArray[axisId] === undefined ? true : areTicksVisibleArray[axisId];
            cartesian3dAxes.isDivisionPickingEnabled[axisId] = isDivisionPickingEnabledArray[axisId];
            cartesian3dAxes.isLabelPickingEnabled[axisId] = isLabelPickingEnabledArray[axisId];
            if (minValue <= 0 && maxValue >= 0) cartesian3dAxes.zero[axisId] = -minValue / (maxValue - minValue);
            else cartesian3dAxes.zero[axisId] = -Number.MAX_VALUE;
        }
        return cartesian3dAxes;
    }
}
class Cartesian3dAxes extends (0, _axesJs.AxesBase) {
    constructor(core){
        super(core);
        this._size = (0, _glMatrix.vec3).create();
        this._translation = (0, _glMatrix.vec3).create();
        this._normal = (0, _glMatrix.vec3).create();
        this._forward = (0, _glMatrix.vec3).create();
        this._right = (0, _glMatrix.vec3).create();
        this._up = (0, _glMatrix.vec3).create();
        this._texCoord = (0, _glMatrix.vec2).create();
        this._bounds = (0, _glMatrix.vec4).create();
        this._vec3 = (0, _glMatrix.vec3).create();
        this._vec4 = (0, _glMatrix.vec4).create();
        this._mat3 = (0, _glMatrix.mat3).create();
        this._isDiscrete = [
            false,
            false,
            false
        ];
        this._minBoundsX = 0;
        this._minBoundsY = 0;
        this._minBoundsZ = 0;
        this._maxBoundsX = 0;
        this._maxBoundsY = 0;
        this._maxBoundsZ = 0;
        this._isForwardFace = [];
        this._isForwardEdge = [];
        this._isOutsideEdge = [];
        for(let i = 0; i < 6; i++)this._isForwardFace.push(false);
        for(let i1 = 0; i1 < 12; i1++){
            this._isForwardEdge.push(false);
            this._isOutsideEdge.push(false);
        }
        this._textOffset = (0, _glMatrix.vec3).create();
        this._textPosition = (0, _glMatrix.vec3).create();
        this._distances = [];
        for(let i2 = 0; i2 < 12; i2++)this._distances.push(0);
        this._labelPositions = [];
        this._labels = [];
        this._labelSizes = [];
        this._maxLabelSize = [];
        this._axesLeftToRightIndexCounts = [];
        this._axesRightToLeftIndexCounts = [];
        this._axesLeftToRightIndexOffsets = [];
        this._axesRightToLeftIndexOffsets = [];
        this._labelMMatrices = [];
        this._orientations = [];
        for(let i3 = 0; i3 < 3; i3++){
            this._maxLabelSize.push((0, _glMatrix.vec2).create());
            this._orientations.push((0, _mainJs.AxesTextOrientation).parallel);
            this._axesLeftToRightIndexCounts.push(0);
            this._axesRightToLeftIndexCounts.push(0);
            this._axesLeftToRightIndexOffsets.push(0);
            this._axesRightToLeftIndexOffsets.push(0);
        }
        for(let i4 = 0; i4 < 12; i4++)this._labelMMatrices.push((0, _glMatrix.mat4).create());
        this._titles = [];
        this._titleSizes = [];
        this._titleIndexCounts = [];
        this._titleIndexOffsets = [];
        this._titleMMatrices = [];
        for(let i5 = 0; i5 < 3; i5++){
            this._titles.push(null);
            this._titleSizes.push(core.config.axesTextTitleSize);
            this._titleIndexCounts.push(0);
            this._titleIndexOffsets.push(0);
        }
        for(let i6 = 0; i6 < 12; i6++)this._titleMMatrices.push((0, _glMatrix.mat4).create());
        this._headings = [];
        this._headingSizes = [];
        this._headingIndexCounts = [];
        this._headingIndexOffsets = [];
        this._headingMMatrices = [];
        this.isHeadingVisible = [];
        for(let i7 = 0; i7 < 3; i7++){
            this._headings.push(null);
            this._headingSizes.push(core.config.axesTextHeadingSize);
            this._headingIndexCounts.push(0);
            this._headingIndexOffsets.push(0);
        }
        for(let i8 = 0; i8 < 12; i8++){
            this._headingMMatrices.push((0, _glMatrix.mat4).create());
            this.isHeadingVisible.push(true);
        }
        this.isEdgeVisible = [];
        this._edgePosition = (0, _glMatrix.vec3).create();
        this._edgePositive = (0, _glMatrix.vec3).create();
        this._edgeNormal = (0, _glMatrix.vec3).create();
        this._edgeNormalTemp = (0, _glMatrix.vec3).create();
        this._edgePositiveTemp = (0, _glMatrix.vec3).create();
        this._isLeftToRightHorizontal = [];
        this._isLeftToRightVertical = [];
        this._edgeHorizontalRight = [];
        this._edgeHorizontalUp = [];
        this._edgeHorizontalForward = [];
        this._edgeVerticalRight = [];
        this._edgeVerticalUp = [];
        this._edgeVerticalForward = [];
        for(let i9 = 0; i9 < 12; i9++){
            this.isEdgeVisible.push(true);
            this._isLeftToRightHorizontal.push(false);
            this._isLeftToRightVertical.push(false);
            this._edgeHorizontalRight.push((0, _glMatrix.vec3).create());
            this._edgeHorizontalUp.push((0, _glMatrix.vec3).create());
            this._edgeHorizontalForward.push((0, _glMatrix.vec3).create());
            this._edgeVerticalRight.push((0, _glMatrix.vec3).create());
            this._edgeVerticalUp.push((0, _glMatrix.vec3).create());
            this._edgeVerticalForward.push((0, _glMatrix.vec3).create());
        }
        this.isFaceVisible = [];
        for(let i10 = 0; i10 < 6; i10++)this.isFaceVisible.push(true);
        this.arePickDivisionsVisible = [];
        this.areFacesVisible = [];
        this._indexTemplate = (0, _quadJs.Quad).INDICES;
        this.zero = (0, _glMatrix.vec3).create();
        this._gridTicksZeros = [];
        this._gridFaceZeros = [];
        this.minorGridlines = (0, _glMatrix.vec3).fromValues(1, 1, 1);
        this._gridTicksMinorGridlines = [];
        this._gridFaceMinorGridlines = [];
        this._gridTicksPositions = [];
        this._gridTicksScales = [];
        this._gridTicksIndexCounts = [];
        this._gridTicksIndexOffsets = [];
        this._gridFaceScale = (0, _glMatrix.vec3).create();
        this._gridFaceIndexCounts = [];
        this._gridFaceIndexOffsets = [];
        this._gridFaceMMatrices = [];
        this._gridTicksMMatrices = [];
        this._gridTicksRotations = [];
        for(let i11 = 0; i11 < 3; i11++){
            this.arePickDivisionsVisible.push(true);
            this.areFacesVisible.push(true);
            this._gridTicksZeros.push((0, _glMatrix.vec2).create());
            this._gridFaceZeros.push((0, _glMatrix.vec2).create());
            this._gridTicksMinorGridlines.push((0, _glMatrix.vec2).create());
            this._gridFaceMinorGridlines.push((0, _glMatrix.vec2).create());
            this._gridTicksScales.push((0, _glMatrix.vec3).create());
            this._gridTicksIndexCounts.push(0);
            this._gridTicksIndexOffsets.push(0);
        }
        for(let i12 = 0; i12 < 6; i12++){
            this._gridFaceIndexCounts.push(0);
            this._gridFaceIndexOffsets.push(0);
            this._gridFaceMMatrices.push((0, _glMatrix.mat4).create());
        }
        for(let i13 = 0; i13 < 12; i13++){
            this._gridTicksMMatrices.push((0, _glMatrix.mat4).create());
            this._gridTicksRotations.push((0, _glMatrix.mat4).create());
            const _mat4 = this._gridTicksRotations[i13];
            _mat4[0] = (0, _cubeJs.Cube).EDGE_POSITIVES[i13][0];
            _mat4[1] = (0, _cubeJs.Cube).EDGE_POSITIVES[i13][1];
            _mat4[2] = (0, _cubeJs.Cube).EDGE_POSITIVES[i13][2];
            _mat4[4] = (0, _cubeJs.Cube).EDGE_NORMALS[i13][0];
            _mat4[5] = (0, _cubeJs.Cube).EDGE_NORMALS[i13][1];
            _mat4[6] = (0, _cubeJs.Cube).EDGE_NORMALS[i13][2];
            (0, _glMatrix.vec3).cross(this._vec3, (0, _cubeJs.Cube).EDGE_POSITIVES[i13], (0, _cubeJs.Cube).EDGE_NORMALS[i13]);
            _mat4[8] = this._vec3[0];
            _mat4[9] = this._vec3[1];
            _mat4[10] = this._vec3[2];
        }
        this._fromValues = [
            null,
            null,
            null
        ];
        this._toValues = [
            null,
            null,
            null
        ];
        this.isDivisionPickingEnabled = [
            false,
            false,
            false
        ];
        this.isLabelPickingEnabled = [
            false,
            false,
            false
        ];
        this.isTitlePickingEnabled = [
            false,
            false,
            false
        ];
        this.isHeadingPickingEnabled = [
            false,
            false,
            false
        ];
        this._scalingX = 1;
        this._scalingY = 1;
        this._scalingZ = 1;
        this._offset = (0, _glMatrix.mat4).create();
    }
    get size() {
        return this._size;
    }
    get isDiscreteX() {
        return this._isDiscrete[0];
    }
    set isDiscreteX(value) {
        if (value != this._isDiscrete[0]) {
            this._isDiscrete[0] = value;
            this._hasChanged = true;
        }
    }
    get isDiscreteY() {
        return this._isDiscrete[1];
    }
    set isDiscreteY(value) {
        if (value != this._isDiscrete[1]) {
            this._isDiscrete[1] = value;
            this._hasChanged = true;
        }
    }
    get isDiscreteZ() {
        return this._isDiscrete[2];
    }
    set isDiscreteZ(value) {
        if (value != this._isDiscrete[2]) {
            this._isDiscrete[2] = value;
            this._hasChanged = true;
        }
    }
    get minBoundsX() {
        return this._minBoundsX;
    }
    set minBoundsX(value) {
        if (value != this._minBoundsX) {
            this._minBoundsX = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsX() {
        return this._maxBoundsX;
    }
    set maxBoundsX(value) {
        if (value != this._minBoundsX) {
            this._maxBoundsX = value;
            this._hasChanged = true;
        }
    }
    get minBoundsY() {
        return this._minBoundsY;
    }
    set minBoundsY(value) {
        if (value != this._minBoundsY) {
            this._minBoundsY = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsY() {
        return this._maxBoundsY;
    }
    set maxBoundsY(value) {
        if (value != this._minBoundsY) {
            this._maxBoundsY = value;
            this._hasChanged = true;
        }
    }
    get minBoundsZ() {
        return this._minBoundsZ;
    }
    set minBoundsZ(value) {
        if (value != this._minBoundsZ) {
            this._minBoundsZ = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsZ() {
        return this._maxBoundsZ;
    }
    set maxBoundsZ(value) {
        if (value != this._minBoundsZ) {
            this._maxBoundsZ = value;
            this._hasChanged = true;
        }
    }
    getIsOutsideEdge(index) {
        return this._isOutsideEdge[index];
    }
    getIsForwardFace(index) {
        return this._isForwardFace[index];
    }
    get textVertices() {
        return this._textVertices;
    }
    get textIndices() {
        return this._textIndices;
    }
    getLabelMMatrix(index) {
        return this._labelMMatrices[index];
    }
    setLabelPositions(index, value) {
        if (this._labelPositions[index] != value) {
            this._labelPositions[index] = value;
            this._hasChanged = true;
        }
    }
    setLabels(index, value) {
        if (this._labels[index] != value) {
            this._labels[index] = value;
            this._hasChanged = true;
        }
    }
    setLabelSizes(index, value) {
        if (this._labelSizes[index] != value) {
            this._labelSizes[index] = value;
            this._hasChanged = true;
        }
    }
    getLabelOrientation(index) {
        return this._orientations[index];
    }
    setLabelOrientation(index, orientation) {
        if (this._orientations[index] != orientation) {
            this._orientations[index] = orientation;
            this._hasChanged = true;
        }
    }
    getTitleIndexCount(index) {
        return this._titleIndexCounts[index];
    }
    getTitleIndexOffset(index) {
        return this._titleIndexOffsets[index];
    }
    getTitleMMatrix(index) {
        return this._titleMMatrices[index];
    }
    setTitle(index, value) {
        if (this._titles[index] != value) {
            this._titles[index] = value;
            this._hasChanged = true;
        }
    }
    setTitleSize(index, value) {
        if (this._titleSizes[index] != value) {
            this._titleSizes[index] = value;
            this._hasChanged = true;
        }
    }
    getHeadingIndexCount(index) {
        return this._headingIndexCounts[index];
    }
    getHeadingIndexOffset(index) {
        return this._headingIndexOffsets[index];
    }
    getHeadingMMatrix(index) {
        return this._headingMMatrices[index];
    }
    setHeading(index, value) {
        if (this._headings[index] != value) {
            this._headings[index] = value;
            this._hasChanged = true;
        }
    }
    setHeadingSize(index, value) {
        if (this._headingSizes[index] != value) {
            this._headingSizes[index] = value;
            this._hasChanged = true;
        }
    }
    getIsLeftToRightHorizontal(index) {
        return this._isLeftToRightHorizontal[index];
    }
    getIsLeftToRightVertical(index) {
        return this._isLeftToRightVertical[index];
    }
    getAxesLeftToRightIndexCount(index) {
        return this._axesLeftToRightIndexCounts[index];
    }
    getAxesRightToLeftIndexCount(index) {
        return this._axesRightToLeftIndexCounts[index];
    }
    getAxesLeftToRightIndexOffset(index) {
        return this._axesLeftToRightIndexOffsets[index];
    }
    getAxesRightToLeftIndexOffset(index) {
        return this._axesRightToLeftIndexOffsets[index];
    }
    get gridVertices() {
        return this._gridVertices;
    }
    get gridIndices() {
        return this._gridIndices;
    }
    getGridTicksIndexCount(index) {
        return this._gridTicksIndexCounts[index];
    }
    getGridTicksIndexOffset(index) {
        return this._gridTicksIndexOffsets[index];
    }
    getGridFaceIndexCount(index) {
        return this._gridFaceIndexCounts[index];
    }
    getGridFaceIndexOffset(index) {
        return this._gridFaceIndexOffsets[index];
    }
    getGridTicksMMatrix(index) {
        return this._gridTicksMMatrices[index];
    }
    getGridFaceMMatrix(index) {
        return this._gridFaceMMatrices[index];
    }
    getGridTicksScale(index) {
        return this._gridTicksScales[index];
    }
    getGridFaceZero(index) {
        return this._gridFaceZeros[index];
    }
    getGridTicksZero(index) {
        return this._gridTicksZeros[index];
    }
    getGridFaceMinorGridlines(index) {
        return this._gridFaceMinorGridlines[index];
    }
    getGridTicksMinorGridlines(index) {
        return this._gridTicksMinorGridlines[index];
    }
    setTickPositions(index, value) {
        if (this._gridTicksPositions[index] != value) {
            this._gridTicksPositions[index] = value;
            this._hasChanged = true;
        }
    }
    get scalingX() {
        return this._scalingX;
    }
    set scalingX(value) {
        if (value != this._scalingX) {
            this._scalingX = value;
            this._hasChanged = true;
        }
    }
    get scalingY() {
        return this._scalingY;
    }
    set scalingY(value) {
        if (value != this._scalingY) {
            this._scalingY = value;
            this._hasChanged = true;
        }
    }
    get scalingZ() {
        return this._scalingZ;
    }
    set scalingZ(value) {
        if (value != this._scalingZ) {
            this._scalingZ = value;
            this._hasChanged = true;
        }
    }
    get offsetX() {
        return this._offset[12];
    }
    set offsetX(value) {
        if (value != this._offset[12]) this._offset[12] = value;
    }
    get offsetY() {
        return this._offset[13];
    }
    set offsetY(value) {
        if (value != this._offset[13]) this._offset[13] = value;
    }
    get offsetZ() {
        return this._offset[14];
    }
    set offsetZ(value) {
        if (value != this._offset[14]) this._offset[14] = value;
    }
    initialize() {
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this.isInitialized) {
            if (this._hasChanged) {
                const start = window.performance.now();
                this._hasChanged = false;
                (0, _glMatrix.vec3).set(this._size, this._maxBoundsX - this._minBoundsX, this._maxBoundsY - this._minBoundsY, this._maxBoundsZ - this._minBoundsZ);
                const maxBounds = Math.max(this._size[0], Math.max(this._size[1], this._size[2]));
                this._size[0] *= this._scalingX / maxBounds;
                this._size[1] *= this._scalingY / maxBounds;
                this._size[2] *= this._scalingZ / maxBounds;
                this._updateGrids(this._size);
                this._updateText(this._size);
                if (this.hasChangedCallback) this.hasChangedCallback();
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d updated ${Math.round(window.performance.now() - start)}ms`);
            }
            (0, _glMatrix.mat4).multiply(this._mMatrix, this.mMatrix, this._offset);
            this._mvMatrix = (0, _glMatrix.mat4).create();
            (0, _glMatrix.mat4).multiply(this._mvMatrix, this._vMatrix, this._mMatrix);
            (0, _glMatrix.mat3).fromMat4(this._mat3, this._mvMatrix);
            for(let faceId = 0; faceId < 6; faceId++){
                (0, _glMatrix.vec3).multiply(this._vec3, (0, _cubeJs.Cube).FACE_POSITIONS[faceId], this._size);
                (0, _glMatrix.vec3).transformMat4(this._forward, this._vec3, this._mvMatrix);
                (0, _glMatrix.vec3).transformMat3(this._normal, (0, _cubeJs.Cube).FACE_NORMALS[faceId], this._mat3);
                this._isForwardFace[faceId] = (0, _glMatrix.vec3).dot(this._normal, this._forward) > 0;
            }
            this._forward[0] = this._mat3[2];
            this._forward[1] = this._mat3[5];
            this._forward[2] = this._mat3[8];
            for(let edgeId = 0; edgeId < 12; edgeId++){
                const faceIds = (0, _cubeJs.Cube).EDGE_FACES[edgeId];
                const forward1 = this._isForwardFace[faceIds[0]];
                const forward2 = this._isForwardFace[faceIds[1]];
                const outsideEdge = forward1 != forward2;
                this._isOutsideEdge[edgeId] = outsideEdge;
                if (outsideEdge) this._isForwardEdge[edgeId] = (0, _glMatrix.vec3).dot((0, _cubeJs.Cube).EDGE_FORWARDS[edgeId], this._forward) < 0;
                this._distances[edgeId] = 0;
            }
            for(let axisId = 0; axisId < 3; axisId++)if (this.arePickDivisionsVisible[axisId]) {
                (0, _glMatrix.vec2).set(this._gridTicksZeros[axisId], this.zero[axisId], -1);
                (0, _glMatrix.vec2).set(this._gridTicksMinorGridlines[axisId], this.minorGridlines[axisId], 1);
                const gridTicksScale = this._gridTicksScales[axisId];
                for(let edge = 0; edge < 4; edge++){
                    const edgeId1 = (0, _cubeJs.Cube).AXIS_EDGES[axisId][edge];
                    if (this._isOutsideEdge[edgeId1] && this.isEdgeVisible[edgeId1]) {
                        let distance = this._distances[edgeId1];
                        distance += this._gridPickDivisionHeight * 0.5;
                        const gridTicksMMatrix = this._gridTicksMMatrices[edgeId1];
                        (0, _glMatrix.vec3).multiply(this._vec3, (0, _cubeJs.Cube).EDGE_POSITIONS[edgeId1], this._size);
                        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId1], distance);
                        (0, _glMatrix.mat4).translate(gridTicksMMatrix, this._mMatrix, this._vec3);
                        (0, _glMatrix.mat4).multiply(gridTicksMMatrix, gridTicksMMatrix, this._gridTicksRotations[edgeId1]);
                        if (!this._isForwardEdge[edgeId1]) (0, _glMatrix.mat4).scale(gridTicksMMatrix, gridTicksMMatrix, (0, _constantsJs.Constants).VECTOR3_REFLECTX);
                        (0, _glMatrix.mat4).scale(gridTicksMMatrix, gridTicksMMatrix, gridTicksScale);
                        distance += this._gridPickDivisionHeight * 0.5;
                        this._distances[edgeId1] = distance;
                    }
                }
            }
            for(let axisId1 = 0; axisId1 < 3; axisId1++)if (this.areFacesVisible[axisId1]) {
                const axisId2 = axisId1 == 0 ? 1 : 0;
                const axisId3 = axisId1 == 2 ? 1 : 2;
                (0, _glMatrix.vec2).set(this._gridFaceZeros[axisId1], this.zero[axisId2], this.zero[axisId3]);
                (0, _glMatrix.vec2).set(this._gridFaceMinorGridlines[axisId1], this.minorGridlines[axisId2], this.minorGridlines[axisId3]);
                for(let face = 0; face < 2; face++){
                    const faceId1 = (0, _cubeJs.Cube).AXIS_FACES[axisId1][face];
                    if (this._isForwardFace[faceId1]) {
                        const gridFaceMMatrix = this._gridFaceMMatrices[faceId1];
                        (0, _glMatrix.mat4).scale(gridFaceMMatrix, this._mMatrix, this._gridFaceScale);
                        if (this._size[axisId1] > 0) (0, _glMatrix.mat4).translate(gridFaceMMatrix, gridFaceMMatrix, (0, _cubeJs.Cube).FACE_POSITIONS[faceId1]);
                    }
                }
            }
            for(let axisId4 = 0; axisId4 < 3; axisId4++)for(let edge1 = 0; edge1 < 4; edge1++){
                const edgeId2 = (0, _cubeJs.Cube).AXIS_EDGES[axisId4][edge1];
                if (this._isOutsideEdge[edgeId2]) {
                    (0, _glMatrix.vec3).multiply(this._edgePosition, (0, _cubeJs.Cube).EDGE_POSITIONS[edgeId2], this._size);
                    (0, _glMatrix.vec3).transformMat4(this._edgePosition, this._edgePosition, this._mvMatrix);
                    (0, _glMatrix.vec3).normalize(this._forward, this._edgePosition);
                    (0, _glMatrix.vec3).negate(this._forward, this._forward);
                    (0, _glMatrix.vec3).cross(this._right, (0, _constantsJs.Constants).VECTOR3_UNITY, this._forward);
                    (0, _glMatrix.vec3).normalize(this._right, this._right);
                    (0, _glMatrix.vec3).cross(this._up, this._forward, this._right);
                    (0, _glMatrix.vec3).transformMat3(this._edgeNormal, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId2], this._mat3);
                    (0, _glMatrix.vec3).transformMat3(this._edgePositive, (0, _cubeJs.Cube).EDGE_POSITIVES[edgeId2], this._mat3);
                    (0, _glMatrix.vec3).copy(this._edgeNormalTemp, this._edgeNormal);
                    (0, _glMatrix.vec3).copy(this._edgePositiveTemp, this._edgePositive);
                    const edgeHorizontalRight = this._edgeHorizontalRight[edgeId2];
                    const edgeHorizontalUp = this._edgeHorizontalUp[edgeId2];
                    const edgeHorizontalForward = this._edgeHorizontalForward[edgeId2];
                    if ((0, _glMatrix.vec3).dot(this._edgeNormalTemp, this._up) > 0) (0, _glMatrix.vec3).copy(edgeHorizontalUp, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId2]);
                    else {
                        (0, _glMatrix.vec3).negate(edgeHorizontalUp, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId2]);
                        (0, _glMatrix.vec3).negate(this._edgeNormalTemp, this._edgeNormalTemp);
                    }
                    if ((0, _glMatrix.vec3).dot(this._edgePositiveTemp, this._right) > 0) {
                        this._isLeftToRightHorizontal[edgeId2] = true;
                        (0, _glMatrix.vec3).copy(edgeHorizontalRight, (0, _cubeJs.Cube).EDGE_POSITIVES[edgeId2]);
                    } else {
                        this._isLeftToRightHorizontal[edgeId2] = false;
                        (0, _glMatrix.vec3).negate(edgeHorizontalRight, (0, _cubeJs.Cube).EDGE_POSITIVES[edgeId2]);
                        (0, _glMatrix.vec3).negate(this._edgePositiveTemp, this._edgePositiveTemp);
                    }
                    (0, _glMatrix.vec3).cross(edgeHorizontalForward, this._edgePositiveTemp, this._edgeNormalTemp);
                    if ((0, _glMatrix.vec3).dot(edgeHorizontalForward, this._forward) < 0) {
                        this._isLeftToRightHorizontal[edgeId2] = !this._isLeftToRightHorizontal[edgeId2];
                        (0, _glMatrix.vec3).negate(edgeHorizontalRight, edgeHorizontalRight);
                    }
                    (0, _glMatrix.vec3).cross(edgeHorizontalForward, edgeHorizontalRight, edgeHorizontalUp);
                    const edgeVerticalRight = this._edgeVerticalRight[edgeId2];
                    const edgeVerticalUp = this._edgeVerticalUp[edgeId2];
                    const edgeVerticalForward = this._edgeVerticalForward[edgeId2];
                    if ((0, _glMatrix.vec3).dot(this._edgeNormal, this._right) < 0) (0, _glMatrix.vec3).copy(edgeVerticalUp, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId2]);
                    else {
                        (0, _glMatrix.vec3).negate(edgeVerticalUp, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId2]);
                        (0, _glMatrix.vec3).negate(this._edgeNormal, this._edgeNormal);
                    }
                    if ((0, _glMatrix.vec3).dot(this._edgePositive, this._up) < 0) {
                        this._isLeftToRightVertical[edgeId2] = true;
                        (0, _glMatrix.vec3).copy(edgeVerticalRight, (0, _cubeJs.Cube).EDGE_POSITIVES[edgeId2]);
                    } else {
                        this._isLeftToRightVertical[edgeId2] = false;
                        (0, _glMatrix.vec3).negate(edgeVerticalRight, (0, _cubeJs.Cube).EDGE_POSITIVES[edgeId2]);
                        (0, _glMatrix.vec3).negate(this._edgePositive, this._edgePositive);
                    }
                    (0, _glMatrix.vec3).cross(edgeVerticalForward, this._edgePositive, this._edgeNormal);
                    if ((0, _glMatrix.vec3).dot(edgeVerticalForward, this._forward) < 0) {
                        this._isLeftToRightVertical[edgeId2] = !this._isLeftToRightVertical[edgeId2];
                        (0, _glMatrix.vec3).negate(edgeVerticalRight, edgeVerticalRight);
                    }
                    (0, _glMatrix.vec3).cross(edgeVerticalForward, edgeVerticalRight, edgeVerticalUp);
                    if (this.isEdgeVisible[edgeId2]) {
                        if (this._labels[axisId4]) this._updateLabels(axisId4, edgeId2);
                        if (this._titles[axisId4]) this._updateTitle(axisId4, edgeId2);
                    }
                    if (this.isHeadingVisible[edgeId2]) this._updateHeading(axisId4, edgeId2);
                }
            }
        }
    }
    _updateLabels(axisId, edgeId) {
        const orientation = this._orientations[axisId];
        let distance = this._distances[edgeId];
        let maxLabelSize = this._maxLabelSize[axisId][1];
        if (orientation == (0, _mainJs.AxesTextOrientation).parallel) maxLabelSize *= this._lineHeight;
        distance += maxLabelSize * 0.5;
        (0, _glMatrix.vec3).multiply(this._vec3, (0, _cubeJs.Cube).EDGE_POSITIONS[edgeId], this._size);
        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId], distance);
        const labelMMatrix = this._labelMMatrices[edgeId];
        labelMMatrix[12] = this._vec3[0];
        labelMMatrix[13] = this._vec3[1];
        labelMMatrix[14] = this._vec3[2];
        if (orientation == (0, _mainJs.AxesTextOrientation).parallel) {
            const right = this._edgeHorizontalRight[edgeId];
            const up = this._edgeHorizontalUp[edgeId];
            const forward = this._edgeHorizontalForward[edgeId];
            labelMMatrix[0] = right[0];
            labelMMatrix[1] = right[1];
            labelMMatrix[2] = right[2];
            labelMMatrix[4] = up[0];
            labelMMatrix[5] = up[1];
            labelMMatrix[6] = up[2];
            labelMMatrix[8] = forward[0];
            labelMMatrix[9] = forward[1];
            labelMMatrix[10] = forward[2];
        } else {
            const right1 = this._edgeVerticalRight[edgeId];
            const up1 = this._edgeVerticalUp[edgeId];
            const forward1 = this._edgeVerticalForward[edgeId];
            labelMMatrix[0] = right1[0];
            labelMMatrix[1] = right1[1];
            labelMMatrix[2] = right1[2];
            labelMMatrix[4] = up1[0];
            labelMMatrix[5] = up1[1];
            labelMMatrix[6] = up1[2];
            labelMMatrix[8] = forward1[0];
            labelMMatrix[9] = forward1[1];
            labelMMatrix[10] = forward1[2];
        }
        (0, _glMatrix.mat4).multiply(labelMMatrix, this._mMatrix, labelMMatrix);
        if (orientation == (0, _mainJs.AxesTextOrientation).perpendicular) (0, _glMatrix.mat4).multiply(labelMMatrix, labelMMatrix, (0, _constantsJs.Constants).MAT4_ROTATION_MINUS_90);
        distance += maxLabelSize * 0.5;
        this._distances[edgeId] = distance;
    }
    _updateTitle(axisId, edgeId) {
        let distance = this._distances[edgeId];
        const titleTextSize = this._titleSizes[axisId] * this._lineHeight;
        distance += titleTextSize * 0.5;
        (0, _glMatrix.vec3).multiply(this._vec3, (0, _cubeJs.Cube).EDGE_POSITIONS[edgeId], this._size);
        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId], distance);
        const titleMMatrix = this._titleMMatrices[edgeId];
        titleMMatrix[12] = this._vec3[0];
        titleMMatrix[13] = this._vec3[1];
        titleMMatrix[14] = this._vec3[2];
        const right = this._edgeHorizontalRight[edgeId];
        const up = this._edgeHorizontalUp[edgeId];
        const forward = this._edgeHorizontalForward[edgeId];
        titleMMatrix[0] = right[0];
        titleMMatrix[1] = right[1];
        titleMMatrix[2] = right[2];
        titleMMatrix[4] = up[0];
        titleMMatrix[5] = up[1];
        titleMMatrix[6] = up[2];
        titleMMatrix[8] = forward[0];
        titleMMatrix[9] = forward[1];
        titleMMatrix[10] = forward[2];
        (0, _glMatrix.mat4).multiply(titleMMatrix, this._mMatrix, titleMMatrix);
        distance += titleTextSize * 0.5;
        this._distances[edgeId] = distance;
    }
    _updateHeading(axisId, edgeId) {
        let distance = this._distances[edgeId];
        const headingTextSize = this._headingSizes[axisId] * this._lineHeight;
        distance += headingTextSize;
        (0, _glMatrix.vec3).multiply(this._vec3, (0, _cubeJs.Cube).EDGE_POSITIONS[edgeId], this._size);
        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _cubeJs.Cube).EDGE_NORMALS[edgeId], distance);
        const headingMMatrix = this._headingMMatrices[edgeId];
        headingMMatrix[12] = this._vec3[0];
        headingMMatrix[13] = this._vec3[1];
        headingMMatrix[14] = this._vec3[2];
        const right = this._edgeHorizontalRight[edgeId];
        const up = this._edgeHorizontalUp[edgeId];
        const forward = this._edgeHorizontalForward[edgeId];
        headingMMatrix[0] = right[0];
        headingMMatrix[1] = right[1];
        headingMMatrix[2] = right[2];
        headingMMatrix[4] = up[0];
        headingMMatrix[5] = up[1];
        headingMMatrix[6] = up[2];
        headingMMatrix[8] = forward[0];
        headingMMatrix[9] = forward[1];
        headingMMatrix[10] = forward[2];
        (0, _glMatrix.mat4).multiply(headingMMatrix, this._mMatrix, headingMMatrix);
        distance += headingTextSize * 0.5;
        this._distances[edgeId] = distance;
    }
    _updateGrids(size) {
        let offset = 0;
        this.pickGridLookup = {};
        this._pickGrid = [];
        const xDivisions = this._gridTicksPositions[0] ? this._gridTicksPositions[0].length - 1 : 0;
        const yDivisions = this._gridTicksPositions[1] ? this._gridTicksPositions[1].length - 1 : 0;
        const zDivisions = this._gridTicksPositions[2] ? this._gridTicksPositions[2].length - 1 : 0;
        const count = 2 * (xDivisions * yDivisions) + 2 * (xDivisions * zDivisions) + 2 * (yDivisions * zDivisions) + xDivisions + yDivisions + zDivisions;
        const byteLength = (0, _vertexJs.PickGridVertex).SIZE_BYTES * count * 4;
        if (!this._gridVertices || this._gridVertices.byteLength < byteLength) {
            this._gridVertices = new ArrayBuffer(byteLength);
            this._gridVerticesView = new DataView(this._gridVertices);
            this._gridIndices = new Uint16Array(count * 6);
        }
        for(let axisId = 0; axisId < 3; axisId++){
            const width = size[axisId];
            (0, _glMatrix.vec3).set(this._gridTicksScales[axisId], width, this._gridPickDivisionHeight, 1);
            offset = this._updateGridTicks(axisId, this._gridVerticesView, this._gridIndices, offset);
            for(let face = 0; face < 2; face++){
                const faceId = (0, _cubeJs.Cube).AXIS_FACES[axisId][face];
                offset = this._updateGridFace(axisId, faceId, this._gridVerticesView, this._gridIndices, offset);
            }
            this._gridFaceScale[axisId] = size[axisId] == 0 ? 1 : size[axisId];
        }
    }
    _updateText(size) {
        let glyphOffset = 0;
        let count = 0;
        for(let axisId = 0; axisId < 3; axisId++){
            const labels = this._labels[axisId];
            if (labels) for(let i = 0; i < labels.length; i++)count += 2 * Math.min(labels[i].length, this._core.config.axesTextLabelMaxGlyphs);
            const title = this._titles[axisId];
            if (title) count += Math.min(title.length, this._core.config.axesTextTitleMaxGlyphs);
            const heading = this._headings[axisId];
            if (heading) count += Math.min(heading.length, this._core.config.axesTextHeadingMaxGlyphs);
        }
        const byteLength = (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES * count * 4;
        if (!this._textVertices || this._textVertices.byteLength < byteLength) {
            this._textVertices = new ArrayBuffer(byteLength);
            this._textVerticesView = new DataView(this._textVertices);
            this._textIndices = new Uint16Array(count * 6);
        }
        this.pickLabelLookup = {};
        this._pickLabel = [];
        for(let axisId1 = 0; axisId1 < 3; axisId1++)if (this._labels[axisId1]) {
            const width = size[axisId1];
            const maxLabelSize = this._maxLabelSize[axisId1];
            const orientation = this._orientations[axisId1];
            (0, _glMatrix.vec2).set(maxLabelSize, 0, 0);
            this._axesLeftToRightIndexOffsets[axisId1] = glyphOffset * 6;
            glyphOffset = this._updateLeftToRightAxisLabels(axisId1, width, maxLabelSize, glyphOffset, orientation, this._labels[axisId1], this._labelPositions[axisId1], this._labelSizes[axisId1]);
            this._axesLeftToRightIndexCounts[axisId1] = glyphOffset * 6 - this._axesLeftToRightIndexOffsets[axisId1];
            this._axesRightToLeftIndexOffsets[axisId1] = glyphOffset * 6;
            glyphOffset = this._updateRightToLeftAxisLabels(axisId1, width, maxLabelSize, glyphOffset, orientation, this._labels[axisId1], this._labelPositions[axisId1], this._labelSizes[axisId1]);
            this._axesRightToLeftIndexCounts[axisId1] = glyphOffset * 6 - this._axesRightToLeftIndexOffsets[axisId1];
        } else {
            this._axesLeftToRightIndexOffsets[axisId1] = glyphOffset * 6;
            this._axesRightToLeftIndexOffsets[axisId1] = glyphOffset * 6;
            this._axesLeftToRightIndexCounts[axisId1] = 0;
            this._axesRightToLeftIndexCounts[axisId1] = 0;
            this._maxLabelSize[axisId1][0] = 0;
            this._maxLabelSize[axisId1][1] = 0;
        }
        this.pickTitleLookup = {};
        this._pickTitle = [];
        for(let axisId2 = 0; axisId2 < 3; axisId2++)if (this._titles[axisId2]) {
            (0, _glMatrix.vec3).set(this._textPosition, 0, 0, 0);
            (0, _glMatrix.vec3).set(this._textOffset, 0, 0, 0);
            this._titleIndexOffsets[axisId2] = glyphOffset * 6;
            const text = (0, _textJs.TextHelper).truncate(this._titles[axisId2], this._core.config.axesTextTitleMaxGlyphs);
            const scale = this._titleSizes[axisId2] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
            const width1 = this._textMetric.width * scale;
            const maxGlyphTop = this._textMetric.maxTop * scale;
            const lineHeight = this._font.size * scale;
            this._textOffset[0] -= width1 / 2;
            this._textOffset[1] -= (lineHeight - maxGlyphTop) / 2;
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesTitle, this._vec4);
            this.pickTitleLookup[pickId] = this._pickTitle.length;
            this._pickTitle.push(axisId2);
            (0, _textJs.TextHelper).addString(this._font, text, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale, this._textOffset, null, this._vec4);
            glyphOffset += text.length;
            this._titleIndexCounts[axisId2] = glyphOffset * 6 - this._titleIndexOffsets[axisId2];
        } else {
            this._titleIndexOffsets[axisId2] = glyphOffset * 6;
            this._titleIndexCounts[axisId2] = 0;
        }
        this.pickHeadingLookup = {};
        this._pickHeading = [];
        for(let axisId3 = 0; axisId3 < 3; axisId3++)if (this._headings[axisId3]) {
            (0, _glMatrix.vec3).set(this._textPosition, 0, 0, 0);
            (0, _glMatrix.vec3).set(this._textOffset, 0, 0, 0);
            this._headingIndexOffsets[axisId3] = glyphOffset * 6;
            const text1 = (0, _textJs.TextHelper).truncate(this._headings[axisId3], this._core.config.axesTextHeadingMaxGlyphs);
            const scale1 = this._headingSizes[axisId3] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text1, this._textMetric);
            const width2 = this._textMetric.width * scale1;
            const maxGlyphTop1 = this._textMetric.maxTop * scale1;
            const lineHeight1 = this._font.size * scale1;
            this._textOffset[0] -= width2 / 2;
            this._textOffset[1] -= (lineHeight1 - maxGlyphTop1) / 2;
            const pickId1 = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId1, (0, _mainJs.PickType).axesHeading, this._vec4);
            this.pickHeadingLookup[pickId1] = this._pickHeading.length;
            this._pickHeading.push(axisId3);
            (0, _textJs.TextHelper).addString(this._font, text1, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale1, this._textOffset, null, this._vec4);
            glyphOffset += text1.length;
            this._headingIndexCounts[axisId3] = glyphOffset * 6 - this._headingIndexOffsets[axisId3];
        } else {
            this._headingIndexOffsets[axisId3] = glyphOffset * 6;
            this._headingIndexCounts[axisId3] = 0;
        }
    }
    _updateLeftToRightAxisLabels(axisId, size, maxSize, glyphOffset, orientation, labels, positions, scales) {
        for(let label = 0; label < labels.length; label++){
            const text = (0, _textJs.TextHelper).truncate(labels[label], this._core.config.axesTextLabelMaxGlyphs);
            const scale = scales[label] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
            const width = this._textMetric.width * scale;
            const maxGlyphTop = this._textMetric.maxTop * scale;
            const lineHeight = this._font.size * scale;
            switch(orientation){
                case (0, _mainJs.AxesTextOrientation).parallel:
                    (0, _glMatrix.vec3).set(this._textPosition, (positions[label] - 0.5) * size, 0, 0);
                    if (this._isDiscrete[axisId]) this._textOffset[0] = -width / 2;
                    else this._textOffset[0] = positions[label] == 0 ? 0 : positions[label] == 1 ? -width : -width / 2;
                    this._textOffset[1] = (maxGlyphTop - lineHeight) / 2;
                    maxSize[0] = Math.max(width, maxSize[0]);
                    maxSize[1] = Math.max(lineHeight, maxSize[1]);
                    break;
                case (0, _mainJs.AxesTextOrientation).perpendicular:
                    (0, _glMatrix.vec3).set(this._textPosition, 0, (positions[label] - 0.5) * size, 0);
                    this._textOffset[0] = -width / 2;
                    if (this._isDiscrete[axisId]) this._textOffset[1] = -maxGlyphTop / 2;
                    else this._textOffset[1] = positions[label] == 0 ? 0 : positions[label] == 1 ? -maxGlyphTop : -maxGlyphTop / 2;
                    maxSize[0] = Math.max(lineHeight, maxSize[0]);
                    maxSize[1] = Math.max(width, maxSize[1]);
                    break;
            }
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesLabel, this._vec4);
            this.pickLabelLookup[pickId] = this._pickLabel.length / 2;
            this._pickLabel.push(axisId);
            this._pickLabel.push(label);
            (0, _textJs.TextHelper).addString(this._font, text, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale, this._textOffset, null, this._vec4);
            glyphOffset += text.length;
        }
        return glyphOffset;
    }
    _updateRightToLeftAxisLabels(axisId, size, maxSize, glyphOffset, orientation, labels, positions, scales) {
        for(let label = 0; label < labels.length; label++){
            const text = (0, _textJs.TextHelper).truncate(labels[label], this._core.config.axesTextLabelMaxGlyphs);
            const scale = scales[label] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
            const width = this._textMetric.width * scale;
            const maxGlyphTop = this._textMetric.maxTop * scale;
            const lineHeight = this._font.size * scale;
            switch(orientation){
                case (0, _mainJs.AxesTextOrientation).parallel:
                    (0, _glMatrix.vec3).set(this._textPosition, (0.5 - positions[label]) * size, 0, 0);
                    if (this._isDiscrete[axisId]) this._textOffset[0] = -width / 2;
                    else this._textOffset[0] = label == 0 ? -width : label == labels.length - 1 ? 0 : -width / 2;
                    this._textOffset[1] = (maxGlyphTop - lineHeight) / 2;
                    break;
                case (0, _mainJs.AxesTextOrientation).perpendicular:
                    (0, _glMatrix.vec3).set(this._textPosition, 0, (0.5 - positions[label]) * size, 0);
                    this._textOffset[0] = -width / 2;
                    if (this._isDiscrete[axisId]) this._textOffset[1] = -maxGlyphTop / 2;
                    else this._textOffset[1] = label == 0 ? -maxGlyphTop : label == labels.length - 1 ? 0 : -maxGlyphTop / 2;
                    break;
            }
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesLabel, this._vec4);
            this.pickLabelLookup[pickId] = this._pickLabel.length / 2;
            this._pickLabel.push(axisId);
            this._pickLabel.push(label);
            (0, _textJs.TextHelper).addString(this._font, text, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale, this._textOffset, null, this._vec4);
            glyphOffset += text.length;
        }
        return glyphOffset;
    }
    _updateGridTicks(axisId, dataView, indices, offset) {
        this._gridTicksIndexOffsets[axisId] = offset * 6;
        if (this._gridTicksPositions[axisId]) {
            const axes = (0, _glMatrix.vec3).create();
            const positions = this._gridTicksPositions[axisId];
            let vertexOffset = offset * 4;
            for(let position = 0; position < positions.length - 1; position++){
                const left = positions[position] - 0.5;
                const right = positions[position + 1] - 0.5;
                axes[axisId] = position + 1;
                const pickId = (0, _pickJs.PickHelper).nextPickId();
                (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesDivision, this._vec4);
                this.pickGridLookup[pickId] = this._pickGrid.length / 3;
                this._pickGrid.push(axes[0]);
                this._pickGrid.push(axes[1]);
                this._pickGrid.push(axes[2]);
                let indexOffset = offset * 6;
                for(let j = 0; j < this._indexTemplate.length; j++)indices[indexOffset++] = this._indexTemplate[j] + vertexOffset;
                (0, _glMatrix.vec4).set(this._bounds, left + 0.5, 0, right + 0.5, 1);
                this._translation[0] = left;
                this._translation[1] = 0.5;
                this._translation[2] = 0;
                this._texCoord[0] = left + 0.5;
                this._texCoord[1] = 1;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                this._translation[0] = right;
                this._texCoord[0] = right + 0.5;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                this._translation[0] = left;
                this._translation[1] = -0.5;
                this._texCoord[0] = left + 0.5;
                this._texCoord[1] = 0;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                this._translation[0] = right;
                this._texCoord[0] = right + 0.5;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                offset++;
            }
        }
        this._gridTicksIndexCounts[axisId] = offset * 6 - this._gridTicksIndexOffsets[axisId];
        return offset;
    }
    _updateGridFace(axisId, faceId, dataView, indices, offset) {
        (0, _glMatrix.vec3).set(this._translation, 0, 0, 0);
        this._gridFaceIndexOffsets[faceId] = offset * 6;
        const axisId2 = axisId == 0 ? 1 : 0;
        const axisId3 = axisId == 2 ? 1 : 2;
        if (this._gridTicksPositions[axisId2] && this._gridTicksPositions[axisId3]) {
            const axes = (0, _glMatrix.vec3).create();
            (0, _glMatrix.vec3).negate(this._normal, (0, _cubeJs.Cube).FACE_NORMALS[faceId]);
            const positions2 = this._gridTicksPositions[axisId2];
            const positions3 = this._gridTicksPositions[axisId3];
            for(let position2 = 0; position2 < positions2.length - 1; position2++){
                const min2 = positions2[position2] - 0.5;
                const max2 = positions2[position2 + 1] - 0.5;
                axes[axisId2] = position2 + 1;
                let vertexOffset = offset * 4;
                for(let position3 = 0; position3 < positions3.length - 1; position3++){
                    const min3 = positions3[position3] - 0.5;
                    const max3 = positions3[position3 + 1] - 0.5;
                    axes[axisId3] = position3 + 1;
                    const pickId = (0, _pickJs.PickHelper).nextPickId();
                    (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesDivision, this._vec4);
                    this.pickGridLookup[pickId] = this._pickGrid.length / 3;
                    this._pickGrid.push(axes[0]);
                    this._pickGrid.push(axes[1]);
                    this._pickGrid.push(axes[2]);
                    let indexOffset = offset * 6;
                    for(let i = 0; i < this._indexTemplate.length; i++)indices[indexOffset++] = this._indexTemplate[i] + vertexOffset;
                    (0, _glMatrix.vec4).set(this._bounds, min2 + 0.5, min3 + 0.5, max2 + 0.5, max3 + 0.5);
                    this._translation[axisId2] = min2;
                    this._translation[axisId3] = max3;
                    this._texCoord[0] = min2 + 0.5;
                    this._texCoord[1] = max3 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    this._translation[axisId2] = max2;
                    this._texCoord[0] = max2 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    this._translation[axisId2] = min2;
                    this._translation[axisId3] = min3;
                    this._texCoord[0] = min2 + 0.5;
                    this._texCoord[1] = min3 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    this._translation[axisId2] = max2;
                    this._texCoord[0] = max2 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    offset++;
                }
            }
        }
        this._gridFaceIndexCounts[faceId] = offset * 6 - this._gridFaceIndexOffsets[faceId];
        return offset;
    }
}

},{"gl-matrix":"3mrln","../../constants.js":"dtECF","../../main.js":"2JYph","./axes.js":"l4fPN","../../meshes/quad.js":"5BIpU","../../meshes/cube.js":"dgOpu","../../vertex.js":"7T2qu","../../helpers/axes.js":"fTBqS","../../helpers/text.js":"jYJ8G","../../helpers/pick.js":"jhV3p","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"l4fPN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AxesVisual", ()=>AxesVisual);
parcelHelpers.export(exports, "AxesBase", ()=>AxesBase);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class AxesVisual {
    constructor(axes){
        this.axes = axes;
    }
    render(elapsedTime, xrFrame) {}
    update(elapsedTime) {}
}
class AxesBase {
    constructor(core){
        this._core = core;
        this._mMatrix = (0, _glMatrix.mat4).create();
        this._mvMatrix = (0, _glMatrix.mat4).create();
        this._textMetric = {
            maxTop: 0,
            width: 0,
            maxHeight: 0
        };
        this._gridPickDivisionHeight = core.config.axesGridPickDivisionHeight;
        this.textBorderWidth = core.config.textBorderWidth;
        this.gamma = 0;
        this.gridMajorThickness = core.config.axesGridMajorThickness;
        this.gridMinorThickness = core.config.axesGridMinorThickness;
        this.gridZeroThickness = core.config.axesGridZeroThickness;
        this._font = core.font;
        this._lineHeight = 1.5;
        this.isGridPickingEnabled = false;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    set vMatrix(value) {
        this._vMatrix = value;
    }
    pickGrid(id) {
        const offset = id * 3;
        return {
            divisionX: this._pickGrid[offset] - 1,
            divisionY: this._pickGrid[offset + 1] - 1,
            divisionZ: this._pickGrid[offset + 2] - 1
        };
    }
    pickTitle(id) {
        return {
            axis: this._pickTitle[id]
        };
    }
    pickLabel(id) {
        const offset = id * 2;
        return {
            axis: this._pickLabel[offset],
            label: this._pickLabel[offset + 1]
        };
    }
    pickHeading(id) {
        return {
            axis: this._pickHeading[id]
        };
    }
    getFromValues(index) {
        return this._fromValues[index];
    }
    setFromValues(index, value) {
        if (this._fromValues[index] != value) {
            this._fromValues[index] = value;
            this._hasChanged = true;
        }
    }
    getToValues(index) {
        return this._toValues[index];
    }
    setToValues(index, value) {
        if (this._toValues[index] != value) {
            this._toValues[index] = value;
            this._hasChanged = true;
        }
    }
    get font() {
        return this._font;
    }
    set font(value) {
        if (this._font != value) {
            this._font = value;
            this._hasChanged = true;
        }
    }
    get gridPickDivisionHeight() {
        return this._gridPickDivisionHeight;
    }
    set gridPickDivisionHeight(value) {
        if (this._gridPickDivisionHeight != value) {
            this._gridPickDivisionHeight = value;
            this._hasChanged = true;
        }
    }
    update(elapsedTime) {}
}

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5BIpU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Quad", ()=>Quad);
parcelHelpers.export(exports, "Grid", ()=>Grid);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _vertexJs = require("../vertex.js");
class Quad {
    static positions(transform) {
        const positions = new Float32Array(12);
        const position = (0, _glMatrix.vec3).create();
        for(let i = 0; i < 4; i++){
            (0, _glMatrix.vec3).set(position, this.POSITIONS[i * 3], this.POSITIONS[i * 3 + 1], this.POSITIONS[i * 3 + 2]);
            (0, _glMatrix.vec3).transformMat4(position, position, transform);
            positions[i * 3] = position[0];
            positions[i * 3 + 1] = position[1];
            positions[i * 3 + 2] = position[2];
        }
        return positions;
    }
    static textured(transform, texTransform = (0, _constantsJs.Constants).MAT4_IDENTITY) {
        const positions = this.positions(transform);
        const texCoords = this.TEX_COORDS;
        const vertices = new ArrayBuffer((0, _vertexJs.PositionTextureVertex).SIZE_BYTES * positions.length / 3);
        const verticesView = new DataView(vertices);
        const position = (0, _glMatrix.vec3).create();
        const texCoord = (0, _glMatrix.vec2).create();
        for(let i = 0; i < positions.length / (0, _vertexJs.PositionVertex).SIZE; i++){
            (0, _glMatrix.vec3).set(position, positions[i * (0, _vertexJs.PositionVertex).SIZE], positions[i * (0, _vertexJs.PositionVertex).SIZE + 1], positions[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec2).set(texCoord, texCoords[i * 2], texCoords[i * 2 + 1]);
            (0, _glMatrix.vec2).transformMat4(texCoord, texCoord, texTransform);
            (0, _vertexJs.PositionTextureVertex).setPosition(verticesView, i, position);
            (0, _vertexJs.PositionTextureVertex).setTexCoord(verticesView, i, texCoord);
        }
        return verticesView;
    }
    static normalTextured(transform, texTransform = (0, _constantsJs.Constants).MAT4_IDENTITY) {
        const positions = this.positions(transform);
        const texCoords = this.TEX_COORDS;
        const vertices = new ArrayBuffer((0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES * positions.length / 3);
        const verticesView = new DataView(vertices);
        const position = (0, _glMatrix.vec3).create();
        const texCoord = (0, _glMatrix.vec2).create();
        const normal3 = (0, _glMatrix.vec3).create();
        const normal4 = (0, _glMatrix.vec4).create();
        for(let i = 0; i < positions.length / (0, _vertexJs.PositionVertex).SIZE; i++){
            (0, _glMatrix.vec3).set(position, positions[i * (0, _vertexJs.PositionVertex).SIZE], positions[i * (0, _vertexJs.PositionVertex).SIZE + 1], positions[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec2).set(texCoord, texCoords[i * 2], texCoords[i * 2 + 1]);
            (0, _glMatrix.vec2).transformMat4(texCoord, texCoord, texTransform);
            (0, _vertexJs.PositionNormalTextureVertex).setPosition(verticesView, i, position);
            (0, _glMatrix.vec4).set(normal4, 0.0, 0.0, 1.0, 0.0);
            (0, _glMatrix.vec4).transformMat4(normal4, normal4, transform);
            (0, _glMatrix.vec3).set(normal3, normal4[0], normal4[1], normal4[2]);
            (0, _glMatrix.vec3).normalize(normal3, normal3);
            (0, _vertexJs.PositionNormalTextureVertex).setNormal(verticesView, i, normal3);
            (0, _vertexJs.PositionNormalTextureVertex).setTexCoord(verticesView, i, texCoord);
        }
        return verticesView;
    }
}
Quad.FACE_NORMALS = [
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(0, 0, -1)
];
Quad.FACE_ROTATIONS = [
    (0, _glMatrix.mat3).fromValues(1, 0, 0, 0, 1, 0, 0, 0, 1),
    (0, _glMatrix.mat3).fromValues(1, 0, 0, 0, -1, 0, 0, 0, -1)
];
Quad.EDGE_POSITIONS = [
    (0, _glMatrix.vec3).fromValues(0, 0.5, 0),
    (0, _glMatrix.vec3).fromValues(0.5, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, -0.5, 0),
    (0, _glMatrix.vec3).fromValues(-0.5, 0, 0)
];
Quad.EDGE_NORMALS = [
    (0, _glMatrix.vec3).fromValues(0, 1, 0),
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, -1, 0),
    (0, _glMatrix.vec3).fromValues(-1, 0, 0)
];
Quad.EDGE_POSITIVES = [
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 1, 0),
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 1, 0)
];
Quad.EDGE_FORWARDS = [
    (0, _glMatrix.vec3).fromValues(0, 0, -1),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(0, 0, -1)
];
Quad.AXIS_EDGES = [
    [
        0,
        2
    ],
    [
        1,
        3
    ]
];
Quad.POSITIONS = new Float32Array([
    -0.5,
    0.5,
    0,
    0.5,
    0.5,
    0,
    -0.5,
    -0.5,
    0,
    0.5,
    -0.5,
    0
]);
Quad.INDICES = new Uint16Array([
    0,
    2,
    1,
    1,
    2,
    3
]);
Quad.TEX_COORDS = new Float32Array([
    0,
    1,
    1,
    1,
    0,
    0,
    1,
    0
]);
class Grid {
    static positions(cols, rows, transform) {
        const vertices = new Float32Array((cols + 1) * (rows + 1) * (0, _vertexJs.PositionVertex).SIZE);
        const position = (0, _glMatrix.vec3).create();
        let index = 0;
        for(let row = 0; row <= rows; row++)for(let col = 0; col <= cols; col++){
            (0, _glMatrix.vec3).set(position, col / cols - 0.5, 0.5 - row / rows, 0);
            (0, _glMatrix.vec3).transformMat4(position, position, transform);
            (0, _vertexJs.PositionVertex).setPosition(vertices, index++, position);
        }
        return vertices;
    }
    static indices(cols, rows) {
        const indices = new Uint16Array(cols * rows * 6);
        let index = 0;
        for(let row = 0; row < rows; row++)for(let col = 0; col < cols; col++){
            indices[index++] = col + row * (cols + 1);
            indices[index++] = col + (row + 1) * (cols + 1);
            indices[index++] = col + row * (cols + 1) + 1;
            indices[index++] = col + row * (cols + 1) + 1;
            indices[index++] = col + (row + 1) * (cols + 1);
            indices[index++] = col + (row + 1) * (cols + 1) + 1;
        }
        return indices;
    }
    static textured(cols, rows, transform, texTransform = (0, _constantsJs.Constants).MAT4_IDENTITY) {
        const positions = this.positions(cols, rows, transform);
        const texCoords = this._texCoords(cols, rows, texTransform);
        const vertices = new ArrayBuffer((0, _vertexJs.PositionTextureVertex).SIZE_BYTES * positions.length / 3);
        const verticesView = new DataView(vertices);
        const position = (0, _glMatrix.vec3).create();
        const texCoord = (0, _glMatrix.vec2).create();
        let index = 0;
        for(let i = 0; i < positions.length / (0, _vertexJs.PositionVertex).SIZE; i++){
            (0, _glMatrix.vec3).set(position, positions[i * (0, _vertexJs.PositionVertex).SIZE], positions[i * (0, _vertexJs.PositionVertex).SIZE + 1], positions[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec2).set(texCoord, texCoords[i * 2], texCoords[i * 2 + 1]);
            (0, _vertexJs.PositionTextureVertex).setPosition(verticesView, index, position);
            (0, _vertexJs.PositionTextureVertex).setTexCoord(verticesView, index++, texCoord);
        }
        return verticesView;
    }
    static normalTextured(cols, rows, transform, texTransform = (0, _constantsJs.Constants).MAT4_IDENTITY) {
        const positions = this.positions(cols, rows, transform);
        const texCoords = this._texCoords(cols, rows, texTransform);
        const vertices = new ArrayBuffer((0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES * positions.length / 3);
        const verticesView = new DataView(vertices);
        const position = (0, _glMatrix.vec3).create();
        const texCoord = (0, _glMatrix.vec2).create();
        let index = 0;
        for(let i = 0; i < positions.length / (0, _vertexJs.PositionVertex).SIZE; i++){
            (0, _glMatrix.vec3).set(position, positions[i * (0, _vertexJs.PositionVertex).SIZE], positions[i * (0, _vertexJs.PositionVertex).SIZE + 1], positions[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec2).set(texCoord, texCoords[i * 2], texCoords[i * 2 + 1]);
            (0, _vertexJs.PositionNormalTextureVertex).setPosition(verticesView, index, position);
            (0, _vertexJs.PositionNormalTextureVertex).setNormal(verticesView, index, (0, _constantsJs.Constants).VECTOR3_UNITZ);
            (0, _vertexJs.PositionNormalTextureVertex).setTexCoord(verticesView, index++, texCoord);
        }
        return verticesView;
    }
    static _texCoords(cols, rows, transform) {
        const texCoords = new Float32Array((cols + 1) * (rows + 1) * 2);
        const texCoord = (0, _glMatrix.vec2).create();
        let index = 0;
        for(let row = 0; row <= rows; row++)for(let col = 0; col <= cols; col++){
            (0, _glMatrix.vec2).set(texCoord, col / cols, 1 - row / rows);
            (0, _glMatrix.vec2).transformMat4(texCoord, texCoord, transform);
            texCoords[index++] = texCoord[0];
            texCoords[index++] = texCoord[1];
        }
        return texCoords;
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7T2qu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PositionVertex", ()=>PositionVertex);
parcelHelpers.export(exports, "PositionColorVertex", ()=>PositionColorVertex);
parcelHelpers.export(exports, "PositionTextureVertex", ()=>PositionTextureVertex);
parcelHelpers.export(exports, "PositionTexturePickVertex", ()=>PositionTexturePickVertex);
parcelHelpers.export(exports, "PositionNormalVertex", ()=>PositionNormalVertex);
parcelHelpers.export(exports, "PositionNormalColorVertex", ()=>PositionNormalColorVertex);
parcelHelpers.export(exports, "PositionNormalTextureVertex", ()=>PositionNormalTextureVertex);
parcelHelpers.export(exports, "PickGridVertex", ()=>PickGridVertex);
parcelHelpers.export(exports, "UnitVertex", ()=>UnitVertex);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class PositionVertex {
    static getPosition(buffer, index, value) {
        const offset = index * PositionVertex.SIZE;
        (0, _glMatrix.vec3).set(value, buffer[offset], buffer[offset + 1], buffer[offset + 2]);
    }
    static setPosition(buffer, index, value) {
        const offset = index * PositionVertex.SIZE;
        buffer[offset] = value[0];
        buffer[offset + 1] = value[1];
        buffer[offset + 2] = value[2];
    }
}
PositionVertex.SIZE = 3;
PositionVertex.SIZE_BYTES = 12;
class PositionColorVertex {
    static getPosition(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setPosition(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getColor(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.COLOR_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getUint8(offset) / 0xFF, bufferView.getUint8(offset + 1) / 0xFF, bufferView.getUint8(offset + 2) / 0xFF);
    }
    static setColor(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.COLOR_OFFSET_BYTES;
        bufferView.setUint8(offset, value[0] * 0xFF);
        bufferView.setUint8(offset + 1, value[1] * 0xFF);
        bufferView.setUint8(offset + 2, value[2] * 0xFF);
    }
}
PositionColorVertex.SIZE_BYTES = 16;
PositionColorVertex.POSITION_OFFSET_BYTES = 0;
PositionColorVertex.COLOR_OFFSET_BYTES = 12;
class PositionTextureVertex {
    static getPosition(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setPosition(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getTexCoord(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        (0, _glMatrix.vec2).set(value, bufferView.getUint16(offset, true) / 0xFFFF, bufferView.getUint16(offset + 2, true) / 0xFFFF);
    }
    static setTexCoord(bufferView, index, value) {
        const offset = PositionColorVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        bufferView.setUint16(offset, value[0] * 0xFFFF, true);
        bufferView.setUint16(offset + 2, value[1] * 0xFFFF, true);
    }
}
PositionTextureVertex.SIZE_BYTES = 16;
PositionTextureVertex.POSITION_OFFSET_BYTES = 0;
PositionTextureVertex.TEX_COORD_OFFSET_BYTES = 12;
class PositionTexturePickVertex {
    static getPosition(bufferView, index, value) {
        const offset = PositionTexturePickVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setPosition(bufferView, index, value) {
        const offset = PositionTexturePickVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getTexCoord(bufferView, index, value) {
        const offset = PositionTexturePickVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        (0, _glMatrix.vec2).set(value, bufferView.getUint16(offset, true) / 0xFFFF, bufferView.getUint16(offset + 2, true) / 0xFFFF);
    }
    static setTexCoord(bufferView, index, value) {
        const offset = PositionTexturePickVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        bufferView.setUint16(offset, value[0] * 0xFFFF, true);
        bufferView.setUint16(offset + 2, value[1] * 0xFFFF, true);
    }
    static getIdColor(bufferView, index, value) {
        const offset = PositionTexturePickVertex.SIZE_BYTES * index + this.ID_COLOR_OFFSET_BYTES;
        (0, _glMatrix.vec4).set(value, bufferView.getUint8(offset) / 0xFF, bufferView.getUint8(offset + 1) / 0xFF, bufferView.getUint8(offset + 2) / 0xFF, bufferView.getUint8(offset + 3) / 0xFF);
    }
    static setIdColor(bufferView, index, value) {
        const offset = PositionTexturePickVertex.SIZE_BYTES * index + this.ID_COLOR_OFFSET_BYTES;
        bufferView.setUint8(offset, value[0] * 0xFF);
        bufferView.setUint8(offset + 1, value[1] * 0xFF);
        bufferView.setUint8(offset + 2, value[2] * 0xFF);
        bufferView.setUint8(offset + 3, value[3] * 0xFF);
    }
}
PositionTexturePickVertex.SIZE_BYTES = 20;
PositionTexturePickVertex.ID_COLOR_OFFSET_BYTES = 0;
PositionTexturePickVertex.POSITION_OFFSET_BYTES = 4;
PositionTexturePickVertex.TEX_COORD_OFFSET_BYTES = 16;
class PositionNormalVertex {
    static getPosition(bufferView, index, value) {
        const offset = PositionNormalVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setPosition(bufferView, index, value) {
        const offset = PositionNormalVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getNormal(bufferView, index, value) {
        const offset = PositionNormalVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getInt8(offset) / 0x7F, bufferView.getInt8(offset + 1) / 0x7F, bufferView.getInt8(offset + 2) / 0x7F);
    }
    static setNormal(bufferView, index, value) {
        const offset = PositionNormalVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        bufferView.setInt8(offset, value[0] * 0x7F);
        bufferView.setInt8(offset + 1, value[1] * 0x7F);
        bufferView.setInt8(offset + 2, value[2] * 0x7F);
    }
}
PositionNormalVertex.SIZE_BYTES = 16;
PositionNormalVertex.POSITION_OFFSET_BYTES = 0;
PositionNormalVertex.NORMAL_OFFSET_BYTES = 12;
class PositionNormalColorVertex {
    static getPosition(bufferView, index, value) {
        const offset = PositionNormalColorVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setPosition(bufferView, index, value) {
        const offset = PositionNormalColorVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getNormal(bufferView, index, value) {
        const offset = PositionNormalColorVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getInt8(offset) / 0x7F, bufferView.getInt8(offset + 1) / 0x7F, bufferView.getInt8(offset + 2) / 0x7F);
    }
    static setNormal(bufferView, index, value) {
        const offset = PositionNormalColorVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        bufferView.setInt8(offset, value[0] * 0x7F);
        bufferView.setInt8(offset + 1, value[1] * 0x7F);
        bufferView.setInt8(offset + 2, value[2] * 0x7F);
    }
    static getColor(bufferView, index, value) {
        const offset = PositionNormalColorVertex.SIZE_BYTES * index + this.COLOR_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getUint8(offset) / 0xFF, bufferView.getUint8(offset + 1) / 0xFF, bufferView.getUint8(offset + 2) / 0xFF);
    }
    static setColor(bufferView, index, value) {
        const offset = PositionNormalColorVertex.SIZE_BYTES * index + this.COLOR_OFFSET_BYTES;
        bufferView.setUint8(offset, value[0] * 0xFF);
        bufferView.setUint8(offset + 1, value[1] * 0xFF);
        bufferView.setUint8(offset + 2, value[2] * 0xFF);
    }
}
PositionNormalColorVertex.SIZE_BYTES = 20;
PositionNormalColorVertex.POSITION_OFFSET_BYTES = 0;
PositionNormalColorVertex.NORMAL_OFFSET_BYTES = 12;
PositionNormalColorVertex.COLOR_OFFSET_BYTES = 16;
class PositionNormalTextureVertex {
    static getPosition(bufferView, index, value) {
        const offset = PositionNormalTextureVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setPosition(bufferView, index, value) {
        const offset = PositionNormalTextureVertex.SIZE_BYTES * index + this.POSITION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getNormal(bufferView, index, value) {
        const offset = PositionNormalTextureVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getInt8(offset) / 0x7F, bufferView.getInt8(offset + 1) / 0x7F, bufferView.getInt8(offset + 2) / 0x7F);
    }
    static setNormal(bufferView, index, value) {
        const offset = PositionNormalTextureVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        bufferView.setInt8(offset, value[0] * 0x7F);
        bufferView.setInt8(offset + 1, value[1] * 0x7F);
        bufferView.setInt8(offset + 2, value[2] * 0x7F);
    }
    static getTexCoord(bufferView, index, value) {
        const offset = PositionNormalTextureVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        (0, _glMatrix.vec2).set(value, bufferView.getUint16(offset, true) / 0xFFFF, bufferView.getUint16(offset + 2, true) / 0xFFFF);
    }
    static setTexCoord(bufferView, index, value) {
        const offset = PositionNormalTextureVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        bufferView.setUint16(offset, value[0] * 0xFFFF, true);
        bufferView.setUint16(offset + 2, value[1] * 0xFFFF, true);
    }
}
PositionNormalTextureVertex.SIZE_BYTES = 20;
PositionNormalTextureVertex.POSITION_OFFSET_BYTES = 0;
PositionNormalTextureVertex.NORMAL_OFFSET_BYTES = 12;
PositionNormalTextureVertex.TEX_COORD_OFFSET_BYTES = 16;
class PickGridVertex {
    static getTranslation(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.TRANSLATION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setTranslation(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.TRANSLATION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getNormal(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getInt8(offset) / 0x7F, bufferView.getInt8(offset + 1) / 0x7F, bufferView.getInt8(offset + 2) / 0x7F);
    }
    static setNormal(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.NORMAL_OFFSET_BYTES;
        bufferView.setInt8(offset, value[0] * 0x7F);
        bufferView.setInt8(offset + 1, value[1] * 0x7F);
        bufferView.setInt8(offset + 2, value[2] * 0x7F);
    }
    static getIdColor(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.ID_COLOR_OFFSET_BYTES;
        (0, _glMatrix.vec4).set(value, bufferView.getUint8(offset) / 0xFF, bufferView.getUint8(offset + 1) / 0xFF, bufferView.getUint8(offset + 2) / 0xFF, bufferView.getUint8(offset + 3) / 0xFF);
    }
    static setIdColor(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.ID_COLOR_OFFSET_BYTES;
        bufferView.setUint8(offset, value[0] * 0xFF);
        bufferView.setUint8(offset + 1, value[1] * 0xFF);
        bufferView.setUint8(offset + 2, value[2] * 0xFF);
        bufferView.setUint8(offset + 3, value[3] * 0xFF);
    }
    static getTexCoord(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        (0, _glMatrix.vec2).set(value, bufferView.getUint16(offset, true) / 0xFFFF, bufferView.getUint16(offset + 2, true) / 0xFFFF);
    }
    static setTexCoord(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.TEX_COORD_OFFSET_BYTES;
        bufferView.setUint16(offset, value[0] * 0xFFFF, true);
        bufferView.setUint16(offset + 2, value[1] * 0xFFFF, true);
    }
    static getBounds(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.BOUNDS_OFFSET_BYTES;
        (0, _glMatrix.vec4).set(value, bufferView.getUint16(offset, true) / 0xFFFF, bufferView.getUint16(offset + 2, true) / 0xFFFF, bufferView.getUint16(offset + 4, true) / 0xFFFF, bufferView.getUint16(offset + 6, true) / 0xFFFF);
    }
    static setBounds(bufferView, index, value) {
        const offset = PickGridVertex.SIZE_BYTES * index + this.BOUNDS_OFFSET_BYTES;
        bufferView.setUint16(offset, value[0] * 0xFFFF, true);
        bufferView.setUint16(offset + 2, value[1] * 0xFFFF, true);
        bufferView.setUint16(offset + 4, value[2] * 0xFFFF, true);
        bufferView.setUint16(offset + 6, value[3] * 0xFFFF, true);
    }
}
PickGridVertex.SIZE_BYTES = 32;
PickGridVertex.TRANSLATION_OFFSET_BYTES = 0;
PickGridVertex.NORMAL_OFFSET_BYTES = 12;
PickGridVertex.ID_COLOR_OFFSET_BYTES = 16;
PickGridVertex.TEX_COORD_OFFSET_BYTES = 20;
PickGridVertex.BOUNDS_OFFSET_BYTES = 24;
class UnitVertex {
    static getIdHover(bufferView, index) {
        return bufferView.getFloat32(UnitVertex.SIZE_BYTES * index + this.ID_HOVER_OFFSET_BYTES, true);
    }
    static setIdHover(bufferView, index, value) {
        bufferView.setFloat32(UnitVertex.SIZE_BYTES * index + this.ID_HOVER_OFFSET_BYTES, value, true);
    }
    static getTranslation(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.TRANSLATION_OFFSET_BYTES;
        (0, _glMatrix.vec3).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true));
    }
    static setTranslation(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.TRANSLATION_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
    }
    static getColor(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.COLOR_OFFSET_BYTES;
        (0, _glMatrix.vec2).set(value, bufferView.getUint8(offset) / 0xFF, bufferView.getUint8(offset + 1) / 0xFF);
    }
    static setColor(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.COLOR_OFFSET_BYTES;
        bufferView.setUint8(offset, value[0] * 0xFF);
        bufferView.setUint8(offset + 1, value[1] * 0xFF);
    }
    static getScale(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.SCALE_OFFSET_BYTES;
        (0, _glMatrix.vec4).set(value, bufferView.getFloat32(offset, true), bufferView.getFloat32(offset + 4, true), bufferView.getFloat32(offset + 8, true), bufferView.getFloat32(offset + 12, true));
    }
    static setScale(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.SCALE_OFFSET_BYTES;
        bufferView.setFloat32(offset, value[0], true);
        bufferView.setFloat32(offset + 4, value[1], true);
        bufferView.setFloat32(offset + 8, value[2], true);
        bufferView.setFloat32(offset + 12, value[3], true);
    }
    static getRotation(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.ROTATION_OFFSET_BYTES;
        (0, _glMatrix.quat).set(value, bufferView.getInt16(offset, true) / 0x7FFF, bufferView.getInt16(offset + 2, true) / 0x7FFF, bufferView.getInt16(offset + 4, true) / 0x7FFF, bufferView.getInt16(offset + 6, true) / 0x7FFF);
    }
    static setRotation(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.ROTATION_OFFSET_BYTES;
        bufferView.setInt16(offset, value[0] * 0x7FFF, true);
        bufferView.setInt16(offset + 2, value[1] * 0x7FFF, true);
        bufferView.setInt16(offset + 4, value[2] * 0x7FFF, true);
        bufferView.setInt16(offset + 6, value[3] * 0x7FFF, true);
    }
    static getIdColor(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.ID_COLOR_OFFSET_BYTES;
        (0, _glMatrix.vec4).set(value, bufferView.getUint8(offset) / 0xFF, bufferView.getUint8(offset + 1) / 0xFF, bufferView.getUint8(offset + 2) / 0xFF, bufferView.getUint8(offset + 3) / 0xFF);
    }
    static setIdColor(bufferView, index, value) {
        const offset = UnitVertex.SIZE_BYTES * index + this.ID_COLOR_OFFSET_BYTES;
        bufferView.setUint8(offset, value[0] * 0xFF);
        bufferView.setUint8(offset + 1, value[1] * 0xFF);
        bufferView.setUint8(offset + 2, value[2] * 0xFF);
        bufferView.setUint8(offset + 3, value[3] * 0xFF);
    }
    static getOrder(bufferView, index) {
        return bufferView.getFloat32(UnitVertex.SIZE_BYTES * index + this.ORDER_OFFSET_BYTES, true);
    }
    static setOrder(bufferView, index, value) {
        bufferView.setFloat32(UnitVertex.SIZE_BYTES * index + this.ORDER_OFFSET_BYTES, value, true);
    }
    static getStaggerOrder(bufferView, index) {
        return bufferView.getUint16(UnitVertex.SIZE_BYTES * index + this.STAGGER_ORDER_OFFSET_BYTES, true) / 0xFFFF;
    }
    static setStaggerOrder(bufferView, index, value) {
        bufferView.setUint16(UnitVertex.SIZE_BYTES * index + this.STAGGER_ORDER_OFFSET_BYTES, value * 0xFFFF, true);
    }
    static getSelected(bufferView, index) {
        return bufferView.getInt8(UnitVertex.SIZE_BYTES * index + this.SELECTED_OFFSET_BYTES) / 0x7F;
    }
    static setSelected(bufferView, index, value) {
        bufferView.setInt8(UnitVertex.SIZE_BYTES * index + this.SELECTED_OFFSET_BYTES, value * 0x7F);
    }
    static getMaterial(bufferView, index) {
        return bufferView.getUint16(UnitVertex.SIZE_BYTES * index + this.MATERIAL_OFFSET_BYTES);
    }
    static setMaterial(bufferView, index, value) {
        bufferView.setUint16(UnitVertex.SIZE_BYTES * index + this.MATERIAL_OFFSET_BYTES, value);
    }
}
UnitVertex.SIZE_BYTES = 56;
UnitVertex.ID_HOVER_OFFSET_BYTES = 0;
UnitVertex.ID_COLOR_OFFSET_BYTES = 4;
UnitVertex.ORDER_OFFSET_BYTES = 8;
UnitVertex.STAGGER_ORDER_OFFSET_BYTES = 12;
UnitVertex.TRANSLATION_OFFSET_BYTES = 16;
UnitVertex.COLOR_OFFSET_BYTES = 28;
UnitVertex.SCALE_OFFSET_BYTES = 32;
UnitVertex.SELECTED_OFFSET_BYTES = 14;
UnitVertex.ROTATION_OFFSET_BYTES = 48;
UnitVertex.MATERIAL_OFFSET_BYTES = 30;

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dgOpu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cube", ()=>Cube);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
class Cube {
}
Cube.POSITIONS = new Float32Array([
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5
]);
Cube.INDICES = new Uint16Array([
    5,
    4,
    1,
    0,
    3,
    4,
    7,
    5,
    6,
    1,
    2,
    3,
    6,
    7
]);
Cube.CUBE_MAP_INDICES = new Uint16Array([
    2,
    3,
    1,
    0,
    4,
    3,
    7,
    2,
    6,
    1,
    5,
    4,
    6,
    7
]);
Cube.FACE_NORMALS = [
    (0, _glMatrix.vec3).fromValues(0, 1, 0),
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, -1, 0),
    (0, _glMatrix.vec3).fromValues(-1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(0, 0, -1)
];
Cube.FACE_POSITIONS = [
    (0, _glMatrix.vec3).fromValues(0.0, 0.5, 0.0),
    (0, _glMatrix.vec3).fromValues(0.5, 0.0, 0.0),
    (0, _glMatrix.vec3).fromValues(0.0, -0.5, 0.0),
    (0, _glMatrix.vec3).fromValues(-0.5, 0.0, 0.0),
    (0, _glMatrix.vec3).fromValues(0.0, 0.0, 0.5),
    (0, _glMatrix.vec3).fromValues(0.0, 0.0, -0.5)
];
Cube.FACE_ROTATIONS = [
    (0, _glMatrix.mat3).fromValues(1, 0, 0, 0, 0, -1, 0, 1, 0),
    (0, _glMatrix.mat3).fromValues(0, 0, -1, 0, 1, 0, 1, 0, 0),
    (0, _glMatrix.mat3).fromValues(1, 0, 0, 0, 0, 1, 0, -1, 0),
    (0, _glMatrix.mat3).fromValues(0, 0, 1, 0, 1, 0, -1, 0, 0),
    (0, _glMatrix.mat3).fromValues(1, 0, 0, 0, 1, 0, 0, 0, 1),
    (0, _glMatrix.mat3).fromValues(1, 0, 0, 0, -1, 0, 0, 0, -1)
];
Cube.EDGE_POSITIONS = [
    (0, _glMatrix.vec3).fromValues(0, 0.5, 0.5),
    (0, _glMatrix.vec3).fromValues(0.5, 0.5, 0),
    (0, _glMatrix.vec3).fromValues(0, 0.5, -0.5),
    (0, _glMatrix.vec3).fromValues(-0.5, 0.5, 0),
    (0, _glMatrix.vec3).fromValues(0, -0.5, 0.5),
    (0, _glMatrix.vec3).fromValues(0.5, -0.5, 0),
    (0, _glMatrix.vec3).fromValues(0, -0.5, -0.5),
    (0, _glMatrix.vec3).fromValues(-0.5, -0.5, 0),
    (0, _glMatrix.vec3).fromValues(0.5, 0, 0.5),
    (0, _glMatrix.vec3).fromValues(0.5, 0, -0.5),
    (0, _glMatrix.vec3).fromValues(-0.5, 0, -0.5),
    (0, _glMatrix.vec3).fromValues(-0.5, 0, 0.5)
];
Cube.EDGE_NORMALS = [
    (0, _glMatrix.vec3).fromValues(0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO)
];
Cube.EDGE_CORNERS = [
    [
        0,
        1
    ],
    [
        1,
        5
    ],
    [
        4,
        5
    ],
    [
        0,
        4
    ],
    [
        2,
        3
    ],
    [
        2,
        6
    ],
    [
        6,
        7
    ],
    [
        3,
        7
    ],
    [
        1,
        2
    ],
    [
        5,
        6
    ],
    [
        4,
        7
    ],
    [
        0,
        3
    ]
];
Cube.EDGE_FACES = [
    [
        0,
        4
    ],
    [
        0,
        1
    ],
    [
        0,
        5
    ],
    [
        0,
        3
    ],
    [
        2,
        4
    ],
    [
        2,
        1
    ],
    [
        2,
        5
    ],
    [
        2,
        3
    ],
    [
        1,
        4
    ],
    [
        1,
        5
    ],
    [
        3,
        5
    ],
    [
        3,
        4
    ]
];
Cube.EDGE_AXIS = [
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    1,
    1,
    1,
    1
];
Cube.AXIS_EDGES = [
    [
        0,
        2,
        4,
        6
    ],
    [
        8,
        9,
        10,
        11
    ],
    [
        1,
        3,
        5,
        7
    ]
];
Cube.AXIS_FACES = [
    [
        1,
        3
    ],
    [
        0,
        2
    ],
    [
        4,
        5
    ]
];
Cube.OPPOSITE_FACES = [
    2,
    3,
    0,
    1,
    5,
    4
];
Cube.EDGE_POSITIVES = [
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(1, 0, 0),
    (0, _glMatrix.vec3).fromValues(0, 0, 1),
    (0, _glMatrix.vec3).fromValues(0, 1, 0),
    (0, _glMatrix.vec3).fromValues(0, 1, 0),
    (0, _glMatrix.vec3).fromValues(0, 1, 0),
    (0, _glMatrix.vec3).fromValues(0, 1, 0)
];
Cube.EDGE_FORWARDS = [
    (0, _glMatrix.vec3).fromValues(0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, (0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues((0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO),
    (0, _glMatrix.vec3).fromValues(-(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO, 0, -(0, _constantsJs.Constants).ROOT_TWO_OVER_TWO)
];

},{"gl-matrix":"3mrln","../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fTBqS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "AxisHelper", ()=>AxisHelper);
class AxisHelper {
    static continuous(minValue, maxValue, divisions, label, labels, positions, fromValues, toValues) {
        for(let i = 0; i <= divisions; i++){
            positions.push(divisions == 0 ? 0.5 : i / divisions);
            const value = divisions == 0 ? (minValue + maxValue) / 2 : minValue + i * (maxValue - minValue) / divisions;
            if (label) labels.push(label(value));
            if (i == 0) fromValues.push(minValue);
            else if (i < divisions) {
                toValues.push(value);
                fromValues.push(value);
            }
        }
        toValues.push(maxValue);
    }
    static discrete(minValue, maxValue, totalDivisions, maxDivisions, label, labels, labelPositions, divisionPositions, fromValues, toValues) {
        const divisions = Math.min(totalDivisions, maxDivisions);
        const totalDivisionStep = 1 / totalDivisions;
        const labelStep = 1 / divisions;
        const valueStep = (maxValue - minValue + 1) / totalDivisions;
        let nextDivision, toValue, nextPosition;
        for(let i = 0; i < divisions; i++){
            const division = Math.round(i * labelStep / totalDivisionStep);
            const position = division / totalDivisions;
            const fromValue = minValue + Math.ceil(division * valueStep);
            if (i == divisions - 1) {
                nextDivision = divisions;
                nextPosition = 1;
                toValue = maxValue;
            } else {
                nextDivision = Math.round((i + 1) * labelStep / totalDivisionStep);
                nextPosition = nextDivision / totalDivisions;
                toValue = minValue + Math.ceil(nextDivision * valueStep) - 1;
            }
            labelPositions.push((position + nextPosition) / 2);
            if (label) {
                if (fromValue == toValue) labels.push(label(fromValue));
                else labels.push(`${label(fromValue)}-${label(toValue)}`);
            }
            fromValues.push(fromValue);
            toValues.push(toValue);
            divisionPositions.push(position);
        }
        divisionPositions.push(1);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jYJ8G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextHelper", ()=>TextHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _vertexJs = require("../vertex.js");
var _quadJs = require("../meshes/quad.js");
class TextHelper {
    static truncate(text, length) {
        return text.length > length ? `${text.substr(0, length - 1)}…` : text;
    }
    static measure(font, text, size) {
        size.width = 0;
        let maxDescent = 0;
        for (const char of text){
            let glyph = font.glyphs[char];
            if (!glyph) {
                font.addGlyph(char);
                glyph = font.glyphs[char];
            }
            size.width += glyph.advance;
            size.maxTop = Math.max(glyph.top, size.maxTop);
            maxDescent = Math.max(glyph.height - glyph.top, maxDescent);
        }
        size.maxHeight = size.maxTop + maxDescent;
    }
    static wrap(font, text, maxWidth) {
        const lines = [];
        let width = 0;
        let start = 0;
        let lastBreakingChar = -1;
        let widthAfterLastBreakingChar = 0;
        for(let i = 0; i < text.length; i++){
            let char = text.charAt(i);
            let glyph = font.glyphs[char];
            if (!glyph) {
                font.addGlyph(char);
                glyph = font.glyphs[char];
            }
            width += glyph.advance;
            if (char == " " || char == "-") {
                widthAfterLastBreakingChar = width;
                lastBreakingChar = i;
            }
            if (width > maxWidth) {
                if (lastBreakingChar == -1) {
                    lines.push(text.substring(start, i));
                    start = i;
                    width += glyph.advance;
                } else {
                    lines.push(text.substring(start, lastBreakingChar));
                    start = lastBreakingChar + 1;
                    width -= widthAfterLastBreakingChar;
                    widthAfterLastBreakingChar = 0;
                    lastBreakingChar = -1;
                }
            }
        }
        lines.push(text.substring(start, text.length));
        return lines;
    }
    static addString(font, text, vertices, indices, index, position, scale, offset, rotation, idColor) {
        for (const char of text)this.addGlyph(font, char, vertices, indices, index++, position, scale, offset, rotation, idColor);
    }
    static addGlyph(font, char, vertices, indices, index, position, scale, offset, rotation, idColor) {
        let glyph = font.glyphs[char];
        if (!glyph) {
            font.addGlyph(char);
            glyph = font.glyphs[char];
        }
        const vertexOffset = index * 4;
        const width = glyph.width * scale;
        const height = glyph.height * scale;
        const top = glyph.top * scale;
        const border = font.border * scale;
        const x0 = offset[0] - border;
        const x1 = offset[0] + width + border;
        const y0 = offset[1] + top + border;
        const y1 = offset[1] + top - height - border;
        const z0 = offset[2];
        (0, _glMatrix.vec3).set(this._topLeft, x0, y0, z0);
        (0, _glMatrix.vec3).set(this._topRight, x1, y0, z0);
        (0, _glMatrix.vec3).set(this._bottomLeft, x0, y1, z0);
        (0, _glMatrix.vec3).set(this._bottomRight, x1, y1, z0);
        if (rotation) {
            (0, _glMatrix.vec3).transformQuat(this._topLeft, this._topLeft, rotation);
            (0, _glMatrix.vec3).transformQuat(this._topRight, this._topRight, rotation);
            (0, _glMatrix.vec3).transformQuat(this._bottomLeft, this._bottomLeft, rotation);
            (0, _glMatrix.vec3).transformQuat(this._bottomRight, this._bottomRight, rotation);
        }
        (0, _glMatrix.vec3).add(this._vec3, this._topLeft, position);
        (0, _vertexJs.PositionTexturePickVertex).setPosition(vertices, vertexOffset, this._vec3);
        (0, _glMatrix.vec3).add(this._vec3, this._topRight, position);
        (0, _vertexJs.PositionTexturePickVertex).setPosition(vertices, vertexOffset + 1, this._vec3);
        (0, _glMatrix.vec3).add(this._vec3, this._bottomLeft, position);
        (0, _vertexJs.PositionTexturePickVertex).setPosition(vertices, vertexOffset + 2, this._vec3);
        (0, _glMatrix.vec3).add(this._vec3, this._bottomRight, position);
        (0, _vertexJs.PositionTexturePickVertex).setPosition(vertices, vertexOffset + 3, this._vec3);
        (0, _glMatrix.vec2).set(this._vec2, glyph.u0, glyph.v0);
        (0, _vertexJs.PositionTexturePickVertex).setTexCoord(vertices, vertexOffset, this._vec2);
        (0, _glMatrix.vec2).set(this._vec2, glyph.u1, glyph.v0);
        (0, _vertexJs.PositionTexturePickVertex).setTexCoord(vertices, vertexOffset + 1, this._vec2);
        (0, _glMatrix.vec2).set(this._vec2, glyph.u0, glyph.v1);
        (0, _vertexJs.PositionTexturePickVertex).setTexCoord(vertices, vertexOffset + 2, this._vec2);
        (0, _glMatrix.vec2).set(this._vec2, glyph.u1, glyph.v1);
        (0, _vertexJs.PositionTexturePickVertex).setTexCoord(vertices, vertexOffset + 3, this._vec2);
        (0, _vertexJs.PositionTexturePickVertex).setIdColor(vertices, vertexOffset, idColor);
        (0, _vertexJs.PositionTexturePickVertex).setIdColor(vertices, vertexOffset + 1, idColor);
        (0, _vertexJs.PositionTexturePickVertex).setIdColor(vertices, vertexOffset + 2, idColor);
        (0, _vertexJs.PositionTexturePickVertex).setIdColor(vertices, vertexOffset + 3, idColor);
        offset[0] += glyph.advance * scale;
        const indexTemplate = (0, _quadJs.Quad).INDICES;
        const indexOffset = index * 6;
        for(let i = 0; i < 6; i++)indices[indexOffset + i] = indexTemplate[i] + vertexOffset;
    }
}
TextHelper._vec2 = (0, _glMatrix.vec2).create();
TextHelper._vec3 = (0, _glMatrix.vec3).create();
TextHelper._topLeft = (0, _glMatrix.vec3).create();
TextHelper._topRight = (0, _glMatrix.vec3).create();
TextHelper._bottomLeft = (0, _glMatrix.vec3).create();
TextHelper._bottomRight = (0, _glMatrix.vec3).create();

},{"gl-matrix":"3mrln","../vertex.js":"7T2qu","../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jhV3p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "PickHelper", ()=>PickHelper);
class PickHelper {
    static nextPickId() {
        return this._pickId++;
    }
    static encodeNumber(number, type, color) {
        const encoded = number | PickHelper.encodeType(type);
        PickHelper.float32ToVec4(encoded, color);
    }
    static decodeNumber(color) {
        return color[0] + (color[1] << 8) + (color[2] << 16);
    }
    static encodeVec3(vec3, type, color) {
        const encoded = vec3[0] | vec3[1] << 8 | vec3[2] << 16 | PickHelper.encodeType(type);
        PickHelper.float32ToVec4(encoded, color);
    }
    static decodeVec3(color, axes) {
        axes[0] = color[0];
        axes[1] = color[1];
        axes[2] = color[2];
    }
    static encodeType(type) {
        return type << 24;
    }
    static decodeType(color) {
        return color[3];
    }
    static float32ToVec4(number, color) {
        color[0] = ((number & 0xFF) >>> 0) / 0xFF;
        color[1] = ((number & 0xFF00) >>> 8) / 0xFF;
        color[2] = ((number & 0xFF0000) >>> 16) / 0xFF;
        color[3] = ((number & 0xFF000000) >>> 24) / 0xFF;
    }
    static uint8ArrayToNumber(color) {
        return color[0] + (color[1] << 8) + (color[2] << 16) + (color[3] << 24);
    }
}
PickHelper._pickId = 1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"23fwZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cartesian2dAxesHelper", ()=>Cartesian2dAxesHelper);
parcelHelpers.export(exports, "Cartesian2dAxes", ()=>Cartesian2dAxes);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../../constants.js");
var _mainJs = require("../../main.js");
var _axesJs = require("./axes.js");
var _quadJs = require("../../meshes/quad.js");
var _vertexJs = require("../../vertex.js");
var _axesJs1 = require("../../helpers/axes.js");
var _textJs = require("../../helpers/text.js");
var _pickJs = require("../../helpers/pick.js");
class Cartesian2dAxesHelper {
    static create(core, options) {
        const cartesian2dAxes = new Cartesian2dAxes(core);
        const minBoundsX = options.minBoundsX === undefined ? 0 : options.minBoundsX;
        const minBoundsY = options.minBoundsY === undefined ? 0 : options.minBoundsY;
        const maxBoundsX = options.maxBoundsX === undefined ? 1 : options.maxBoundsX;
        const maxBoundsY = options.maxBoundsY === undefined ? 1 : options.maxBoundsY;
        const minValueX = options.minValueX === undefined ? 0 : options.minValueX;
        const minValueY = options.minValueY === undefined ? 0 : options.minValueY;
        const maxValueX = options.maxValueX === undefined ? 1 : options.maxValueX;
        const maxValueY = options.maxValueY === undefined ? 1 : options.maxValueY;
        const scaling = options.scaling === undefined ? 1 : options.scaling;
        const tickPositions = [];
        const labelPositions = [];
        const labelScales = [];
        const labels = [];
        const fromValues = [];
        const toValues = [];
        cartesian2dAxes.minBoundsX = minBoundsX;
        cartesian2dAxes.minBoundsY = minBoundsY;
        cartesian2dAxes.maxBoundsX = maxBoundsX;
        cartesian2dAxes.maxBoundsY = maxBoundsY;
        cartesian2dAxes.scalingX = scaling;
        cartesian2dAxes.scalingY = scaling;
        const maxLength = Math.max(maxBoundsX - minBoundsX, maxBoundsY - minBoundsY);
        const requestedDivisions = [
            options.divisionsX == undefined ? Math.max(Math.floor(core.config.axesGridDefaultDivisions * (maxBoundsX - minBoundsX) / maxLength), 1) : options.divisionsX,
            options.divisionsY == undefined ? Math.max(Math.floor(core.config.axesGridDefaultDivisions * (maxBoundsY - minBoundsY) / maxLength), 1) : options.divisionsY, 
        ];
        const minorGridlines = [
            options.minorGridlinesX == undefined ? 2 : options.minorGridlinesX,
            options.minorGridlinesY == undefined ? 2 : options.minorGridlinesY, 
        ];
        const labelMajorSizes = [
            options.labelMajorSizeX === undefined ? core.config.axesTextLabelMajorSize : options.labelMajorSizeX,
            options.labelMajorSizeY === undefined ? core.config.axesTextLabelMajorSize : options.labelMajorSizeY
        ];
        const labelMinorSizes = [
            options.labelMinorSizeX === undefined ? core.config.axesTextLabelMinorSize : options.labelMinorSizeX,
            options.labelMinorSizeY === undefined ? core.config.axesTextLabelMinorSize : options.labelMinorSizeY
        ];
        cartesian2dAxes.isDiscreteX = options.isDiscreteX;
        cartesian2dAxes.isDiscreteY = options.isDiscreteY;
        cartesian2dAxes.isGridPickingEnabled = options.isGridPickingEnabled;
        const isDivisionPickingEnabledArray = [
            options.isDivisionPickingEnabledX,
            options.isDivisionPickingEnabledY, 
        ];
        const isLabelPickingEnabled = [
            options.isLabelPickingEnabledX,
            options.isLabelPickingEnabledY, 
        ];
        const labelsArray = [
            options.labelsX,
            options.labelsY
        ];
        const labelOrientationsArray = [
            options.labelOrientationX,
            options.labelOrientationY
        ];
        const labelOrientationDefaultArray = [
            (0, _mainJs.AxesTextOrientation).parallel,
            (0, _mainJs.AxesTextOrientation).perpendicular,
            (0, _mainJs.AxesTextOrientation).parallel
        ];
        const arePickDivisionsVisibleArray = [
            options.arePickDivisionsVisibleX,
            options.arePickDivisionsVisibleY
        ];
        const minValueArray = [
            minValueX,
            minValueY
        ];
        const maxValueArray = [
            maxValueX,
            maxValueY
        ];
        const isDiscreteArray = [
            options.isDiscreteX,
            options.isDiscreteY
        ];
        const titleArray = [
            options.titleX,
            options.titleY
        ];
        const titleSizeArray = [
            options.titleSizeX,
            options.titleSizeY
        ];
        const headingArray = [
            options.headingX,
            options.headingY
        ];
        const headingSizeArray = [
            options.headingSizeX,
            options.headingSizeY
        ];
        for(let axisId = 0; axisId < 2; axisId++){
            tickPositions.push([]);
            labels.push([]);
            labelPositions.push([]);
            labelScales.push([]);
            fromValues.push([]);
            toValues.push([]);
            const label = labelsArray[axisId];
            const minValue = minValueArray[axisId];
            const maxValue = maxValueArray[axisId];
            const discrete = isDiscreteArray[axisId];
            if (discrete) {
                const totalDivisions = maxValue - minValue + 1;
                const maxDivisions = Math.min(requestedDivisions[axisId], totalDivisions);
                (0, _axesJs1.AxisHelper).discrete(minValue, maxValue, totalDivisions, maxDivisions, label, labels[axisId], labelPositions[axisId], tickPositions[axisId], fromValues[axisId], toValues[axisId]);
                for(let i = 0; i < labels[axisId].length; i++)labelScales[axisId].push(labelMajorSizes[axisId]);
                cartesian2dAxes.minorGridlines[axisId] = 1;
            } else {
                const divisions = requestedDivisions[axisId];
                (0, _axesJs1.AxisHelper).continuous(minValue, maxValue, divisions, label, labels[axisId], tickPositions[axisId], fromValues[axisId], toValues[axisId]);
                cartesian2dAxes.minorGridlines[axisId] = minorGridlines[axisId];
                for(let i1 = 0; i1 < labels[axisId].length; i1++){
                    labelPositions[axisId].push(tickPositions[axisId][i1]);
                    labelScales[axisId].push(i1 == 0 || i1 == divisions ? labelMajorSizes[axisId] : labelMinorSizes[axisId]);
                }
            }
            cartesian2dAxes.setTickPositions(axisId, tickPositions[axisId]);
            cartesian2dAxes.setLabelPositions(axisId, labelPositions[axisId]);
            cartesian2dAxes.setLabels(axisId, labels[axisId]);
            cartesian2dAxes.setLabelSizes(axisId, labelScales[axisId]);
            cartesian2dAxes.setFromValues(axisId, fromValues[axisId]);
            cartesian2dAxes.setToValues(axisId, toValues[axisId]);
            cartesian2dAxes.setLabelOrientation(axisId, labelOrientationsArray[axisId] === undefined ? labelOrientationDefaultArray[axisId] : labelOrientationsArray[axisId]);
            cartesian2dAxes.setTitle(axisId, titleArray[axisId]);
            cartesian2dAxes.setTitleSize(axisId, titleSizeArray[axisId] === undefined ? core.config.axesTextTitleSize : titleSizeArray[axisId]);
            cartesian2dAxes.setHeading(axisId, headingArray[axisId]);
            cartesian2dAxes.setHeadingSize(axisId, headingSizeArray[axisId] === undefined ? core.config.axesTextHeadingSize : headingSizeArray[axisId]);
            cartesian2dAxes.arePickDivisionsVisible[axisId] = arePickDivisionsVisibleArray[axisId] === undefined ? true : arePickDivisionsVisibleArray[axisId];
            cartesian2dAxes.isDivisionPickingEnabled[axisId] = isDivisionPickingEnabledArray[axisId];
            cartesian2dAxes.isLabelPickingEnabled[axisId] = isLabelPickingEnabled[axisId];
            if (minValue <= 0 && maxValue >= 0) cartesian2dAxes.zero[axisId] = -minValue / (maxValue - minValue);
            else cartesian2dAxes.zero[axisId] = -Number.MAX_VALUE;
        }
        return cartesian2dAxes;
    }
}
class Cartesian2dAxes extends (0, _axesJs.AxesBase) {
    constructor(core){
        super(core);
        this._size = (0, _glMatrix.vec3).create();
        this._translation = (0, _glMatrix.vec3).create();
        this._normal = (0, _glMatrix.vec3).create();
        this._forward = (0, _glMatrix.vec3).create();
        this._right = (0, _glMatrix.vec3).create();
        this._up = (0, _glMatrix.vec3).create();
        this._texCoord = (0, _glMatrix.vec2).create();
        this._bounds = (0, _glMatrix.vec4).create();
        this._vec3 = (0, _glMatrix.vec3).create();
        this._vec4 = (0, _glMatrix.vec4).create();
        this._mat3 = (0, _glMatrix.mat3).create();
        this._isDiscrete = [
            false,
            false
        ];
        this._minBoundsX = 0;
        this._minBoundsY = 0;
        this._maxBoundsX = 0;
        this._maxBoundsY = 0;
        this._isForwardFace = [];
        this._isForwardEdge = [];
        this._isOutsideEdge = [];
        for(let i = 0; i < 2; i++)this._isForwardFace.push(false);
        for(let i1 = 0; i1 < 4; i1++){
            this._isForwardEdge.push(false);
            this._isOutsideEdge.push(false);
        }
        this._textOffset = (0, _glMatrix.vec3).create();
        this._textPosition = (0, _glMatrix.vec3).create();
        this._distances = [];
        for(let i2 = 0; i2 < 4; i2++)this._distances.push(0);
        this._labelPositions = [];
        this._labels = [];
        this._labelSizes = [];
        this._maxLabelSize = [];
        this._axesLeftToRightIndexCounts = [];
        this._axesRightToLeftIndexCounts = [];
        this._axesLeftToRightIndexOffsets = [];
        this._axesRightToLeftIndexOffsets = [];
        this._labelMMatrices = [];
        this._orientations = [];
        for(let i3 = 0; i3 < 2; i3++){
            this._maxLabelSize.push((0, _glMatrix.vec2).create());
            this._orientations.push((0, _mainJs.AxesTextOrientation).parallel);
            this._axesLeftToRightIndexCounts.push(0);
            this._axesRightToLeftIndexCounts.push(0);
            this._axesLeftToRightIndexOffsets.push(0);
            this._axesRightToLeftIndexOffsets.push(0);
        }
        for(let i4 = 0; i4 < 4; i4++)this._labelMMatrices.push((0, _glMatrix.mat4).create());
        this._titles = [];
        this._titleSizes = [];
        this._titleIndexCounts = [];
        this._titleIndexOffsets = [];
        this._titleMMatrices = [];
        for(let i5 = 0; i5 < 2; i5++){
            this._titles.push(null);
            this._titleSizes.push(core.config.axesTextTitleSize);
            this._titleIndexCounts.push(0);
            this._titleIndexOffsets.push(0);
        }
        for(let i6 = 0; i6 < 4; i6++)this._titleMMatrices.push((0, _glMatrix.mat4).create());
        this._headings = [];
        this._headingSizes = [];
        this._headingIndexCounts = [];
        this._headingIndexOffsets = [];
        this._headingMMatrices = [];
        this.isHeadingVisible = [];
        for(let i7 = 0; i7 < 2; i7++){
            this._headings.push(null);
            this._headingSizes.push(core.config.axesTextHeadingSize);
            this._headingIndexCounts.push(0);
            this._headingIndexOffsets.push(0);
        }
        for(let i8 = 0; i8 < 4; i8++){
            this._headingMMatrices.push((0, _glMatrix.mat4).create());
            this.isHeadingVisible.push(true);
        }
        this.isEdgeVisible = [];
        this._edgePosition = (0, _glMatrix.vec3).create();
        this._edgePositive = (0, _glMatrix.vec3).create();
        this._edgeNormal = (0, _glMatrix.vec3).create();
        this._edgeNormalTemp = (0, _glMatrix.vec3).create();
        this._edgePositiveTemp = (0, _glMatrix.vec3).create();
        this._isLeftToRightHorizontal = [];
        this._isLeftToRightVertical = [];
        this._edgeHorizontalRight = [];
        this._edgeHorizontalUp = [];
        this._edgeHorizontalForward = [];
        this._edgeVerticalRight = [];
        this._edgeVerticalUp = [];
        this._edgeVerticalForward = [];
        for(let i9 = 0; i9 < 4; i9++){
            this.isEdgeVisible.push(true);
            this._isLeftToRightHorizontal.push(false);
            this._isLeftToRightVertical.push(false);
            this._edgeHorizontalRight.push((0, _glMatrix.vec3).create());
            this._edgeHorizontalUp.push((0, _glMatrix.vec3).create());
            this._edgeHorizontalForward.push((0, _glMatrix.vec3).create());
            this._edgeVerticalRight.push((0, _glMatrix.vec3).create());
            this._edgeVerticalUp.push((0, _glMatrix.vec3).create());
            this._edgeVerticalForward.push((0, _glMatrix.vec3).create());
        }
        this.isFaceVisible = [];
        for(let i10 = 0; i10 < 2; i10++)this.isFaceVisible.push(true);
        this.arePickDivisionsVisible = [];
        this.areFacesVisible = [];
        this._indexTemplate = (0, _quadJs.Quad).INDICES;
        this.zero = (0, _glMatrix.vec3).create();
        this._gridTicksZeros = [];
        this._gridFaceZeros = (0, _glMatrix.vec2).create();
        this.minorGridlines = (0, _glMatrix.vec3).fromValues(1, 1, 1);
        this._gridTicksMinorGridlines = [];
        this._gridFaceMinorGridlines = (0, _glMatrix.vec2).create();
        this._gridTicksPositions = [];
        this._gridTicksScales = [];
        this._gridTicksIndexCounts = [];
        this._gridTicksIndexOffsets = [];
        this._gridFaceScale = (0, _glMatrix.vec3).create();
        this._gridFaceIndexCounts = [];
        this._gridFaceIndexOffsets = [];
        this._gridFaceMMatrices = [];
        this._gridTicksMMatrices = [];
        this._gridTicksRotations = [];
        for(let i11 = 0; i11 < 2; i11++){
            this.arePickDivisionsVisible.push(true);
            this.areFacesVisible.push(true);
            this._gridTicksZeros.push((0, _glMatrix.vec2).create());
            this._gridTicksMinorGridlines.push((0, _glMatrix.vec2).create());
            this._gridTicksScales.push((0, _glMatrix.vec3).create());
            this._gridTicksIndexCounts.push(0);
            this._gridTicksIndexOffsets.push(0);
            this._gridFaceIndexCounts.push(0);
            this._gridFaceIndexOffsets.push(0);
            this._gridFaceMMatrices.push((0, _glMatrix.mat4).create());
        }
        for(let i12 = 0; i12 < 4; i12++){
            this._gridTicksMMatrices.push((0, _glMatrix.mat4).create());
            this._gridTicksRotations.push((0, _glMatrix.mat4).create());
            const _mat4 = this._gridTicksRotations[i12];
            _mat4[0] = (0, _quadJs.Quad).EDGE_POSITIVES[i12][0];
            _mat4[1] = (0, _quadJs.Quad).EDGE_POSITIVES[i12][1];
            _mat4[2] = (0, _quadJs.Quad).EDGE_POSITIVES[i12][2];
            _mat4[4] = (0, _quadJs.Quad).EDGE_NORMALS[i12][0];
            _mat4[5] = (0, _quadJs.Quad).EDGE_NORMALS[i12][1];
            _mat4[6] = (0, _quadJs.Quad).EDGE_NORMALS[i12][2];
            (0, _glMatrix.vec3).cross(this._vec3, (0, _quadJs.Quad).EDGE_POSITIVES[i12], (0, _quadJs.Quad).EDGE_NORMALS[i12]);
            _mat4[8] = this._vec3[0];
            _mat4[9] = this._vec3[1];
            _mat4[10] = this._vec3[2];
        }
        this._fromValues = [
            null,
            null
        ];
        this._toValues = [
            null,
            null
        ];
        this.isDivisionPickingEnabled = [
            false,
            false
        ];
        this.isLabelPickingEnabled = [
            false,
            false
        ];
        this.isTitlePickingEnabled = [
            false,
            false
        ];
        this.isHeadingPickingEnabled = [
            false,
            false
        ];
        this._scalingX = 1;
        this._scalingY = 1;
        this._offset = (0, _glMatrix.mat4).create();
    }
    get size() {
        return this._size;
    }
    get isDiscreteX() {
        return this._isDiscrete[0];
    }
    set isDiscreteX(value) {
        if (value != this._isDiscrete[0]) {
            this._isDiscrete[0] = value;
            this._hasChanged = true;
        }
    }
    get isDiscreteY() {
        return this._isDiscrete[1];
    }
    set isDiscreteY(value) {
        if (value != this._isDiscrete[1]) {
            this._isDiscrete[1] = value;
            this._hasChanged = true;
        }
    }
    get minBoundsX() {
        return this._minBoundsX;
    }
    set minBoundsX(value) {
        if (value != this._minBoundsX) {
            this._minBoundsX = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsX() {
        return this._maxBoundsX;
    }
    set maxBoundsX(value) {
        if (value != this._minBoundsX) {
            this._maxBoundsX = value;
            this._hasChanged = true;
        }
    }
    get minBoundsY() {
        return this._minBoundsY;
    }
    set minBoundsY(value) {
        if (value != this._minBoundsY) {
            this._minBoundsY = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsY() {
        return this._maxBoundsY;
    }
    set maxBoundsY(value) {
        if (value != this._minBoundsY) {
            this._maxBoundsY = value;
            this._hasChanged = true;
        }
    }
    getIsOutsideEdge(index) {
        return this._isOutsideEdge[index];
    }
    getIsForwardFace(index) {
        return this._isForwardFace[index];
    }
    get textVertices() {
        return this._textVertices;
    }
    get textIndices() {
        return this._textIndices;
    }
    getLabelMMatrix(index) {
        return this._labelMMatrices[index];
    }
    setLabelPositions(index, value) {
        if (this._labelPositions[index] != value) {
            this._labelPositions[index] = value;
            this._hasChanged = true;
        }
    }
    setLabels(index, value) {
        if (this._labels[index] != value) {
            this._labels[index] = value;
            this._hasChanged = true;
        }
    }
    setLabelSizes(index, value) {
        if (this._labelSizes[index] != value) {
            this._labelSizes[index] = value;
            this._hasChanged = true;
        }
    }
    getLabelOrientation(index) {
        return this._orientations[index];
    }
    setLabelOrientation(index, orientation) {
        if (this._orientations[index] != orientation) {
            this._orientations[index] = orientation;
            this._hasChanged = true;
        }
    }
    getTitleIndexCount(index) {
        return this._titleIndexCounts[index];
    }
    getTitleIndexOffset(index) {
        return this._titleIndexOffsets[index];
    }
    getTitleMMatrix(index) {
        return this._titleMMatrices[index];
    }
    setTitle(index, value) {
        if (this._titles[index] != value) {
            this._titles[index] = value;
            this._hasChanged = true;
        }
    }
    setTitleSize(index, value) {
        if (this._titleSizes[index] != value) {
            this._titleSizes[index] = value;
            this._hasChanged = true;
        }
    }
    getHeadingIndexCount(index) {
        return this._headingIndexCounts[index];
    }
    getHeadingIndexOffset(index) {
        return this._headingIndexOffsets[index];
    }
    getHeadingMMatrix(index) {
        return this._headingMMatrices[index];
    }
    setHeading(index, value) {
        if (this._headings[index] != value) {
            this._headings[index] = value;
            this._hasChanged = true;
        }
    }
    setHeadingSize(index, value) {
        if (this._headingSizes[index] != value) {
            this._headingSizes[index] = value;
            this._hasChanged = true;
        }
    }
    getIsLeftToRightHorizontal(index) {
        return this._isLeftToRightHorizontal[index];
    }
    getIsLeftToRightVertical(index) {
        return this._isLeftToRightVertical[index];
    }
    getAxesLeftToRightIndexCount(index) {
        return this._axesLeftToRightIndexCounts[index];
    }
    getAxesRightToLeftIndexCount(index) {
        return this._axesRightToLeftIndexCounts[index];
    }
    getAxesLeftToRightIndexOffset(index) {
        return this._axesLeftToRightIndexOffsets[index];
    }
    getAxesRightToLeftIndexOffset(index) {
        return this._axesRightToLeftIndexOffsets[index];
    }
    get gridVertices() {
        return this._gridVertices;
    }
    get gridIndices() {
        return this._gridIndices;
    }
    getGridTicksIndexCount(index) {
        return this._gridTicksIndexCounts[index];
    }
    getGridTicksIndexOffset(index) {
        return this._gridTicksIndexOffsets[index];
    }
    getGridFaceIndexCount(index) {
        return this._gridFaceIndexCounts[index];
    }
    getGridFaceIndexOffset(index) {
        return this._gridFaceIndexOffsets[index];
    }
    getGridTicksMMatrix(index) {
        return this._gridTicksMMatrices[index];
    }
    getGridFaceMMatrix(index) {
        return this._gridFaceMMatrices[index];
    }
    getGridTicksScale(index) {
        return this._gridTicksScales[index];
    }
    getGridTicksZero(index) {
        return this._gridTicksZeros[index];
    }
    get gridFaceZero() {
        return this._gridFaceZeros;
    }
    get gridFaceMinorGridlines() {
        return this._gridFaceMinorGridlines;
    }
    getGridTicksMinorGridlines(index) {
        return this._gridTicksMinorGridlines[index];
    }
    setTickPositions(index, value) {
        if (this._gridTicksPositions[index] != value) {
            this._gridTicksPositions[index] = value;
            this._hasChanged = true;
        }
    }
    get scalingX() {
        return this._scalingX;
    }
    set scalingX(value) {
        if (value != this._scalingX) {
            this._scalingX = value;
            this._hasChanged = true;
        }
    }
    get scalingY() {
        return this._scalingY;
    }
    set scalingY(value) {
        if (value != this._scalingY) {
            this._scalingY = value;
            this._hasChanged = true;
        }
    }
    get offsetX() {
        return this._offset[12];
    }
    set offsetX(value) {
        if (value != this._offset[12]) this._offset[12] = value;
    }
    get offsetY() {
        return this._offset[13];
    }
    set offsetY(value) {
        if (value != this._offset[13]) this._offset[13] = value;
    }
    set rotation(value) {
        if (this._rotation != value) {
            this._rotation = value;
            this._rMatrix = (0, _glMatrix.mat4).create();
            (0, _glMatrix.mat4).fromQuat(this._rMatrix, value);
        }
    }
    initialize() {
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this.isInitialized) {
            if (this._hasChanged) {
                const start = window.performance.now();
                this._hasChanged = false;
                (0, _glMatrix.vec3).set(this._size, this._maxBoundsX - this._minBoundsX, this._maxBoundsY - this._minBoundsY, 0);
                const maxBounds = Math.max(this._size[0], this._size[1]);
                this._size[0] *= this._scalingX / maxBounds;
                this._size[1] *= this._scalingY / maxBounds;
                this._updateGrids(this._size);
                this._updateText(this._size);
                if (this.hasChangedCallback) this.hasChangedCallback();
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d updated ${Math.round(window.performance.now() - start)}ms`);
            }
            if (this._rMatrix) {
                (0, _glMatrix.mat4).mul(this._mMatrix, this.mMatrix, this._rMatrix);
                (0, _glMatrix.mat4).mul(this._mMatrix, this._mMatrix, this._offset);
            } else (0, _glMatrix.mat4).multiply(this._mMatrix, this.mMatrix, this._offset);
            this._mvMatrix = (0, _glMatrix.mat4).create();
            (0, _glMatrix.mat4).multiply(this._mvMatrix, this._vMatrix, this._mMatrix);
            (0, _glMatrix.mat3).fromMat4(this._mat3, this._mvMatrix);
            for(let faceId = 0; faceId < 2; faceId++){
                (0, _glMatrix.vec3).transformMat4(this._forward, (0, _constantsJs.Constants).VECTOR3_ZERO, this._mvMatrix);
                (0, _glMatrix.vec3).transformMat3(this._normal, (0, _quadJs.Quad).FACE_NORMALS[faceId], this._mat3);
                this._isForwardFace[faceId] = (0, _glMatrix.vec3).dot(this._normal, this._forward) > 0;
            }
            this._forward[0] = this._mat3[2];
            this._forward[1] = this._mat3[5];
            this._forward[2] = this._mat3[8];
            for(let edgeId = 0; edgeId < 4; edgeId++){
                this._isForwardEdge[edgeId] = (0, _glMatrix.vec3).dot((0, _quadJs.Quad).EDGE_FORWARDS[edgeId], this._forward) < 0;
                this._distances[edgeId] = 0;
            }
            for(let axisId = 0; axisId < 2; axisId++)if (this.arePickDivisionsVisible[axisId]) {
                (0, _glMatrix.vec2).set(this._gridTicksZeros[axisId], this.zero[axisId], -1);
                (0, _glMatrix.vec2).set(this._gridTicksMinorGridlines[axisId], this.minorGridlines[axisId], 1);
                const gridTicksScale = this._gridTicksScales[axisId];
                for(let edge = 0; edge < 2; edge++){
                    const edgeId1 = (0, _quadJs.Quad).AXIS_EDGES[axisId][edge];
                    if (this.isEdgeVisible[edgeId1]) {
                        let distance = this._distances[edgeId1];
                        distance += this._gridPickDivisionHeight * 0.5;
                        const gridTicksMMatrix = this._gridTicksMMatrices[edgeId1];
                        (0, _glMatrix.vec3).multiply(this._vec3, (0, _quadJs.Quad).EDGE_POSITIONS[edgeId1], this._size);
                        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _quadJs.Quad).EDGE_NORMALS[edgeId1], distance);
                        (0, _glMatrix.mat4).translate(gridTicksMMatrix, this._mMatrix, this._vec3);
                        (0, _glMatrix.mat4).multiply(gridTicksMMatrix, gridTicksMMatrix, this._gridTicksRotations[edgeId1]);
                        if (!this._isForwardEdge[edgeId1]) (0, _glMatrix.mat4).scale(gridTicksMMatrix, gridTicksMMatrix, (0, _constantsJs.Constants).VECTOR3_REFLECTX);
                        (0, _glMatrix.mat4).scale(gridTicksMMatrix, gridTicksMMatrix, gridTicksScale);
                        distance += this._gridPickDivisionHeight * 0.5;
                        this._distances[edgeId1] = distance;
                    }
                }
            }
            (0, _glMatrix.vec2).set(this._gridFaceZeros, this.zero[0], this.zero[1]);
            (0, _glMatrix.vec2).set(this._gridFaceMinorGridlines, this.minorGridlines[0], this.minorGridlines[1]);
            for(let faceId1 = 0; faceId1 < 2; faceId1++)if (this._isForwardFace[faceId1]) {
                const gridFaceMMatrix = this._gridFaceMMatrices[faceId1];
                (0, _glMatrix.mat4).scale(gridFaceMMatrix, this._mMatrix, this._gridFaceScale);
            }
            for(let axisId1 = 0; axisId1 < 2; axisId1++)for(let edge1 = 0; edge1 < 2; edge1++){
                const edgeId2 = (0, _quadJs.Quad).AXIS_EDGES[axisId1][edge1];
                (0, _glMatrix.vec3).multiply(this._edgePosition, (0, _quadJs.Quad).EDGE_POSITIONS[edgeId2], this._size);
                (0, _glMatrix.vec3).transformMat4(this._edgePosition, this._edgePosition, this._mvMatrix);
                (0, _glMatrix.vec3).normalize(this._forward, this._edgePosition);
                (0, _glMatrix.vec3).negate(this._forward, this._forward);
                (0, _glMatrix.vec3).cross(this._right, (0, _constantsJs.Constants).VECTOR3_UNITY, this._forward);
                (0, _glMatrix.vec3).normalize(this._right, this._right);
                (0, _glMatrix.vec3).cross(this._up, this._forward, this._right);
                (0, _glMatrix.vec3).transformMat3(this._edgeNormal, (0, _quadJs.Quad).EDGE_NORMALS[edgeId2], this._mat3);
                (0, _glMatrix.vec3).transformMat3(this._edgePositive, (0, _quadJs.Quad).EDGE_POSITIVES[edgeId2], this._mat3);
                (0, _glMatrix.vec3).copy(this._edgeNormalTemp, this._edgeNormal);
                (0, _glMatrix.vec3).copy(this._edgePositiveTemp, this._edgePositive);
                const edgeHorizontalRight = this._edgeHorizontalRight[edgeId2];
                const edgeHorizontalUp = this._edgeHorizontalUp[edgeId2];
                const edgeHorizontalForward = this._edgeHorizontalForward[edgeId2];
                if ((0, _glMatrix.vec3).dot(this._edgeNormalTemp, this._up) > 0) (0, _glMatrix.vec3).copy(edgeHorizontalUp, (0, _quadJs.Quad).EDGE_NORMALS[edgeId2]);
                else {
                    (0, _glMatrix.vec3).negate(edgeHorizontalUp, (0, _quadJs.Quad).EDGE_NORMALS[edgeId2]);
                    (0, _glMatrix.vec3).negate(this._edgeNormalTemp, this._edgeNormalTemp);
                }
                if ((0, _glMatrix.vec3).dot(this._edgePositiveTemp, this._right) > 0) {
                    this._isLeftToRightHorizontal[edgeId2] = true;
                    (0, _glMatrix.vec3).copy(edgeHorizontalRight, (0, _quadJs.Quad).EDGE_POSITIVES[edgeId2]);
                } else {
                    this._isLeftToRightHorizontal[edgeId2] = false;
                    (0, _glMatrix.vec3).negate(edgeHorizontalRight, (0, _quadJs.Quad).EDGE_POSITIVES[edgeId2]);
                    (0, _glMatrix.vec3).negate(this._edgePositiveTemp, this._edgePositiveTemp);
                }
                (0, _glMatrix.vec3).cross(edgeHorizontalForward, this._edgePositiveTemp, this._edgeNormalTemp);
                if ((0, _glMatrix.vec3).dot(edgeHorizontalForward, this._forward) < 0) {
                    this._isLeftToRightHorizontal[edgeId2] = !this._isLeftToRightHorizontal[edgeId2];
                    (0, _glMatrix.vec3).negate(edgeHorizontalRight, edgeHorizontalRight);
                }
                (0, _glMatrix.vec3).cross(edgeHorizontalForward, edgeHorizontalRight, edgeHorizontalUp);
                const edgeVerticalRight = this._edgeVerticalRight[edgeId2];
                const edgeVerticalUp = this._edgeVerticalUp[edgeId2];
                const edgeVerticalForward = this._edgeVerticalForward[edgeId2];
                if ((0, _glMatrix.vec3).dot(this._edgeNormal, this._right) < 0) (0, _glMatrix.vec3).copy(edgeVerticalUp, (0, _quadJs.Quad).EDGE_NORMALS[edgeId2]);
                else {
                    (0, _glMatrix.vec3).negate(edgeVerticalUp, (0, _quadJs.Quad).EDGE_NORMALS[edgeId2]);
                    (0, _glMatrix.vec3).negate(this._edgeNormal, this._edgeNormal);
                }
                if ((0, _glMatrix.vec3).dot(this._edgePositive, this._up) < 0) {
                    this._isLeftToRightVertical[edgeId2] = true;
                    (0, _glMatrix.vec3).copy(edgeVerticalRight, (0, _quadJs.Quad).EDGE_POSITIVES[edgeId2]);
                } else {
                    this._isLeftToRightVertical[edgeId2] = false;
                    (0, _glMatrix.vec3).negate(edgeVerticalRight, (0, _quadJs.Quad).EDGE_POSITIVES[edgeId2]);
                    (0, _glMatrix.vec3).negate(this._edgePositive, this._edgePositive);
                }
                (0, _glMatrix.vec3).cross(edgeVerticalForward, this._edgePositive, this._edgeNormal);
                if ((0, _glMatrix.vec3).dot(edgeVerticalForward, this._forward) < 0) {
                    this._isLeftToRightVertical[edgeId2] = !this._isLeftToRightVertical[edgeId2];
                    (0, _glMatrix.vec3).negate(edgeVerticalRight, edgeVerticalRight);
                }
                (0, _glMatrix.vec3).cross(edgeVerticalForward, edgeVerticalRight, edgeVerticalUp);
                if (this.isEdgeVisible[edgeId2]) {
                    if (this._labels[axisId1]) this._updateLabels(axisId1, edgeId2);
                    if (this._titles[axisId1]) this._updateTitle(axisId1, edgeId2);
                }
                if (this.isHeadingVisible[edgeId2]) this._updateHeading(axisId1, edgeId2);
            }
        }
    }
    _updateLabels(axisId, edgeId) {
        const orientation = this._orientations[axisId];
        let distance = this._distances[edgeId];
        let maxLabelSize = this._maxLabelSize[axisId][1];
        if (orientation == (0, _mainJs.AxesTextOrientation).parallel) maxLabelSize *= this._lineHeight;
        distance += maxLabelSize * 0.5;
        (0, _glMatrix.vec3).multiply(this._vec3, (0, _quadJs.Quad).EDGE_POSITIONS[edgeId], this._size);
        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _quadJs.Quad).EDGE_NORMALS[edgeId], distance);
        const labelMMatrix = this._labelMMatrices[edgeId];
        labelMMatrix[12] = this._vec3[0];
        labelMMatrix[13] = this._vec3[1];
        labelMMatrix[14] = this._vec3[2];
        if (orientation == (0, _mainJs.AxesTextOrientation).parallel) {
            const right = this._edgeHorizontalRight[edgeId];
            const up = this._edgeHorizontalUp[edgeId];
            const forward = this._edgeHorizontalForward[edgeId];
            labelMMatrix[0] = right[0];
            labelMMatrix[1] = right[1];
            labelMMatrix[2] = right[2];
            labelMMatrix[4] = up[0];
            labelMMatrix[5] = up[1];
            labelMMatrix[6] = up[2];
            labelMMatrix[8] = forward[0];
            labelMMatrix[9] = forward[1];
            labelMMatrix[10] = forward[2];
        } else {
            const right1 = this._edgeVerticalRight[edgeId];
            const up1 = this._edgeVerticalUp[edgeId];
            const forward1 = this._edgeVerticalForward[edgeId];
            labelMMatrix[0] = right1[0];
            labelMMatrix[1] = right1[1];
            labelMMatrix[2] = right1[2];
            labelMMatrix[4] = up1[0];
            labelMMatrix[5] = up1[1];
            labelMMatrix[6] = up1[2];
            labelMMatrix[8] = forward1[0];
            labelMMatrix[9] = forward1[1];
            labelMMatrix[10] = forward1[2];
        }
        (0, _glMatrix.mat4).multiply(labelMMatrix, this._mMatrix, labelMMatrix);
        if (orientation == (0, _mainJs.AxesTextOrientation).perpendicular) (0, _glMatrix.mat4).multiply(labelMMatrix, labelMMatrix, (0, _constantsJs.Constants).MAT4_ROTATION_MINUS_90);
        distance += maxLabelSize * 0.5;
        this._distances[edgeId] = distance;
    }
    _updateTitle(axisId, edgeId) {
        let distance = this._distances[edgeId];
        const titleTextSize = this._titleSizes[axisId] * this._lineHeight;
        distance += titleTextSize * 0.5;
        (0, _glMatrix.vec3).multiply(this._vec3, (0, _quadJs.Quad).EDGE_POSITIONS[edgeId], this._size);
        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _quadJs.Quad).EDGE_NORMALS[edgeId], distance);
        const titleMMatrix = this._titleMMatrices[edgeId];
        titleMMatrix[12] = this._vec3[0];
        titleMMatrix[13] = this._vec3[1];
        titleMMatrix[14] = this._vec3[2];
        const right = this._edgeHorizontalRight[edgeId];
        const up = this._edgeHorizontalUp[edgeId];
        const forward = this._edgeHorizontalForward[edgeId];
        titleMMatrix[0] = right[0];
        titleMMatrix[1] = right[1];
        titleMMatrix[2] = right[2];
        titleMMatrix[4] = up[0];
        titleMMatrix[5] = up[1];
        titleMMatrix[6] = up[2];
        titleMMatrix[8] = forward[0];
        titleMMatrix[9] = forward[1];
        titleMMatrix[10] = forward[2];
        (0, _glMatrix.mat4).multiply(titleMMatrix, this._mMatrix, titleMMatrix);
        distance += titleTextSize * 0.5;
        this._distances[edgeId] = distance;
    }
    _updateHeading(axisId, edgeId) {
        let distance = this._distances[edgeId];
        const headingTextSize = this._headingSizes[axisId] * this._lineHeight;
        distance += headingTextSize;
        (0, _glMatrix.vec3).multiply(this._vec3, (0, _quadJs.Quad).EDGE_POSITIONS[edgeId], this._size);
        (0, _glMatrix.vec3).scaleAndAdd(this._vec3, this._vec3, (0, _quadJs.Quad).EDGE_NORMALS[edgeId], distance);
        const headingMMatrix = this._headingMMatrices[edgeId];
        headingMMatrix[12] = this._vec3[0];
        headingMMatrix[13] = this._vec3[1];
        headingMMatrix[14] = this._vec3[2];
        const right = this._edgeHorizontalRight[edgeId];
        const up = this._edgeHorizontalUp[edgeId];
        const forward = this._edgeHorizontalForward[edgeId];
        headingMMatrix[0] = right[0];
        headingMMatrix[1] = right[1];
        headingMMatrix[2] = right[2];
        headingMMatrix[4] = up[0];
        headingMMatrix[5] = up[1];
        headingMMatrix[6] = up[2];
        headingMMatrix[8] = forward[0];
        headingMMatrix[9] = forward[1];
        headingMMatrix[10] = forward[2];
        (0, _glMatrix.mat4).multiply(headingMMatrix, this._mMatrix, headingMMatrix);
        distance += headingTextSize * 0.5;
        this._distances[edgeId] = distance;
    }
    _updateGrids(size) {
        let offset = 0;
        this.pickGridLookup = {};
        this._pickGrid = [];
        const xDivisions = this._gridTicksPositions[0] ? this._gridTicksPositions[0].length - 1 : 0;
        const yDivisions = this._gridTicksPositions[1] ? this._gridTicksPositions[1].length - 1 : 0;
        const count = 2 * (xDivisions * yDivisions) + xDivisions + yDivisions;
        const byteLength = (0, _vertexJs.PickGridVertex).SIZE_BYTES * count * 4;
        if (!this._gridVertices || this._gridVertices.byteLength < byteLength) {
            this._gridVertices = new ArrayBuffer(byteLength);
            this._gridVerticesView = new DataView(this._gridVertices);
            this._gridIndices = new Uint16Array(count * 6);
        }
        for(let axisId = 0; axisId < 2; axisId++){
            const width = size[axisId];
            (0, _glMatrix.vec3).set(this._gridTicksScales[axisId], width, this._gridPickDivisionHeight, 1);
            offset = this._updateGridTicks(axisId, this._gridVerticesView, this._gridIndices, offset);
            this._gridFaceScale[axisId] = size[axisId] == 0 ? 1 : size[axisId];
        }
        const axisId1 = 2;
        this._gridFaceScale[axisId1] = 1;
        for(let faceId = 0; faceId < 2; faceId++)offset = this._updateGridFace(axisId1, faceId, this._gridVerticesView, this._gridIndices, offset);
    }
    _updateText(size) {
        let glyphOffset = 0;
        let count = 0;
        for(let axisId = 0; axisId < 2; axisId++){
            const labels = this._labels[axisId];
            if (labels) for(let i = 0; i < labels.length; i++)count += 2 * Math.min(labels[i].length, this._core.config.axesTextLabelMaxGlyphs);
            const title = this._titles[axisId];
            if (title) count += Math.min(title.length, this._core.config.axesTextTitleMaxGlyphs);
            const heading = this._headings[axisId];
            if (heading) count += Math.min(heading.length, this._core.config.axesTextHeadingMaxGlyphs);
        }
        const byteLength = (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES * count * 4;
        if (!this._textVertices || this._textVertices.byteLength < byteLength) {
            this._textVertices = new ArrayBuffer(byteLength);
            this._textVerticesView = new DataView(this._textVertices);
            this._textIndices = new Uint16Array(count * 6);
        }
        this.pickLabelLookup = {};
        this._pickLabel = [];
        for(let axisId1 = 0; axisId1 < 2; axisId1++)if (this._labels[axisId1]) {
            const width = size[axisId1];
            const maxLabelSize = this._maxLabelSize[axisId1];
            const orientation = this._orientations[axisId1];
            (0, _glMatrix.vec2).set(maxLabelSize, 0, 0);
            this._axesLeftToRightIndexOffsets[axisId1] = glyphOffset * 6;
            glyphOffset = this._updateLeftToRightAxisLabels(axisId1, width, maxLabelSize, glyphOffset, orientation, this._labels[axisId1], this._labelPositions[axisId1], this._labelSizes[axisId1]);
            this._axesLeftToRightIndexCounts[axisId1] = glyphOffset * 6 - this._axesLeftToRightIndexOffsets[axisId1];
            this._axesRightToLeftIndexOffsets[axisId1] = glyphOffset * 6;
            glyphOffset = this._updateRightToLeftAxisLabels(axisId1, width, maxLabelSize, glyphOffset, orientation, this._labels[axisId1], this._labelPositions[axisId1], this._labelSizes[axisId1]);
            this._axesRightToLeftIndexCounts[axisId1] = glyphOffset * 6 - this._axesRightToLeftIndexOffsets[axisId1];
        } else {
            this._axesLeftToRightIndexOffsets[axisId1] = glyphOffset * 6;
            this._axesRightToLeftIndexOffsets[axisId1] = glyphOffset * 6;
            this._axesLeftToRightIndexCounts[axisId1] = 0;
            this._axesRightToLeftIndexCounts[axisId1] = 0;
            this._maxLabelSize[axisId1][0] = 0;
            this._maxLabelSize[axisId1][1] = 0;
        }
        this.pickTitleLookup = {};
        this._pickTitle = [];
        for(let axisId2 = 0; axisId2 < 2; axisId2++)if (this._titles[axisId2]) {
            (0, _glMatrix.vec3).set(this._textPosition, 0, 0, 0);
            (0, _glMatrix.vec3).set(this._textOffset, 0, 0, 0);
            this._titleIndexOffsets[axisId2] = glyphOffset * 6;
            const text = (0, _textJs.TextHelper).truncate(this._titles[axisId2], this._core.config.axesTextTitleMaxGlyphs);
            const scale = this._titleSizes[axisId2] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
            const width1 = this._textMetric.width * scale;
            const maxGlyphTop = this._textMetric.maxTop * scale;
            const lineHeight = this._font.size * scale;
            this._textOffset[0] -= width1 / 2;
            this._textOffset[1] -= (lineHeight - maxGlyphTop) / 2;
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesTitle, this._vec4);
            this.pickTitleLookup[pickId] = this._pickTitle.length;
            this._pickTitle.push(axisId2);
            (0, _textJs.TextHelper).addString(this._font, text, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale, this._textOffset, null, this._vec4);
            glyphOffset += text.length;
            this._titleIndexCounts[axisId2] = glyphOffset * 6 - this._titleIndexOffsets[axisId2];
        } else {
            this._titleIndexOffsets[axisId2] = glyphOffset * 6;
            this._titleIndexCounts[axisId2] = 0;
        }
        this.pickHeadingLookup = {};
        this._pickHeading = [];
        for(let axisId3 = 0; axisId3 < 2; axisId3++)if (this._headings[axisId3]) {
            (0, _glMatrix.vec3).set(this._textPosition, 0, 0, 0);
            (0, _glMatrix.vec3).set(this._textOffset, 0, 0, 0);
            this._headingIndexOffsets[axisId3] = glyphOffset * 6;
            const text1 = (0, _textJs.TextHelper).truncate(this._headings[axisId3], this._core.config.axesTextHeadingMaxGlyphs);
            const scale1 = this._headingSizes[axisId3] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text1, this._textMetric);
            const width2 = this._textMetric.width * scale1;
            const maxGlyphTop1 = this._textMetric.maxTop * scale1;
            const lineHeight1 = this._font.size * scale1;
            this._textOffset[0] -= width2 / 2;
            this._textOffset[1] -= (lineHeight1 - maxGlyphTop1) / 2;
            const pickId1 = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId1, (0, _mainJs.PickType).axesHeading, this._vec4);
            this.pickHeadingLookup[pickId1] = this._pickHeading.length;
            this._pickHeading.push(axisId3);
            (0, _textJs.TextHelper).addString(this._font, text1, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale1, this._textOffset, null, this._vec4);
            glyphOffset += text1.length;
            this._headingIndexCounts[axisId3] = glyphOffset * 6 - this._headingIndexOffsets[axisId3];
        } else {
            this._headingIndexOffsets[axisId3] = glyphOffset * 6;
            this._headingIndexCounts[axisId3] = 0;
        }
    }
    _updateLeftToRightAxisLabels(axisId, size, maxSize, glyphOffset, orientation, labels, positions, scales) {
        for(let label = 0; label < labels.length; label++){
            const text = (0, _textJs.TextHelper).truncate(labels[label], this._core.config.axesTextLabelMaxGlyphs);
            const scale = scales[label] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
            const width = this._textMetric.width * scale;
            const maxGlyphTop = this._textMetric.maxTop * scale;
            const lineHeight = this._font.size * scale;
            switch(orientation){
                case (0, _mainJs.AxesTextOrientation).parallel:
                    (0, _glMatrix.vec3).set(this._textPosition, (positions[label] - 0.5) * size, 0, 0);
                    if (this._isDiscrete[axisId]) this._textOffset[0] = -width / 2;
                    else this._textOffset[0] = positions[label] == 0 ? 0 : positions[label] == 1 ? -width : -width / 2;
                    this._textOffset[1] = (maxGlyphTop - lineHeight) / 2;
                    maxSize[0] = Math.max(width, maxSize[0]);
                    maxSize[1] = Math.max(lineHeight, maxSize[1]);
                    break;
                case (0, _mainJs.AxesTextOrientation).perpendicular:
                    (0, _glMatrix.vec3).set(this._textPosition, 0, (positions[label] - 0.5) * size, 0);
                    this._textOffset[0] = -width / 2;
                    if (this._isDiscrete[axisId]) this._textOffset[1] = -maxGlyphTop / 2;
                    else this._textOffset[1] = positions[label] == 0 ? 0 : positions[label] == 1 ? -maxGlyphTop : -maxGlyphTop / 2;
                    maxSize[0] = Math.max(lineHeight, maxSize[0]);
                    maxSize[1] = Math.max(width, maxSize[1]);
                    break;
            }
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesLabel, this._vec4);
            this.pickLabelLookup[pickId] = this._pickLabel.length / 2;
            this._pickLabel.push(axisId);
            this._pickLabel.push(label);
            (0, _textJs.TextHelper).addString(this._font, text, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale, this._textOffset, null, this._vec4);
            glyphOffset += text.length;
        }
        return glyphOffset;
    }
    _updateRightToLeftAxisLabels(axisId, size, maxSize, glyphOffset, orientation, labels, positions, scales) {
        for(let label = 0; label < labels.length; label++){
            const text = (0, _textJs.TextHelper).truncate(labels[label], this._core.config.axesTextLabelMaxGlyphs);
            const scale = scales[label] / this._font.size;
            (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
            const width = this._textMetric.width * scale;
            const maxGlyphTop = this._textMetric.maxTop * scale;
            const lineHeight = this._font.size * scale;
            switch(orientation){
                case (0, _mainJs.AxesTextOrientation).parallel:
                    (0, _glMatrix.vec3).set(this._textPosition, (0.5 - positions[label]) * size, 0, 0);
                    if (this._isDiscrete[axisId]) this._textOffset[0] = -width / 2;
                    else this._textOffset[0] = label == 0 ? -width : label == labels.length - 1 ? 0 : -width / 2;
                    this._textOffset[1] = (maxGlyphTop - lineHeight) / 2;
                    break;
                case (0, _mainJs.AxesTextOrientation).perpendicular:
                    (0, _glMatrix.vec3).set(this._textPosition, 0, (0.5 - positions[label]) * size, 0);
                    this._textOffset[0] = -width / 2;
                    if (this._isDiscrete[axisId]) this._textOffset[1] = -maxGlyphTop / 2;
                    else this._textOffset[1] = label == 0 ? -maxGlyphTop : label == labels.length - 1 ? 0 : -maxGlyphTop / 2;
                    break;
            }
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesLabel, this._vec4);
            this.pickLabelLookup[pickId] = this._pickLabel.length / 2;
            this._pickLabel.push(axisId);
            this._pickLabel.push(label);
            (0, _textJs.TextHelper).addString(this._font, text, this._textVerticesView, this._textIndices, glyphOffset, this._textPosition, scale, this._textOffset, null, this._vec4);
            glyphOffset += text.length;
        }
        return glyphOffset;
    }
    _updateGridTicks(axisId, dataView, indices, offset) {
        this._gridTicksIndexOffsets[axisId] = offset * 6;
        if (this._gridTicksPositions[axisId]) {
            const axes = (0, _glMatrix.vec3).create();
            const positions = this._gridTicksPositions[axisId];
            let vertexOffset = offset * 4;
            for(let position = 0; position < positions.length - 1; position++){
                const left = positions[position] - 0.5;
                const right = positions[position + 1] - 0.5;
                axes[axisId] = position + 1;
                const pickId = (0, _pickJs.PickHelper).nextPickId();
                (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesDivision, this._vec4);
                this.pickGridLookup[pickId] = this._pickGrid.length / 3;
                this._pickGrid.push(axes[0]);
                this._pickGrid.push(axes[1]);
                this._pickGrid.push(axes[2]);
                let indexOffset = offset * 6;
                for(let j = 0; j < this._indexTemplate.length; j++)indices[indexOffset++] = this._indexTemplate[j] + vertexOffset;
                (0, _glMatrix.vec4).set(this._bounds, left + 0.5, 0, right + 0.5, 1);
                this._translation[0] = left;
                this._translation[1] = 0.5;
                this._translation[2] = 0;
                this._texCoord[0] = left + 0.5;
                this._texCoord[1] = 1;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                this._translation[0] = right;
                this._texCoord[0] = right + 0.5;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                this._translation[0] = left;
                this._translation[1] = -0.5;
                this._texCoord[0] = left + 0.5;
                this._texCoord[1] = 0;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                this._translation[0] = right;
                this._texCoord[0] = right + 0.5;
                (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, (0, _constantsJs.Constants).VECTOR3_UNITZ);
                (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                vertexOffset++;
                offset++;
            }
        }
        this._gridTicksIndexCounts[axisId] = offset * 6 - this._gridTicksIndexOffsets[axisId];
        return offset;
    }
    _updateGridFace(axisId, faceId, dataView, indices, offset) {
        (0, _glMatrix.vec3).set(this._translation, 0, 0, 0);
        this._gridFaceIndexOffsets[faceId] = offset * 6;
        const axisId2 = axisId == 0 ? 1 : 0;
        const axisId3 = axisId == 2 ? 1 : 2;
        if (this._gridTicksPositions[axisId2] && this._gridTicksPositions[axisId3]) {
            const axes = (0, _glMatrix.vec3).create();
            (0, _glMatrix.vec3).negate(this._normal, (0, _quadJs.Quad).FACE_NORMALS[faceId]);
            const positions2 = this._gridTicksPositions[axisId2];
            const positions3 = this._gridTicksPositions[axisId3];
            for(let position2 = 0; position2 < positions2.length - 1; position2++){
                const min2 = positions2[position2] - 0.5;
                const max2 = positions2[position2 + 1] - 0.5;
                axes[axisId2] = position2 + 1;
                let vertexOffset = offset * 4;
                for(let position3 = 0; position3 < positions3.length - 1; position3++){
                    const min3 = positions3[position3] - 0.5;
                    const max3 = positions3[position3 + 1] - 0.5;
                    axes[axisId3] = position3 + 1;
                    const pickId = (0, _pickJs.PickHelper).nextPickId();
                    (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).axesDivision, this._vec4);
                    this.pickGridLookup[pickId] = this._pickGrid.length / 3;
                    this._pickGrid.push(axes[0]);
                    this._pickGrid.push(axes[1]);
                    this._pickGrid.push(axes[2]);
                    let indexOffset = offset * 6;
                    for(let i = 0; i < this._indexTemplate.length; i++)indices[indexOffset++] = this._indexTemplate[i] + vertexOffset;
                    (0, _glMatrix.vec4).set(this._bounds, min2 + 0.5, min3 + 0.5, max2 + 0.5, max3 + 0.5);
                    this._translation[axisId2] = min2;
                    this._translation[axisId3] = max3;
                    this._texCoord[0] = min2 + 0.5;
                    this._texCoord[1] = max3 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    this._translation[axisId2] = max2;
                    this._texCoord[0] = max2 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    this._translation[axisId2] = min2;
                    this._translation[axisId3] = min3;
                    this._texCoord[0] = min2 + 0.5;
                    this._texCoord[1] = min3 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    this._translation[axisId2] = max2;
                    this._texCoord[0] = max2 + 0.5;
                    (0, _vertexJs.PickGridVertex).setTranslation(dataView, vertexOffset, this._translation);
                    (0, _vertexJs.PickGridVertex).setNormal(dataView, vertexOffset, this._normal);
                    (0, _vertexJs.PickGridVertex).setIdColor(dataView, vertexOffset, this._vec4);
                    (0, _vertexJs.PickGridVertex).setTexCoord(dataView, vertexOffset, this._texCoord);
                    (0, _vertexJs.PickGridVertex).setBounds(dataView, vertexOffset, this._bounds);
                    vertexOffset++;
                    offset++;
                }
            }
        }
        this._gridFaceIndexCounts[faceId] = offset * 6 - this._gridFaceIndexOffsets[faceId];
        return offset;
    }
}

},{"gl-matrix":"3mrln","../../constants.js":"dtECF","../../main.js":"2JYph","./axes.js":"l4fPN","../../meshes/quad.js":"5BIpU","../../vertex.js":"7T2qu","../../helpers/axes.js":"fTBqS","../../helpers/text.js":"jYJ8G","../../helpers/pick.js":"jhV3p","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kD06g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Glyph", ()=>Glyph);
parcelHelpers.export(exports, "FontVisual", ()=>FontVisual);
parcelHelpers.export(exports, "Font", ()=>Font);
parcelHelpers.export(exports, "FontAtlas", ()=>FontAtlas);
parcelHelpers.export(exports, "FontRasterizer", ()=>FontRasterizer);
parcelHelpers.export(exports, "GlyphRasterizer", ()=>GlyphRasterizer);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("./main.js");
class Glyph {
    toJSON() {
        return {
            key: this.key,
            char: this.char,
            width: this.width,
            height: this.height,
            top: this.top,
            left: this.left,
            advance: this.advance,
            u0: this.u0,
            v0: this.v0,
            u1: this.u1,
            v1: this.v1
        };
    }
}
class FontVisual {
    constructor(font){
        this.font = font;
    }
    update() {}
}
class Font {
    constructor(core, rasterizer){
        this._core = core;
        this._rasterizer = rasterizer;
        this._chars = new Set();
        this._previousSize = 0;
        this.glyphs = {};
    }
    get atlas() {
        return this._rasterizer.fontAtlas;
    }
    get count() {
        return this._chars.size;
    }
    addGlyph(char) {
        if (!this._chars.has(char)) {
            this._chars.add(char);
            this._rasterizer.draw(char);
            this._hasChanged = true;
        }
    }
    update() {
        if (this._hasChanged) {
            this._hasChanged = false;
            this._core.log.write((0, _mainJs.LogLevel).info, `${this.name} added ${this._chars.size - this._previousSize} new glyphs`);
            this._previousSize = this._chars.size;
            if (this.hasChangedCallback) this.hasChangedCallback();
        }
    }
    toJSON() {
        const glyphs = [];
        for(let key in this.glyphs){
            const glyph = this.glyphs[key];
            glyphs.push(glyph.toJSON());
        }
        return {
            name: this.name,
            size: this.size,
            border: this.border,
            glyphs: glyphs,
            edgeValue: this.edgeValue
        };
    }
}
class FontAtlas {
    constructor(width, height){
        const canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        const context = canvas.getContext("2d");
        context.clearRect(0, 0, width, height);
        this.imageData = context.getImageData(0, 0, width, height);
        this.x = 0;
        this.top = new Uint16Array(width);
    }
}
class FontRasterizer {
    constructor(core, options){
        let start = performance.now();
        this._core = core;
        this._fontAtlas = options.fontAtlas;
        this._fontSize = options.fontSize;
        this._border = options.border;
        this._fontFamily = options.fontFamily;
        this._fontWeight = options.fontWeight;
        this._fontStyle = options.fontStyle;
        this._baseline = options.baseline;
        this._maxDistance = options.maxDistance;
        this._edgeValue = options.edgeValue;
        this._font = new Font(core, this);
        this._font.name = `${this._fontFamily}${this._fontSize}${this._fontWeight == "normal" ? "" : this._fontWeight}${this._fontStyle == "normal" ? "" : this._fontStyle}`.replace(/[^a-z0-9,]/ig, "").toLowerCase();
        this._font.size = this._fontSize;
        this._font.border = this._border;
        this._font.edgeValue = this._edgeValue;
        const glyphRasterizerOptions = {
            baseline: this._baseline,
            border: this._border,
            edgeValue: this._edgeValue,
            fontFamily: this._fontFamily,
            fontSize: this._fontSize,
            fontStyle: this._fontStyle,
            fontWeight: this._fontWeight,
            maxDistance: this._maxDistance
        };
        this._glyphRasterizer = new GlyphRasterizer(core, glyphRasterizerOptions);
        this._core.log.write((0, _mainJs.LogLevel).info, `font rasterizer ${Math.round(window.performance.now() - start)}ms`);
    }
    get font() {
        return this._font;
    }
    get fontAtlas() {
        return this._fontAtlas;
    }
    draw(char) {
        const glyph = this._glyphRasterizer.draw(char);
        const texWidth = glyph.width + 2 * this._border;
        const texHeight = glyph.height + 2 * this._border;
        const width = this._fontAtlas.imageData.width;
        const height = this._fontAtlas.imageData.height;
        if (this._fontAtlas.x + texWidth > width) this._fontAtlas.x = 0;
        let y = 0;
        for(let x = this._fontAtlas.x; x < this._fontAtlas.x + texWidth; x++)y = Math.max(y, this._fontAtlas.top[x]);
        if (y + texHeight > height) this._core.log.write((0, _mainJs.LogLevel).warn, `${this._font.name} height overflow`);
        for(let x1 = this._fontAtlas.x; x1 < this._fontAtlas.x + texWidth; x1++)this._fontAtlas.top[x1] = y + texHeight;
        glyph.u0 = this._fontAtlas.x / width;
        glyph.v0 = y / height;
        glyph.u1 = (this._fontAtlas.x + texWidth) / width;
        glyph.v1 = (y + texHeight) / height;
        this._font.glyphs[char] = glyph;
        for(let i = 0; i < glyph.data.length; i++){
            const alpha = glyph.data[i];
            const dataX = i % texWidth;
            const dataY = Math.floor(i / texWidth);
            const offset = (this._fontAtlas.x + dataX + (y + dataY) * width) * 4;
            this._fontAtlas.imageData.data[offset] = alpha;
            this._fontAtlas.imageData.data[offset + 1] = alpha;
            this._fontAtlas.imageData.data[offset + 2] = alpha;
            this._fontAtlas.imageData.data[offset + 3] = 0xff;
        }
        this._fontAtlas.x += texWidth;
    }
}
class GlyphRasterizer {
    constructor(core, options){
        let start = performance.now();
        this._core = core;
        this._fontSize = options.fontSize;
        this._border = options.border;
        this._fontFamily = options.fontFamily;
        this._fontWeight = options.fontWeight;
        this._fontStyle = options.fontStyle;
        this._baseline = options.baseline;
        this._maxDistance = options.maxDistance;
        this._edgeValue = options.edgeValue;
        this._size = this._fontSize + this._border * 2;
        this._size += this._border * 2;
        this._gridOuter = new Float64Array(this._size * this._size);
        this._gridInner = new Float64Array(this._size * this._size);
        this._f = new Float64Array(this._size);
        this._z = new Float64Array(this._size + 1);
        this._v = new Uint16Array(this._size);
        const canvas = document.createElement("canvas");
        canvas.width = canvas.height = this._size;
        this._context = canvas.getContext("2d");
        this._context.font = `${this._fontStyle} ${this._fontWeight} ${this._fontSize}px ${this._fontFamily} `;
        this._context.textBaseline = this._baseline;
        this._context.textAlign = "left";
        this._context.fillStyle = "black";
        this._core.log.write((0, _mainJs.LogLevel).info, `glyph rasterizer ${Math.round(window.performance.now() - start)}ms`);
    }
    draw(char) {
        const textMetrics = this._context.measureText(char);
        const glyphLeft = 0;
        const glyphTop = Math.floor(textMetrics.actualBoundingBoxAscent);
        let glyphWidth = Math.ceil(textMetrics.actualBoundingBoxRight);
        let glyphHeight = Math.ceil(textMetrics.actualBoundingBoxAscent) + Math.ceil(textMetrics.actualBoundingBoxDescent);
        glyphWidth = Math.min(this._size - this._border, glyphWidth);
        glyphHeight = Math.min(this._size - this._border, glyphHeight);
        const width = glyphWidth + 2 * this._border;
        const height = glyphHeight + 2 * this._border;
        const length = width * height;
        const data = new Uint8ClampedArray(length);
        const glyph = new Glyph();
        glyph.char = char;
        glyph.key = char.codePointAt(0);
        glyph.data = data;
        glyph.width = glyphWidth;
        glyph.height = glyphHeight;
        glyph.top = glyphTop;
        glyph.left = glyphLeft;
        glyph.advance = textMetrics.width;
        if (glyphWidth == 0 || glyphHeight == 0) return glyph;
        this._context.clearRect(this._border, this._border, glyphWidth, glyphHeight);
        this._context.fillText(char, this._border, this._border + glyphTop);
        const imgData = this._context.getImageData(this._border, this._border, glyphWidth, glyphHeight);
        for(let i = 0; i < length; i++){
            this._gridOuter[i] = Number.MAX_VALUE;
            this._gridInner[i] = 0;
        }
        for(let y = 0; y < glyphHeight; y++)for(let x = 0; x < glyphWidth; x++){
            const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 0xff;
            if (a > 0) {
                const j = (y + this._border) * width + x + this._border;
                if (a == 1) {
                    this._gridOuter[j] = 0;
                    this._gridInner[j] = Number.MAX_VALUE;
                } else {
                    const d = 0.5 - a;
                    this._gridOuter[j] = d > 0 ? d * d : 0;
                    this._gridInner[j] = d < 0 ? d * d : 0;
                }
            }
        }
        this._edt(this._gridOuter, 0, 0, width, height, width, this._f, this._v, this._z);
        this._edt(this._gridInner, this._border, this._border, glyphWidth, glyphHeight, width, this._f, this._v, this._z);
        for(let i1 = 0; i1 < length; i1++){
            const distance = Math.sqrt(this._gridOuter[i1]) - Math.sqrt(this._gridInner[i1]);
            data[i1] = Math.round(this._edgeValue - 0xff * distance / this._maxDistance);
        }
        return glyph;
    }
    _edt(data, x0, y0, width, height, gridSize, f, v, z) {
        for(let x = x0; x < x0 + width; x++)this._edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);
        for(let y = y0; y < y0 + height; y++)this._edt1d(data, y * gridSize + x0, 1, width, f, v, z);
    }
    _edt1d(grid, offset, stride, n, f, v, z) {
        v[0] = 0;
        z[0] = -Number.MAX_VALUE;
        z[1] = Number.MAX_VALUE;
        f[0] = grid[offset];
        for(let q = 1, k = 0, s = 0; q < n; q++){
            f[q] = grid[offset + q * stride];
            const q2 = q * q;
            do {
                const r = v[k];
                s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;
            }while (s <= z[k] && --k > -1);
            k++;
            v[k] = q;
            z[k] = s;
            z[k + 1] = Number.MAX_VALUE;
        }
        for(let q1 = 0, k1 = 0; q1 < n; q1++){
            while(z[k1 + 1] < q1)k1++;
            const r1 = v[k1];
            const qr = q1 - r1;
            grid[offset + q1 * stride] = f[r1] + qr * qr;
        }
    }
}

},{"./main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"a5l41":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Manager", ()=>Manager);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
var _manipulationprocessorJs = require("./manipulationprocessor.js");
var _mousewheelJs = require("./mousewheel.js");
var _pointersJs = require("./pointers.js");
var _animationJs = require("../helpers/animation.js");
var _constantsJs = require("../constants.js");
var _keyboardJs = require("./keyboard.js");
class Manager {
    constructor(core){
        this._manipulators = {};
        this._core = core;
        this._vec3 = (0, _glMatrix.vec3).create();
        this._manipulationProcessor = new (0, _manipulationprocessorJs.ManipulationProcessor)(core);
        this._manipulators = {};
        this._pointers = new (0, _pointersJs.Pointers)(core, this._manipulators);
        this._pointers.initialize(core.container);
        this._mouseWheel = new (0, _mousewheelJs.MouseWheel)(core);
        this._mouseWheel.initialize(core.container);
        this._keyboard = new (0, _keyboardJs.Keyboard)(core);
        this._keyboard.initialize(core.container);
        this.isPickingEnabled = true;
        this.mouseWheelZoomScale = this._core.config.mouseWheelZoomScale;
        this.mouseWheelRotationScale = this._core.config.mouseWheelRotationScale;
        this.multiTouchZoomScale = this._core.config.multiTouchZoomScale;
        this.pickHoldDelay = this._core.config.pickHoldDelay;
        this.pickSelectDelay = this._core.config.pickSelectDelay;
        const rightButton = 2;
        this.singleTouchAction = (manipulator)=>{
            if (manipulator.type == "mouse" && manipulator.button == rightButton || manipulator.shiftKey || manipulator.ctrlKey) return (0, _mainJs.SingleTouchAction).translate;
            else if (manipulator.altKey || manipulator.type == "pen" && manipulator.button == rightButton) return (0, _mainJs.SingleTouchAction).lasso;
            else return (0, _mainJs.SingleTouchAction).rotate;
        };
        this.mouseWheelAction = (keyboard)=>{
            if (this._keyboard.isKeyDown("Control")) return (0, _mainJs.MouseWheelAction).rotateY;
            else return (0, _mainJs.MouseWheelAction).zoom;
        };
        this.lassoPickType = (0, _mainJs.PickType).data;
        this._thumbstickX = 0;
        this._previousControllerButtonPressed = [
            false,
            false,
            false,
            false
        ];
        this._quat0 = (0, _glMatrix.quat).create();
        this._quat1 = (0, _glMatrix.quat).create();
    }
    update(elapsedTime, xrFrame) {
        if (xrFrame) {
            const inputSources = this._core.webXRSession.inputSources;
            if (inputSources.length > 0 && this._core.renderer.controllers.length > 0) {
                const inputSource = inputSources[0];
                const controllerVisual = this._core.renderer.controllers[0];
                if (inputSource.gripSpace && inputSource.targetRayMode == "tracked-pointer") {
                    const gripPose = xrFrame.getPose(inputSource.gripSpace, this._core.renderer.webXRReferenceSpace);
                    if (gripPose) controllerVisual.mMatrix = gripPose.transform.matrix;
                    const gamepad = inputSource.gamepad;
                    this._core.renderer.isPickingEnabled = false;
                    const rayPose = xrFrame.getPose(inputSource.targetRaySpace, this._core.renderer.webXRReferenceSpace);
                    if (rayPose) {
                        controllerVisual.rayMMatrix = rayPose.transform.matrix;
                        if (gamepad.buttons[0].value > 0 && this.isPickingEnabled) {
                            this._core.renderer.pickVMatrix = rayPose.transform.inverse.matrix;
                            this._core.renderer.isPickingEnabled = true;
                        }
                    }
                    const threshold = 0.2;
                    const dampening = Math.min(0.015 * elapsedTime, 1);
                    this._thumbstickX = (0, _animationJs.AnimationHelper).damp(this._thumbstickX, gamepad.axes[2], threshold, dampening);
                    if (this._thumbstickX != 0) {
                        (0, _glMatrix.quat).setAxisAngle(this._quat0, (0, _constantsJs.Constants).VECTOR3_UNITY, 0.01 * this._thumbstickX * elapsedTime);
                        this._core.getModelRotation(this._quat1);
                        (0, _glMatrix.quat).multiply(this._quat1, this._quat0, this._quat1);
                        this._core.setModelRotation(this._quat1, true);
                    }
                    if (gamepad.buttons[2].pressed) {
                        if (!this._previousControllerButtonPressed[2]) {
                            this._previousControllerButtonPressed[2] = true;
                            if (this.controllerButtonPressedCallback) this.controllerButtonPressedCallback(2);
                        }
                    } else this._previousControllerButtonPressed[2] = false;
                }
            }
        } else {
            const camera = this._core.camera;
            this._manipulationProcessor.update(elapsedTime, this._manipulators);
            this._pointers.update(elapsedTime);
            this._mouseWheel.update(elapsedTime);
            this._keyboard.update(elapsedTime);
            if (this._mouseWheel.delta != 0) switch(this.mouseWheelAction(this._keyboard)){
                case (0, _mainJs.MouseWheelAction).zoom:
                    camera.zoom(this._mouseWheel.delta * this.mouseWheelZoomScale, this._pointers.hoverX, this._pointers.hoverY);
                    break;
                case (0, _mainJs.MouseWheelAction).rotateY:
                    (0, _glMatrix.quat).setAxisAngle(this._quat0, (0, _constantsJs.Constants).VECTOR3_UNITY, this._mouseWheel.delta * this.mouseWheelRotationScale);
                    camera.getOrbit(this._quat1);
                    (0, _glMatrix.quat).multiply(this._quat1, this._quat1, this._quat0);
                    camera.setOrbit(this._quat1, true);
                    break;
            }
            const count = this._manipulationProcessor.count;
            if (count == 0) {
                if (this._isLassoPicking) {
                    this._isLassoPicking = false;
                    this._core.renderer.isLassoPicking = false;
                    const x0 = Math.min(this._lassoX0, this._lassoX1);
                    const y0 = Math.min(this._lassoY0, this._lassoY1);
                    const x1 = Math.max(this._lassoX0, this._lassoX1);
                    const y1 = Math.max(this._lassoY0, this._lassoY1);
                    if (x1 - x0 > 0 && y1 - y0 > 0) {
                        const sets = this._core.pickLasso(x0, y0, x1, y1, this.lassoPickType);
                        const result = {
                            x0: x0,
                            y0: y0,
                            x1: x1,
                            y1: y1,
                            pickType: this.lassoPickType,
                            ids: sets,
                            manipulator: this._manipulator
                        };
                        this.pickLassoCallback(result);
                    }
                }
            } else if (count == 1) {
                const translationDelta = this._manipulationProcessor.translationDelta;
                if (translationDelta[0] != 0 || translationDelta[1] != 0) {
                    const manipulators = this._manipulationProcessor.manipulators;
                    for(const key in manipulators){
                        const manipulator = manipulators[key];
                        switch(this.singleTouchAction(manipulator)){
                            case (0, _mainJs.SingleTouchAction).rotate:
                                camera.rotate(translationDelta);
                                break;
                            case (0, _mainJs.SingleTouchAction).translate:
                                camera.translate(translationDelta);
                                break;
                            case (0, _mainJs.SingleTouchAction).lasso:
                                if (this.pickLassoCallback) {
                                    if (!this._isLassoPicking) {
                                        this._isLassoPicking = true;
                                        this._core.renderer.isLassoPicking = true;
                                        this._lassoX0 = manipulator.position[0];
                                        this._lassoY0 = manipulator.position[1];
                                    }
                                    this._lassoX1 = manipulator.position[0];
                                    this._lassoY1 = manipulator.position[1];
                                    this._core.renderer.lassoX0 = Math.min(this._lassoX0, this._lassoX1);
                                    this._core.renderer.lassoY0 = Math.min(this._lassoY0, this._lassoY1);
                                    this._core.renderer.lassoX1 = Math.max(this._lassoX0, this._lassoX1);
                                    this._core.renderer.lassoY1 = Math.max(this._lassoY0, this._lassoY1);
                                }
                                break;
                        }
                        break;
                    }
                }
            } else {
                const translationDelta1 = this._manipulationProcessor.translationDelta;
                const camera1 = this._core.camera;
                if (translationDelta1[0] != 0 || translationDelta1[1] != 0) camera1.translate(translationDelta1);
                if (this._manipulationProcessor.scaleDelta != 0) {
                    const distance = this._manipulationProcessor.scaleDelta * this.multiTouchZoomScale;
                    camera1.zoom(distance, this._manipulationProcessor.centroid[0], this._manipulationProcessor.centroid[1]);
                }
                if (this._manipulationProcessor.twistDelta != 0) camera1.twist(this._manipulationProcessor.twistDelta, this._manipulationProcessor.centroid[0], this._manipulationProcessor.centroid[1]);
            }
            if (this.isPickingEnabled && !this._manipulationProcessor.isDragging && !this._isLassoPicking) {
                const camera2 = this._core.camera;
                const renderer = this._core.renderer;
                if (renderer.isCapturingPickImage) {
                    camera2.updatePickVMatrix(renderer.width / 2, renderer.height / 2);
                    renderer.pickVMatrix = camera2.pickVMatrix;
                    renderer.isPickingEnabled = true;
                    this._pickedTime = 0;
                } else if (this._pointers.hoverId > -1) {
                    const pickingX = this._pointers.hoverX;
                    const pickingY = this._pointers.hoverY;
                    camera2.updatePickVMatrix(pickingX, pickingY);
                    renderer.pickVMatrix = camera2.pickVMatrix;
                    renderer.isPickingEnabled = true;
                    if (this._pickedId != renderer.pickedId) {
                        this._pickedId = renderer.pickedId;
                        this._pickedTime = 0;
                    } else if (this._manipulationProcessor.count == 1) {
                        this._pickedTime += elapsedTime;
                        for(const key1 in this._manipulators){
                            this._manipulator = this._manipulators[key1];
                            break;
                        }
                    }
                    if (this._pickedTime > 0) switch(renderer.pickedType){
                        case (0, _mainJs.PickType).data:
                            if (this._pickedTime > this.pickHoldDelay) {
                                renderer.getVertexPosition(this._vec3, this._pickedId);
                                this._core.setModelManipulationOrigin(this._vec3);
                                this._pickedTime = 0;
                            } else if (this._manipulationProcessor.count == 0) {
                                if (this._pickedTime > this.pickSelectDelay) for(let i = 0; i < renderer.transitionBuffers.length; i++){
                                    const transitionBuffer = renderer.transitionBuffers[i];
                                    const id = transitionBuffer.pickIdLookup[this._pickedId];
                                    if (id > -1) {
                                        const result1 = {
                                            transitionBuffer: i,
                                            id: id,
                                            manipulator: this._manipulator
                                        };
                                        this._core.log.write((0, _mainJs.LogLevel).info, `picked id ${result1.id}, transition buffer ${i}`);
                                        if (this.pickItemCallback) this.pickItemCallback(result1);
                                        break;
                                    }
                                }
                                this._pickedTime = 0;
                            }
                            break;
                        case (0, _mainJs.PickType).label:
                            if (this._manipulationProcessor.count == 0) {
                                if (this._pickedTime > this.pickSelectDelay) for(let i1 = 0; i1 < renderer.labelSets.length; i1++){
                                    const labelSet = renderer.labelSets[i1].label;
                                    const id1 = labelSet.pickIdLookup[this._pickedId];
                                    if (id1 > -1) {
                                        const result2 = {
                                            label: id1,
                                            set: i1,
                                            manipulator: this._manipulator
                                        };
                                        this._core.log.write((0, _mainJs.LogLevel).info, `picked label ${result2.label}, set ${result2.set}`);
                                        if (this.pickLabelSetCallback) this.pickLabelSetCallback(result2);
                                        break;
                                    }
                                }
                                this._pickedTime = 0;
                            }
                            break;
                        case (0, _mainJs.PickType).axesDivision:
                            if (this._manipulationProcessor.count == 0) {
                                if (this._pickedTime > this.pickSelectDelay) for(let i2 = 0; i2 < renderer.currentAxes.length; i2++){
                                    const axes = renderer.currentAxes[i2].axes;
                                    const id2 = axes.pickGridLookup[this._pickedId];
                                    if (id2 > -1) {
                                        const result3 = axes.pickGrid(id2);
                                        result3.axes = i2;
                                        result3.manipulator = this._manipulator;
                                        this._core.log.write((0, _mainJs.LogLevel).info, `picked division (${result3.divisionX}, ${result3.divisionY}, ${result3.divisionZ}), axes ${result3.axes}`);
                                        if (this.pickAxesGridCallback) this.pickAxesGridCallback(result3);
                                        break;
                                    }
                                }
                                this._pickedTime = 0;
                            }
                            break;
                        case (0, _mainJs.PickType).axesTitle:
                            if (this._manipulationProcessor.count == 0) {
                                if (this._pickedTime > this.pickSelectDelay) for(let i3 = 0; i3 < renderer.currentAxes.length; i3++){
                                    const axes1 = renderer.currentAxes[i3].axes;
                                    const id3 = axes1.pickTitleLookup[this._pickedId];
                                    if (id3 > -1) {
                                        const result4 = axes1.pickTitle(id3);
                                        result4.axes = i3;
                                        result4.manipulator = this._manipulator;
                                        this._core.log.write((0, _mainJs.LogLevel).info, `picked title ${result4.axis}, axes ${result4.axes}`);
                                        if (this.pickAxesTitleCallback) this.pickAxesTitleCallback(result4);
                                        break;
                                    }
                                }
                                this._pickedTime = 0;
                            }
                            break;
                        case (0, _mainJs.PickType).axesLabel:
                            if (this._manipulationProcessor.count == 0) {
                                if (this._pickedTime > this.pickSelectDelay) for(let i4 = 0; i4 < renderer.currentAxes.length; i4++){
                                    const axes2 = renderer.currentAxes[i4].axes;
                                    const id4 = axes2.pickLabelLookup[this._pickedId];
                                    if (id4 > -1) {
                                        const result5 = axes2.pickLabel(id4);
                                        result5.axes = i4;
                                        result5.manipulator = this._manipulator;
                                        this._core.log.write((0, _mainJs.LogLevel).info, `picked label ${result5.label}, axis ${result5.axis}, axes ${result5.axes}`);
                                        if (this.pickAxesLabelCallback) this.pickAxesLabelCallback(result5);
                                        break;
                                    }
                                }
                                this._pickedTime = 0;
                            }
                            break;
                        case (0, _mainJs.PickType).axesHeading:
                            if (this._manipulationProcessor.count == 0) {
                                if (this._pickedTime > this.pickSelectDelay) for(let i5 = 0; i5 < renderer.currentAxes.length; i5++){
                                    const axes3 = renderer.currentAxes[i5].axes;
                                    const id5 = axes3.pickHeadingLookup[this._pickedId];
                                    if (id5 > -1) {
                                        const result6 = axes3.pickHeading(id5);
                                        result6.axes = i5;
                                        result6.manipulator = this._manipulator;
                                        this._core.log.write((0, _mainJs.LogLevel).info, `picked heading ${result6.axis}, axes ${result6.axes}`);
                                        if (this.pickAxesHeadingCallback) this.pickAxesHeadingCallback(result6);
                                        break;
                                    }
                                }
                                this._pickedTime = 0;
                            }
                            break;
                    }
                } else {
                    renderer.isPickingEnabled = false;
                    this._pickedTime = 0;
                }
            } else {
                this._core.renderer.isPickingEnabled = false;
                this._pickedTime = 0;
            }
        }
        if (this._core.config.isDebugVisible) {
            this._core.debugText.addLine(`man tot  ${this._manipulationProcessor.count}`);
            this._core.debugText.addLine(`pck key  ${this._core.renderer.pickedId}`);
        }
    }
}

},{"gl-matrix":"3mrln","../main.js":"2JYph","./manipulationprocessor.js":"4Xlow","./mousewheel.js":"3xOvs","./pointers.js":"c4vSf","../helpers/animation.js":"bNHiY","../constants.js":"dtECF","./keyboard.js":"1K0FK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4Xlow":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ManipulationProcessor", ()=>ManipulationProcessor);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mathJs = require("../helpers/math.js");
var _angleJs = require("../helpers/angle.js");
class ManipulationProcessor {
    constructor(core){
        this._core = core;
        this._count = 0;
        this._centroid = (0, _glMatrix.vec3).create();
        this._previousCentroid = (0, _glMatrix.vec3).create();
        this._relativePositionToCentroid = (0, _glMatrix.vec3).create();
        this._directionToCentroid = (0, _glMatrix.vec3).create();
        this._previousDirectionToCentroid = (0, _glMatrix.vec3).create();
        this._manipulators = {};
        this._removedManipulators = [];
        this.cumulativeTranslation = (0, _glMatrix.vec3).create();
        this.translationDelta = (0, _glMatrix.vec3).create();
        this.centroid = (0, _glMatrix.vec3).create();
        this.maxScale = Number.MAX_VALUE;
        this.twistAxis = (0, _glMatrix.vec3).fromValues(0, 0, 1);
        this.initialize();
    }
    get manipulators() {
        return this._manipulators;
    }
    get count() {
        return this._count;
    }
    get isDragging() {
        return this._isDragging;
    }
    update(elapsedTime, manipulators) {
        for(const key in this._manipulators){
            const manipulator = this._manipulators[key];
            if (!manipulators[manipulator.id]) {
                if (this.removeManipulator) this.removeManipulator(manipulator);
                this._removedManipulators.push(manipulator.id);
            }
        }
        if (this._removedManipulators.length > 0) {
            for(let i = 0; i < this._removedManipulators.length; i++){
                delete this._manipulators[this._removedManipulators[i]];
                this._count--;
            }
            this._removedManipulators = [];
        }
        for(const key1 in manipulators){
            const manipulator1 = manipulators[key1];
            if (!this._manipulators[manipulator1.id]) {
                if (!this.addManipulator || this.addManipulator(manipulator1)) {
                    (0, _glMatrix.vec3).copy(manipulator1.initialPosition, manipulator1.position);
                    this._manipulators[manipulator1.id] = manipulator1;
                    this._count++;
                }
            }
        }
        (0, _glMatrix.vec3).set(this.translationDelta, 0, 0, 0);
        this.scaleDelta = 0;
        this.twistDelta = 0;
        if (this._count > 0) {
            if (this._previousCount > 0) {
                if (this.prepareManipulation) this.prepareManipulation();
                this._process();
                if (this.processManipulation) this.processManipulation(elapsedTime);
            } else {
                this.initialize();
                if (this.beginManipulation) this.beginManipulation();
            }
        } else {
            if (this._previousCount > 0) {
                if (this.endManipulation) this.endManipulation();
            }
        }
        this._isDragging = this._count == 1 && (0, _glMatrix.vec3).squaredLength(this.cumulativeTranslation) > this._core.config.dragToleranceSquared || this._count > 1;
        this._previousCount = this._count;
    }
    initialize() {
        (0, _glMatrix.vec3).set(this.centroid, 0, 0, 0);
        (0, _glMatrix.vec3).set(this.cumulativeTranslation, 0, 0, 0);
        this.cumulativeScale = 1;
        this.cumulativeTwist = 0;
    }
    _process() {
        if (this._previousCount > 0) {
            let persisted = 0;
            for(const key in this._manipulators){
                const manipulator = this._manipulators[key];
                if (manipulator.isPersisted) persisted++;
            }
            const removed = this._previousCount - persisted;
            if (persisted > 0) {
                if (removed > 0) (0, _glMatrix.vec3).copy(this._centroid, this._previousCentroid);
                else {
                    (0, _glMatrix.vec3).set(this._centroid, 0, 0, 0);
                    for(const key1 in this._manipulators){
                        const manipulator1 = this._manipulators[key1];
                        if (manipulator1.isPersisted) (0, _glMatrix.vec3).add(this._centroid, this._centroid, manipulator1.position);
                    }
                    (0, _glMatrix.vec3).scale(this._centroid, this._centroid, 1 / persisted);
                }
                for(const key2 in this._manipulators){
                    const manipulator2 = this._manipulators[key2];
                    if (manipulator2.isPersisted) {
                        manipulator2.maxTranslationSquared = Math.max(manipulator2.maxTranslationSquared, (0, _glMatrix.vec3).squaredDistance(manipulator2.position, manipulator2.initialPosition));
                        (0, _glMatrix.vec3).add(this.translationDelta, this.translationDelta, manipulator2.position);
                        (0, _glMatrix.vec3).subtract(this.translationDelta, this.translationDelta, manipulator2.previousPosition);
                        (0, _glMatrix.vec3).subtract(this._relativePositionToCentroid, manipulator2.position, this._centroid);
                        const distanceToCentroidSquared = (0, _glMatrix.vec3).squaredLength(this._relativePositionToCentroid);
                        if (distanceToCentroidSquared < this._core.config.manipulatorMinRelativeDistanceSquared) this.scaleDelta += 1;
                        else {
                            const distanceToCentroid = Math.sqrt(distanceToCentroidSquared);
                            const previousDistanceToCentroidSquared = (0, _glMatrix.vec3).squaredLength(manipulator2.previousPositionRelativeToCentroid);
                            const previousDistanceToCentroid = Math.sqrt(previousDistanceToCentroidSquared);
                            this.scaleDelta += distanceToCentroid / previousDistanceToCentroid;
                            (0, _glMatrix.vec3).scale(this._directionToCentroid, this._relativePositionToCentroid, 1 / distanceToCentroid);
                            (0, _glMatrix.vec3).scale(this._previousDirectionToCentroid, manipulator2.previousPositionRelativeToCentroid, 1 / previousDistanceToCentroid);
                            this.twistDelta += (0, _angleJs.AngleHelper).signedAngleBetweenVectors(this._previousDirectionToCentroid, this._directionToCentroid, this.twistAxis);
                        }
                    }
                }
                (0, _glMatrix.vec3).scale(this.translationDelta, this.translationDelta, 1 / persisted);
                (0, _glMatrix.vec3).add(this.cumulativeTranslation, this.cumulativeTranslation, this.translationDelta);
                this.scaleDelta /= persisted;
                this.cumulativeScale = (0, _mathJs.MathHelper).clamp(this.cumulativeScale * this.scaleDelta, this.minScale, this.maxScale);
                this.scaleDelta -= 1;
                this.twistDelta /= persisted;
                this.cumulativeTwist += this.twistDelta;
            }
        }
        (0, _glMatrix.vec3).set(this.centroid, 0, 0, 0);
        for(const key3 in this._manipulators){
            const manipulator3 = this._manipulators[key3];
            (0, _glMatrix.vec3).add(this.centroid, this.centroid, manipulator3.position);
        }
        (0, _glMatrix.vec3).scale(this.centroid, this.centroid, 1 / this._count);
        for(const key4 in this._manipulators){
            const manipulator4 = this._manipulators[key4];
            (0, _glMatrix.vec3).subtract(manipulator4.positionRelativeToCentroid, manipulator4.position, this.centroid);
        }
        (0, _glMatrix.vec3).copy(this._previousCentroid, this.centroid);
        for(const key5 in this._manipulators){
            const manipulator5 = this._manipulators[key5];
            manipulator5.isPersisted = true;
            (0, _glMatrix.vec3).copy(manipulator5.previousPosition, manipulator5.position);
            (0, _glMatrix.vec3).copy(manipulator5.previousRotationAxis, manipulator5.rotationAxis);
            (0, _glMatrix.vec3).copy(manipulator5.previousPositionRelativeToCentroid, manipulator5.positionRelativeToCentroid);
        }
    }
}

},{"gl-matrix":"3mrln","../helpers/math.js":"jeH35","../helpers/angle.js":"3PBRj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3xOvs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "MouseWheel", ()=>MouseWheel);
class MouseWheel {
    constructor(core){
        this._core = core;
        this._previousTotal = 0;
        this.total = 0;
    }
    initialize(element) {
        element.addEventListener("wheel", (e)=>{
            e.preventDefault();
            const wheelEvent = e;
            this.total += wheelEvent.deltaY;
        }, {
            passive: false
        });
    }
    update(elapsedTime) {
        const total = this.total;
        this.delta = total - this._previousTotal;
        this._previousTotal = total;
        if (this._core.config.isDebugVisible) this._core.debugText.addLine(`mse whl ${this.total < 0 ? "" : " "}${Math.round(this.total)}`);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"c4vSf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Pointers", ()=>Pointers);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _manipulatorJs = require("../input/manipulator.js");
class Pointers {
    constructor(core, manipulators){
        this._core = core;
        this._manipulators = manipulators;
    }
    get hoverX() {
        return this._hoverX;
    }
    get hoverY() {
        return this._hoverY;
    }
    get hoverId() {
        return this._hoverId;
    }
    initialize(element) {
        this._element = element;
        element.addEventListener("pointerdown", (e)=>this._handlePointerDown(e), {
            passive: true
        });
        element.addEventListener("pointermove", (e)=>this._handlePointerMove(e), {
            passive: true
        });
        element.addEventListener("pointerup", (e)=>this._handlePointerUp(e), {
            passive: true
        });
        element.addEventListener("pointercancel", (e)=>this._handlePointerCancel(e), {
            passive: true
        });
        element.addEventListener("pointerleave", (e)=>this._handlePointerLeave(e), {
            passive: true
        });
        element.addEventListener("pointerout", (e)=>this._handlePointerOut(e), {
            passive: true
        });
    }
    update(elapsedTime) {
        if (this._core.config.isDebugVisible) {
            this._core.debugText.addLine(`pen rot  ${(this._tiltX | 0).toFixed(3)},${(this._tiltY | 0).toFixed(3)},${(this._twist | 0).toFixed(3)}`);
            this._core.debugText.addLine(`hov pos  ${this.hoverX ? `${this.hoverX.toFixed(3)},${this.hoverY.toFixed(3)}px` : ""}`);
        }
    }
    _handlePointerDown(e) {
        this._element.focus();
        const devicePixelRatio = this._core.renderer.devicePixelRatio;
        const manipulator = new (0, _manipulatorJs.Manipulator)();
        const id = e.pointerId;
        const x = e.offsetX * devicePixelRatio;
        const y = e.offsetY * devicePixelRatio;
        manipulator.id = id;
        manipulator.position[0] = x;
        manipulator.position[1] = y;
        manipulator.type = e.pointerType;
        manipulator.button = e.button;
        manipulator.shiftKey = e.shiftKey;
        manipulator.ctrlKey = e.ctrlKey;
        manipulator.altKey = e.altKey;
        manipulator.event = e;
        this._manipulators[id] = manipulator;
        this._hoverId = id;
        this._hoverX = x;
        this._hoverY = y;
    }
    _handlePointerMove(e) {
        const devicePixelRatio = this._core.renderer.devicePixelRatio;
        const x = e.offsetX * devicePixelRatio;
        const y = e.offsetY * devicePixelRatio;
        const id = e.pointerId;
        const manipulator = this._manipulators[id];
        if (manipulator) {
            manipulator.position[0] = x;
            manipulator.position[1] = y;
            manipulator.event = e;
        }
        switch(e.pointerType){
            case "mouse":
                this._hoverId = id;
                this._hoverX = x;
                this._hoverY = y;
                break;
            case "pen":
                this._hoverId = id;
                this._hoverX = x;
                this._hoverY = y;
                this._tiltX = e.tiltX;
                this._tiltY = e.tiltY;
                this._twist = e.twist;
                break;
        }
    }
    _handlePointerUp(e) {
        const manipulator = this._manipulators[e.pointerId];
        if (manipulator) manipulator.event = e;
        this._remove(e.pointerId);
    }
    _handlePointerCancel(e) {
        this._remove(e.pointerId);
    }
    _handlePointerLeave(e) {
        this._resetHover();
        this._remove(e.pointerId);
    }
    _handlePointerOut(e) {
        this._resetHover();
        this._remove(e.pointerId);
    }
    _resetHover() {
        this._hoverId = null;
        this._hoverX = null;
        this._hoverY = null;
    }
    _remove(pointerId) {
        const manipulator = this._manipulators[pointerId];
        if (manipulator) delete this._manipulators[pointerId];
    }
}

},{"../input/manipulator.js":"8ooFj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8ooFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Manipulator", ()=>Manipulator);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class Manipulator {
    constructor(){
        this.pickedIndex = 0;
        this.maxTranslationSquared = 0;
        this.initialPosition = (0, _glMatrix.vec3).create();
        this.position = (0, _glMatrix.vec3).create();
        this.previousPosition = (0, _glMatrix.vec3).create();
        this.holdOrigin = (0, _glMatrix.vec3).create();
        this.positionRelativeToCentroid = (0, _glMatrix.vec3).create();
        this.previousPositionRelativeToCentroid = (0, _glMatrix.vec3).create();
        this.rotationAxis = (0, _glMatrix.vec3).create();
        this.previousRotationAxis = (0, _glMatrix.vec3).create();
    }
}

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bNHiY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AnimationHelper", ()=>AnimationHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mathJs = require("./math.js");
class AnimationHelper {
    static smoothStep(value) {
        return value * value * (3 - 2 * value);
    }
    static damp(value, target, threshold, dampening) {
        if (Math.abs(target) < threshold) return (0, _mathJs.MathHelper).lerp(value, 0, dampening);
        else return (0, _mathJs.MathHelper).lerp(value, target, dampening);
    }
}

},{"./math.js":"jeH35","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1K0FK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Keyboard", ()=>Keyboard);
class Keyboard {
    constructor(core){
        this._core = core;
        this._pressedKeys = new Set();
        this._previousPressedKeys = new Set();
    }
    initialize(element) {
        element.addEventListener("keydown", (e)=>{
            this._handleKeyDown(e);
        }, false);
        element.addEventListener("keyup", (e)=>{
            this._handleKeyUp(e);
        }, false);
    }
    update(elapsedTime) {
        if (this._core.config.isDebugVisible) this._core.debugText.addLine(`key tot  ${this._pressedKeys.size}`);
    }
    isKeyDown(key) {
        return this._pressedKeys.has(key);
    }
    wasKeyReleased(key) {
        if (this._pressedKeys.has(key)) {
            if (!this._previousPressedKeys.has(key)) {
                this._previousPressedKeys.add(key);
                return true;
            }
        } else this._previousPressedKeys.delete(key);
        return false;
    }
    _handleKeyDown(e) {
        const keyboardEvent = e;
        const key = keyboardEvent.key;
        if (!this._pressedKeys.has(key)) this._pressedKeys.add(key);
    }
    _handleKeyUp(e) {
        const keyboardEvent = e;
        const key = keyboardEvent.key;
        if (this._pressedKeys.has(key)) this._pressedKeys.delete(key);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2oDqL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Log", ()=>Log);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("./main.js");
class Log {
    constructor(core){
        this._core = core;
    }
    write(level, value) {
        if (level >= this._core.config.logLevel) switch(level){
            case (0, _mainJs.LogLevel).trace:
                console.trace(value);
                break;
            case (0, _mainJs.LogLevel).debug:
                console.debug(value);
                break;
            case (0, _mainJs.LogLevel).info:
                console.info(value);
                break;
            case (0, _mainJs.LogLevel).warn:
                console.warn(value);
                break;
            case (0, _mainJs.LogLevel).error:
                console.error(value);
                break;
        }
    }
}

},{"./main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aHITK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjMesh", ()=>ObjMesh);
parcelHelpers.export(exports, "ObjHelper", ()=>ObjHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
class ObjMesh {
}
class ObjHelper {
    constructor(core){
        this._core = core;
    }
    read(data) {
        const start = window.performance.now();
        const indices = [];
        const positions = [];
        const normals = [];
        const texCoords = [];
        const meshes = [];
        const indexOffsets = [];
        const indexCounts = [];
        const faceLookup = {};
        const lines = data.split("\n");
        let faceCount = 0;
        for(let i = 0; i < lines.length; i++){
            const parts = lines[i].trim().split(" ");
            if (parts.length > 0) switch(parts[0]){
                case "o":
                    meshes.push(parts[1]);
                    indexOffsets.push(indices.length);
                    break;
                case "v":
                    positions.push(parseFloat(parts[1]));
                    positions.push(parseFloat(parts[2]));
                    positions.push(parseFloat(parts[3]));
                    break;
                case "vt":
                    texCoords.push(parseFloat(parts[1]));
                    texCoords.push(parseFloat(parts[2]));
                    break;
                case "vn":
                    normals.push(parseFloat(parts[1]));
                    normals.push(parseFloat(parts[2]));
                    normals.push(parseFloat(parts[3]));
                    break;
                case "f":
                    for(let i1 = 0; i1 < parts.length - 1; i1++){
                        const part = parts[i1 + 1];
                        if (faceLookup[part] == undefined) faceLookup[part] = faceCount++;
                        indices.push(faceLookup[part]);
                    }
                    break;
                case "usemtl":
                case "mtllib":
                default:
                    break;
            }
        }
        for(let i2 = 0; i2 < meshes.length - 1; i2++)indexCounts.push(indexOffsets[i2 + 1] - indexOffsets[i2]);
        indexCounts.push(indices.length - indexOffsets[meshes.length - 1]);
        const vertices = new ArrayBuffer((0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES * Object.keys(faceLookup).length);
        const dataView = new DataView(vertices);
        let minX = Number.MAX_VALUE;
        let minY = Number.MAX_VALUE;
        let minZ = Number.MAX_VALUE;
        let maxX = -Number.MAX_VALUE;
        let maxY = -Number.MAX_VALUE;
        let maxZ = -Number.MAX_VALUE;
        const faces = Object.keys(faceLookup);
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        let hasTexCoords, hasNormals;
        if (faces.length > 0) {
            const faceParts = faces[0].split("/");
            hasTexCoords = faceParts.length > 1 && !isNaN(parseInt(faceParts[1]));
            hasNormals = faceParts.length > 2 && !isNaN(parseInt(faceParts[2]));
        }
        for(let i3 = 0; i3 < faces.length; i3++){
            const faceParts1 = faces[i3].split("/");
            let index = (parseInt(faceParts1[0]) - 1) * 3;
            const x = positions[index];
            const y = positions[index + 1];
            const z = positions[index + 2];
            (0, _glMatrix.vec3).set(_vec3, x, y, z);
            (0, _vertexJs.PositionNormalTextureVertex).setPosition(dataView, i3, _vec3);
            minX = Math.min(x, minX);
            minY = Math.min(y, minY);
            minZ = Math.min(z, minZ);
            maxX = Math.max(x, maxX);
            maxY = Math.max(y, maxY);
            maxZ = Math.max(z, maxZ);
            if (hasNormals) {
                index = (parseInt(faceParts1[2]) - 1) * 3;
                (0, _glMatrix.vec3).set(_vec3, normals[index], normals[index + 1], normals[index + 2]);
                (0, _vertexJs.PositionNormalTextureVertex).setNormal(dataView, i3, _vec3);
            }
            if (hasTexCoords) {
                index = (parseInt(faceParts1[1]) - 1) * 2;
                (0, _glMatrix.vec2).set(_vec2, texCoords[index], texCoords[index + 1]);
                (0, _vertexJs.PositionNormalTextureVertex).setTexCoord(dataView, i3, _vec2);
            }
        }
        const originX = (minX + maxX) / 2;
        const originY = (minY + maxY) / 2;
        const originZ = (minZ + maxZ) / 2;
        const objMesh = new ObjMesh();
        objMesh.vertices = vertices;
        objMesh.indices = new Uint16Array(indices);
        objMesh.meshes = meshes;
        objMesh.indexOffsets = indexOffsets;
        objMesh.indexCounts = indexCounts;
        objMesh.indexCount = indices.length;
        objMesh.minX = minX;
        objMesh.minY = minY;
        objMesh.minZ = minZ;
        objMesh.maxX = maxX;
        objMesh.maxY = maxY;
        objMesh.maxZ = maxZ;
        objMesh.originX = originX;
        objMesh.originY = originY;
        objMesh.originZ = originZ;
        this._core.log.write((0, _mainJs.LogLevel).info, `obj loaded ${Math.round(window.performance.now() - start)}ms`);
        return objMesh;
    }
}

},{"gl-matrix":"3mrln","../main.js":"2JYph","../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4PuF6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LabelVisual", ()=>LabelVisual);
parcelHelpers.export(exports, "LabelSetVisual", ()=>LabelSetVisual);
parcelHelpers.export(exports, "LabelBase", ()=>LabelBase);
parcelHelpers.export(exports, "Label", ()=>Label);
parcelHelpers.export(exports, "LabelSet", ()=>LabelSet);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
var _textJs = require("../helpers/text.js");
var _constantsJs = require("../constants.js");
var _vertexJs = require("../vertex.js");
var _pickJs = require("../helpers/pick.js");
class LabelVisual {
    constructor(label){
        this.label = label;
    }
    render(elapsedTime, xrFrame) {}
    update(elapsedTime) {}
}
class LabelSetVisual {
    constructor(labelSet){
        this.label = labelSet;
    }
    render(elapsedTime, xrFrame) {}
    update(elapsedTime) {}
}
class LabelBase {
    constructor(core, options){
        this._core = core;
        this._offset = (0, _glMatrix.vec3).create();
        this._vec3 = (0, _glMatrix.vec3).create();
        this._vec4 = (0, _glMatrix.vec4).create();
        this._mMatrix = (0, _glMatrix.mat4).create();
        this._indexCount = 0;
        this._maxGlyphs = options.maxGlyphs;
        this._textMetric = {
            width: 0,
            maxHeight: 0,
            maxTop: 0
        };
        this.scale = options.scale ? options.scale : 1;
        this.offsetX = options.offsetX ? options.offsetX : 0;
        this.offsetY = options.offsetY ? options.offsetY : 0;
        this.offsetZ = options.offsetZ ? options.offsetZ : 0;
        this.rotation = options.rotation;
        this.maxGlyphTop = options.maxGlyphTop;
        this.horizontalAlignment = options.horizontalAlignment === undefined ? (0, _mainJs.HorizontalAlignment).center : options.horizontalAlignment;
        this.verticalAlignment = options.verticalAlignment === undefined ? (0, _mainJs.VerticalAlignment).center : options.verticalAlignment;
        this._material = options.material;
        this.borderWidth = core.config.textBorderWidth;
        this.gamma = 0;
    }
    get material() {
        return this._material;
    }
    get vertices() {
        return this._vertices;
    }
    get verticesView() {
        return this._verticesView;
    }
    get indices() {
        return this._indices;
    }
    get indexCount() {
        return this._indexCount;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get mMatrix() {
        return this._mMatrix;
    }
    get scale() {
        return this._scale;
    }
    set scale(value) {
        if (this._scale != value) {
            this._scale = value;
            this._hasChanged = true;
        }
    }
    get font() {
        return this._font;
    }
    set font(value) {
        if (this._font != value) {
            this._font = value;
            this._hasChanged = true;
        }
    }
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        if (this._rotation != value) {
            this._rotation = value;
            this._hasChanged = true;
        }
    }
    get horizontalAlignment() {
        return this._horizontalAlignment;
    }
    set horizontalAlignment(value) {
        if (this._horizontalAlignment != value) {
            this._horizontalAlignment = value;
            this._hasChanged = true;
        }
    }
    get verticalAlignment() {
        return this._verticalAlignment;
    }
    set verticalAlignment(value) {
        if (this._verticalAlignment != value) {
            this._verticalAlignment = value;
            this._hasChanged = true;
        }
    }
    get offsetX() {
        return this._offsetX;
    }
    set offsetX(value) {
        if (this._offsetX != value) {
            this._offsetX = value;
            this._hasChanged = true;
        }
    }
    get offsetY() {
        return this._offsetY;
    }
    set offsetY(value) {
        if (this._offsetY != value) {
            this._offsetY = value;
            this._hasChanged = true;
        }
    }
    get offsetZ() {
        return this._offsetZ;
    }
    set offsetZ(value) {
        if (this._offsetZ != value) {
            this._offsetZ = value;
            this._hasChanged = true;
        }
    }
    get maxGlyphTop() {
        return this._maxGlyphTop;
    }
    set maxGlyphTop(value) {
        if (this._maxGlyphTop != value) {
            this._maxGlyphTop = value;
            this._hasChanged = true;
        }
    }
    get maxGlyphHeight() {
        return this._maxGlyphHeight;
    }
    set maxGlyphHeight(value) {
        if (this._maxGlyphHeight != value) {
            this._maxGlyphHeight = value;
            this._hasChanged = true;
        }
    }
    initialize() {
        this._vertices = new ArrayBuffer((0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES * this._maxGlyphs * 4);
        this._verticesView = new DataView(this._vertices);
        this._indices = new Uint16Array(this._maxGlyphs * 6);
        this._isInitialized = true;
    }
    update(elapsedTime) {}
}
class Label extends LabelBase {
    constructor(core, options){
        super(core, options);
        this._font = options.font || core.font;
        this._text = options.text;
        this._textAlignment = options.textAlignment === undefined ? (0, _mainJs.TextAlignment).left : options.textAlignment;
    }
    get textAlignment() {
        return this._textAlignment;
    }
    set textAlignment(value) {
        if (this._textAlignment != value) {
            this._textAlignment = value;
            this._hasChanged = true;
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (this._text != value) {
            this._text = value;
            this._hasChanged = true;
        }
    }
    update(elapsedTime) {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            if (!this._text) {
                this._indexCount = 0;
                this.width = 0;
                this.height = 0;
            } else {
                const widths = [];
                const truncated = [];
                let maxWidth = 0;
                let maxGlyphHeight = 0;
                let maxGlyphTop = 0;
                let glyphs = 0;
                for(let i = 0; i < this._text.length; i++){
                    const text = (0, _textJs.TextHelper).truncate(this._text[i], this._maxGlyphs - glyphs);
                    (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
                    widths.push(this._textMetric.width);
                    maxWidth = Math.max(this._textMetric.width, maxWidth);
                    maxGlyphHeight = Math.max(this._textMetric.maxHeight, maxGlyphHeight);
                    maxGlyphTop = Math.max(this._textMetric.maxTop, maxGlyphTop);
                    glyphs += text.length;
                    truncated.push(text);
                    if (glyphs >= this._maxGlyphs) break;
                }
                if (this._maxGlyphHeight) maxGlyphHeight = this._maxGlyphHeight;
                if (this._maxGlyphTop) maxGlyphTop = this._maxGlyphTop;
                const lineHeight = this._font.size;
                const height = truncated.length * lineHeight;
                switch(this._horizontalAlignment){
                    case (0, _mainJs.HorizontalAlignment).left:
                        this._originX = this._offsetX + maxWidth / 2;
                        break;
                    case (0, _mainJs.HorizontalAlignment).center:
                        this._originX = this._offsetX;
                        break;
                    case (0, _mainJs.HorizontalAlignment).right:
                        this._originX = this._offsetX - maxWidth / 2;
                        break;
                }
                switch(this._verticalAlignment){
                    case (0, _mainJs.VerticalAlignment).top:
                        this._originY = this._offsetY - height / 2;
                        break;
                    case (0, _mainJs.VerticalAlignment).center:
                        this._originY = this._offsetY;
                        break;
                    case (0, _mainJs.VerticalAlignment).bottom:
                        this._originY = this._offsetY + height / 2;
                        break;
                }
                glyphs = 0;
                for(let i1 = 0; i1 < truncated.length; i1++){
                    switch(this._textAlignment){
                        case (0, _mainJs.TextAlignment).left:
                            this._offset[0] = this._originX - maxWidth / 2;
                            break;
                        case (0, _mainJs.TextAlignment).center:
                            this._offset[0] = this._originX - widths[i1] / 2;
                            break;
                        case (0, _mainJs.TextAlignment).right:
                            this._offset[0] = this._originX + maxWidth / 2 - widths[i1];
                            break;
                    }
                    this._offset[1] = this._originY + height / 2 - i1 * lineHeight - lineHeight / 2 - maxGlyphTop / 2;
                    const pickingId = (0, _pickJs.PickHelper).nextPickId();
                    (0, _pickJs.PickHelper).encodeNumber(pickingId, (0, _mainJs.PickType).label, this._vec4);
                    const text1 = truncated[i1];
                    if (text1.length > 0) {
                        (0, _textJs.TextHelper).addString(this._font, text1, this._verticesView, this._indices, glyphs, (0, _constantsJs.Constants).VECTOR3_ZERO, 1, this._offset, null, this._vec4);
                        glyphs += text1.length;
                    }
                }
                const scaling = this._scale / this._font.size;
                this.width = maxWidth * scaling;
                this.height = height * scaling;
                this._indexCount = glyphs * 6;
                (0, _glMatrix.vec3).set(this._vec3, scaling, scaling, scaling);
                (0, _glMatrix.mat4).fromScaling(this._mMatrix, this._vec3);
                if (this.hasChangedCallback) this.hasChangedCallback();
            }
        }
    }
}
class LabelSet extends LabelBase {
    constructor(core, options){
        super(core, options);
        this._quat = (0, _glMatrix.quat).create();
        this.minBoundsX = options.minBoundsX ? options.minBoundsX : 0;
        this.minBoundsY = options.minBoundsY ? options.minBoundsY : 0;
        this.minBoundsZ = options.minBoundsZ ? options.minBoundsZ : 0;
        this.maxBoundsX = options.maxBoundsX ? options.maxBoundsX : 1;
        this.maxBoundsY = options.maxBoundsY ? options.maxBoundsY : 1;
        this.maxBoundsZ = options.maxBoundsZ ? options.maxBoundsZ : 1;
        this._font = options.font || core.font;
        this.text = options.text;
        this.positionsX = options.positionsX;
        this.positionsY = options.positionsY;
        this.positionsZ = options.positionsZ;
        this.positionScalingX = options.positionScalingX ? options.positionScalingX : 1;
        this.positionScalingY = options.positionScalingY ? options.positionScalingY : 1;
        this.positionScalingZ = options.positionScalingZ ? options.positionScalingZ : 1;
        this.rotations = options.rotations;
        this.offsetsX = options.offsetsX;
        this.offsetsY = options.offsetsY;
        this.offsetsZ = options.offsetsZ;
        this.offsetScalingX = options.offsetScalingX ? options.offsetScalingX : 1;
        this.offsetScalingY = options.offsetScalingY ? options.offsetScalingY : 1;
        this.offsetScalingZ = options.offsetScalingZ ? options.offsetScalingZ : 1;
        if (options.horizontalAlignments) this.horizontalAlignments = options.horizontalAlignments;
        if (options.verticalAlignments) this.verticalAlignments = options.verticalAlignments;
        if (options.scales) this.scales = options.scales;
    }
    get minBoundsX() {
        return this._minBoundsX;
    }
    set minBoundsX(value) {
        if (this._minBoundsX != value) {
            this._minBoundsX = value;
            this._hasChanged = true;
        }
    }
    get minBoundsY() {
        return this._minBoundsY;
    }
    set minBoundsY(value) {
        if (this._minBoundsY != value) {
            this._minBoundsY = value;
            this._hasChanged = true;
        }
    }
    get minBoundsZ() {
        return this._minBoundsZ;
    }
    set minBoundsZ(value) {
        if (this._minBoundsZ != value) {
            this._minBoundsZ = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsX() {
        return this._maxBoundsX;
    }
    set maxBoundsX(value) {
        if (this._maxBoundsX != value) {
            this._maxBoundsX = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsY() {
        return this._maxBoundsY;
    }
    set maxBoundsY(value) {
        if (this._maxBoundsY != value) {
            this._maxBoundsY = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsZ() {
        return this._maxBoundsZ;
    }
    set maxBoundsZ(value) {
        if (this._maxBoundsZ != value) {
            this._maxBoundsZ = value;
            this._hasChanged = true;
        }
    }
    get positionsX() {
        return this._positionsX;
    }
    set positionsX(value) {
        if (this._positionsX != value) {
            this._positionsX = value;
            this._hasChanged = true;
        }
    }
    get positionsY() {
        return this._positionsY;
    }
    set positionsY(value) {
        if (this._positionsY != value) {
            this._positionsY = value;
            this._hasChanged = true;
        }
    }
    get positionsZ() {
        return this._positionsZ;
    }
    set positionsZ(value) {
        if (this._positionsZ != value) {
            this._positionsZ = value;
            this._hasChanged = true;
        }
    }
    get positionScalingX() {
        return this._positionScalingX;
    }
    set positionScalingX(value) {
        if (this._positionScalingX != value) {
            this._positionScalingX = value;
            this._hasChanged = true;
        }
    }
    get positionScalingY() {
        return this._positionScalingY;
    }
    set positionScalingY(value) {
        if (this._positionScalingY != value) {
            this._positionScalingY = value;
            this._hasChanged = true;
        }
    }
    get positionScalingZ() {
        return this._positionScalingZ;
    }
    set positionScalingZ(value) {
        if (this._positionScalingZ != value) {
            this._positionScalingZ = value;
            this._hasChanged = true;
        }
    }
    get rotations() {
        return this._rotations;
    }
    set rotations(value) {
        if (this._rotations != value) {
            this._rotations = value;
            this._hasChanged = true;
        }
    }
    get offsetsX() {
        return this._offsetsX;
    }
    set offsetsX(value) {
        if (this._offsetsX != value) {
            this._offsetsX = value;
            this._hasChanged = true;
        }
    }
    get offsetsY() {
        return this._offsetsY;
    }
    set offsetsY(value) {
        if (this._offsetsY != value) {
            this._offsetsY = value;
            this._hasChanged = true;
        }
    }
    get offsetsZ() {
        return this._offsetsZ;
    }
    set offsetsZ(value) {
        if (this._offsetsZ != value) {
            this._offsetsZ = value;
            this._hasChanged = true;
        }
    }
    get offsetScalingX() {
        return this._offsetScalingX;
    }
    set offsetScalingX(value) {
        if (this._offsetScalingX != value) {
            this._offsetScalingX = value;
            this._hasChanged = true;
        }
    }
    get offsetScalingY() {
        return this._offsetScalingY;
    }
    set offsetScalingY(value) {
        if (this._offsetScalingY != value) {
            this._offsetScalingY = value;
            this._hasChanged = true;
        }
    }
    get offsetScalingZ() {
        return this._offsetScalingZ;
    }
    set offsetScalingZ(value) {
        if (this._offsetScalingZ != value) {
            this._offsetScalingZ = value;
            this._hasChanged = true;
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (this._text != value) {
            this._text = value;
            this._hasChanged = true;
        }
    }
    get horizontalAlignments() {
        return this._horizontalAlignments;
    }
    set horizontalAlignments(value) {
        if (this._horizontalAlignments != value) {
            this._horizontalAlignments = value;
            this._hasChanged = true;
        }
    }
    get verticalAlignments() {
        return this._verticalAlignments;
    }
    set verticalAlignments(value) {
        if (this._verticalAlignments != value) {
            this._verticalAlignments = value;
            this._hasChanged = true;
        }
    }
    get scales() {
        return this._scales;
    }
    set scales(value) {
        if (this._scales != value) {
            this._scales = value;
            this._hasChanged = true;
        }
    }
    update(elapsedTime) {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            this.pickIdLookup = {};
            if (!this._text) this._indexCount = 0;
            else {
                const start = window.performance.now();
                const modelSizeX = this._maxBoundsX - this._minBoundsX;
                const modelSizeY = this._maxBoundsY - this._minBoundsY;
                const modelSizeZ = this._maxBoundsZ - this._minBoundsZ;
                const maxBounds = Math.max(modelSizeX, Math.max(modelSizeY, modelSizeZ));
                const boundsScaling = maxBounds == 0 ? 1 : 1 / maxBounds;
                const modelOriginX = (this._minBoundsX + this._maxBoundsX) / 2;
                const modelOriginY = (this._minBoundsY + this._maxBoundsY) / 2;
                const modelOriginZ = (this._minBoundsZ + this._maxBoundsZ) / 2;
                if (this._rotation) (0, _glMatrix.quat).set(this._quat, this._rotation[0], this._rotation[1], this._rotation[2], this._rotation[3]);
                let glyphs = 0;
                for(let i = 0; i < this._text.length; i++){
                    const offsetX = (this._offsetsX ? this._offsetsX[i] / 2 : this._offsetX) * boundsScaling * this._offsetScalingX;
                    const offsetY = (this._offsetsY ? this._offsetsY[i] / 2 : this._offsetY) * boundsScaling * this._offsetScalingY;
                    const offsetZ = (this._offsetsZ ? this._offsetsZ[i] / 2 : this._offsetZ) * boundsScaling * this._offsetScalingZ;
                    const text = (0, _textJs.TextHelper).truncate(this._text[i], this._maxGlyphs - glyphs);
                    const scale = (this._scales ? this._scales[i] : this._scale) * boundsScaling / this._font.size;
                    (0, _textJs.TextHelper).measure(this._font, text, this._textMetric);
                    const width = this._textMetric.width * scale;
                    const lineHeight = this._font.size * scale;
                    const maxGlyphTop = (this._maxGlyphTop ? this._maxGlyphTop : this._textMetric.maxTop) * scale;
                    const horizontalAlignment = this._horizontalAlignments ? this._horizontalAlignments[i] : this._horizontalAlignment;
                    switch(horizontalAlignment){
                        case (0, _mainJs.HorizontalAlignment).left:
                            this._offset[0] = offsetX;
                            break;
                        case (0, _mainJs.HorizontalAlignment).center:
                            this._offset[0] = offsetX - width / 2;
                            break;
                        case (0, _mainJs.HorizontalAlignment).right:
                            this._offset[0] = offsetX - width;
                            break;
                    }
                    const verticalAlignment = this._verticalAlignments ? this._verticalAlignments[i] : this._verticalAlignment;
                    switch(verticalAlignment){
                        case (0, _mainJs.VerticalAlignment).top:
                            this._offset[1] = offsetY - lineHeight / 2;
                            break;
                        case (0, _mainJs.VerticalAlignment).center:
                            this._offset[1] = offsetY;
                            break;
                        case (0, _mainJs.VerticalAlignment).bottom:
                            this._offset[1] = offsetY + lineHeight / 2;
                            break;
                    }
                    this._offset[1] -= maxGlyphTop / 2;
                    this._offset[2] = offsetZ;
                    (0, _glMatrix.vec3).set(this._vec3, ((this.positionsX ? this.positionsX[i] * this.positionScalingX : 0) - modelOriginX) * boundsScaling, ((this.positionsY ? this.positionsY[i] * this.positionScalingY : 0) - modelOriginY) * boundsScaling, ((this.positionsZ ? this.positionsZ[i] * this.positionScalingZ : 0) - modelOriginZ) * boundsScaling);
                    if (this._rotations) (0, _glMatrix.quat).set(this._quat, this._rotations[i * 4], this._rotations[i * 4 + 1], this._rotations[i * 4 + 2], this._rotations[i * 4 + 3]);
                    const pickId = (0, _pickJs.PickHelper).nextPickId();
                    (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).label, this._vec4);
                    this.pickIdLookup[pickId] = i;
                    (0, _textJs.TextHelper).addString(this._font, text, this._verticesView, this._indices, glyphs, this._vec3, scale, this._offset, this._rotation || this._rotations ? this._quat : null, this._vec4);
                    glyphs += text.length;
                    if (glyphs >= this._maxGlyphs) {
                        glyphs = this._maxGlyphs;
                        break;
                    }
                }
                this._indexCount = glyphs * 6;
                this._core.log.write((0, _mainJs.LogLevel).info, `label set updated ${Math.round(window.performance.now() - start)}ms`);
                if (this.hasChangedCallback) this.hasChangedCallback();
            }
        }
    }
}

},{"gl-matrix":"3mrln","../main.js":"2JYph","../helpers/text.js":"jYJ8G","../constants.js":"dtECF","../vertex.js":"7T2qu","../helpers/pick.js":"jhV3p","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8weU6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageVisual", ()=>ImageVisual);
parcelHelpers.export(exports, "ImageBase", ()=>ImageBase);
parcelHelpers.export(exports, "ImageQuad", ()=>ImageQuad);
parcelHelpers.export(exports, "ImageSphere", ()=>ImageSphere);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _vertexJs = require("../vertex.js");
var _quadJs = require("../meshes/quad.js");
var _sphereJs = require("../meshes/sphere.js");
var _constantsJs = require("../constants.js");
class ImageVisual {
    constructor(image){
        this.image = image;
    }
    render(elapsedTime, xrFrame) {}
    update(elapsedTime) {}
}
class ImageBase {
    constructor(core, options){
        this._core = core;
        this._mMatrix = (0, _glMatrix.mat4).create();
        this._origin = (0, _glMatrix.vec3).create();
        this._translation = (0, _glMatrix.vec3).create();
        this._scale = (0, _glMatrix.vec3).create();
        this._transform = (0, _glMatrix.mat4).create();
        this._imageData = options.imageData;
        this._minBoundsX = options.minBoundsX === undefined ? 0 : options.minBoundsX;
        this._minBoundsY = options.minBoundsY === undefined ? 0 : options.minBoundsY;
        this._minBoundsZ = options.minBoundsZ === undefined ? 0 : options.minBoundsZ;
        this._maxBoundsX = options.maxBoundsX === undefined ? 1 : options.maxBoundsX;
        this._maxBoundsY = options.maxBoundsY === undefined ? 1 : options.maxBoundsY;
        this._maxBoundsZ = options.maxBoundsZ === undefined ? 1 : options.maxBoundsZ;
        this._position = options.position ? (0, _glMatrix.vec3).clone(options.position) : (0, _glMatrix.vec3).create();
        this._rotation = options.rotation ? (0, _glMatrix.quat).clone(options.rotation) : (0, _glMatrix.quat).create();
        this._texCoord0 = options.texCoord0 ? (0, _glMatrix.vec2).clone(options.texCoord0) : (0, _glMatrix.vec2).fromValues(0, 0);
        this._texCoord1 = options.texCoord1 ? (0, _glMatrix.vec2).clone(options.texCoord1) : (0, _glMatrix.vec2).fromValues(1, 1);
        this._material = options.material === undefined ? 0 : options.material;
        this._hasChanged = true;
    }
    get material() {
        return this._material;
    }
    get vertices() {
        return this._vertices;
    }
    get indices() {
        return this._indices;
    }
    get indexCount() {
        return this._indexCount;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get mMatrix() {
        return this._mMatrix;
    }
    get imageData() {
        return this._imageData;
    }
    set imageData(value) {
        if (this._imageData != value) {
            this._imageData = value;
            this._hasChanged = true;
        }
    }
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        if (!(0, _glMatrix.quat).equals(this._rotation, value)) {
            (0, _glMatrix.quat).copy(this._rotation, value);
            this._hasChanged = true;
        }
    }
    get position() {
        return this._position;
    }
    set position(value) {
        if (!(0, _glMatrix.vec3).equals(this._position, value)) {
            (0, _glMatrix.vec3).copy(this._position, value);
            this._hasChanged = true;
        }
    }
    get texCoord0() {
        return this._texCoord0;
    }
    set texCoord0(value) {
        if (!(0, _glMatrix.vec2).equals(this._texCoord0, value)) {
            (0, _glMatrix.vec2).copy(this._texCoord0, value);
            this._hasChanged = true;
        }
    }
    get texCoord1() {
        return this._texCoord1;
    }
    set texCoord1(value) {
        if (!(0, _glMatrix.vec2).equals(this._texCoord1, value)) {
            (0, _glMatrix.vec2).copy(this._texCoord1, value);
            this._hasChanged = true;
        }
    }
    get minBoundsX() {
        return this._minBoundsX;
    }
    set minBoundsX(value) {
        if (this._minBoundsX != value) {
            this._minBoundsX = value;
            this._hasChanged = true;
        }
    }
    get minBoundsY() {
        return this._minBoundsY;
    }
    set minBoundsY(value) {
        if (this._minBoundsY != value) {
            this._minBoundsY = value;
            this._hasChanged = true;
        }
    }
    get minBoundsZ() {
        return this._minBoundsZ;
    }
    set minBoundsZ(value) {
        if (this._minBoundsZ != value) {
            this._minBoundsZ = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsX() {
        return this._maxBoundsX;
    }
    set maxBoundsX(value) {
        if (this._maxBoundsX != value) {
            this._maxBoundsX = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsY() {
        return this._maxBoundsY;
    }
    set maxBoundsY(value) {
        if (this._maxBoundsY != value) {
            this._maxBoundsY = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsZ() {
        return this._maxBoundsZ;
    }
    set maxBoundsZ(value) {
        if (this._maxBoundsZ != value) {
            this._maxBoundsZ = value;
            this._hasChanged = true;
        }
    }
}
class ImageQuad extends ImageBase {
    constructor(core, options){
        super(core, options);
        this._width = options.width === undefined ? 1 : options.width;
        this._height = options.height === undefined ? 1 : options.height;
        this._texTransform = (0, _glMatrix.mat4).create();
        (0, _glMatrix.mat4).translate(this._texTransform, this._texTransform, (0, _glMatrix.vec3).fromValues(0, 1, 0));
        (0, _glMatrix.mat4).scale(this._texTransform, this._texTransform, (0, _glMatrix.vec3).fromValues(1, -1, 1));
    }
    get width() {
        return this._width;
    }
    set width(value) {
        if (this._width != value) {
            this._width = value;
            this._hasChanged = true;
        }
    }
    get height() {
        return this._height;
    }
    set height(value) {
        if (this._height != value) {
            this._height = value;
            this._hasChanged = true;
        }
    }
    initialize() {
        this._vertices = new ArrayBuffer((0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES * 4);
        this._indices = (0, _quadJs.Quad).INDICES;
        this._indexCount = this._indices.length;
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            const modelSizeX = this._maxBoundsX - this._minBoundsX;
            const modelSizeY = this._maxBoundsY - this._minBoundsY;
            const modelSizeZ = this._maxBoundsZ - this._minBoundsZ;
            const maxBounds = Math.max(modelSizeX, Math.max(modelSizeY, modelSizeZ));
            const boundsScaling = maxBounds == 0 ? 1 : 1 / maxBounds;
            (0, _glMatrix.vec3).set(this._origin, (this._minBoundsX + this._maxBoundsX) / 2, (this._minBoundsY + this._maxBoundsY) / 2, (this._minBoundsZ + this._maxBoundsZ) / 2);
            (0, _glMatrix.vec3).subtract(this._translation, this._position, this._origin);
            (0, _glMatrix.vec3).scale(this._translation, this._translation, boundsScaling);
            (0, _glMatrix.vec3).set(this._scale, this._width, this._height, 1);
            (0, _glMatrix.vec3).scale(this._scale, this._scale, boundsScaling);
            (0, _glMatrix.mat4).fromRotationTranslationScale(this._transform, this._rotation, this._translation, this._scale);
            this._verticesView = (0, _quadJs.Quad).normalTextured(this._transform, this._texTransform);
            this._vertices = this._verticesView.buffer;
            if (this.hasChangedCallback) this.hasChangedCallback();
        }
    }
}
class ImageSphere extends ImageBase {
    constructor(core, options){
        super(core, options);
        this._radius = options.radius === undefined ? 0.5 : options.radius;
        this._slices = options.slices === undefined ? 72 : options.slices;
        this._stacks = options.stacks === undefined ? 36 : options.stacks;
    }
    get radius() {
        return this._radius;
    }
    set radius(value) {
        if (this._radius != value) {
            this._radius = value;
            this._hasChanged = true;
        }
    }
    initialize() {
        this._sphere = new (0, _sphereJs.Sphere)(this._core);
        this._vertices = this._sphere.normalTextured(this._slices, this._stacks, (0, _constantsJs.Constants).MAT4_IDENTITY).buffer;
        this._indices = this._sphere.indices(this._slices, this._stacks);
        this._indexCount = this._indices.length;
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            const modelSizeX = this._maxBoundsX - this._minBoundsX;
            const modelSizeY = this._maxBoundsY - this._minBoundsY;
            const modelSizeZ = this._maxBoundsZ - this._minBoundsZ;
            const maxBounds = Math.max(modelSizeX, Math.max(modelSizeY, modelSizeZ));
            const boundsScaling = maxBounds == 0 ? 1 : 1 / maxBounds;
            (0, _glMatrix.vec3).set(this._origin, (this._minBoundsX + this._maxBoundsX) / 2, (this._minBoundsY + this._maxBoundsY) / 2, (this._minBoundsZ + this._maxBoundsZ) / 2);
            (0, _glMatrix.vec3).set(this._scale, this._radius, this._radius, this._radius);
            (0, _glMatrix.vec3).scale(this._scale, this._scale, boundsScaling);
            (0, _glMatrix.mat4).fromRotationTranslationScaleOrigin(this._transform, this._rotation, this._position, this._scale, this._origin);
            this._verticesView = this._sphere.normalTextured(this._slices, this._stacks, this._transform);
            this._vertices = this._verticesView.buffer;
            if (this.hasChangedCallback) this.hasChangedCallback();
        }
    }
}

},{"gl-matrix":"3mrln","../vertex.js":"7T2qu","../meshes/quad.js":"5BIpU","../meshes/sphere.js":"k4wBy","../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"k4wBy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Sphere", ()=>Sphere);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _angleJs = require("../helpers/angle.js");
var _vertexJs = require("../vertex.js");
class Sphere {
    constructor(core){}
    positions(slices, stacks, transform) {
        const vertices = new Float32Array((slices + 1) * (stacks + 1) * (0, _vertexJs.PositionVertex).SIZE);
        const position = (0, _glMatrix.vec3).create();
        let index = 0;
        for(let stack = 0; stack <= stacks; stack++){
            const latitude = 90 - 180 * stack / stacks;
            for(let slice = 0; slice <= slices; slice++){
                const longitude = 360 * slice / slices - 180;
                (0, _angleJs.AngleHelper).sphericalToCartesian(1, longitude, latitude, position);
                (0, _glMatrix.vec3).transformMat4(position, position, transform);
                (0, _vertexJs.PositionVertex).setPosition(vertices, index++, position);
            }
        }
        return vertices;
    }
    indices(slices, stacks) {
        const indices = new Uint16Array(slices * stacks * 6);
        let index = 0;
        for(let stack = 0; stack < stacks; stack++){
            const top = stack * (slices + 1);
            const bottom = (stack + 1) * (slices + 1);
            for(let slice = 0; slice < slices; slice++){
                if (stack != 0) {
                    indices[index++] = top + slice;
                    indices[index++] = bottom + slice;
                    indices[index++] = top + slice + 1;
                }
                if (stack != stacks - 1) {
                    indices[index++] = top + slice + 1;
                    indices[index++] = bottom + slice;
                    indices[index++] = bottom + slice + 1;
                }
            }
        }
        return indices;
    }
    textured(slices, stacks, transform, texTransform = (0, _constantsJs.Constants).MAT4_IDENTITY) {
        const positions = this.positions(slices, stacks, transform);
        const texCoords = this._texCoords(slices, stacks, texTransform);
        const vertices = new ArrayBuffer((0, _vertexJs.PositionTextureVertex).SIZE_BYTES * positions.length / 3);
        const verticesView = new DataView(vertices);
        const position = (0, _glMatrix.vec3).create();
        const texCoord = (0, _glMatrix.vec2).create();
        for(let i = 0; i < positions.length / (0, _vertexJs.PositionVertex).SIZE; i++){
            (0, _glMatrix.vec3).set(position, positions[i * (0, _vertexJs.PositionVertex).SIZE], positions[i * (0, _vertexJs.PositionVertex).SIZE + 1], positions[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec2).set(texCoord, texCoords[i * 2], texCoords[i * 2 + 1]);
            (0, _vertexJs.PositionTextureVertex).setPosition(verticesView, i, position);
            (0, _vertexJs.PositionTextureVertex).setTexCoord(verticesView, i, texCoord);
        }
        return verticesView;
    }
    normalTextured(slices, stacks, transform, texTransform = (0, _constantsJs.Constants).MAT4_IDENTITY) {
        const positions = this.positions(slices, stacks, transform);
        const texCoords = this._texCoords(slices, stacks, texTransform);
        const vertices = new ArrayBuffer((0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES * positions.length / 3);
        const verticesView = new DataView(vertices);
        const position = (0, _glMatrix.vec3).create();
        const texCoord = (0, _glMatrix.vec2).create();
        const normal = (0, _glMatrix.vec3).create();
        for(let i = 0; i < positions.length / (0, _vertexJs.PositionVertex).SIZE; i++){
            (0, _glMatrix.vec3).set(position, positions[i * (0, _vertexJs.PositionVertex).SIZE], positions[i * (0, _vertexJs.PositionVertex).SIZE + 1], positions[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec2).set(texCoord, texCoords[i * 2], texCoords[i * 2 + 1]);
            (0, _vertexJs.PositionNormalTextureVertex).setPosition(verticesView, i, position);
            (0, _vertexJs.PositionNormalTextureVertex).setTexCoord(verticesView, i, texCoord);
            (0, _glMatrix.vec3).set(normal, position[0] - transform[12], position[1] - transform[13], position[2] - transform[14]);
            (0, _glMatrix.vec3).normalize(normal, normal);
            (0, _vertexJs.PositionNormalTextureVertex).setNormal(verticesView, i, normal);
        }
        return verticesView;
    }
    _texCoords(slices, stacks, transform) {
        const texCoords = new Float32Array((slices + 1) * (stacks + 1) * 2);
        const texCoord = (0, _glMatrix.vec2).create();
        let index = 0;
        for(let stack = 0; stack <= stacks; stack++)for(let slice = 0; slice <= slices; slice++){
            (0, _glMatrix.vec2).set(texCoord, slice / slices, stack / stacks);
            (0, _glMatrix.vec2).transformMat4(texCoord, texCoord, transform);
            texCoords[index++] = texCoord[0];
            texCoords[index++] = texCoord[1];
        }
        return texCoords;
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/angle.js":"3PBRj","../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dcCvf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KeyVisual", ()=>KeyVisual);
parcelHelpers.export(exports, "KeyBase", ()=>KeyBase);
parcelHelpers.export(exports, "NominalKey", ()=>NominalKey);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
var _textJs = require("../helpers/text.js");
var _scatterJs = require("../layouts/scatter.js");
var _mathJs = require("../helpers/math.js");
var _labelsJs = require("./labels.js");
class KeyVisual {
    constructor(key){
        this.key = key;
    }
    render(elapsedTime, xrFrame) {}
    update(elapsedTime) {}
}
class KeyBase {
    constructor(core, options){
        this._core = core;
        this._textMetric = {
            width: 0,
            maxHeight: 0,
            maxTop: 0
        };
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get minBoundsX() {
        return this._minBoundsX;
    }
    set minBoundsX(value) {
        if (value != this.minBoundsX) {
            this._minBoundsX = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsX() {
        return this._maxBoundsX;
    }
    set maxBoundsX(value) {
        if (value != this.minBoundsX) {
            this._maxBoundsX = value;
            this._hasChanged = true;
        }
    }
    get minBoundsY() {
        return this._minBoundsY;
    }
    set minBoundsY(value) {
        if (value != this.minBoundsY) {
            this._minBoundsY = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsY() {
        return this._maxBoundsY;
    }
    set maxBoundsY(value) {
        if (value != this.minBoundsY) {
            this._maxBoundsY = value;
            this._hasChanged = true;
        }
    }
    get minBoundsZ() {
        return this._minBoundsZ;
    }
    set minBoundsZ(value) {
        if (value != this.minBoundsZ) {
            this._minBoundsZ = value;
            this._hasChanged = true;
        }
    }
    get maxBoundsZ() {
        return this._maxBoundsZ;
    }
    set maxBoundsZ(value) {
        if (value != this.minBoundsZ) {
            this._maxBoundsZ = value;
            this._hasChanged = true;
        }
    }
    get unitType() {
        return this._unitType;
    }
    set unitType(value) {
        if (this._unitType != value) {
            this._unitType = value;
            this._hasChanged = true;
        }
    }
    get palette() {
        return this._palette;
    }
    set palette(value) {
        if (this._palette != value) {
            this._palette = value;
            this._hasChanged = true;
        }
    }
    get materials() {
        return this._materials;
    }
    set materials(value) {
        if (this._materials != value) {
            this._materials = value;
            this._hasChanged = true;
        }
    }
    get sizesX() {
        return this._sizesX;
    }
    set sizesX(value) {
        if (this._sizesX != value) {
            this._sizesX = value;
            this._hasChanged = true;
        }
    }
    get sizesY() {
        return this._sizesY;
    }
    set sizesY(value) {
        if (this._sizesY != value) {
            this._sizesY = value;
            this._hasChanged = true;
        }
    }
    get sizesZ() {
        return this._sizesZ;
    }
    set sizesZ(value) {
        if (this._sizesZ != value) {
            this._sizesZ = value;
            this._hasChanged = true;
        }
    }
    get spacing() {
        return this._spacing;
    }
    set spacing(value) {
        if (this._spacing != value) {
            this._spacing = value;
            this._hasChanged = true;
        }
    }
    get textVertices() {
        return this._textVertices;
    }
    get textIndices() {
        return this._textIndices;
    }
    get labelMMatrix() {
        return this._labelMMatrix;
    }
    set labelPositions(value) {
        if (this._labelPositions != value) {
            this._labelPositions = value;
            this._hasChanged = true;
        }
    }
    set labels(value) {
        if (this._labels != value) {
            this._labels = value;
            this._hasChanged = true;
        }
    }
    set labelSize(value) {
        if (this._labelSize != value) {
            this._labelSize = value;
            this._hasChanged = true;
        }
    }
    get labelOrientation() {
        return this._orientation;
    }
    set labelOrientation(value) {
        if (this._orientation != value) {
            this._orientation = value;
            this._hasChanged = true;
        }
    }
    get titleIndexCount() {
        return this._titleIndexCount;
    }
    get titleIndexOffset() {
        return this._titleIndexOffset;
    }
    get titleMMatrix() {
        return this._titleMMatrix;
    }
    set title(value) {
        if (this._title != value) {
            this._title = value;
            this._hasChanged = true;
        }
    }
    set titleSize(value) {
        if (this._titleSize != value) {
            this._titleSize = value;
            this._hasChanged = true;
        }
    }
    initialize() {
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this.isInitialized) {
            if (this._hasChanged) {
                const start = window.performance.now();
                this._hasChanged = false;
                (0, _glMatrix.vec3).set(this._size, this._maxBoundsX - this._minBoundsX, this._maxBoundsY - this._minBoundsY, this._maxBoundsZ - this._minBoundsZ);
                const maxBounds = Math.max(Math.max(this._size[0], this._size[1]), this._size[2]);
                (0, _glMatrix.vec3).scale(this._size, this._size, 1 / maxBounds);
                this._update(this._size);
                if (this.hasChangedCallback) this.hasChangedCallback();
                this._core.log.write((0, _mainJs.LogLevel).info, `key updated ${Math.round(window.performance.now() - start)}ms`);
            }
        }
    }
    _update(size) {}
}
class NominalKey extends KeyBase {
    constructor(core, options){
        super(core, options);
        const minBoundsX = options.minBoundsX === undefined ? 0 : options.minBoundsX;
        const minBoundsY = options.minBoundsY === undefined ? 0 : options.minBoundsY;
        const minBoundsZ = options.minBoundsZ === undefined ? 0 : options.minBoundsZ;
        const maxBoundsX = options.maxBoundsX === undefined ? 0 : options.maxBoundsX;
        const maxBoundsY = options.maxBoundsY === undefined ? 0 : options.maxBoundsY;
        const maxBoundsZ = options.maxBoundsZ === undefined ? 0 : options.maxBoundsZ;
        const positionX = options.positionX === undefined ? 0 : options.positionX;
        const positionY = options.positionY === undefined ? 0 : options.positionY;
        const positionZ = options.positionZ === undefined ? 0 : options.positionZ;
        const sizeX = options.sizeX === undefined ? 1 : options.sizeX;
        const sizeY = options.sizeY === undefined ? 1 : options.sizeY;
        const sizeZ = options.sizeZ === undefined ? 1 : options.sizeZ;
        const spacing = options.spacing === undefined ? 1 : options.spacing;
        const labelScale = options.labelScale === undefined ? 1 : options.labelScale;
        const labelMaxGlyphs = options.labelMaxGlyphs === undefined ? this._core.config.keyLabelMaxGlyphs : options.labelMaxGlyphs;
        const titleScale = options.titleScale === undefined ? 1 : options.titleScale;
        const titleMaxGlyphs = options.titleMaxGlyphs === undefined ? this._core.config.keyTitleMaxGlyphs : options.titleMaxGlyphs;
        const font = options.font ? options.font : this._core.font;
        const horizontalAlignment = options.horizontalAlignment === undefined ? (0, _mainJs.HorizontalAlignment).center : options.horizontalAlignment;
        const verticalAlignment = options.verticalAlignment === undefined ? (0, _mainJs.VerticalAlignment).center : options.verticalAlignment;
        const orientation = options.orientation === undefined ? (0, _mainJs.Orientation).horizontal : options.orientation;
        const labelPosition = options.labelPosition === undefined ? (0, _mainJs.Edge2D).right : options.labelPosition;
        const labelOrientation = options.labelOrientation === undefined ? (0, _mainJs.Orientation).horizontal : options.labelOrientation;
        const rotation = (0, _glMatrix.quat).create();
        let count = options.values.length;
        const ids = new Uint32Array(count);
        let minValue = Number.MAX_VALUE;
        let maxValue = -Number.MAX_VALUE;
        for(let i = 0; i < count; i++){
            ids[i] = i;
            const value = options.values[i];
            minValue = Math.min(minValue, value);
            maxValue = Math.max(maxValue, value);
        }
        const materialIds = new Uint32Array(count);
        for(let i1 = 0; i1 < count; i1++)materialIds[i1] = (0, _mathJs.MathHelper).normalize(options.values[i1], minValue, maxValue, 0, options.palette.length / 4 - 1);
        let glyphCount = 0;
        let totalLabelWidth = 0;
        let maxLabelWidth = 0;
        for(let i2 = 0; i2 < count; i2++){
            const label = (0, _textJs.TextHelper).truncate(options.labels[i2], labelMaxGlyphs);
            glyphCount += label.length;
            (0, _textJs.TextHelper).measure(font, label, this._textMetric);
            const width = this._textMetric.width;
            totalLabelWidth += width;
            maxLabelWidth = Math.max(width, maxLabelWidth);
        }
        let titleWidth = 0;
        let title;
        if (options.title) {
            title = (0, _textJs.TextHelper).truncate(options.title, titleMaxGlyphs);
            glyphCount += title.length;
            (0, _textJs.TextHelper).measure(font, title, this._textMetric);
            titleWidth = this._textMetric.width;
        }
        let width1;
        let height;
        switch(orientation){
            case (0, _mainJs.Orientation).horizontal:
                switch(labelPosition){
                    case (0, _mainJs.Edge2D).bottom:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                    case (0, _mainJs.Edge2D).left:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                    case (0, _mainJs.Edge2D).right:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                    case (0, _mainJs.Edge2D).top:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                }
                break;
            case (0, _mainJs.Orientation).vertical:
                switch(labelPosition){
                    case (0, _mainJs.Edge2D).bottom:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                    case (0, _mainJs.Edge2D).left:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                    case (0, _mainJs.Edge2D).right:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                    case (0, _mainJs.Edge2D).top:
                        switch(labelOrientation){
                            case (0, _mainJs.Orientation).horizontal:
                                break;
                            case (0, _mainJs.Orientation).vertical:
                                break;
                        }
                        break;
                }
                break;
        }
        switch(orientation){
            case (0, _mainJs.Orientation).horizontal:
                width1 = Math.max(sizeX * count + spacing * (count - 1) + totalLabelWidth, titleWidth);
                height = sizeY;
                if (options.title) height += titleScale;
                break;
            case (0, _mainJs.Orientation).vertical:
                width1 = Math.max(sizeX + labelScale / 2 + maxLabelWidth, titleWidth);
                height = sizeY * count + spacing * (count - 1);
                if (options.title) height += titleScale;
                break;
        }
        let originX = positionX;
        let originY = positionY;
        let originZ = positionZ;
        switch(horizontalAlignment){
            case (0, _mainJs.HorizontalAlignment).center:
                break;
            case (0, _mainJs.HorizontalAlignment).left:
                originX += width1 / 2;
                break;
            case (0, _mainJs.HorizontalAlignment).right:
                originX -= width1 / 2;
                break;
        }
        switch(verticalAlignment){
            case (0, _mainJs.VerticalAlignment).bottom:
                originY += height / 2;
                break;
            case (0, _mainJs.VerticalAlignment).center:
                break;
            case (0, _mainJs.VerticalAlignment).top:
                originY -= height / 2;
                break;
        }
        const positionsX = new Float64Array(count);
        const positionsY = new Float64Array(count);
        const positionsZ = new Float64Array(count);
        for(let i3 = 0; i3 < count; i3++){
            positionsX[i3] = originX - width1 / 2 + sizeX / 2;
            positionsY[i3] = originY + height / 2 - i3 * (sizeY + spacing);
            positionsZ[i3] = originZ + sizeZ / 2;
        }
        const scatter = new (0, _scatterJs.Scatter)(this._core);
        const scatterLayoutOptions = {
            positionsX: positionsX,
            positionsY: positionsY,
            positionsZ: positionsZ
        };
        scatter.layout(this._transitionBuffer.currentBuffer, ids, scatterLayoutOptions);
        const scatterVertexOptions = {
            minBoundsX: minBoundsX,
            minBoundsY: minBoundsY,
            minBoundsZ: minBoundsZ,
            maxBoundsX: maxBoundsX,
            maxBoundsY: maxBoundsY,
            maxBoundsZ: maxBoundsZ,
            colors: options.values,
            minColor: minValue,
            maxColor: maxValue,
            sizeScalingX: sizeX,
            sizeScalingY: sizeY,
            sizeScalingZ: sizeZ,
            materials: materialIds
        };
        scatter.update(this._transitionBuffer.currentBuffer, ids, scatterVertexOptions);
        const labelSetOptions = {
            text: options.labels,
            maxGlyphs: glyphCount,
            scale: labelScale,
            font: font
        };
        const labelSet = new (0, _labelsJs.LabelSet)(this._core, labelSetOptions);
        if (options.title) count++;
        const labelPositionsX = new Float64Array(count);
        const labelPositionsY = new Float64Array(count);
        const labelPositionsZ = new Float64Array(count);
        for(let i4 = 0; i4 < (options.title ? count - 1 : count); i4++){
            labelPositionsX[i4] = originX - width1 / 2 + sizeX + labelScale / 2;
            labelPositionsY[i4] = positionsY[i4];
            labelPositionsZ[i4] = originZ;
        }
        options.title;
        labelSet.minBoundsX = minBoundsX;
        labelSet.minBoundsY = minBoundsY;
        labelSet.minBoundsZ = minBoundsZ;
        labelSet.maxBoundsX = maxBoundsX;
        labelSet.maxBoundsY = maxBoundsY;
        labelSet.maxBoundsZ = maxBoundsZ;
        labelSet.positionsX = positionsX;
        labelSet.positionsY = positionsY;
        labelSet.positionsZ = positionsZ;
        labelSet.rotation = new Float64Array([
            rotation[0],
            rotation[1],
            rotation[2],
            rotation[3]
        ]);
        labelSet.horizontalAlignment = (0, _mainJs.HorizontalAlignment).left;
    }
}

},{"gl-matrix":"3mrln","../main.js":"2JYph","../helpers/text.js":"jYJ8G","../layouts/scatter.js":"4M4pk","../helpers/math.js":"jeH35","./labels.js":"4PuF6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4M4pk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Scatter", ()=>Scatter);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class Scatter extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const positionScalingX = options.positionScalingX === undefined ? 1 : options.positionScalingX;
        const positionScalingY = options.positionScalingY === undefined ? 1 : options.positionScalingY;
        const positionScalingZ = options.positionScalingZ === undefined ? 1 : options.positionScalingZ;
        if (!this._positions || this._positions.length < buffer.length * 3) this._positions = new Float32Array(buffer.length * 3);
        this.minLayoutBoundsX = Number.MAX_VALUE;
        this.minLayoutBoundsY = Number.MAX_VALUE;
        this.minLayoutBoundsZ = Number.MAX_VALUE;
        this.maxLayoutBoundsX = -Number.MAX_VALUE;
        this.maxLayoutBoundsY = -Number.MAX_VALUE;
        this.maxLayoutBoundsZ = -Number.MAX_VALUE;
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            let positionX = options.positionsX ? options.positionsX[id] * positionScalingX : 0;
            let positionY = options.positionsY ? options.positionsY[id] * positionScalingY : 0;
            let positionZ = options.positionsZ ? options.positionsZ[id] * positionScalingZ : 0;
            this._positions[index * 3] = positionX;
            this._positions[index * 3 + 1] = positionY;
            this._positions[index * 3 + 2] = positionZ;
            this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, positionX);
            this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, positionY);
            this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, positionZ);
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, positionX);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, positionY);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, positionZ);
        }
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const sizeScalingX = options.sizeScaling === undefined ? options.sizeScalingX === undefined ? 1 : options.sizeScalingX : options.sizeScaling;
        const sizeScalingY = options.sizeScaling === undefined ? options.sizeScalingY === undefined ? 1 : options.sizeScalingY : options.sizeScaling;
        const sizeScalingZ = options.sizeScaling === undefined ? options.sizeScalingZ === undefined ? 1 : options.sizeScalingZ : options.sizeScaling;
        const sizesX = options.sizes ? options.sizes : options.sizesX;
        const sizesY = options.sizes ? options.sizes : options.sizesY;
        const sizesZ = options.sizes ? options.sizes : options.sizesZ;
        const minSize = options.minSize === undefined ? 0 : options.minSize;
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        this._updateModelBounds(options);
        if (options.rotation) {
            _quat[0] = options.rotation[0];
            _quat[1] = options.rotation[1];
            _quat[2] = options.rotation[2];
            _quat[3] = options.rotation[3];
        } else (0, _glMatrix.quat).rotationTo(_quat, this._core.config.identityRotation, (0, _constantsJs.Constants).VECTOR3_UNITY);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            let positionX = this._positions[index * 3];
            let positionY = this._positions[index * 3 + 1];
            let positionZ = this._positions[index * 3 + 2];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = Math.max((sizesX ? Math.abs(sizesX[id]) : 1) * sizeScalingX, minSize) * this._boundsScaling;
            _vec4[1] = Math.max((sizesY ? Math.abs(sizesY[id]) : 1) * sizeScalingY, minSize) * this._boundsScaling;
            _vec4[2] = Math.max((sizesZ ? Math.abs(sizesZ[id]) : 1) * sizeScalingZ, minSize) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            if (options.rotations) {
                _quat[0] = options.rotations[id * 4];
                _quat[1] = options.rotations[id * 4 + 1];
                _quat[2] = options.rotations[id * 4 + 2];
                _quat[3] = options.rotations[id * 4 + 3];
                (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            } else (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                if (options.colors1) {
                    const color1 = (0, _mathJs.MathHelper).normalize(options.colors1[id], minColor, maxColor, 0, 1);
                    (0, _glMatrix.vec2).set(_vec2, color, color1);
                } else (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8Tff0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LayoutBase", ()=>LayoutBase);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _boundsJs = require("../helpers/bounds.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
class LayoutBase {
    constructor(core){
        this._core = core;
        this.modelOriginX = 0;
        this.modelOriginY = 0;
        this.modelOriginZ = 0;
        this.minModelBoundsX = 0;
        this.minModelBoundsY = 0;
        this.minModelBoundsZ = 0;
        this.maxModelBoundsX = 0;
        this.maxModelBoundsY = 0;
        this.maxModelBoundsZ = 0;
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = 0;
        this.maxLayoutBoundsY = 0;
        this.maxLayoutBoundsZ = 0;
        this._facetSpacingX = 0;
        this._facetSpacingY = 0;
        this._facetSpacingZ = 0;
        this._facetSizeX = 0;
        this._facetSizeY = 0;
        this._facetSizeZ = 0;
        this._facetsX = 1;
        this._facetsY = 1;
        this._facetsZ = 1;
    }
    get facetScaling() {
        return this._facetScaling;
    }
    offsetX(facetCoordX) {
        return ((facetCoordX + 0.5) / this._facetsX - 0.5) * (this.maxModelBoundsX - this.minModelBoundsX) / this._maxBounds;
    }
    offsetY(facetCoordY) {
        return ((facetCoordY + 0.5) / this._facetsY - 0.5) * (this.maxModelBoundsY - this.minModelBoundsY) / this._maxBounds;
    }
    offsetZ(facetCoordZ) {
        return ((facetCoordZ + 0.5) / this._facetsZ - 0.5) * (this.maxModelBoundsZ - this.minModelBoundsZ) / this._maxBounds;
    }
    _updateModelBounds(options) {
        this.minModelBoundsX = options.minBoundsX === undefined ? this.minLayoutBoundsX : options.minBoundsX;
        this.minModelBoundsY = options.minBoundsY === undefined ? this.minLayoutBoundsY : options.minBoundsY;
        this.minModelBoundsZ = options.minBoundsZ === undefined ? this.minLayoutBoundsZ : options.minBoundsZ;
        this.maxModelBoundsX = options.maxBoundsX === undefined ? this.maxLayoutBoundsX : options.maxBoundsX;
        this.maxModelBoundsY = options.maxBoundsY === undefined ? this.maxLayoutBoundsY : options.maxBoundsY;
        this.maxModelBoundsZ = options.maxBoundsZ === undefined ? this.maxLayoutBoundsZ : options.maxBoundsZ;
        this._isFacetted = options.facetsX !== undefined && options.facetsX > 1 && options.facetCoordsX != null || options.facetsY !== undefined && options.facetsY > 1 && options.facetCoordsY != null || options.facetsZ !== undefined && options.facetsZ > 1 && options.facetCoordsZ != null;
        this._facetSpacingX = options.facetSpacingX === undefined ? 0 : options.facetSpacingX;
        this._facetSpacingY = options.facetSpacingY === undefined ? 0 : options.facetSpacingY;
        this._facetSpacingZ = options.facetSpacingZ === undefined ? 0 : options.facetSpacingZ;
        let modelSizeX = this.maxModelBoundsX - this.minModelBoundsX;
        let modelSizeY = this.maxModelBoundsY - this.minModelBoundsY;
        let modelSizeZ = this.maxModelBoundsZ - this.minModelBoundsZ;
        const maxBounds = Math.max(modelSizeX, Math.max(modelSizeY, modelSizeZ));
        this._facetSizeX = modelSizeX;
        this._facetSizeY = modelSizeY;
        this._facetSizeZ = modelSizeZ;
        this._facetsX = options.facetCoordsX ? options.facetsX : 1;
        this._facetsY = options.facetCoordsY ? options.facetsY : 1;
        this._facetsZ = options.facetCoordsZ ? options.facetsZ : 1;
        this.maxModelBoundsX = this.minModelBoundsX + this._facetsX * this._facetSizeX * (1 + this._facetSpacingX);
        this.maxModelBoundsY = this.minModelBoundsY + this._facetsY * this._facetSizeY * (1 + this._facetSpacingY);
        this.maxModelBoundsZ = this.minModelBoundsZ + this._facetsZ * this._facetSizeZ * (1 + this._facetSpacingZ);
        this.modelOriginX = (this.minModelBoundsX + this.maxModelBoundsX) / 2;
        this.modelOriginY = (this.minModelBoundsY + this.maxModelBoundsY) / 2;
        this.modelOriginZ = (this.minModelBoundsZ + this.maxModelBoundsZ) / 2;
        modelSizeX = this.maxModelBoundsX - this.minModelBoundsX;
        modelSizeY = this.maxModelBoundsY - this.minModelBoundsY;
        modelSizeZ = this.maxModelBoundsZ - this.minModelBoundsZ;
        this._maxBounds = Math.max(modelSizeX, Math.max(modelSizeY, modelSizeZ));
        this._boundsScaling = this._maxBounds == 0 ? 1 : 1 / this._maxBounds;
        this._facetScaling = maxBounds / this._maxBounds;
    }
    resetCumulativeLayoutBounds() {
        this.minCumulativeLayoutBoundsX = undefined;
        this.minCumulativeLayoutBoundsY = undefined;
        this.minCumulativeLayoutBoundsZ = undefined;
        this.maxCumulativeLayoutBoundsX = undefined;
        this.maxCumulativeLayoutBoundsY = undefined;
        this.maxCumulativeLayoutBoundsZ = undefined;
    }
    _updateCumulativeLayoutBounds() {
        this.minCumulativeLayoutBoundsX = this.minCumulativeLayoutBoundsX === undefined ? this.minLayoutBoundsX : Math.min(this.minCumulativeLayoutBoundsX, this.minLayoutBoundsX);
        this.minCumulativeLayoutBoundsY = this.minCumulativeLayoutBoundsY === undefined ? this.minLayoutBoundsY : Math.min(this.minCumulativeLayoutBoundsY, this.minLayoutBoundsY);
        this.minCumulativeLayoutBoundsZ = this.minCumulativeLayoutBoundsZ === undefined ? this.minLayoutBoundsZ : Math.min(this.minCumulativeLayoutBoundsZ, this.minLayoutBoundsZ);
        this.maxCumulativeLayoutBoundsX = this.maxCumulativeLayoutBoundsX === undefined ? this.maxLayoutBoundsX : Math.max(this.maxCumulativeLayoutBoundsX, this.maxLayoutBoundsX);
        this.maxCumulativeLayoutBoundsY = this.maxCumulativeLayoutBoundsY === undefined ? this.maxLayoutBoundsY : Math.max(this.maxCumulativeLayoutBoundsY, this.maxLayoutBoundsY);
        this.maxCumulativeLayoutBoundsZ = this.maxCumulativeLayoutBoundsZ === undefined ? this.maxLayoutBoundsZ : Math.max(this.maxCumulativeLayoutBoundsZ, this.maxLayoutBoundsZ);
    }
    unitToModelSize(unit) {
        return unit / this._boundsScaling;
    }
    unitToModelPositionX(unitPositionX) {
        return this.unitToModelSize(unitPositionX) + this.modelOriginX;
    }
    unitToModelPositionY(unitPositionY) {
        return this.unitToModelSize(unitPositionY) + this.modelOriginY;
    }
    unitToModelPositionZ(unitPositionZ) {
        return this.unitToModelSize(unitPositionZ) + this.modelOriginZ;
    }
    unitToModelPosition(unitPosition, modelPosition) {
        modelPosition[0] = this.unitToModelPositionX(unitPosition[0]);
        modelPosition[1] = this.unitToModelPositionY(unitPosition[1]);
        modelPosition[2] = this.unitToModelPositionZ(unitPosition[2]);
    }
    modelToUnitSize(modelSize) {
        return modelSize * this._boundsScaling;
    }
    modelToUnitPositionX(modelPositionX) {
        return (modelPositionX - this.modelOriginX) * this._boundsScaling;
    }
    modelToUnitPositionY(modelPositionY) {
        return (modelPositionY - this.modelOriginY) * this._boundsScaling;
    }
    modelToUnitPositionZ(modelPositionZ) {
        return (modelPositionZ - this.modelOriginZ) * this._boundsScaling;
    }
    modelToUnitPosition(modelPosition, unitPosition) {
        unitPosition[0] = this.modelToUnitPositionX(modelPosition[0]);
        unitPosition[1] = this.modelToUnitPositionY(modelPosition[1]);
        unitPosition[2] = this.modelToUnitPositionZ(modelPosition[2]);
    }
    inclusiveUnitBounds(buffer, ids, unitType, offset, count, minBounds, maxBounds) {
        (0, _glMatrix.vec3).set(minBounds, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        (0, _glMatrix.vec3).set(maxBounds, -Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
        const unitScale = (0, _glMatrix.vec4).create();
        const unitRotation = (0, _glMatrix.quat).create();
        const unitTranslation = (0, _glMatrix.vec3).create();
        const lookup = buffer.lookup;
        const dataView = buffer.dataView;
        let minBounds0;
        let maxBounds0;
        let minBounds1;
        let maxBounds1;
        switch(unitType){
            case (0, _mainJs.UnitType).sphere:
            case (0, _mainJs.UnitType).sphereSdf:
                for(let i = 0; i < count; i++){
                    const id = ids[i + offset];
                    const index = lookup[id];
                    (0, _vertexJs.UnitVertex).getTranslation(dataView, index, unitTranslation);
                    (0, _vertexJs.UnitVertex).getScale(dataView, index, unitScale);
                    const radius = unitScale[0] / 2;
                    minBounds[0] = Math.min(minBounds[0], unitTranslation[0] - radius);
                    minBounds[1] = Math.min(minBounds[1], unitTranslation[1] - radius);
                    minBounds[2] = Math.min(minBounds[2], unitTranslation[2] - radius);
                    maxBounds[0] = Math.max(maxBounds[0], unitTranslation[0] + radius);
                    maxBounds[1] = Math.max(maxBounds[1], unitTranslation[1] + radius);
                    maxBounds[2] = Math.max(maxBounds[2], unitTranslation[2] + radius);
                }
                break;
            case (0, _mainJs.UnitType).hexPrism:
            case (0, _mainJs.UnitType).hexPrismSdf:
            case (0, _mainJs.UnitType).block:
            case (0, _mainJs.UnitType).blockSdf:
                minBounds0 = (0, _glMatrix.vec3).create();
                maxBounds0 = (0, _glMatrix.vec3).create();
                minBounds1 = (0, _glMatrix.vec3).create();
                maxBounds1 = (0, _glMatrix.vec3).create();
                for(let i1 = 0; i1 < count; i1++){
                    const id1 = ids[i1 + offset];
                    const index1 = lookup[id1];
                    (0, _vertexJs.UnitVertex).getTranslation(dataView, index1, unitTranslation);
                    (0, _vertexJs.UnitVertex).getRotation(dataView, index1, unitRotation);
                    (0, _glMatrix.quat).normalize(unitRotation, unitRotation);
                    (0, _vertexJs.UnitVertex).getScale(dataView, index1, unitScale);
                    minBounds0[0] = unitTranslation[0] - unitScale[0] / 2;
                    minBounds0[1] = unitTranslation[1] - unitScale[1] / 2;
                    minBounds0[2] = unitTranslation[2] - unitScale[2] / 2;
                    maxBounds0[0] = unitTranslation[0] + unitScale[0] / 2;
                    maxBounds0[1] = unitTranslation[1] + unitScale[1] / 2;
                    maxBounds0[2] = unitTranslation[2] + unitScale[2] / 2;
                    (0, _boundsJs.BoundsHelper).rotateBounds(minBounds0, maxBounds0, unitRotation, minBounds1, maxBounds1);
                    (0, _glMatrix.vec3).min(minBounds, minBounds, minBounds1);
                    (0, _glMatrix.vec3).max(maxBounds, maxBounds, maxBounds1);
                }
                break;
            case (0, _mainJs.UnitType).cylinder:
            case (0, _mainJs.UnitType).cylinderSdf:
                minBounds0 = (0, _glMatrix.vec3).create();
                maxBounds0 = (0, _glMatrix.vec3).create();
                const pa = (0, _glMatrix.vec3).create();
                const pb = (0, _glMatrix.vec3).create();
                const identityRotation = (0, _constantsJs.Constants).VECTOR3_UNITY;
                let ca;
                for(let i2 = 0; i2 < count; i2++){
                    const id2 = ids[i2 + offset];
                    const index2 = lookup[id2];
                    (0, _vertexJs.UnitVertex).getTranslation(dataView, index2, unitTranslation);
                    (0, _vertexJs.UnitVertex).getRotation(dataView, index2, unitRotation);
                    (0, _glMatrix.quat).normalize(unitRotation, unitRotation);
                    (0, _vertexJs.UnitVertex).getScale(dataView, index2, unitScale);
                    const length = unitScale[1];
                    const radius1 = Math.max(unitScale[0], unitScale[2]);
                    if (length != 0 && radius1 != 0) {
                        if ((0, _glMatrix.quat).equals(unitRotation, (0, _constantsJs.Constants).QUAT_IDENTITY)) ca = identityRotation;
                        else {
                            ca = (0, _glMatrix.vec3).create();
                            (0, _glMatrix.vec3).transformQuat(ca, identityRotation, unitRotation);
                        }
                        (0, _glMatrix.vec3).scaleAndAdd(pa, unitTranslation, ca, -length * 0.5);
                        (0, _glMatrix.vec3).scaleAndAdd(pb, unitTranslation, ca, length * 0.5);
                        (0, _boundsJs.BoundsHelper).cylinder(pa, pb, radius1, minBounds0, maxBounds0);
                        (0, _glMatrix.vec3).min(minBounds, minBounds, minBounds0);
                        (0, _glMatrix.vec3).max(maxBounds, maxBounds, maxBounds0);
                    }
                }
                break;
        }
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/bounds.js":"7HUlt","../main.js":"2JYph","../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7HUlt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BoundsHelper", ()=>BoundsHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _cubeJs = require("../meshes/cube.js");
class BoundsHelper {
    static rotateBounds(minBounds, maxBounds, rotation, rotatedMinBounds, rotatedMaxBounds) {
        const sizeX = maxBounds[0] - minBounds[0];
        const sizeY = maxBounds[1] - minBounds[1];
        const sizeZ = maxBounds[2] - minBounds[2];
        const min = rotatedMinBounds;
        const max = rotatedMaxBounds;
        (0, _glMatrix.vec3).set(min, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        (0, _glMatrix.vec3).set(max, -Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
        const vertices = (0, _cubeJs.Cube).POSITIONS;
        const position = (0, _glMatrix.vec3).create();
        for(let i = 0; i < 8; i++){
            (0, _glMatrix.vec3).set(position, vertices[i * 3] * sizeX, vertices[i * 3 + 1] * sizeY, vertices[i * 3 + 2] * sizeZ);
            (0, _glMatrix.vec3).transformQuat(position, position, rotation);
            (0, _glMatrix.vec3).min(min, min, position);
            (0, _glMatrix.vec3).max(max, max, position);
        }
        (0, _glMatrix.vec3).add(position, minBounds, maxBounds);
        (0, _glMatrix.vec3).scale(position, position, 0.5);
        (0, _glMatrix.vec3).add(min, min, position);
        (0, _glMatrix.vec3).add(max, max, position);
    }
    static cylinder(pa, pb, radius, minBounds, maxBounds) {
        const a = (0, _glMatrix.vec3).create();
        (0, _glMatrix.vec3).subtract(a, pb, pa);
        const aa = (0, _glMatrix.vec3).dot(a, a);
        const ex = radius * Math.sqrt(1 - a[0] * a[0] / aa);
        const ey = radius * Math.sqrt(1 - a[1] * a[1] / aa);
        const ez = radius * Math.sqrt(1 - a[2] * a[2] / aa);
        minBounds[0] = Math.min(pa[0] - ex, pb[0] - ex);
        minBounds[1] = Math.min(pa[1] - ey, pb[1] - ey);
        minBounds[2] = Math.min(pa[2] - ez, pb[2] - ez);
        maxBounds[0] = Math.max(pa[0] + ex, pb[0] + ex);
        maxBounds[1] = Math.max(pa[1] + ey, pb[1] + ey);
        maxBounds[2] = Math.max(pa[2] + ez, pb[2] + ez);
    }
}

},{"gl-matrix":"3mrln","../meshes/cube.js":"dgOpu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lAxFS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "AxesBase", ()=>(0, _axesJs.AxesBase));
parcelHelpers.export(exports, "Cartesian2dAxes", ()=>(0, _cartesian2DJs.Cartesian2dAxes));
parcelHelpers.export(exports, "Cartesian2dAxesHelper", ()=>(0, _cartesian2DJs.Cartesian2dAxesHelper));
parcelHelpers.export(exports, "Cartesian3dAxes", ()=>(0, _cartesian3DJs.Cartesian3dAxes));
parcelHelpers.export(exports, "Cartesian3dAxesHelper", ()=>(0, _cartesian3DJs.Cartesian3dAxesHelper));
var _axesJs = require("./axes.js");
var _cartesian2DJs = require("./cartesian2d.js");
var _cartesian3DJs = require("./cartesian3d.js");

},{"./axes.js":"l4fPN","./cartesian2d.js":"23fwZ","./cartesian3d.js":"9v1Q6","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5z9T4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "AngleHelper", ()=>(0, _angleJs.AngleHelper));
parcelHelpers.export(exports, "AnimationHelper", ()=>(0, _animationJs.AnimationHelper));
parcelHelpers.export(exports, "ArrayHelper", ()=>(0, _arrayJs.ArrayHelper));
parcelHelpers.export(exports, "AxisHelper", ()=>(0, _axesJs.AxisHelper));
parcelHelpers.export(exports, "Base64Helper", ()=>(0, _base64Js.Base64Helper));
parcelHelpers.export(exports, "BinHelper", ()=>(0, _binJs.BinHelper));
parcelHelpers.export(exports, "ColorHelper", ()=>(0, _colorJs.ColorHelper));
parcelHelpers.export(exports, "CsvHelper", ()=>(0, _csvJs.CsvHelper));
parcelHelpers.export(exports, "FacetHelper", ()=>(0, _facetJs.FacetHelper));
parcelHelpers.export(exports, "HexHelper", ()=>(0, _hexJs.HexHelper));
parcelHelpers.export(exports, "HexBinHelper", ()=>(0, _hexbinJs.HexBinHelper));
parcelHelpers.export(exports, "LineHelper", ()=>(0, _lineJs.LineHelper));
parcelHelpers.export(exports, "MathHelper", ()=>(0, _mathJs.MathHelper));
parcelHelpers.export(exports, "PseudoRandom", ()=>(0, _mathJs.PseudoRandom));
parcelHelpers.export(exports, "MatrixHelper", ()=>(0, _matrixJs.MatrixHelper));
parcelHelpers.export(exports, "MercatorHelper", ()=>(0, _mapJs.MercatorHelper));
parcelHelpers.export(exports, "PaletteHelper", ()=>(0, _paletteJs.PaletteHelper));
parcelHelpers.export(exports, "PathHelper", ()=>(0, _pathJs.PathHelper));
parcelHelpers.export(exports, "PickHelper", ()=>(0, _pickJs.PickHelper));
parcelHelpers.export(exports, "TableHelper", ()=>(0, _tableJs.TableHelper));
parcelHelpers.export(exports, "TextHelper", ()=>(0, _textJs.TextHelper));
parcelHelpers.export(exports, "TextureHelper", ()=>(0, _textureJs.TextureHelper));
parcelHelpers.export(exports, "SetHelper", ()=>(0, _setJs.SetHelper));
parcelHelpers.export(exports, "VectorHelper", ()=>(0, _vectorJs.VectorHelper));
var _angleJs = require("./angle.js");
var _animationJs = require("./animation.js");
var _arrayJs = require("./array.js");
var _axesJs = require("./axes.js");
var _base64Js = require("./base64.js");
var _binJs = require("./bin.js");
var _colorJs = require("./color.js");
var _csvJs = require("./csv.js");
var _facetJs = require("./facet.js");
var _hexJs = require("./hex.js");
var _hexbinJs = require("./hexbin.js");
var _lineJs = require("./line.js");
var _mathJs = require("./math.js");
var _matrixJs = require("./matrix.js");
var _mapJs = require("./map.js");
var _paletteJs = require("./palette.js");
var _pathJs = require("./path.js");
var _pickJs = require("./pick.js");
var _tableJs = require("./table.js");
var _textJs = require("./text.js");
var _textureJs = require("./texture.js");
var _setJs = require("./set.js");
var _vectorJs = require("./vector.js");

},{"./angle.js":"3PBRj","./animation.js":"bNHiY","./array.js":"JpBHI","./axes.js":"fTBqS","./base64.js":"dkJnh","./bin.js":"kj0Rj","./color.js":"1Q6NY","./csv.js":"iGeIc","./facet.js":"li8be","./hex.js":"f3yhQ","./hexbin.js":"jmnd9","./line.js":"iPoNF","./math.js":"jeH35","./matrix.js":"b0nxw","./map.js":"aNtNZ","./palette.js":"cRZ7k","./path.js":"cGK6q","./pick.js":"jhV3p","./table.js":"gb9EP","./text.js":"jYJ8G","./texture.js":"eZ0Tk","./set.js":"4jVgi","./vector.js":"98bFy","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"JpBHI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "ArrayHelper", ()=>ArrayHelper);
class ArrayHelper {
    static minIndex(orderedValues, offset, length, value) {
        let index = ArrayHelper.binarySearch(orderedValues, offset, length, value);
        if (index < 0) {
            index = ~index;
            index = Math.max(0, index);
        } else while(index > 0 && orderedValues[index - 1] == value)index--;
        return index;
    }
    static maxIndex(orderedValues, offset, length, value) {
        let index = ArrayHelper.binarySearch(orderedValues, offset, length, value);
        if (index < 0) index = ~index - 1;
        else {
            while(index < length - 1 && orderedValues[index + 1] == value)index++;
            index = Math.min(length, index);
        }
        return index;
    }
    static binarySearch(array, index, length, value) {
        let low = index;
        let high = index + length - 1;
        while(low <= high){
            const mid = low + (high - low >> 1);
            if (array[mid] == value) return mid;
            if (array[mid] <= value) low = mid + 1;
            else high = mid - 1;
        }
        return ~low;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dkJnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Base64Helper", ()=>Base64Helper);
class Base64Helper {
    uint6ToB64(nUint6) {
        return nUint6 < 26 ? nUint6 + 65 : nUint6 < 52 ? nUint6 + 71 : nUint6 < 62 ? nUint6 - 4 : nUint6 === 62 ? 43 : nUint6 === 63 ? 47 : 65;
    }
    base64EncArr(aBytes) {
        let nMod3 = 2;
        let sB64Enc = "";
        let nLen = aBytes.byteLength;
        let nUint24 = 0;
        for(let nIdx = 0; nIdx < nLen; nIdx++){
            nMod3 = nIdx % 3;
            if (nIdx > 0 && nIdx * 4 / 3 % 76 === 0) sB64Enc += "\r\n";
            nUint24 |= aBytes.getUint8(nIdx) << (16 >>> nMod3 & 24);
            if (nMod3 === 2 || aBytes.byteLength - nIdx === 1) {
                sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));
                nUint24 = 0;
            }
        }
        return sB64Enc.substr(0, sB64Enc.length - 2 + nMod3) + (nMod3 === 2 ? "" : nMod3 === 1 ? "=" : "==");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kj0Rj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "BinHelper", ()=>BinHelper);
class BinHelper {
    static quantile(options) {
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? options.ids.length : options.count;
        const itemsPerBin = count / options.bins;
        let bin = 0;
        if (options.froms && options.tos) {
            const firstId = options.ids[offset];
            options.froms[0] = options.values[firstId];
        }
        for(let i = 0; i < count; i++){
            const id = options.ids[i + offset];
            if (i > Math.floor(itemsPerBin * (bin + 1))) {
                bin++;
                if (options.froms && options.tos) {
                    options.tos[bin - 1] = options.values[id];
                    const nextId = options.ids[i + offset + 1];
                    options.froms[bin] = options.values[nextId];
                }
            }
            options.binIds[id] = bin;
        }
        if (options.froms && options.tos) {
            const lastId = options.ids[count - 1 + offset];
            options.tos[options.bins - 1] = options.values[lastId];
        }
        return Math.floor(itemsPerBin);
    }
    static bin(options) {
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? options.ids.length : options.count;
        const counts = options.counts ? options.counts : new Float64Array(options.bins);
        let minValue = options.minValue;
        let maxValue = options.maxValue;
        if (options.isDiscrete || maxValue == minValue) {
            minValue -= 0.5;
            maxValue += 0.5;
        }
        const binSize = (maxValue - minValue) / options.bins;
        let maxCount = 0;
        for(let i = 0; i < count; i++){
            const id = options.ids[i + offset];
            const value = options.values[id];
            const binId = Math.max(Math.min(Math.floor((value - minValue) / binSize), options.bins - 1), 0);
            options.binIds[id] = binId;
            counts[binId]++;
            maxCount = Math.max(counts[binId], maxCount);
        }
        if (options.froms && options.tos) {
            for(let i1 = 0; i1 < options.bins; i1++)if (options.isDiscrete || maxValue == minValue) {
                options.froms[i1] = Math.ceil(minValue + binSize * i1);
                options.tos[i1] = Math.floor(minValue + binSize * (i1 + 1));
            } else {
                options.froms[i1] = minValue + binSize * i1;
                options.tos[i1] = minValue + binSize * (i1 + 1);
            }
        }
        return maxCount;
    }
    static maxBins(minValue, maxValue, isDiscrete, maxBins) {
        if (isDiscrete) return Math.min(maxValue - minValue + 1, maxBins);
        else return maxBins;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1Q6NY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorHelper", ()=>ColorHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class ColorHelper {
    static luminance(rgb) {
        return rgb[0] * ColorHelper.LUMINANCE[0] + rgb[1] * ColorHelper.LUMINANCE[1] + rgb[2] * ColorHelper.LUMINANCE[2];
    }
    static rgbToHex(r, g, b) {
        const r2 = `0${Math.round(r * 255).toString(16)}`;
        const g2 = `0${Math.round(g * 255).toString(16)}`;
        const b2 = `0${Math.round(b * 255).toString(16)}`;
        return `#${r2.substr(r2.length - 2, 2)}${g2.substr(g2.length - 2, 2)}${b2.substr(b2.length - 2, 2)}`;
    }
    static rgbToHsv(r, g, b, hsv) {
        let h, s, v, delta;
        const min = Math.min(Math.min(r, g), b);
        const max = Math.max(Math.max(r, g), b);
        delta = max - min;
        v = max;
        if (delta == 0) {
            h = -1;
            if (max == 0) s = -1;
            else s = 0;
            hsv[0] = h;
            hsv[1] = s;
            hsv[2] = v;
        }
        s = delta / max;
        if (r == max) h = (g - b) / delta;
        else if (g == max) h = 2 + (b - r) / delta;
        else h = 4 + (r - g) / delta;
        h *= 60;
        if (h < 0) h += 360;
        hsv[0] = h;
        hsv[1] = s;
        hsv[2] = v;
    }
    static hsvToRgb(h, s, v, rgb) {
        let sextant, r, g, b;
        if (s == 0) {
            r = g = b = v;
            rgb[0] = r;
            rgb[1] = g;
            rgb[2] = b;
        }
        let frac, p, q, t;
        h %= 360;
        h /= 60;
        sextant = Math.floor(h);
        frac = h - sextant;
        p = v * (1 - s);
        q = v * (1 - s * frac);
        t = v * (1 - s * (1 - frac));
        switch(sextant){
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            default:
                r = v;
                g = p;
                b = q;
                break;
        }
        rgb[0] = r;
        rgb[1] = g;
        rgb[2] = b;
    }
}
ColorHelper.LUMINANCE = (0, _glMatrix.vec3).fromValues(0.2126, 0.7152, 0.0722);

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iGeIc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CsvHelper", ()=>CsvHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../main.js");
class CsvHelper {
    constructor(core){
        this.QUOTE = '"';
        this.DELIMETER = ",";
        this.LINE_BREAKS = [
            "\n",
            "\r"
        ];
        this._core = core;
    }
    readline(text, row) {
        return this.read(text, row, 1)[0];
    }
    read(text, firstRow = 0, maxRows = Number.MAX_VALUE) {
        const start = window.performance.now();
        const rows = [];
        let rowBuffer = [];
        let row = 0;
        let columnBuffer = "";
        let quoted = false;
        for(let i = 0; i < text.length; i++){
            const char = text.charAt(i);
            if (char == this.QUOTE) {
                if (text.charAt(i + 1) == this.QUOTE) {
                    i++;
                    columnBuffer += this.QUOTE;
                } else quoted = !quoted;
            } else if (quoted) columnBuffer += char;
            else {
                if (char == this.DELIMETER) {
                    rowBuffer.push(columnBuffer);
                    columnBuffer = "";
                } else if (this.LINE_BREAKS.indexOf(char) > -1) {
                    rowBuffer.push(columnBuffer);
                    columnBuffer = "";
                    i++;
                    while(this.LINE_BREAKS.indexOf(text.charAt(i + 1)) > -1)i++;
                    if ((row++) >= firstRow) rows.push(rowBuffer);
                    rowBuffer = [];
                    if (rows.length == maxRows) break;
                } else columnBuffer += char;
            }
        }
        if (columnBuffer != "") rowBuffer.push(columnBuffer);
        if (rowBuffer.length > 0) rows.push(rowBuffer);
        if (maxRows > 1) this._core.log.write((0, _mainJs.LogLevel).info, `csv ${rows.length} rows ${Math.round(window.performance.now() - start)}ms`);
        return rows;
    }
}

},{"../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"li8be":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FacetHelper", ()=>FacetHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../main.js");
class FacetHelper {
    constructor(core){
        this._core = core;
    }
    split1d(ids, facetsX, valuesX, orderedIds, facetIds, offsets, counts) {
        this.split3d(ids, facetsX, undefined, undefined, valuesX, null, null, orderedIds, facetIds, offsets, counts);
    }
    split2d(ids, facetsX, facetsY, valuesX, valuesY, orderedIds, facetIds, offsets, counts) {
        this.split3d(ids, facetsX, facetsY, undefined, valuesX, valuesY, null, orderedIds, facetIds, offsets, counts);
    }
    split3d(ids, facetsX, facetsY, facetsZ, valuesX, valuesY, valuesZ, orderedIds, facetIds, offsets, counts) {
        if (valuesX && facetIds.length != valuesX.length) this._core.log.write((0, _mainJs.LogLevel).warn, "facet helper split1d facetIds should be same length as facetValuesX");
        if (valuesY && facetIds.length != valuesY.length) this._core.log.write((0, _mainJs.LogLevel).warn, "facet helper split1d facetIds should be same length as facetValuesY");
        if (valuesZ && facetIds.length != valuesY.length) this._core.log.write((0, _mainJs.LogLevel).warn, "facet helper split1d facetIds should be same length as facetValuesY");
        const start = window.performance.now();
        if (facetsX === undefined) facetsX = 1;
        if (facetsY === undefined) facetsY = 1;
        if (facetsZ === undefined) facetsZ = 1;
        const maxFacetId = facetsX * facetsY * facetsZ - 1;
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const valueX = valuesX ? valuesX[id] : 0;
            const valueY = valuesY ? valuesY[id] : 0;
            const valueZ = valuesZ ? valuesZ[id] : 0;
            const facetId = valueX + valueY * facetsX + valueZ * facetsX * facetsZ;
            facetIds[id] = facetId;
            if (facetId > maxFacetId) this._core.log.write((0, _mainJs.LogLevel).warn, "facet overflow");
            counts[facetId]++;
        }
        let offset = 0;
        for(let i1 = 0; i1 < offsets.length; i1++){
            const count = counts[i1];
            offsets[i1] = offset;
            offset += count;
        }
        const tempOffsets = new Uint32Array(offsets);
        for(let i2 = 0; i2 < ids.length; i2++){
            const id1 = ids[i2];
            const facetId1 = facetIds[id1];
            offset = tempOffsets[facetId1]++;
            orderedIds[offset] = id1;
        }
        this._core.log.write((0, _mainJs.LogLevel).info, `facet split ${Math.round(window.performance.now() - start)}ms`);
    }
    wrap1d(ids, values, columns, coordsX, coordsY) {
        const start = window.performance.now();
        let rows = 0;
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const value = values[id];
            coordsX[id] = value % columns;
            const row = Math.floor(value / columns);
            coordsY[id] = row;
            rows = Math.max(row, rows);
        }
        this._core.log.write((0, _mainJs.LogLevel).info, `facet wrap ${Math.round(window.performance.now() - start)}ms`);
        return rows + 1;
    }
}

},{"../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"f3yhQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HexHelper", ()=>HexHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mainJs = require("../main.js");
var _angleJs = require("./angle.js");
class HexHelper {
    static width(size, orientation) {
        if (orientation == (0, _mainJs.HexOrientation).pointyTop) return (0, _constantsJs.Constants).ROOT_THREE * size;
        else return 2 * size;
    }
    static height(size, orientation) {
        if (orientation == (0, _mainJs.HexOrientation).pointyTop) return 2 * size;
        else return (0, _constantsJs.Constants).ROOT_THREE * size;
    }
    static pointyHexCorner(center, size, i, position) {
        const angle = (0, _angleJs.AngleHelper).degreesToRadians(60 * i - 30);
        position[0] = center[0] + size * Math.cos(angle);
        position[1] = center[1] + size * Math.sin(angle);
    }
    static cubeToAxial(cube, hex) {
        hex[0] = cube[0];
        hex[1] = cube[2];
    }
    static axialToCube(hex, cube) {
        const x = hex[0];
        const z = hex[1];
        const y = -x - z;
        cube[0] = x;
        cube[1] = y;
        cube[2] = z;
    }
    static cubeToOddr(cube, hex) {
        const col = cube[0] + (cube[2] - (cube[2] & 1)) / 2;
        const row = cube[2];
        hex[0] = col;
        hex[1] = row;
    }
    static oddrToCube(hex, cube) {
        const x = hex[0] - (hex[1] - (hex[1] & 1)) / 2;
        const z = hex[1];
        const y = -x - z;
        cube[0] = x;
        cube[1] = y;
        cube[2] = z;
    }
    static pointyHexToPixel(hex, size, point) {
        point[0] = size * ((0, _constantsJs.Constants).ROOT_THREE * hex[0] + (0, _constantsJs.Constants).ROOT_THREE / 2 * hex[1]);
        point[1] = size * (1.5 * hex[1]);
    }
    static pixelToPointyHex(point, size, hex) {
        hex[0] = ((0, _constantsJs.Constants).ROOT_THREE / 3 * point[0] - 1 / 3 * point[1]) / size;
        hex[1] = 2 / 3 * point[1] / size;
        this.hexRound(hex, hex);
    }
    static hexRound(hex, hexRound) {
        const cube = this._vec3;
        this.axialToCube(hex, cube);
        this.cubeRound(cube, cube);
        this.cubeToAxial(cube, hexRound);
    }
    static cubeRound(cube, cubeRound) {
        let rx = Math.round(cube[0]);
        let ry = Math.round(cube[1]);
        let rz = Math.round(cube[2]);
        const x_diff = Math.abs(rx - cube[0]);
        const y_diff = Math.abs(ry - cube[1]);
        const z_diff = Math.abs(rz - cube[2]);
        if (x_diff > y_diff && x_diff > z_diff) rx = -ry - rz;
        else if (y_diff > z_diff) ry = -rx - rz;
        else rz = -rx - ry;
        cubeRound[0] = rx;
        cubeRound[1] = ry;
        cubeRound[2] = rz;
    }
}
HexHelper._vec3 = (0, _glMatrix.vec3).create();

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../main.js":"2JYph","./angle.js":"3PBRj","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jmnd9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HexBinHelper", ()=>HexBinHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mainJs = require("../main.js");
var _hexJs = require("./hex.js");
class HexBinHelper {
    static bin(options) {
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? options.ids.length : options.count;
        const width = (options.maxValueX - options.minValueX) / options.binsX;
        const minValueX = options.minValueX - width / 2;
        const binsX = options.binsX + 1;
        const size = width / (0, _constantsJs.Constants).ROOT_THREE;
        const height = 2 * size;
        const heightBetweenCenters = 3 * height / 4;
        const binsY = Math.ceil((options.maxValueY - options.minValueY) / heightBetweenCenters) + 1;
        const minValueY = options.minValueY;
        const minQ = -Math.floor(binsY / 2);
        const maxBins = (binsX - minQ) * binsY;
        const binCounts = new Float64Array(maxBins);
        const binLookup = new Uint32Array(maxBins);
        const point = (0, _glMatrix.vec2).create();
        const hex = (0, _glMatrix.vec2).create();
        let nonEmptyBins = 0;
        let minCount = Number.MAX_VALUE;
        let maxCount = -Number.MAX_VALUE;
        for(let i = 0; i < count; i++){
            const id = options.ids[i + offset];
            point[0] = options.valuesX[id] - minValueX;
            point[1] = options.valuesY[id] - minValueY;
            (0, _hexJs.HexHelper).pixelToPointyHex(point, size, hex);
            const q = hex[0] - minQ;
            const r = hex[1];
            const binId = q + r * (binsX - minQ);
            if (binCounts[binId] == 0) {
                binLookup[binId] = nonEmptyBins;
                nonEmptyBins++;
            }
            binCounts[binId]++;
            options.binIds[id] = binId;
            minCount = Math.min(minCount, binCounts[binId]);
            maxCount = Math.max(maxCount, binCounts[binId]);
        }
        const positionsX = new Float64Array(nonEmptyBins);
        const positionsY = new Float64Array(nonEmptyBins);
        const counts = new Uint32Array(nonEmptyBins);
        const lookup = {};
        for(let i1 = 0; i1 < maxBins; i1++){
            const count1 = binCounts[i1];
            if (count1 > 0) {
                const index = binLookup[i1];
                lookup[i1] = index;
                counts[index] = count1;
                const q1 = i1 % (binsX - minQ);
                const r1 = Math.floor(i1 / (binsX - minQ));
                hex[0] = q1 + minQ;
                hex[1] = r1;
                (0, _hexJs.HexHelper).pointyHexToPixel(hex, size, point);
                positionsX[index] = point[0] + minValueX;
                positionsY[index] = point[1] + minValueY;
            }
        }
        const result = {
            binIds: options.binIds,
            positionsX: positionsX,
            positionsY: positionsY,
            counts: counts,
            minCount: minCount,
            maxCount: maxCount,
            orientation: (0, _mainJs.HexOrientation).pointyTop,
            size: size,
            lookup: lookup,
            binsY: binsY
        };
        return result;
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../main.js":"2JYph","./hex.js":"f3yhQ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iPoNF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LineHelper", ()=>LineHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../main.js");
class LineHelper {
    constructor(core){
        this._core = core;
    }
    connect(orderedIds, series, toIds, offset = 0, count = orderedIds.length) {
        const start = window.performance.now();
        const lines = new Set();
        const lookup = {};
        for(let i = offset; i < count; i++){
            const id = orderedIds[i + offset];
            const value = series[id];
            const fromId = lookup[value];
            if (fromId != null) {
                toIds[fromId] = id;
                lines.add(value);
            }
            lookup[value] = id;
            toIds[id] = id;
        }
        this._core.log.write((0, _mainJs.LogLevel).info, `${lines.size} lines connected ${Math.round(window.performance.now() - start)}ms`);
        return lines.size;
    }
}

},{"../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aNtNZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MercatorHelper", ()=>MercatorHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mathJs = require("./math.js");
var _angleJs = require("./angle.js");
var _constantsJs = require("../constants.js");
class MercatorHelper {
    static project(longitude, latitude, xy) {
        const x = longitude / 180;
        latitude = (0, _mathJs.MathHelper).clamp(latitude, this.minLatitude, this.maxLatitude);
        latitude = (0, _angleJs.AngleHelper).degreesToRadians(latitude);
        const sinLatitude = Math.sin(latitude);
        let y = Math.log((1 + sinLatitude) / (1 - sinLatitude)) / 2;
        y = (0, _mathJs.MathHelper).clamp(y / Math.PI, this.minY, this.maxY);
        xy[0] = x;
        xy[1] = y;
    }
    static unproject(x, y, lonLat) {
        const longitude = x * 180;
        y *= Math.PI;
        let latitude = (0, _constantsJs.Constants).PI_OVER_TWO - 2 * Math.atan(Math.exp(-y));
        latitude = (0, _angleJs.AngleHelper).radiansToDegrees(latitude);
        lonLat[0] = longitude;
        lonLat[1] = latitude;
    }
}
MercatorHelper.minLatitude = -85.05112878;
MercatorHelper.maxLatitude = 85.05112878;
MercatorHelper.minLongitude = -180;
MercatorHelper.maxLongitude = 180;
MercatorHelper.minX = -1;
MercatorHelper.minY = -1;
MercatorHelper.maxX = 1;
MercatorHelper.maxY = 1;

},{"./math.js":"jeH35","./angle.js":"3PBRj","../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cRZ7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PaletteHelper", ()=>PaletteHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
class PaletteHelper {
    static resample(colorsIn, divisionsOut, reverse) {
        const divisionsIn = colorsIn.length / 3;
        const colorsOut = new Uint8Array(divisionsOut * 4);
        for(let i = 0; i < divisionsOut; i++){
            const positionOut = (i + 0.5) / divisionsOut;
            const positionIn = positionOut * (divisionsIn - 1);
            const stepIn = Math.floor(positionIn);
            const fractIn = positionIn - stepIn;
            const j = reverse ? divisionsOut - i - 1 : i;
            colorsOut[j * 4] = (0, _mathJs.MathHelper).lerp(colorsIn[stepIn * 3], colorsIn[(stepIn + 1) * 3], fractIn);
            colorsOut[j * 4 + 1] = (0, _mathJs.MathHelper).lerp(colorsIn[stepIn * 3 + 1], colorsIn[(stepIn + 1) * 3 + 1], fractIn);
            colorsOut[j * 4 + 2] = (0, _mathJs.MathHelper).lerp(colorsIn[stepIn * 3 + 2], colorsIn[(stepIn + 1) * 3 + 2], fractIn);
            colorsOut[j * 4 + 3] = 255;
        }
        return colorsOut;
    }
    static truncate(colorsIn, divisionsOut, reverse) {
        const divisionsIn = colorsIn.length / 3;
        const colorsOut = new Uint8Array(divisionsOut * 4);
        for(let i = 0; i < Math.min(divisionsIn, divisionsOut); i++){
            const j = reverse ? divisionsOut - i - 1 : i;
            colorsOut[j * 4] = colorsIn[i * 3];
            colorsOut[j * 4 + 1] = colorsIn[i * 3 + 1];
            colorsOut[j * 4 + 2] = colorsIn[i * 3 + 2];
            colorsOut[j * 4 + 3] = 255;
        }
        return colorsOut;
    }
    static resampleStops(stops, divisions, reverse) {
        const colorsOut = new Uint8Array(divisions * 4);
        let from = 0;
        let to = 0;
        for(let i = 0; i < divisions; i++){
            const positionOut = (i + 0.5) / divisions;
            while(stops[from].position < positionOut && from < stops.length - 1)from++;
            from = Math.max(from - 1, 0);
            to = Math.min(from + 1, stops.length - 1);
            const fromStop = stops[from];
            const toStop = stops[to];
            const fract = from == to ? 0 : (positionOut - fromStop.position) / (toStop.position - fromStop.position);
            const j = reverse ? divisions - i - 1 : i;
            colorsOut[j * 4] = (0, _mathJs.MathHelper).lerp(fromStop.r, toStop.r, fract);
            colorsOut[j * 4 + 1] = (0, _mathJs.MathHelper).lerp(fromStop.g, toStop.g, fract);
            colorsOut[j * 4 + 2] = (0, _mathJs.MathHelper).lerp(fromStop.b, toStop.b, fract);
            colorsOut[j * 4 + 3] = 255;
        }
        return colorsOut;
    }
    static lerpRgb(from, to, divisions) {
        const colors = new Uint8Array(divisions * 4);
        for(let i = 0; i < divisions; i++){
            const amount = i / (divisions - 1);
            colors[i * 4] = (0, _mathJs.MathHelper).lerp(from[0], to[0], amount);
            colors[i * 4 + 1] = (0, _mathJs.MathHelper).lerp(from[1], to[1], amount);
            colors[i * 4 + 2] = (0, _mathJs.MathHelper).lerp(from[2], to[2], amount);
            colors[i * 4 + 3] = 0xff;
        }
        return colors;
    }
    static lerpHsv(from, to, divisions) {
        const colors = new Uint8Array(divisions * 4);
        for(let i = 0; i < divisions; i++){
            const amount = i / (divisions - 1);
            const h = (0, _mathJs.MathHelper).lerp(from[0], to[0], amount);
            const s = (0, _mathJs.MathHelper).lerp(from[1], to[1], amount);
            const v = (0, _mathJs.MathHelper).lerp(from[2], to[2], amount);
            (0, _colorJs.ColorHelper).hsvToRgb(h, s, v, PaletteHelper._rgb);
            colors[i * 4] = PaletteHelper._rgb[0] * 0xff;
            colors[i * 4 + 1] = PaletteHelper._rgb[1] * 0xff;
            colors[i * 4 + 2] = PaletteHelper._rgb[2] * 0xff;
            colors[i * 4 + 3] = 0xff;
        }
        return colors;
    }
}
PaletteHelper._rgb = (0, _glMatrix.vec3).create();

},{"gl-matrix":"3mrln","./color.js":"1Q6NY","./math.js":"jeH35","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cGK6q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "PathHelper", ()=>PathHelper);
class PathHelper {
    static getFilenameWithoutExtension(path) {
        const dot = path.lastIndexOf(".");
        if (dot == -1) return path;
        else {
            const start = path.lastIndexOf("/") == -1 ? 0 : path.lastIndexOf("/") + 1;
            return path.substring(start, dot);
        }
    }
    static getExtension(path) {
        const dot = path.lastIndexOf(".");
        if (dot == -1 || dot == path.length - 1) return null;
        else return path.substring(dot + 1, path.length);
    }
    static getFilename(path) {
        if (path.lastIndexOf("/") == -1) return path;
        else {
            const start = path.lastIndexOf("/") + 1;
            return path.substring(start, path.length);
        }
    }
    static getPath(path) {
        if (path.lastIndexOf("/") == -1) return "";
        else return path.substring(0, path.lastIndexOf("/"));
    }
    static combine(first, second) {
        const seperator = first.lastIndexOf("/") == first.length - 1;
        if (second.indexOf("/") == 0) {
            if (seperator) return first.substring(0, first.length - 1) + second;
            else return first + second;
        } else {
            if (seperator) return first + second;
            else return first + "/" + second;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gb9EP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TableHelper", ()=>TableHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../main.js");
var _tableJs = require("../tables/table.js");
class TableHelper {
    constructor(core){
        this._core = core;
    }
    compatibleTypes(data, firstRow = 0, maxRows = Number.MAX_VALUE) {
        const start = window.performance.now();
        const types = [];
        const integers = [];
        let values = data[firstRow];
        let parsedFloat, parsedDate;
        for(let i = 0; i < values.length; i++){
            const value = values[i];
            parsedFloat = Number(value);
            parsedDate = Date.parse(value);
            let integer = false;
            let type;
            if (!isNaN(parsedFloat)) {
                type = (0, _tableJs.ColumnType).float;
                integer = Number.isSafeInteger(parsedFloat);
            } else if (!isNaN(parsedDate)) type = (0, _tableJs.ColumnType).date;
            else type = (0, _tableJs.ColumnType).string;
            types.push(type);
            integers.push(integer);
        }
        for(let i1 = firstRow + 1; i1 < Math.min(data.length, firstRow + maxRows); i1++){
            values = data[i1];
            for(let j = 0; j < values.length; j++)if (types[j] != (0, _tableJs.ColumnType).string) {
                const value1 = values[j];
                parsedFloat = Number(value1);
                if (types[j] == (0, _tableJs.ColumnType).float) {
                    if (isNaN(parsedFloat)) {
                        types[j] = (0, _tableJs.ColumnType).string;
                        integers[j] = false;
                    } else if (integers[j]) integers[j] = Number.isSafeInteger(parsedFloat);
                } else if (types[j] == (0, _tableJs.ColumnType).date) {
                    parsedDate = Date.parse(value1);
                    if (isNaN(parsedDate)) types[j] = (0, _tableJs.ColumnType).string;
                }
            }
        }
        const compatibleTypes = [];
        for(let i2 = 0; i2 < types.length; i2++){
            let compatible = types[i2] | (0, _tableJs.ColumnType).string;
            if (integers[i2]) compatible |= (0, _tableJs.ColumnType).integer;
            compatibleTypes.push(compatible);
        }
        this._core.log.write((0, _mainJs.LogLevel).info, `compatible types ${Math.round(window.performance.now() - start)}ms`);
        return compatibleTypes;
    }
    inferTypes(data, firstRow = 0, maxRows = Number.MAX_VALUE) {
        const columnTypes = [];
        const compatibleTypes = this.compatibleTypes(data, firstRow, maxRows);
        for(let i = 0; i < compatibleTypes.length; i++){
            let columnType;
            const compatibleType = compatibleTypes[i];
            if (compatibleType & (0, _tableJs.ColumnType).integer) columnType = (0, _tableJs.ColumnType).integer;
            else if (compatibleType & (0, _tableJs.ColumnType).float) columnType = (0, _tableJs.ColumnType).float;
            else if (compatibleType & (0, _tableJs.ColumnType).date) columnType = (0, _tableJs.ColumnType).date;
            else columnType = (0, _tableJs.ColumnType).string;
            columnTypes.push(columnType);
        }
        return columnTypes;
    }
}

},{"../main.js":"2JYph","../tables/table.js":"bOs3e","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bOs3e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Table", ()=>Table);
parcelHelpers.export(exports, "ColumnType", ()=>ColumnType);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _filterJs = require("./filter.js");
class Table {
    constructor(core, headings, data, columnTypes){
        this._core = core;
        this._headings = headings;
        this._data = data;
        this._columnTypes = columnTypes;
        this._numericValues = Array(columnTypes.length).fill(null);
        const indices = new Uint32Array(data.length);
        for(let i = 0; i < indices.length; i++)indices[i] = i;
        this._all = new (0, _filterJs.Filter)(core, indices, data, headings, columnTypes, this._numericValues);
        this._isInitialized = true;
    }
    get headings() {
        return this._headings;
    }
    get all() {
        return this._all;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get filter() {
        return this._filter;
    }
    set filter(value) {
        if (this._filter !== value) {
            this._filter = value;
            if (this.filterChangedCallback) this.filterChangedCallback();
        }
    }
    getColumnType(column) {
        return this._columnTypes[column];
    }
    isColumnDiscrete(column) {
        return (this._columnTypes[column] & ColumnType.discrete) > 0;
    }
    isColumnNumeric(column) {
        return (this._columnTypes[column] & ColumnType.numeric) > 0;
    }
    isColumnContinuous(column) {
        return (this._columnTypes[column] & ColumnType.continuous) > 0;
    }
    createFilter(ids) {
        return new (0, _filterJs.Filter)(this._core, ids, this._data, this._headings, this._columnTypes, this._numericValues);
    }
}
const ColumnType = {
    none: 0,
    float: 1,
    integer: 2,
    string: 4,
    date: 8,
    continuous: 9,
    discrete: 6,
    numeric: 11
};

},{"./filter.js":"h1ENP","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"h1ENP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Filter", ()=>Filter);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../main.js");
var _tableJs = require("./table.js");
class Filter {
    constructor(core, ids, data, headings, columnTypes, numericValues){
        this._core = core;
        this._ids = ids;
        this._data = data;
        this._headings = headings;
        this._columnTypes = columnTypes;
        this._numericValues = numericValues;
        this._stringValues = Array(columnTypes.length).fill(null);
        this._hasMinMaxValues = Array(columnTypes.length).fill(false);
        this._minValues = Array(columnTypes.length).fill(0);
        this._maxValues = Array(columnTypes.length).fill(0);
        this._distinctStrings = Array(columnTypes.length).fill(null);
        this._orderedIds = Array(columnTypes.length).fill(null);
        this._orderedValues = Array(columnTypes.length).fill(null);
    }
    get ids() {
        return this._ids;
    }
    columnValues(column) {
        if (this._columnTypes[column] == (0, _tableJs.ColumnType).string) return this._createStringValues(column);
        else return this._createNumericValues(column);
    }
    minValue(column) {
        this._createMinMaxValues(column);
        return this._minValues[column];
    }
    maxValue(column) {
        this._createMinMaxValues(column);
        return this._maxValues[column];
    }
    distinctStrings(column) {
        if (this._columnTypes[column] == (0, _tableJs.ColumnType).string) {
            this._createStringValues(column);
            return this._distinctStrings[column];
        } else return null;
    }
    toJSON(ids, columns) {
        const rows = [];
        for(let i = 0; i < ids.length; i++){
            const rowIndex = ids[i];
            const row = {};
            for(let j = 0; j < columns.length; j++){
                const columnIndex = columns[j];
                const heading = this._headings[columnIndex].replace(/\s/g, "");
                switch(this._columnTypes[columnIndex]){
                    case (0, _tableJs.ColumnType).date:
                    case (0, _tableJs.ColumnType).string:
                        row[heading] = this._data[rowIndex][columnIndex];
                        break;
                    case (0, _tableJs.ColumnType).integer:
                    case (0, _tableJs.ColumnType).float:
                        const numericValues = this._createNumericValues(columnIndex);
                        row[heading] = numericValues[rowIndex];
                        break;
                }
            }
            rows.push(row);
        }
        return JSON.stringify(rows);
    }
    orderedIds(column) {
        if (!this._orderedIds[column]) {
            const start = window.performance.now();
            const orderedIds = new Uint32Array(this._ids);
            const values = this._columnTypes[column] == (0, _tableJs.ColumnType).string ? this._createStringValues(column) : this._createNumericValues(column);
            orderedIds.sort(function(a, b) {
                return values[a] - values[b];
            });
            this._orderedIds[column] = orderedIds;
            this._core.log.write((0, _mainJs.LogLevel).info, `ordered ids ${column} ${Math.round(window.performance.now() - start)}ms`);
        }
        return this._orderedIds[column];
    }
    orderedValues(column) {
        if (!this._orderedValues[column]) {
            const start = window.performance.now();
            const values = this._columnTypes[column] == (0, _tableJs.ColumnType).string ? this._createStringValues(column) : this._createNumericValues(column);
            const orderedIds = this.orderedIds(column);
            const orderedValues = new Float64Array(this._ids.length);
            for(let i = 0; i < this._ids.length; i++)orderedValues[i] = values[orderedIds[i]];
            this._orderedValues[column] = orderedValues;
            this._core.log.write((0, _mainJs.LogLevel).info, `ordered values ${column} ${Math.round(window.performance.now() - start)}ms`);
        }
        return this._orderedValues[column];
    }
    distinctStringsOrdered(ids, column, stringValues) {
        if (this._columnTypes[column] == (0, _tableJs.ColumnType).string) {
            const distinctStrings = [];
            const distinctStringValues = {};
            const set = new Set();
            for(let i = 0; i < ids.length; i++){
                const id = ids[i];
                const string = this._data[id][column];
                let value;
                if (!set.has(string)) {
                    distinctStrings.push(string);
                    value = set.size;
                    distinctStringValues[string] = value;
                    set.add(string);
                } else value = distinctStringValues[string];
                stringValues[id] = value;
            }
            return distinctStrings;
        } else return null;
    }
    _createMinMaxValues(column) {
        if (!this._hasMinMaxValues[column]) {
            const type = this._columnTypes[column];
            let min, max;
            if (type == (0, _tableJs.ColumnType).string) {
                this._createStringValues(column);
                min = 0;
                max = this._distinctStrings[column].length - 1;
            } else {
                const numericValues = this._createNumericValues(column);
                min = Number.MAX_VALUE;
                max = -Number.MAX_VALUE;
                for(let i = 0; i < this._ids.length; i++){
                    const id = this._ids[i];
                    const value = numericValues[id];
                    min = Math.min(min, value);
                    max = Math.max(max, value);
                }
            }
            this._minValues[column] = min;
            this._maxValues[column] = max;
            this._hasMinMaxValues[column] = true;
        }
    }
    _createNumericValues(column) {
        if (!this._numericValues[column]) {
            const numericValues = new Float64Array(this._data.length);
            const type = this._columnTypes[column];
            let min = Number.MAX_VALUE;
            let max = -Number.MAX_VALUE;
            if (type == (0, _tableJs.ColumnType).float) for(let i = 0; i < this._data.length; i++){
                const value = parseFloat(this._data[i][column]);
                min = Math.min(min, value);
                max = Math.max(max, value);
                numericValues[i] = value;
            }
            else if (type == (0, _tableJs.ColumnType).integer) for(let i1 = 0; i1 < this._data.length; i1++){
                const value1 = parseInt(this._data[i1][column]);
                min = Math.min(min, value1);
                max = Math.max(max, value1);
                numericValues[i1] = value1;
            }
            else if (type == (0, _tableJs.ColumnType).date) for(let i2 = 0; i2 < this._data.length; i2++){
                const value2 = Date.parse(this._data[i2][column]);
                min = Math.min(min, value2);
                max = Math.max(max, value2);
                numericValues[i2] = value2;
            }
            this._minValues[column] = min;
            this._maxValues[column] = max;
            this._hasMinMaxValues[column] = true;
            this._numericValues[column] = numericValues;
        }
        return this._numericValues[column];
    }
    _createStringValues(column) {
        if (!this._stringValues[column]) {
            this._stringValues[column] = new Float64Array(this._data.length);
            this._distinctStrings[column] = this.distinctStringsOrdered(this._ids, column, this._stringValues[column]);
            this._minValues[column] = 0;
            this._maxValues[column] = this._distinctStrings[column].length - 1;
            this._hasMinMaxValues[column] = true;
        }
        return this._stringValues[column];
    }
}

},{"../main.js":"2JYph","./table.js":"bOs3e","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eZ0Tk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextureHelper", ()=>TextureHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mathJs = require("./math.js");
class TextureHelper {
    static create(gl, width, height, format, type, filter, bytes, internalFormat = format) {
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);
        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, bytes);
        return texture;
    }
    static fromImage(gl, image, mipmaps, filter) {
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        if (mipmaps && (0, _mathJs.MathHelper).isPowerOf2(image.width) && (0, _mathJs.MathHelper).isPowerOf2(image.height)) gl.generateMipmap(gl.TEXTURE_2D);
        else {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);
        }
        gl.bindTexture(gl.TEXTURE_2D, null);
        return texture;
    }
    static cubemapFromImages(gl, images) {
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
        const targets = [
            gl.TEXTURE_CUBE_MAP_POSITIVE_X,
            gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
            gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
            gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
        ];
        for(let i = 0; i < 6; i++){
            gl.texImage2D(targets[i], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, images[i]);
            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        }
        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
        return texture;
    }
}

},{"./math.js":"jeH35","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4jVgi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "SetHelper", ()=>SetHelper);
class SetHelper {
    static new(a, b) {
        a.clear();
        for (let item of b)a.add(item);
    }
    static union(a, b) {
        for (let item of b)a.add(item);
    }
    static intersection(a, b) {
        const c = new Set(b);
        for (let item of a)if (!c.has(item)) a.delete(item);
        for (let item1 of b)if (!a.has(item1)) a.delete(item1);
    }
    static symmetricDifference(a, b) {
        for (let item of b)if (a.has(item)) a.delete(item);
        else a.add(item);
    }
    static difference(a, b) {
        for (let item of b)a.delete(item);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"98bFy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VectorHelper", ()=>VectorHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
class VectorHelper {
    static orthonormalBasis(n, b1, b2) {
        if (n[0] > 0.9) (0, _glMatrix.vec3).copy(b1, (0, _constantsJs.Constants).VECTOR3_UNITY);
        else (0, _glMatrix.vec3).copy(b1, (0, _constantsJs.Constants).VECTOR3_UNITX);
        (0, _glMatrix.vec3).scaleAndAdd(b1, b1, n, -(0, _glMatrix.vec3).dot(b1, n));
        (0, _glMatrix.vec3).normalize(b1, b1);
        (0, _glMatrix.vec3).cross(b2, n, b1);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kOIH4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Bar", ()=>(0, _barJs.Bar));
parcelHelpers.export(exports, "Cube", ()=>(0, _cubeJs.Cube));
parcelHelpers.export(exports, "Line", ()=>(0, _lineJs.Line));
parcelHelpers.export(exports, "Tree", ()=>(0, _treeJs.Tree));
parcelHelpers.export(exports, "PythagorasTree", ()=>(0, _treeJs.PythagorasTree));
parcelHelpers.export(exports, "Scatter", ()=>(0, _scatterJs.Scatter));
parcelHelpers.export(exports, "Sheet", ()=>(0, _sheetJs.Sheet));
parcelHelpers.export(exports, "SquarifiedTreeMap", ()=>(0, _treemapJs.SquarifiedTreeMap));
parcelHelpers.export(exports, "CubifiedTreeMap", ()=>(0, _treemapJs.CubifiedTreeMap));
parcelHelpers.export(exports, "Stack", ()=>(0, _stackJs.Stack));
parcelHelpers.export(exports, "StackTreeMap", ()=>(0, _stackJs.StackTreeMap));
var _barJs = require("./bar.js");
var _cubeJs = require("./cube.js");
var _lineJs = require("./line.js");
var _treeJs = require("./tree.js");
var _scatterJs = require("./scatter.js");
var _sheetJs = require("./sheet.js");
var _treemapJs = require("./treemap.js");
var _stackJs = require("./stack.js");

},{"./bar.js":"dZaUt","./cube.js":"6H6i2","./line.js":"keISU","./tree.js":"bqfJq","./scatter.js":"4M4pk","./sheet.js":"ftbZk","./treemap.js":"gvOlx","./stack.js":"eLX7C","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dZaUt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Bar", ()=>Bar);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class Bar extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const positionScalingX = options.positionScalingX === undefined ? 1 : options.positionScalingX;
        const positionScalingZ = options.positionScalingZ === undefined ? 1 : options.positionScalingZ;
        const heightScaling = options.heightScaling === undefined ? 1 : options.heightScaling;
        const paddingX = options.paddingX == undefined ? 0 : options.paddingX * positionScalingX;
        const paddingZ = options.paddingZ == undefined ? 0 : options.paddingZ * positionScalingZ;
        if (!this._positions || this._positions.length < buffer.length * 3) {
            this._positions = new Float32Array(buffer.length * 3);
            this._sizes = new Float32Array(buffer.length * 3);
        }
        this.minLayoutBoundsX = Number.MAX_VALUE;
        this.minLayoutBoundsY = Number.MAX_VALUE;
        this.minLayoutBoundsZ = Number.MAX_VALUE;
        this.maxLayoutBoundsX = -Number.MAX_VALUE;
        this.maxLayoutBoundsY = -Number.MAX_VALUE;
        this.maxLayoutBoundsZ = -Number.MAX_VALUE;
        let positionX, positionY, positionZ;
        let sizeX, sizeY, sizeZ;
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            const height = options.heights ? options.heights[id] * heightScaling : heightScaling;
            positionX = options.positionsX ? options.positionsX[id] * positionScalingX : 0;
            positionY = height / 2;
            positionZ = options.positionsZ ? options.positionsZ[id] * positionScalingZ : 0;
            this._positions[index * 3] = positionX;
            this._positions[index * 3 + 1] = positionY;
            this._positions[index * 3 + 2] = positionZ;
            sizeX = (options.sizeX === undefined ? options.sizesX ? options.sizesX[id] : 1 : options.sizeX) * positionScalingX;
            sizeY = Math.abs(height);
            sizeZ = (options.sizeZ === undefined ? options.sizesZ ? options.sizesZ[id] : 1 : options.sizeZ) * positionScalingZ;
            this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, positionX - sizeX / 2);
            this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, positionY - sizeY / 2);
            this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, positionZ - sizeZ / 2);
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, positionX + sizeX / 2);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, positionY + sizeY / 2);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, positionZ + sizeZ / 2);
            this._sizes[index * 3] = Math.max(sizeX - paddingX, 0);
            this._sizes[index * 3 + 1] = sizeY;
            this._sizes[index * 3 + 2] = Math.max(sizeZ - paddingZ, 0);
        }
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const reverseX = options.reverseX === undefined ? false : options.reverseX;
        const reverseZ = options.reverseZ === undefined ? false : options.reverseZ;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        this._updateModelBounds(options);
        (0, _glMatrix.quat).rotationTo(_quat, this._core.config.identityRotation, (0, _constantsJs.Constants).VECTOR3_UNITY);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            let positionX = this._positions[index * 3];
            let positionY = this._positions[index * 3 + 1];
            let positionZ = this._positions[index * 3 + 2];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = reverseX ? (this.modelOriginX - positionX) * this._boundsScaling : (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = reverseZ ? (this.modelOriginZ - positionZ) * this._boundsScaling : (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = this._sizes[index * 3] * this._boundsScaling;
            _vec4[1] = this._sizes[index * 3 + 1] * this._boundsScaling;
            _vec4[2] = this._sizes[index * 3 + 2] * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                if (options.colors1) {
                    const color1 = (0, _mathJs.MathHelper).normalize(options.colors1[id], minColor, maxColor, 0, 1);
                    (0, _glMatrix.vec2).set(_vec2, color, color1);
                } else (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6H6i2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cube", ()=>Cube);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class Cube extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const side = options.side === undefined ? Math.ceil(Math.cbrt(count)) : options.side;
        if (!this._positions || this._positions.length < buffer.length * 3) this._positions = new Float32Array(buffer.length * 3);
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = 0;
        this.maxLayoutBoundsY = 0;
        this.maxLayoutBoundsZ = 0;
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            const y = Math.floor(i / (side * side));
            const z = Math.floor((i - y * side * side) / side);
            const x = i - y * side * side - z * side;
            this._positions[index * 3] = x;
            this._positions[index * 3 + 1] = y;
            this._positions[index * 3 + 2] = z;
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, x);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, y);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, z);
        }
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        const padding = options.padding === undefined ? 0 : options.padding;
        this._updateModelBounds(options);
        const scale = (0, _glMatrix.vec4).fromValues((1 - padding) * this._boundsScaling, (1 - padding) * this._boundsScaling, (1 - padding) * this._boundsScaling, 0);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            _vec3[0] = (this._positions[index * 3] - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (this._positions[index * 3 + 1] - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (this._positions[index * 3 + 2] - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            (0, _vertexJs.UnitVertex).setScale(dataView, index, scale);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, (0, _constantsJs.Constants).QUAT_IDENTITY);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                _vec2[0] = color;
                _vec2[1] = color;
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)} ms`);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"keISU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Line", ()=>Line);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class Line extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, fromIds, toIds, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const positionScalingX = options.positionScalingX === undefined ? 1 : options.positionScalingX;
        const positionScalingY = options.positionScalingY === undefined ? 1 : options.positionScalingY;
        const positionScalingZ = options.positionScalingZ === undefined ? 1 : options.positionScalingZ;
        const sizeScaling = options.sizeScaling === undefined ? 1 : options.sizeScaling;
        const minSize = options.minSize === undefined ? 0 : options.minSize;
        const offsetScaling = options.offsetScaling === undefined ? 1 : options.offsetScaling;
        if (!this._positions || this._positions.length < buffer.length * 3) {
            this._positions = new Float32Array(buffer.length * 3);
            this._sizes = new Float32Array(buffer.length * 3);
            this._rotations = new Float32Array(buffer.length * 4);
        }
        this.minLayoutBoundsX = Number.MAX_VALUE;
        this.minLayoutBoundsY = Number.MAX_VALUE;
        this.minLayoutBoundsZ = Number.MAX_VALUE;
        this.maxLayoutBoundsX = -Number.MAX_VALUE;
        this.maxLayoutBoundsY = -Number.MAX_VALUE;
        this.maxLayoutBoundsZ = -Number.MAX_VALUE;
        const _vec3 = (0, _glMatrix.vec3).create();
        const _quat = (0, _glMatrix.quat).create();
        const direction = (0, _glMatrix.vec3).create();
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const fromId = fromIds[i + offset];
            const toId = toIds[i + offset];
            const index = lookup[id];
            let toPositionX = options.positionsX ? options.positionsX[toId] * positionScalingX : 0;
            let toPositionY = options.positionsY ? options.positionsY[toId] * positionScalingY : 0;
            let toPositionZ = options.positionsZ ? options.positionsZ[toId] * positionScalingZ : 0;
            let fromPositionX = options.positionsX ? options.positionsX[fromId] * positionScalingX : 0;
            let fromPositionY = options.positionsY ? options.positionsY[fromId] * positionScalingY : 0;
            let fromPositionZ = options.positionsZ ? options.positionsZ[fromId] * positionScalingZ : 0;
            if (fromId == toId) {
                this._sizes[index * 3] = 0;
                this._sizes[index * 3 + 1] = 0;
                this._sizes[index * 3 + 2] = 0;
                this._rotations[index * 4] = 0;
                this._rotations[index * 4 + 1] = 0;
                this._rotations[index * 4 + 2] = 0;
                this._rotations[index * 4 + 3] = 1;
            } else {
                direction[0] = toPositionX - fromPositionX;
                direction[1] = toPositionY - fromPositionY;
                direction[2] = toPositionZ - fromPositionZ;
                let length = (0, _glMatrix.vec3).length(direction);
                (0, _glMatrix.vec3).scale(direction, direction, 1 / length);
                (0, _glMatrix.quat).rotationTo(_quat, this._core.config.identityRotation, direction);
                this._rotations[index * 4] = _quat[0];
                this._rotations[index * 4 + 1] = _quat[1];
                this._rotations[index * 4 + 2] = _quat[2];
                this._rotations[index * 4 + 3] = _quat[3];
                if (options.offsets) {
                    const fromOffset = options.offsets[fromId] * offsetScaling / 2;
                    const toOffset = options.offsets[toId] * offsetScaling / 2;
                    toPositionX -= direction[0] * toOffset;
                    toPositionY -= direction[1] * toOffset;
                    toPositionZ -= direction[2] * toOffset;
                    fromPositionX += direction[0] * fromOffset;
                    fromPositionY += direction[1] * fromOffset;
                    fromPositionZ += direction[2] * fromOffset;
                    length = Math.max(length - toOffset - fromOffset, minSize);
                }
                this._sizes[index * 3 + 1] = length;
                if (options.lineSizes) {
                    this._sizes[index * 3] = Math.max(options.lineSizes[id] * sizeScaling, minSize);
                    this._sizes[index * 3 + 2] = Math.max(options.lineSizes[id] * sizeScaling, minSize);
                } else if (options.endSizes) {
                    this._sizes[index * 3] = Math.max(options.endSizes[fromId] * sizeScaling, minSize);
                    this._sizes[index * 3 + 2] = Math.max(options.endSizes[toId] * sizeScaling, minSize);
                } else {
                    this._sizes[index * 3] = sizeScaling;
                    this._sizes[index * 3 + 2] = sizeScaling;
                }
            }
            _vec3[0] = (fromPositionX + toPositionX) / 2;
            _vec3[1] = (fromPositionY + toPositionY) / 2;
            _vec3[2] = (fromPositionZ + toPositionZ) / 2;
            this._positions[index * 3] = _vec3[0];
            this._positions[index * 3 + 1] = _vec3[1];
            this._positions[index * 3 + 2] = _vec3[2];
            this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, fromPositionX);
            this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, fromPositionY);
            this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, fromPositionZ);
            this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, toPositionX);
            this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, toPositionY);
            this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, toPositionZ);
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, fromPositionX);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, fromPositionY);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, fromPositionZ);
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, toPositionX);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, toPositionY);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, toPositionZ);
        }
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, fromIds, toIds, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const endMinColor = options.endMinColor === undefined ? 0 : options.endMinColor;
        const endMaxColor = options.endMaxColor === undefined ? 1 : options.endMaxColor;
        const lineMinColor = options.lineMinColor === undefined ? 0 : options.lineMinColor;
        const lineMaxColor = options.lineMaxColor === undefined ? 1 : options.lineMaxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        this._updateModelBounds(options);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const fromId = fromIds[i + offset];
            const toId = toIds[i + offset];
            const index = lookup[id];
            let positionX = this._positions[index * 3];
            let positionY = this._positions[index * 3 + 1];
            let positionZ = this._positions[index * 3 + 2];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = this._sizes[index * 3] * this._boundsScaling;
            _vec4[1] = this._sizes[index * 3 + 1] * this._boundsScaling;
            _vec4[2] = this._sizes[index * 3 + 2] * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            _quat[0] = this._rotations[index * 4];
            _quat[1] = this._rotations[index * 4 + 1];
            _quat[2] = this._rotations[index * 4 + 2];
            _quat[3] = this._rotations[index * 4 + 3];
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.endColors) {
                const fromColor = (0, _mathJs.MathHelper).normalize(options.endColors[fromId], endMinColor, endMaxColor, 0, 1);
                const toColor = (0, _mathJs.MathHelper).normalize(options.endColors[toId], endMinColor, endMaxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, fromColor, toColor);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else if (options.lineColors) {
                const color = (0, _mathJs.MathHelper).normalize(options.lineColors[id], lineMinColor, lineMaxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bqfJq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PythagorasTree", ()=>PythagorasTree);
parcelHelpers.export(exports, "Tree", ()=>Tree);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _angleJs = require("../helpers/angle.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class PythagorasTree extends (0, _layoutJs.LayoutBase) {
    constructor(core){
        super(core);
        this._vec3 = (0, _glMatrix.vec3).create();
        this._quat = (0, _glMatrix.quat).create();
        this._parentRight = (0, _glMatrix.vec3).create();
        this._parentUp = (0, _glMatrix.vec3).create();
        this._parentForward = (0, _glMatrix.vec3).create();
        this._parentTranslation = (0, _glMatrix.vec3).create();
        this._parentScale = (0, _glMatrix.vec3).create();
        this._parentRotation = (0, _glMatrix.quat).create();
        this._parentTwist = (0, _glMatrix.quat).create();
        this._childRotation = (0, _glMatrix.quat).create();
    }
    get levels() {
        return this._levels;
    }
    get maxLevel() {
        return this._maxLevel;
    }
    get volumes() {
        return this._volumes;
    }
    static calculateTotalVertices(level) {
        return (2 << level) - 1;
    }
    static calculateMaxLevel(vertices) {
        return Math.ceil(Math.log2(vertices + 1)) - 1;
    }
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const scalingX = options.scalingX === undefined ? 1 : options.scalingX;
        const scalingY = options.scalingY === undefined ? 1 : options.scalingY;
        const scalingZ = options.scalingZ === undefined ? 1 : options.scalingZ;
        this._angle = options.angle === undefined ? (0, _angleJs.AngleHelper).degreesToRadians(45) : options.angle;
        this._randomAngle = options.randomAngle === undefined ? 0 : options.randomAngle;
        this._twist = options.twist === undefined ? 0 : options.twist;
        this._randomTwist = options.randomTwist === undefined ? 0 : options.randomTwist;
        if (!this._positions || this._positions.length < buffer.length * 3) {
            this._positions = new Float32Array(buffer.length * 3);
            this._sizes = new Float32Array(buffer.length * 3);
            this._rotations = new Float32Array(buffer.length * 4);
            this._levels = new Uint32Array(buffer.length);
            this._volumes = new Float64Array(buffer.length);
        }
        this._maxLevel = PythagorasTree.calculateMaxLevel(ids.length);
        const lookup = buffer.lookup;
        const id = ids[0];
        const index = lookup[id];
        this._levels[index] = 0;
        this._positions[index * 3] = 0;
        this._positions[index * 3 + 1] = 0;
        this._positions[index * 3 + 2] = 0;
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = 0;
        this.maxLayoutBoundsY = 0;
        this.maxLayoutBoundsZ = 0;
        this._rotations[index * 4] = 0;
        this._rotations[index * 4 + 1] = 0;
        this._rotations[index * 4 + 2] = 0;
        this._rotations[index * 4 + 3] = 1;
        this._sizes[index * 3] = scalingX;
        this._sizes[index * 3 + 1] = scalingY;
        this._sizes[index * 3 + 2] = scalingZ;
        this._volumes[index] = scalingX * scalingY * scalingZ;
        this._count = 1;
        const pseudoRandom = new (0, _mathJs.PseudoRandom)(0);
        this._branch(index, ids, lookup, pseudoRandom);
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${ids.length} vertices ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        this._updateModelBounds(options);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const index = lookup[id];
            _vec3[0] = (this._positions[index * 3] - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (this._positions[index * 3 + 1] - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (this._positions[index * 3 + 2] - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = this._sizes[index * 3] * this._boundsScaling;
            _vec4[1] = this._sizes[index * 3 + 1] * this._boundsScaling;
            _vec4[2] = this._sizes[index * 3 + 2] * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            _quat[0] = this._rotations[index * 4];
            _quat[1] = this._rotations[index * 4 + 1];
            _quat[2] = this._rotations[index * 4 + 2];
            _quat[3] = this._rotations[index * 4 + 3];
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (ids.length - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (ids.length - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${ids.length} vertices ${Math.round(window.performance.now() - start)}ms`);
    }
    _branch(parentIndex, ids, lookup, pseudoRandom) {
        const parentLevel = this._levels[parentIndex];
        if (parentLevel < this._maxLevel && this._count < ids.length) {
            let angle = this._angle + (pseudoRandom.nextFloat() * 2 - 1) * this._randomAngle;
            let twist = this._twist + (pseudoRandom.nextFloat() * 2 - 1) * this._randomTwist;
            angle = (0, _mathJs.MathHelper).clamp(angle, -(0, _constantsJs.Constants).PI_OVER_TWO, (0, _constantsJs.Constants).PI_OVER_TWO);
            twist = (0, _mathJs.MathHelper).clamp(twist, -(0, _constantsJs.Constants).PI_OVER_TWO, (0, _constantsJs.Constants).PI_OVER_TWO);
            this._parentTranslation[0] = this._positions[parentIndex * 3];
            this._parentTranslation[1] = this._positions[parentIndex * 3 + 1];
            this._parentTranslation[2] = this._positions[parentIndex * 3 + 2];
            this._parentRotation[0] = this._rotations[parentIndex * 4];
            this._parentRotation[1] = this._rotations[parentIndex * 4 + 1];
            this._parentRotation[2] = this._rotations[parentIndex * 4 + 2];
            this._parentRotation[3] = this._rotations[parentIndex * 4 + 3];
            this._parentScale[0] = this._sizes[parentIndex * 3];
            this._parentScale[1] = this._sizes[parentIndex * 3 + 1];
            this._parentScale[2] = this._sizes[parentIndex * 3 + 2];
            (0, _glMatrix.vec3).transformQuat(this._parentUp, (0, _constantsJs.Constants).VECTOR3_UNITY, this._parentRotation);
            (0, _glMatrix.quat).setAxisAngle(this._quat, this._parentUp, twist);
            (0, _glMatrix.quat).multiply(this._parentTwist, this._quat, this._parentRotation);
            (0, _glMatrix.vec3).transformQuat(this._parentRight, (0, _constantsJs.Constants).VECTOR3_UNITX, this._parentTwist);
            (0, _glMatrix.vec3).transformQuat(this._parentForward, (0, _constantsJs.Constants).VECTOR3_UNITZ, this._parentTwist);
            const childId1 = ids[this._count++];
            const childIndex1 = lookup[childId1];
            let cos = Math.cos(angle);
            this._sizes[childIndex1 * 3] = this._parentScale[0] * cos;
            this._sizes[childIndex1 * 3 + 1] = this._parentScale[1] * cos;
            this._sizes[childIndex1 * 3 + 2] = this._parentScale[2] * cos;
            (0, _glMatrix.quat).setAxisAngle(this._quat, this._parentForward, angle);
            (0, _glMatrix.quat).multiply(this._childRotation, this._quat, this._parentTwist);
            this._rotations[childIndex1 * 4] = this._childRotation[0];
            this._rotations[childIndex1 * 4 + 1] = this._childRotation[1];
            this._rotations[childIndex1 * 4 + 2] = this._childRotation[2];
            this._rotations[childIndex1 * 4 + 3] = this._childRotation[3];
            const halfparentScaleX = this._parentScale[0] * 0.5;
            const halfparentScaleY = this._parentScale[1] * 0.5;
            this._vec3[0] = this._parentUp[0] * halfparentScaleY * cos + this._parentRight[0] * halfparentScaleX * cos;
            this._vec3[1] = this._parentUp[1] * halfparentScaleY * cos + this._parentRight[1] * halfparentScaleX * cos;
            this._vec3[2] = this._parentUp[2] * halfparentScaleY * cos + this._parentRight[2] * halfparentScaleX * cos;
            (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._quat);
            const childTranslationX = this._parentTranslation[0] + this._vec3[0] + this._parentUp[0] * halfparentScaleY - this._parentRight[0] * halfparentScaleX;
            const childTranslationY = this._parentTranslation[1] + this._vec3[1] + this._parentUp[1] * halfparentScaleY - this._parentRight[1] * halfparentScaleX;
            const childTranslationZ = this._parentTranslation[2] + this._vec3[2] + this._parentUp[2] * halfparentScaleY - this._parentRight[2] * halfparentScaleX;
            this._positions[childIndex1 * 3] = childTranslationX;
            this._positions[childIndex1 * 3 + 1] = childTranslationY;
            this._positions[childIndex1 * 3 + 2] = childTranslationZ;
            this._levels[childIndex1] = parentLevel + 1;
            this._volumes[childIndex1] = this._sizes[childIndex1 * 3] * this._sizes[childIndex1 * 3 + 1] * this._sizes[childIndex1 * 3 + 2];
            this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, childTranslationX);
            this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, childTranslationY);
            this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, childTranslationZ);
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, childTranslationX);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, childTranslationY);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, childTranslationZ);
            if (this._count < ids.length) {
                const childId2 = ids[this._count++];
                const childIndex2 = lookup[childId2];
                cos = Math.cos((0, _constantsJs.Constants).PI_OVER_TWO - angle);
                this._sizes[childIndex2 * 3] = this._parentScale[0] * cos;
                this._sizes[childIndex2 * 3 + 1] = this._parentScale[1] * cos;
                this._sizes[childIndex2 * 3 + 2] = this._parentScale[2] * cos;
                (0, _glMatrix.quat).setAxisAngle(this._quat, this._parentForward, angle - (0, _constantsJs.Constants).PI_OVER_TWO);
                (0, _glMatrix.quat).multiply(this._childRotation, this._quat, this._parentTwist);
                this._rotations[childIndex2 * 4] = this._childRotation[0];
                this._rotations[childIndex2 * 4 + 1] = this._childRotation[1];
                this._rotations[childIndex2 * 4 + 2] = this._childRotation[2];
                this._rotations[childIndex2 * 4 + 3] = this._childRotation[3];
                this._vec3[0] = this._parentUp[0] * halfparentScaleY * cos - this._parentRight[0] * halfparentScaleX * cos;
                this._vec3[1] = this._parentUp[1] * halfparentScaleY * cos - this._parentRight[1] * halfparentScaleX * cos;
                this._vec3[2] = this._parentUp[2] * halfparentScaleY * cos - this._parentRight[2] * halfparentScaleX * cos;
                (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._quat);
                const childTranslationX1 = this._parentTranslation[0] + this._vec3[0] + this._parentUp[0] * halfparentScaleY + this._parentRight[0] * halfparentScaleX;
                const childTranslationY1 = this._parentTranslation[1] + this._vec3[1] + this._parentUp[1] * halfparentScaleY + this._parentRight[1] * halfparentScaleX;
                const childTranslationZ1 = this._parentTranslation[2] + this._vec3[2] + this._parentUp[2] * halfparentScaleY + this._parentRight[2] * halfparentScaleX;
                this._positions[childIndex2 * 3] = childTranslationX1;
                this._positions[childIndex2 * 3 + 1] = childTranslationY1;
                this._positions[childIndex2 * 3 + 2] = childTranslationZ1;
                this._levels[childIndex2] = parentLevel + 1;
                this._volumes[childIndex2] = this._sizes[childIndex2 * 3] * this._sizes[childIndex2 * 3 + 1] * this._sizes[childIndex2 * 3 + 2];
                this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, childTranslationX1);
                this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, childTranslationY1);
                this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, childTranslationZ1);
                this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, childTranslationX1);
                this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, childTranslationY1);
                this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, childTranslationZ1);
                this._branch(childIndex1, ids, lookup, pseudoRandom);
                this._branch(childIndex2, ids, lookup, pseudoRandom);
            }
        }
    }
}
class Tree extends (0, _layoutJs.LayoutBase) {
    constructor(core){
        super(core);
        this._vec3 = (0, _glMatrix.vec3).create();
        this._quat = (0, _glMatrix.quat).create();
        this._childRotation = (0, _glMatrix.quat).create();
        this._parentRight = (0, _glMatrix.vec3).create();
        this._parentUp = (0, _glMatrix.vec3).create();
        this._parentForward = (0, _glMatrix.vec3).create();
        this._parentRotation = (0, _glMatrix.quat).create();
        this._parentTwist = (0, _glMatrix.quat).create();
    }
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const sizeX = options.sizeX === undefined ? 1 : options.sizeX;
        const sizeY = options.sizeY === undefined ? 1 : options.sizeY;
        const sizeZ = options.sizeZ === undefined ? 1 : options.sizeZ;
        this._angle = options.angle === undefined ? (0, _angleJs.AngleHelper).degreesToRadians(45) : options.angle;
        this._randomAngle = options.randomAngle === undefined ? 0 : options.randomAngle;
        this._twist = options.twist === undefined ? 0 : options.twist;
        this._lengthScaling = options.lengthScaling === undefined ? 1 : options.lengthScaling;
        this._thicknessScaling = options.thicknessScaling === undefined ? 1 : options.thicknessScaling;
        this._randomTwist = options.randomTwist === undefined ? 0 : options.randomTwist;
        this._randomSplit = options.randomSplit === undefined ? 0 : options.randomSplit;
        this._randomLengthScaling = options.randomLengthScaling === undefined ? 0 : options.randomLengthScaling;
        this._randomThicknessScaling = options.randomThicknessScaling === undefined ? 0 : options.randomThicknessScaling;
        this._minLength = options.minLength === undefined ? 0 : options.minLength;
        this._minThickness = options.minThickness === undefined ? 0 : options.minThickness;
        if (!this._positions || this._positions.length < buffer.length * 3) {
            this._positions = new Float32Array(buffer.length * 3);
            this._sizes = new Float32Array(buffer.length * 3);
            this._rotations = new Float32Array(buffer.length * 4);
            this._parentRights = new Float32Array(buffer.length * 3);
            this._parentUps = new Float32Array(buffer.length * 3);
            this._parentForwards = new Float32Array(buffer.length * 3);
            this._parentTwists = new Float32Array(buffer.length * 4);
        }
        let rootId;
        const lookup = buffer.lookup;
        const indices = {};
        const children = {};
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const index = lookup[id];
            const parentId = options.parentIds[index];
            const childId = options.childIds[index];
            indices[childId] = index;
            if (children[parentId] === undefined) children[parentId] = [];
            if (parentId == childId) rootId = parentId;
            else children[parentId].push(childId);
        }
        const index1 = indices[rootId];
        this._positions[index1 * 3] = 0;
        this._positions[index1 * 3 + 1] = 0;
        this._positions[index1 * 3 + 2] = 0;
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = 0;
        this.maxLayoutBoundsY = 0;
        this.maxLayoutBoundsZ = 0;
        this._rotations[index1 * 4] = 0;
        this._rotations[index1 * 4 + 1] = 0;
        this._rotations[index1 * 4 + 2] = 0;
        this._rotations[index1 * 4 + 3] = 1;
        this._sizes[index1 * 3] = sizeX;
        this._sizes[index1 * 3 + 1] = sizeY;
        this._sizes[index1 * 3 + 2] = sizeZ;
        const pseudoRandom = new (0, _mathJs.PseudoRandom)(0);
        this._branch(rootId, indices, children, pseudoRandom);
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${ids.length} vertices ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        this._updateModelBounds(options);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const index = lookup[id];
            _vec3[0] = (this._positions[index * 3] - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (this._positions[index * 3 + 1] - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (this._positions[index * 3 + 2] - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = this._sizes[index * 3] * this._boundsScaling;
            _vec4[1] = this._sizes[index * 3 + 1] * this._boundsScaling;
            _vec4[2] = this._sizes[index * 3 + 2] * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            _quat[0] = this._rotations[index * 4];
            _quat[1] = this._rotations[index * 4 + 1];
            _quat[2] = this._rotations[index * 4 + 2];
            _quat[3] = this._rotations[index * 4 + 3];
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (ids.length - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - i / (ids.length - 1) : i / (ids.length - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${ids.length} vertices ${Math.round(window.performance.now() - start)}ms`);
    }
    _branch(parentId, indices, children, pseudoRandom) {
        const childIds = children[parentId];
        const parentIndex = indices[parentId];
        this._parentRotation[0] = this._rotations[parentIndex * 4];
        this._parentRotation[1] = this._rotations[parentIndex * 4 + 1];
        this._parentRotation[2] = this._rotations[parentIndex * 4 + 2];
        this._parentRotation[3] = this._rotations[parentIndex * 4 + 3];
        (0, _glMatrix.vec3).transformQuat(this._parentUp, (0, _constantsJs.Constants).VECTOR3_UNITY, this._parentRotation);
        this._parentUps[parentIndex * 3] = this._parentUp[0];
        this._parentUps[parentIndex * 3 + 1] = this._parentUp[1];
        this._parentUps[parentIndex * 3 + 2] = this._parentUp[2];
        let twist = this._twist + (pseudoRandom.nextFloat() * 2 - 1) * this._randomTwist;
        twist = (0, _mathJs.MathHelper).clamp(twist, -(0, _constantsJs.Constants).PI_OVER_TWO, (0, _constantsJs.Constants).PI_OVER_TWO);
        (0, _glMatrix.quat).setAxisAngle(this._quat, this._parentUp, twist);
        (0, _glMatrix.quat).multiply(this._parentTwist, this._quat, this._parentRotation);
        this._parentTwists[parentIndex * 4] = this._parentTwist[0];
        this._parentTwists[parentIndex * 4 + 1] = this._parentTwist[1];
        this._parentTwists[parentIndex * 4 + 2] = this._parentTwist[2];
        this._parentTwists[parentIndex * 4 + 3] = this._parentTwist[3];
        (0, _glMatrix.vec3).transformQuat(this._parentRight, (0, _constantsJs.Constants).VECTOR3_UNITX, this._parentTwist);
        this._parentRights[parentIndex * 3] = this._parentRight[0];
        this._parentRights[parentIndex * 3 + 1] = this._parentRight[1];
        this._parentRights[parentIndex * 3 + 2] = this._parentRight[2];
        (0, _glMatrix.vec3).transformQuat(this._parentForward, (0, _constantsJs.Constants).VECTOR3_UNITZ, this._parentTwist);
        this._parentForwards[parentIndex * 3] = this._parentForward[0];
        this._parentForwards[parentIndex * 3 + 1] = this._parentForward[1];
        this._parentForwards[parentIndex * 3 + 2] = this._parentForward[2];
        for(let i = 0; i < childIds.length; i++){
            const childId = childIds[i];
            const childIndex = indices[childId];
            const parentScaleX = this._sizes[parentIndex * 3];
            const parentScaleY = this._sizes[parentIndex * 3 + 1];
            const parentScaleZ = this._sizes[parentIndex * 3 + 2];
            this._parentUp[0] = this._parentUps[parentIndex * 3];
            this._parentUp[1] = this._parentUps[parentIndex * 3 + 1];
            this._parentUp[2] = this._parentUps[parentIndex * 3 + 2];
            this._parentTwist[0] = this._parentTwists[parentIndex * 4];
            this._parentTwist[1] = this._parentTwists[parentIndex * 4 + 1];
            this._parentTwist[2] = this._parentTwists[parentIndex * 4 + 2];
            this._parentTwist[3] = this._parentTwists[parentIndex * 4 + 3];
            let lengthScale = this._lengthScaling + (pseudoRandom.nextFloat() * 2.0 - 1.0) * this._randomLengthScaling;
            let thicknessScale = this._thicknessScaling + (pseudoRandom.nextFloat() * 2.0 - 1.0) * this._randomThicknessScaling;
            lengthScale = Math.max(0.01, lengthScale);
            thicknessScale = Math.max(0.01, thicknessScale);
            this._sizes[childIndex * 3] = Math.max(parentScaleX * thicknessScale, this._minThickness);
            this._sizes[childIndex * 3 + 1] = Math.max(parentScaleY * lengthScale, this._minLength);
            this._sizes[childIndex * 3 + 2] = Math.max(parentScaleZ * thicknessScale, this._minThickness);
            let split = (0, _constantsJs.Constants).TWO_PI * i / childIds.length + (pseudoRandom.nextFloat() * 2 - 1) * this._randomSplit;
            (0, _glMatrix.quat).setAxisAngle(this._quat, this._parentUp, split);
            (0, _glMatrix.quat).multiply(this._childRotation, this._quat, this._parentTwist);
            let angle = this._angle + (pseudoRandom.nextFloat() * 2 - 1) * this._randomAngle;
            angle = (0, _mathJs.MathHelper).clamp(angle, -(0, _constantsJs.Constants).PI_OVER_TWO, (0, _constantsJs.Constants).PI_OVER_TWO);
            (0, _glMatrix.quat).setAxisAngle(this._quat, (0, _constantsJs.Constants).VECTOR3_UNITX, angle);
            (0, _glMatrix.quat).multiply(this._childRotation, this._childRotation, this._quat);
            this._rotations[childIndex * 4] = this._childRotation[0];
            this._rotations[childIndex * 4 + 1] = this._childRotation[1];
            this._rotations[childIndex * 4 + 2] = this._childRotation[2];
            this._rotations[childIndex * 4 + 3] = this._childRotation[3];
            const halfParentScaleY = parentScaleY * 0.5;
            const halfChildScaleY = this._sizes[childIndex * 3 + 1] * 0.5;
            (0, _glMatrix.vec3).transformQuat(this._vec3, (0, _constantsJs.Constants).VECTOR3_UNITY, this._childRotation);
            const childTranslationX = this._positions[parentIndex * 3] + this._parentUp[0] * halfParentScaleY + this._vec3[0] * halfChildScaleY;
            const childTranslationY = this._positions[parentIndex * 3 + 1] + this._parentUp[1] * halfParentScaleY + this._vec3[1] * halfChildScaleY;
            const childTranslationZ = this._positions[parentIndex * 3 + 2] + this._parentUp[2] * halfParentScaleY + this._vec3[2] * halfChildScaleY;
            this._positions[childIndex * 3] = childTranslationX;
            this._positions[childIndex * 3 + 1] = childTranslationY;
            this._positions[childIndex * 3 + 2] = childTranslationZ;
            this.minLayoutBoundsX = Math.min(this.minLayoutBoundsX, childTranslationX);
            this.minLayoutBoundsY = Math.min(this.minLayoutBoundsY, childTranslationY);
            this.minLayoutBoundsZ = Math.min(this.minLayoutBoundsZ, childTranslationZ);
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, childTranslationX);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, childTranslationY);
            this.maxLayoutBoundsZ = Math.max(this.maxLayoutBoundsZ, childTranslationZ);
            if (children[childId]) this._branch(childId, indices, children, pseudoRandom);
        }
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/angle.js":"3PBRj","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ftbZk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Sheet", ()=>Sheet);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class Sheet extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const side = options.side === undefined ? Math.ceil(Math.sqrt(count)) : options.side;
        if (!this._positions || this._positions.length < buffer.length * 3) this._positions = new Float32Array(buffer.length * 3);
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = 0;
        this.maxLayoutBoundsY = 0;
        this.maxLayoutBoundsZ = 0;
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            const y = Math.floor(i / side);
            const x = i - y * side;
            this._positions[index * 3] = x;
            this._positions[index * 3 + 1] = y;
            this._positions[index * 3 + 2] = 0;
            this.maxLayoutBoundsX = Math.max(this.maxLayoutBoundsX, x);
            this.maxLayoutBoundsY = Math.max(this.maxLayoutBoundsY, y);
        }
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        const padding = options.padding === undefined ? 0 : options.padding;
        const thickness = options.thickness === undefined ? 1 : options.thickness;
        this._updateModelBounds(options);
        const scale = (0, _glMatrix.vec4).fromValues((1 - padding) * this._boundsScaling, (1 - padding) * this._boundsScaling, thickness * this._boundsScaling, 0);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            _vec3[0] = (this._positions[index * 3] - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (this._positions[index * 3 + 1] - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (this._positions[index * 3 + 2] - this.modelOriginZ) * this._boundsScaling;
            let positionX = this._positions[index * 3];
            let positionY = this._positions[index * 3 + 1];
            let positionZ = this._positions[index * 3 + 2];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            (0, _vertexJs.UnitVertex).setScale(dataView, index, scale);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, (0, _constantsJs.Constants).QUAT_IDENTITY);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : 0 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)} ms`);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gvOlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SquarifiedTreeMap", ()=>SquarifiedTreeMap);
parcelHelpers.export(exports, "CubifiedTreeMap", ()=>CubifiedTreeMap);
parcelHelpers.export(exports, "TreeMapHelper", ()=>TreeMapHelper);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _mainJs = require("../main.js");
var _vertexJs = require("../vertex.js");
var _layoutJs = require("./layout.js");
class SquarifiedTreeMap extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const size = options.size == undefined ? 1 : options.size;
        const isRightToLeft = options.isRightToLeft == undefined ? false : options.isRightToLeft;
        const isTopToBottom = options.isTopToBottom == undefined ? false : options.isTopToBottom;
        let offset = options.offset === undefined ? 0 : options.offset;
        let count = options.count === undefined ? ids.length : options.count;
        this.minLayoutBoundsX = options.minBoundsX;
        this.minLayoutBoundsY = options.minBoundsY;
        this.minLayoutBoundsZ = options.minBoundsZ;
        this.maxLayoutBoundsX = options.maxBoundsX;
        this.maxLayoutBoundsY = options.maxBoundsY;
        this.maxLayoutBoundsZ = options.maxBoundsZ;
        const sizeX = this.maxLayoutBoundsX - this.minLayoutBoundsX;
        const sizeY = this.maxLayoutBoundsY - this.minLayoutBoundsY;
        if (options.sizes) {
            for(let i = 0; i < count; i++){
                if (options.sizes[ids[offset]] > 0) break;
                offset++;
                count--;
            }
            if (count == 0) return;
        } else if (size <= 0) return;
        if (!this._positionsX || this._positionsX.length < buffer.length) {
            this._positionsX = new Float32Array(buffer.length);
            this._positionsY = new Float32Array(buffer.length);
            this._sizesX = new Float32Array(buffer.length);
            this._sizesY = new Float32Array(buffer.length);
        }
        TreeMapHelper.squarifiedLayout(ids, options.sizes, this._positionsX, this._positionsY, this._sizesX, this._sizesY, offset, offset + count - 1, this.minLayoutBoundsX, this.minLayoutBoundsY, sizeX, sizeY, buffer.lookup);
        if (isRightToLeft || isTopToBottom) {
            const lookup = buffer.lookup;
            for(let i1 = 0; i1 < count; i1++){
                const id = ids[i1 + offset];
                const index = lookup[id];
                if (isRightToLeft) this._positionsX[index] = this.maxLayoutBoundsX - this._positionsX[index] + this.minLayoutBoundsX;
                if (isTopToBottom) this._positionsY[index] = this.maxLayoutBoundsY - this._positionsY[index] + this.minLayoutBoundsY;
            }
        }
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const heights = options.heights;
        const minHeight = options.minHeight === undefined ? 0 : options.minHeight;
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        const padding = options.padding === undefined ? 0 : options.padding;
        this._updateModelBounds(options);
        (0, _glMatrix.quat).rotationTo(_quat, this._core.config.identityRotation, (0, _constantsJs.Constants).VECTOR3_UNITY);
        let maxHeight;
        if (heights) {
            maxHeight = 0;
            for(let i = 0; i < count; i++){
                const id = ids[i + offset];
                maxHeight = Math.max(heights[id], maxHeight);
            }
        } else maxHeight = 1;
        const heightScaling = (this.maxLayoutBoundsZ - this.minLayoutBoundsZ) / maxHeight;
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i1 = 0; i1 < count; i1++){
            const id1 = ids[i1 + offset];
            const index = lookup[id1];
            const height = Math.max(heights ? heights[id1] * heightScaling : heightScaling, minHeight);
            let positionX = this._positionsX[index];
            let positionY = this._positionsY[index];
            let positionZ = this.minLayoutBoundsZ + height / 2;
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id1] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id1] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id1] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = Math.max((this._sizesX[index] - padding) * this._boundsScaling, 0);
            _vec4[1] = Math.max((this._sizesY[index] - padding) * this._boundsScaling, 0);
            _vec4[2] = height * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id1], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id1] : id1);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id1) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id1], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i1 / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id1], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i1 / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id1] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}
class CubifiedTreeMap extends (0, _layoutJs.LayoutBase) {
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const isTopToBottom = options.isTopToBottom === undefined ? false : options.isTopToBottom;
        let offset = options.offset === undefined ? 0 : options.offset;
        let count = options.count === undefined ? ids.length : options.count;
        this.minLayoutBoundsX = options.minBoundsX;
        this.minLayoutBoundsY = options.minBoundsY;
        this.minLayoutBoundsZ = options.minBoundsZ;
        this.maxLayoutBoundsX = options.maxBoundsX;
        this.maxLayoutBoundsY = options.maxBoundsY;
        this.maxLayoutBoundsZ = options.maxBoundsZ;
        if (options.sizes) {
            for(let i = 0; i < count; i++){
                if (options.sizes[ids[offset]] > 0) break;
                offset++;
                count--;
            }
            if (count == 0) return;
        }
        const sizeX = this.maxLayoutBoundsX - this.minLayoutBoundsX;
        const sizeY = this.maxLayoutBoundsY - this.minLayoutBoundsY;
        const sizeZ = this.maxLayoutBoundsZ - this.minLayoutBoundsZ;
        const minHeight = this._core.config.minCubifiedTreeMapSlice / sizeY;
        const side = Math.sqrt(sizeX * sizeZ);
        const total = options.sizes ? TreeMapHelper.totalSize(ids, options.sizes, offset, offset + count - 1) : count;
        if (!this._positionsX || this._positionsX.length < buffer.length) {
            this._positionsX = new Float32Array(buffer.length);
            this._positionsY = new Float32Array(buffer.length);
            this._positionsZ = new Float32Array(buffer.length);
            this._sizesX = new Float32Array(buffer.length);
            this._sizesY = new Float32Array(buffer.length);
            this._sizesZ = new Float32Array(buffer.length);
        }
        TreeMapHelper.cubifiedLayout(ids, options.sizes, this._positionsX, this._positionsY, this._positionsZ, this._sizesX, this._sizesY, this._sizesZ, offset, offset + count - 1, this.minLayoutBoundsX, this.minLayoutBoundsY, this.minLayoutBoundsZ, sizeX, sizeY, sizeZ, side, total, minHeight, isTopToBottom, buffer.lookup);
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        const padding = options.padding === undefined ? 0 : options.padding;
        const paddingZ = options.thickness === undefined ? padding : 0;
        const thickness = options.thickness === undefined ? 1 : options.thickness;
        this._updateModelBounds(options);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            let positionX = this._positionsX[index];
            let positionY = this._positionsY[index];
            let positionZ = this._positionsZ[index];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = Math.max((this._sizesX[index] - padding) * this._boundsScaling, 0);
            _vec4[1] = Math.max((this._sizesY[index] - padding) * this._boundsScaling, 0);
            _vec4[2] = Math.max((this._sizesZ[index] - paddingZ) * this._boundsScaling, 0) * thickness;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, (0, _constantsJs.Constants).QUAT_IDENTITY);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}
class TreeMapHelper {
    static squarifiedLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, from, to, x, y, width, height, lookup) {
        if (from > to) return;
        if (to - from < 2) {
            TreeMapHelper._sliceLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, from, to, x, y, width, height, lookup);
            return;
        }
        const totalSize = sizes ? TreeMapHelper.totalSize(ids, sizes, from, to) : to - from + 1;
        const a = sizes ? sizes[ids[to]] / totalSize : 1 / totalSize;
        let b = a;
        let mid = to;
        if (width < height) {
            while(mid > from){
                const aspect = TreeMapHelper._aspect(height, width, a, b);
                const q = sizes ? sizes[ids[mid - 1]] / totalSize : 1 / totalSize;
                if (TreeMapHelper._aspect(height, width, a, b + q) > aspect) break;
                mid--;
                b += q;
            }
            TreeMapHelper._sliceLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, mid, to, x, y, width, height * b, lookup);
            TreeMapHelper.squarifiedLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, from, mid - 1, x, y + height * b, width, height * (1 - b), lookup);
        } else {
            while(mid > from){
                const aspect1 = TreeMapHelper._aspect(width, height, a, b);
                const q1 = sizes ? sizes[ids[mid - 1]] / totalSize : 1 / totalSize;
                if (TreeMapHelper._aspect(width, height, a, b + q1) > aspect1) break;
                mid--;
                b += q1;
            }
            TreeMapHelper._sliceLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, mid, to, x, y, width * b, height, lookup);
            TreeMapHelper.squarifiedLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, from, mid - 1, x + width * b, y, width * (1 - b), height, lookup);
        }
    }
    static totalSize(ids, sizes, from, to) {
        let size = 0;
        for(let i = from; i <= to; i++)size += sizes[ids[i]];
        return size;
    }
    static _sliceLayout(ids, sizes, positionsX, positionsY, sizesX, sizesY, from, to, x, y, width, height, lookup) {
        const totalSize = sizes ? TreeMapHelper.totalSize(ids, sizes, from, to) : to - from + 1;
        let a = 0;
        for(let i = to; i >= from; i--){
            const id = ids[i];
            const index = lookup[id];
            const b = sizes ? sizes[id] / totalSize : 1 / totalSize;
            if (width > height) {
                sizesY[index] = height;
                sizesX[index] = width * b;
                positionsY[index] = y + height / 2;
                positionsX[index] = x + width * a + width * b / 2;
            } else {
                sizesX[index] = width;
                sizesY[index] = height * b;
                positionsX[index] = x + width / 2;
                positionsY[index] = y + height * a + height * b / 2;
            }
            a += b;
        }
    }
    static _aspect(big, small, a, b) {
        const x = big * b / (small * a / b);
        if (x < 1) return 1 / x;
        return x;
    }
    static cubifiedLayout(ids, sizes, positionsX, positionsY, positionsZ, sizesX, sizesY, sizesZ, from, to, x, y, z, width, height, depth, side, total, minHeight, isTopToBottom, lookup) {
        if (from > to) return;
        let sliceHeight = 0;
        let sliceTotal = 0;
        let previousAspect = 0;
        let mid = to;
        while(mid >= from){
            const itemSize = sizes ? sizes[ids[mid]] : 1;
            sliceTotal += itemSize;
            sliceHeight = height * sliceTotal / total;
            const remainingHeight = height - sliceHeight;
            if (remainingHeight < minHeight) {
                mid = from;
                const totalSize = sizes ? this.totalSize(ids, sizes, mid, to) : to - from + 1;
                sliceHeight = height * totalSize / total;
                break;
            }
            const itemSide = Math.sqrt(itemSize / sliceTotal) * side;
            const aspect = itemSide > sliceHeight ? sliceHeight / itemSide : itemSide / sliceHeight;
            if (aspect < previousAspect || mid == from) break;
            previousAspect = aspect;
            mid--;
        }
        TreeMapHelper.squarifiedLayout(ids, sizes, positionsX, positionsZ, sizesX, sizesZ, mid, to, x, z, width, depth, lookup);
        for(let j = mid; j <= to; j++){
            const id = ids[j];
            const index = lookup[id];
            sizesY[index] = Math.max(sliceHeight, 0.01);
            positionsY[index] = isTopToBottom ? positionsY[index] = y + sliceHeight / 2 : y + height - sliceHeight / 2;
        }
        TreeMapHelper.cubifiedLayout(ids, sizes, positionsX, positionsY, positionsZ, sizesX, sizesY, sizesZ, from, mid - 1, x, isTopToBottom ? y + sliceHeight : y, z, width, height - sliceHeight, depth, side, total - sliceTotal, minHeight, isTopToBottom, lookup);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../helpers/math.js":"jeH35","../main.js":"2JYph","../vertex.js":"7T2qu","./layout.js":"8Tff0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eLX7C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StackBase", ()=>StackBase);
parcelHelpers.export(exports, "Stack", ()=>Stack);
parcelHelpers.export(exports, "StackTreeMap", ()=>StackTreeMap);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _constantsJs = require("../constants.js");
var _mathJs = require("../helpers/math.js");
var _vertexJs = require("../vertex.js");
var _treemapJs = require("./treemap.js");
var _layoutJs = require("./layout.js");
var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
class StackBase extends (0, _layoutJs.LayoutBase) {
    get maxCount() {
        return this._maxCount;
    }
    get levels() {
        return this._levels;
    }
    get binCounts() {
        return this._binCounts;
    }
}
class Stack extends StackBase {
    get maxLevel() {
        return this._maxLevel;
    }
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        this._maxLevel = 0;
        const sizeX = options.sizeX == undefined ? 1 : options.sizeX;
        const sizeZ = options.sizeZ == undefined ? 1 : options.sizeZ;
        const spacingX = options.spacingX == undefined ? 0 : options.spacingX;
        const spacingZ = options.spacingZ == undefined ? 0 : options.spacingZ;
        const binsX = options.binsX == undefined ? 1 : options.binsX;
        const binsZ = options.binsZ == undefined ? 1 : options.binsZ;
        if (!this._positionsX || this._positionsX.length < buffer.length) {
            this._positionsX = new Float32Array(buffer.length);
            this._positionsY = new Float32Array(buffer.length);
            this._positionsZ = new Float32Array(buffer.length);
            this._levels = new Uint32Array(buffer.length);
        }
        this._binCounts = new Uint32Array(binsX * binsZ);
        let maxBinCount = 0;
        let maxBinLevel = 0;
        let positionX, positionY, positionZ;
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            const binIdX = options.binIdsX ? options.binIdsX[id] : 0;
            const binIdZ = options.binIdsZ ? options.binIdsZ[id] : 0;
            const binId = binIdX + binIdZ * binsX;
            if (binId > this._binCounts.length - 1) this._core.log.write((0, _mainJs.LogLevel).warn, "bin overflow");
            const binCount = this._binCounts[binId];
            const level = Math.floor(binCount / sizeX / sizeZ);
            this._levels[index] = level;
            const levelCount = binCount - level * sizeX * sizeZ;
            const itemZ = Math.floor(levelCount / sizeX);
            const itemX = levelCount - itemZ * sizeX;
            positionX = spacingX / 2 + binIdX * (sizeX + spacingX) + itemX + 0.5;
            positionY = level + 0.5;
            positionZ = spacingZ / 2 + binIdZ * (sizeZ + spacingZ) + itemZ + 0.5;
            this._positionsX[index] = positionX;
            this._positionsY[index] = positionY;
            this._positionsZ[index] = positionZ;
            this._binCounts[binId]++;
            maxBinCount = Math.max(maxBinCount, this._binCounts[binId]);
            maxBinLevel = Math.max(maxBinLevel, level);
        }
        this._maxLevel = maxBinLevel + 1;
        this._maxCount = maxBinCount;
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = binsX * (sizeX + spacingX);
        this.maxLayoutBoundsY = this._maxLevel;
        this.maxLayoutBoundsZ = binsZ * (sizeZ + spacingZ);
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _quat = (0, _glMatrix.quat).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        const padding = options.padding === undefined ? 0 : options.padding;
        const thickness = options.thickness === undefined ? 1 - padding : options.thickness;
        this._updateModelBounds(options);
        (0, _glMatrix.quat).rotationTo(_quat, this._core.config.identityRotation, (0, _constantsJs.Constants).VECTOR3_UNITY);
        const scale = (0, _glMatrix.vec4).fromValues((1 - padding) * this._boundsScaling, (1 - padding) * this._boundsScaling, thickness * this._boundsScaling, 0);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            let positionX = this._positionsX[index];
            let positionY = this._positionsY[index];
            let positionZ = this._positionsZ[index];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            (0, _vertexJs.UnitVertex).setScale(dataView, index, scale);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}
class StackTreeMap extends StackBase {
    get maxTotal() {
        return this._maxTotal;
    }
    get binGroupIds() {
        return this._binGroupIds;
    }
    layout(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const isNormalized = options.isNormalized === undefined ? false : options.isNormalized;
        const minHeight = options.minHeight === undefined ? 0 : options.minHeight;
        const maxHeight = options.maxHeight === undefined ? 0 : options.maxHeight;
        const isTopToBottom = options.isTopToBottom === undefined ? false : options.isTopToBottom;
        const sizeX = options.sizeX == undefined ? 1 : options.sizeX;
        const sizeZ = options.sizeZ == undefined ? 1 : options.sizeZ;
        const spacingX = options.spacingX == undefined ? 0 : options.spacingX;
        const spacingZ = options.spacingZ == undefined ? 0 : options.spacingZ;
        const binsX = options.binsX == undefined ? 1 : options.binsX;
        const binsZ = options.binsZ == undefined ? 1 : options.binsZ;
        if (!this._positionsX || this._positionsX.length < buffer.length) {
            this._positionsX = new Float32Array(buffer.length);
            this._positionsY = new Float32Array(buffer.length);
            this._positionsZ = new Float32Array(buffer.length);
            this._sizesX = new Float32Array(buffer.length);
            this._sizesY = new Float32Array(buffer.length);
            this._sizesZ = new Float32Array(buffer.length);
            this._binIds = new Uint32Array(buffer.length);
            this._binGroupIds = new Float64Array(buffer.length);
        }
        this._binCounts = new Uint32Array(binsX * binsZ);
        this._binTotals = new Float64Array(binsX * binsZ);
        let maxBinCount = 0;
        let maxBinTotal = 0;
        let height;
        const lookup = buffer.lookup;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            const binIdX = options.binIdsX ? options.binIdsX[id] : 0;
            const binIdZ = options.binIdsZ ? options.binIdsZ[id] : 0;
            const binId = binIdX + binIdZ * binsX;
            this._binIds[index] = binId;
            if (binId > this._binCounts.length - 1) this._core.log.write((0, _mainJs.LogLevel).warn, "bin overflow");
            this._binCounts[binId]++;
            maxBinCount = Math.max(maxBinCount, this._binCounts[binId]);
            this._binTotals[binId] += options.sizes ? options.sizes[id] : 1;
            maxBinTotal = Math.max(maxBinTotal, this._binTotals[binId]);
        }
        if (maxHeight - minHeight > 0) height = maxHeight - minHeight;
        else height = Math.ceil(maxBinCount / options.sizeX / options.sizeZ);
        if (!this._orderedIds || this._orderedIds.length < buffer.length) this._orderedIds = new Uint32Array(buffer.length);
        let ids2;
        if (options.groupIds || options.sizes) {
            if (count == ids.length) this._ids = new Uint32Array(ids);
            else {
                this._ids = new Uint32Array(count);
                for(let i1 = 0; i1 < count; i1++)this._ids[i1] = ids[offset + i1];
            }
            if (options.groupIds && options.sizes) {
                this._ids.sort(function(a, b) {
                    return options.groupIds[a] == options.groupIds[b] ? options.sizes[a] - options.sizes[b] : options.groupIds[a] - options.groupIds[b];
                });
                ids2 = this._ids;
            } else if (options.groupIds) {
                this._ids.sort(function(a, b) {
                    return options.groupIds[a] - options.groupIds[b];
                });
                ids2 = this._ids;
            } else if (options.sizes) {
                this._ids.sort(function(a, b) {
                    return options.sizes[a] - options.sizes[b];
                });
                ids2 = this._ids;
            }
        } else ids2 = ids;
        const binOffsets = new Uint32Array(this._binCounts.length);
        let binOffset = 0;
        for(let i2 = 0; i2 < this._binCounts.length; i2++){
            const binCount = this._binCounts[i2];
            binOffsets[i2] = binOffset;
            binOffset += binCount;
        }
        for(let i3 = 0; i3 < count; i3++){
            const id1 = ids2[i3];
            const index1 = lookup[id1];
            const binId1 = this._binIds[index1];
            binOffset = binOffsets[binId1]++;
            this._orderedIds[binOffset + offset] = id1;
        }
        const minSliceHeight = this._core.config.minCubifiedTreeMapSlice * height;
        const side = Math.sqrt(sizeX * sizeZ);
        let from = offset;
        let isLastInGroup = false;
        let isLastInBin = false;
        let groupCount = 0;
        let groupTotal = 0;
        let positionY = 0;
        for(let i4 = 0; i4 < count; i4++){
            const id2 = this._orderedIds[i4 + offset];
            const index2 = lookup[id2];
            groupCount++;
            groupTotal += options.sizes ? options.sizes[id2] : 1;
            const binId2 = this._binIds[index2];
            const groupId = options.groupIds ? options.groupIds[id2] : 0;
            if (i4 == count - 1) {
                isLastInBin = true;
                isLastInGroup = true;
            } else {
                const nextId = this._orderedIds[i4 + 1 + offset];
                const nextIndex = lookup[nextId];
                const nextBinId = this._binIds[nextIndex];
                const nextGroupId = options.groupIds ? options.groupIds[nextId] : 0;
                isLastInBin = binId2 != nextBinId;
                isLastInGroup = groupId != nextGroupId;
            }
            if (isLastInBin || isLastInGroup) {
                const mid = i4 + offset;
                const binIdX1 = options.binIdsX ? options.binIdsX[id2] : 0;
                const binIdZ1 = options.binIdsZ ? options.binIdsZ[id2] : 0;
                let groupValue, binValue;
                if (options.sizes) {
                    groupValue = groupTotal;
                    binValue = isNormalized ? this._binTotals[binId2] : maxBinTotal;
                } else {
                    groupValue = groupCount;
                    binValue = isNormalized ? this._binCounts[binId2] : maxBinCount;
                }
                const groupHeight = height * groupValue / binValue;
                if (sizeZ == 1) {
                    const positionX = spacingX / 2 + binIdX1 * (sizeX + spacingX);
                    (0, _treemapJs.TreeMapHelper).squarifiedLayout(this._orderedIds, options.sizes, this._positionsX, this._positionsY, this._sizesX, this._sizesY, from, mid, positionX, positionY, sizeX, groupHeight, lookup);
                    const isRightToLeft = true;
                    for(let i5 = from; i5 <= mid; i5++){
                        const id3 = this._orderedIds[i5];
                        const index3 = lookup[id3];
                        this._sizesZ[index3] = sizeZ;
                        this._positionsZ[index3] = (binIdZ1 + 0.5) * (sizeZ + spacingZ);
                        if (isRightToLeft) this._positionsX[index3] = positionX + sizeX - this._positionsX[index3] + positionX;
                        if (!isTopToBottom) this._positionsY[index3] = positionY + groupHeight - this._positionsY[index3] + positionY;
                    }
                } else (0, _treemapJs.TreeMapHelper).cubifiedLayout(this._orderedIds, options.sizes, this._positionsX, this._positionsY, this._positionsZ, this._sizesX, this._sizesY, this._sizesZ, from, mid, spacingX / 2 + binIdX1 * (sizeX + spacingX), positionY, spacingZ / 2 + binIdZ1 * (sizeZ + spacingZ), sizeX, groupHeight, sizeZ, side, groupValue, minSliceHeight, isTopToBottom, lookup);
                if (isLastInGroup) {
                    isLastInGroup = false;
                    positionY += groupHeight;
                }
                if (isLastInBin) {
                    isLastInBin = false;
                    positionY = 0;
                }
                groupCount = 0;
                groupTotal = 0;
                from = mid + 1;
            }
        }
        this._maxCount = maxBinCount;
        this._maxTotal = maxBinTotal;
        this.minLayoutBoundsX = 0;
        this.minLayoutBoundsY = 0;
        this.minLayoutBoundsZ = 0;
        this.maxLayoutBoundsX = binsX * (sizeX + spacingX);
        this.maxLayoutBoundsY = height;
        this.maxLayoutBoundsZ = binsZ * (sizeZ + spacingZ);
        this._updateCumulativeLayoutBounds();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} layout ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
    update(buffer, ids, options) {
        const start = window.performance.now();
        const offset = options.offset === undefined ? 0 : options.offset;
        const count = options.count === undefined ? ids.length : options.count;
        const dataView = buffer.dataView;
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const minColor = options.minColor === undefined ? 0 : options.minColor;
        const maxColor = options.maxColor === undefined ? 1 : options.maxColor;
        const minOrder = options.minOrder === undefined ? 0 : options.minOrder;
        const maxOrder = options.maxOrder === undefined ? 1 : options.maxOrder;
        const orderReverse = options.orderReverse === undefined ? false : options.orderReverse;
        const minStaggerOrder = options.minStaggerOrder === undefined ? 0 : options.minStaggerOrder;
        const maxStaggerOrder = options.maxStaggerOrder === undefined ? 1 : options.maxStaggerOrder;
        const staggerOrderReverse = options.staggerOrderReverse === undefined ? false : options.staggerOrderReverse;
        const padding = options.padding === undefined ? 0 : options.padding;
        const paddingZ = options.thickness === undefined ? padding : 0;
        const thickness = options.thickness === undefined ? 1 : options.thickness;
        this._updateModelBounds(options);
        (0, _glMatrix.quat).rotationTo(_quat, this._core.config.identityRotation, (0, _constantsJs.Constants).VECTOR3_UNITY);
        const lookup = buffer.lookup;
        const selection = options.selected && options.selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = lookup[id];
            let positionX = this._positionsX[index];
            let positionY = this._positionsY[index];
            let positionZ = this._positionsZ[index];
            if (this._isFacetted) {
                const facetX = options.facetCoordsX ? options.facetCoordsX[id] : 0;
                const facetY = options.facetCoordsY ? options.facetCoordsY[id] : 0;
                const facetZ = options.facetCoordsZ ? options.facetCoordsZ[id] : 0;
                positionX += this._facetSizeX * this._facetSpacingX / 2 + facetX * this._facetSizeX * (1 + this._facetSpacingX);
                positionY += this._facetSizeY * this._facetSpacingY / 2 + facetY * this._facetSizeY * (1 + this._facetSpacingY);
                positionZ += this._facetSizeZ * this._facetSpacingZ / 2 + facetZ * this._facetSizeZ * (1 + this._facetSpacingZ);
            }
            _vec3[0] = (positionX - this.modelOriginX) * this._boundsScaling;
            _vec3[1] = (positionY - this.modelOriginY) * this._boundsScaling;
            _vec3[2] = (positionZ - this.modelOriginZ) * this._boundsScaling;
            (0, _vertexJs.UnitVertex).setTranslation(dataView, index, _vec3);
            _vec4[0] = Math.max((this._sizesX[index] - padding) * this._boundsScaling, 0);
            _vec4[1] = Math.max((this._sizesY[index] - padding) * this._boundsScaling, 0);
            _vec4[2] = Math.max((this._sizesZ[index] - paddingZ) * this._boundsScaling, 0) * thickness;
            (0, _vertexJs.UnitVertex).setScale(dataView, index, _vec4);
            (0, _vertexJs.UnitVertex).setRotation(dataView, index, _quat);
            if (options.colors) {
                const color = (0, _mathJs.MathHelper).normalize(options.colors[id], minColor, maxColor, 0, 1);
                (0, _glMatrix.vec2).set(_vec2, color, color);
                (0, _vertexJs.UnitVertex).setColor(dataView, index, _vec2);
            } else (0, _vertexJs.UnitVertex).setColor(dataView, index, (0, _constantsJs.Constants).VECTOR2_ONE);
            (0, _vertexJs.UnitVertex).setIdHover(dataView, index, options.hover ? options.hover[id] : id);
            (0, _vertexJs.UnitVertex).setSelected(dataView, index, selection ? options.selected.has(id) ? 1 : -1 : 0);
            if (options.order) {
                const order = (0, _mathJs.MathHelper).normalize(options.order[id], minOrder, maxOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setOrder(dataView, index, orderReverse ? 1 - order : order);
            } else (0, _vertexJs.UnitVertex).setOrder(dataView, index, i / (count - 1));
            if (options.staggerOrder !== undefined) (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, options.staggerOrder);
            else if (options.staggerOrders) {
                const stagger = (0, _mathJs.MathHelper).normalize(options.staggerOrders[id], minStaggerOrder, maxStaggerOrder, 0, 1);
                (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, staggerOrderReverse ? 1 - stagger : stagger);
            } else (0, _vertexJs.UnitVertex).setStaggerOrder(dataView, index, i / (count - 1));
            (0, _vertexJs.UnitVertex).setMaterial(dataView, index, options.material ? options.material : options.materials ? options.materials[id] : 0);
        }
        buffer.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `${this.constructor.name.toLowerCase()} update ${ids.length} ${Math.round(window.performance.now() - start)}ms`);
    }
}

},{"../constants.js":"dtECF","../helpers/math.js":"jeH35","../vertex.js":"7T2qu","./treemap.js":"gvOlx","./layout.js":"8Tff0","gl-matrix":"3mrln","../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2rYa8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Keyboard", ()=>(0, _keyboardJs.Keyboard));
parcelHelpers.export(exports, "MouseWheel", ()=>(0, _mousewheelJs.MouseWheel));
parcelHelpers.export(exports, "Pointers", ()=>(0, _pointersJs.Pointers));
parcelHelpers.export(exports, "Manipulator", ()=>(0, _manipulatorJs.Manipulator));
parcelHelpers.export(exports, "ManipulationProcessor", ()=>(0, _manipulationprocessorJs.ManipulationProcessor));
parcelHelpers.export(exports, "Manager", ()=>(0, _managerJs.Manager));
var _keyboardJs = require("./keyboard.js");
var _mousewheelJs = require("./mousewheel.js");
var _pointersJs = require("./pointers.js");
var _manipulatorJs = require("./manipulator.js");
var _manipulationprocessorJs = require("./manipulationprocessor.js");
var _managerJs = require("./manager.js");

},{"./keyboard.js":"1K0FK","./mousewheel.js":"3xOvs","./pointers.js":"c4vSf","./manipulator.js":"8ooFj","./manipulationprocessor.js":"4Xlow","./manager.js":"a5l41","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iBjFD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "LocalFile", ()=>(0, _fileJs.LocalFile));
parcelHelpers.export(exports, "XmlHttp", ()=>(0, _xmlHttpJs.XmlHttp));
var _fileJs = require("./file.js");
var _xmlHttpJs = require("./xmlHttp.js");

},{"./file.js":"7EKkn","./xmlHttp.js":"kfGpT","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7EKkn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "LocalFile", ()=>LocalFile);
class LocalFile {
    constructor(core){}
    loadText(file, completed, failed) {
        const reader = new FileReader();
        reader.onload = (event)=>{
            const text = event.target.result;
            completed(text);
        };
        reader.onerror = (event)=>{
            const error = event.target.error;
            failed(error.message);
        };
        reader.readAsText(file);
    }
    loadImage(file, completed, failed) {
        const image = new Image();
        image.onload = ()=>completed(image);
        image.onerror = (event)=>{
            const error = event.message;
            failed(error);
        };
        const reader = new FileReader();
        reader.onload = (event)=>{
            const text = event.target.result;
            image.src = text;
        };
        reader.onerror = (event)=>{
            const error = event.target.error;
            failed(error.message);
        };
        reader.readAsDataURL(file);
    }
    loadArrayBuffer(file, completed, failed) {
        const reader = new FileReader();
        reader.onload = (event)=>{
            const arrayBuffer = event.target.result;
            completed(arrayBuffer);
        };
        reader.onerror = (event)=>{
            const error = event.target.error;
            failed(error.message);
        };
        reader.readAsArrayBuffer(file);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kfGpT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "XmlHttp", ()=>XmlHttp);
class XmlHttp {
    constructor(core){}
    loadText(url, completed, failed) {
        const request = new XMLHttpRequest();
        request.open("GET", url);
        request.onreadystatechange = ()=>{
            if (request.readyState == XMLHttpRequest.DONE) switch(request.status){
                case 200:
                    completed(request.responseText);
                    break;
                default:
                    failed(request.statusText);
                    break;
            }
        };
        request.send();
    }
    loadImage(url, completed, failed) {
        const image = new Image();
        image.onload = ()=>completed(image);
        image.onerror = (event)=>{
            const error = event.message;
            failed(error);
        };
        image.src = url;
    }
    loadArrayBuffer(url, completed, failed) {
        const request = new XMLHttpRequest();
        request.open("GET", url);
        request.responseType = "arraybuffer";
        request.onreadystatechange = ()=>{
            if (request.readyState == XMLHttpRequest.DONE) switch(request.status){
                case 200:
                    completed(request.response);
                    break;
                default:
                    failed(request.statusText);
                    break;
            }
        };
        request.send();
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cnTlF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Quad", ()=>(0, _quadJs.Quad));
parcelHelpers.export(exports, "Cube", ()=>(0, _cubeJs.Cube));
parcelHelpers.export(exports, "Sphere", ()=>(0, _sphereJs.Sphere));
var _quadJs = require("./quad.js");
var _cubeJs = require("./cube.js");
var _sphereJs = require("./sphere.js");

},{"./quad.js":"5BIpU","./cube.js":"dgOpu","./sphere.js":"k4wBy","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kHIAn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "RendererBase", ()=>(0, _rendererJs.RendererBase));
parcelHelpers.export(exports, "Basic", ()=>_indexJs);
parcelHelpers.export(exports, "Advanced", ()=>_indexJs1);
parcelHelpers.export(exports, "RayTraceWebGPU", ()=>_indexJs2);
var _indexJs = require("./basic/index.js");
var _indexJs1 = require("./advanced/index.js");
var _indexJs2 = require("./raytracewebgpu/index.js");
var _rendererJs = require("./renderer.js");

},{"./basic/index.js":"7mW25","./advanced/index.js":"3ZCXP","./raytracewebgpu/index.js":"eiv3v","./renderer.js":"aTXAw","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7mW25":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Main", ()=>(0, _mainJs.Main));
var _mainJs = require("./main.js");

},{"./main.js":"76cif","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"76cif":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Main", ()=>Main);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../../main.js");
var _rendererJs = require("../renderer.js");
var _quadJs = require("./components/quad.js");
var _bufferJs = require("./buffer.js");
var _configJs = require("./config.js");
var _shaderJs = require("./shaders/shader.js");
var _colorJs = require("./shaders/color.js");
var _textureJs = require("./shaders/texture.js");
var _lassoJs = require("./shaders/lasso.js");
var _modelJs = require("./shaders/model.js");
var _sdftextJs = require("./shaders/sdftext.js");
var _pickgridJs = require("./shaders/pickgrid.js");
var _unitblockJs = require("./shaders/unitblock.js");
var _unitsphereJs = require("./shaders/unitsphere.js");
var _unitcylinderJs = require("./shaders/unitcylinder.js");
var _unithexprism = require("./shaders/unithexprism");
var _anaglyphJs = require("./shaders/anaglyph.js");
var _textureJs1 = require("../../helpers/texture.js");
var _pickJs = require("../../helpers/pick.js");
var _debugJs = require("./components/debug.js");
var _cartesian2DJs = require("./components/axes/cartesian2d.js");
var _cartesian3DJs = require("./components/axes/cartesian3d.js");
var _controllerJs = require("./components/controller.js");
var _imageJs = require("./components/image.js");
var _vertexJs = require("../../vertex.js");
var _labelsJs = require("./components/labels.js");
var _fontJs = require("./font.js");
var _lassoJs1 = require("./components/lasso.js");
class Main extends (0, _rendererJs.RendererBase) {
    constructor(options){
        super(options);
        this._config = new (0, _configJs.Config)();
        this._quad = new (0, _quadJs.Quad)();
        this._lasso = new (0, _lassoJs1.Lasso)();
        this._pickedPixels = new Uint8Array(4);
        this._pickedIdColor = (0, _glMatrix.vec4).create();
        this._mat3 = (0, _glMatrix.mat3).create();
        this._directionToCamera = (0, _glMatrix.vec3).create();
        this._directionToLight = (0, _glMatrix.vec3).create();
        this._halfAngle = (0, _glMatrix.vec3).create();
        this._cameraPosition = (0, _glMatrix.vec3).create();
        this._modelPosition = (0, _glMatrix.vec3).create();
    }
    get shaderResources() {
        return this._shaderResources;
    }
    get colorShader() {
        return this._colorShader;
    }
    get textureShader() {
        return this._textureShader;
    }
    get lassoShader() {
        return this._lassoShader;
    }
    get modelShader() {
        return this._modelShader;
    }
    get sdfShader() {
        return this._sdfShader;
    }
    get gridShader() {
        return this._gridShader;
    }
    get blockShader() {
        return this._blockShader;
    }
    get sphereShader() {
        return this._sphereShader;
    }
    get cyclinderShader() {
        return this._cylinderShader;
    }
    get anaglyphShader() {
        return this._anaglyphShader;
    }
    get currentAxes() {
        return this._isAxes1Current ? this._axes1 : this._axes2;
    }
    set currentAxes(value) {
        if (this._isAxes1Current) this._axes1 = value;
        else this._axes2 = value;
    }
    get previousAxes() {
        return this._isAxes1Current ? this._axes2 : this._axes1;
    }
    set previousAxes(value) {
        if (this._isAxes1Current) this._axes2 = value;
        else this._axes1 = value;
    }
    get config() {
        return this._config;
    }
    get isSupported() {
        return this._createContext(document.createElement("canvas")) !== null;
    }
    get isWebXRSupported() {
        return true;
    }
    initialize(core) {
        super.initialize(core);
        this._shaderResources = new (0, _shaderJs.Resources)();
        this._colorShader = new (0, _colorJs.Color)(this._core, this);
        this._textureShader = new (0, _textureJs.Texture)(this._core, this);
        this._lassoShader = new (0, _lassoJs.Lasso)(this._core, this);
        this._modelShader = new (0, _modelJs.Model)(this._core, this);
        this._sdfShader = new (0, _sdftextJs.SdfText)(this._core, this);
        this._gridShader = new (0, _pickgridJs.PickGrid)(this._core, this);
        this._anaglyphShader = new (0, _anaglyphJs.Anaglyph)(this._core, this);
        this._blockShader = new (0, _unitblockJs.UnitBlock)(this._core, this);
        this._sphereShader = new (0, _unitsphereJs.UnitSphere)(this._core, this);
        this._cylinderShader = new (0, _unitcylinderJs.UnitCylinder)(this._core, this);
        this._hexPrismShader = new (0, _unithexprism.UnitHexPrism)(this._core, this);
        this._initializeContext(this._createContext(this._canvas));
        this._canvas.addEventListener("webglcontextlost", (event)=>{
            this._core.log.write((0, _mainJs.LogLevel).warn, "WebGL context lost");
            this._isInitialized = false;
            event.preventDefault();
        }, false);
        this._canvas.addEventListener("webglcontextrestored", ()=>{
            this._initializeContext(this._createContext(this._canvas));
            this._isInitialized = true;
            this._core.log.write((0, _mainJs.LogLevel).info, "WebGL context restored");
        }, false);
        this._isInitialized = true;
    }
    _initializeContext(gl) {
        this._gl = gl;
        for(const key in this.fonts){
            const fontVisual = this.fonts[key];
            fontVisual.initializeContext(gl);
        }
        this._shaderResources.initializeContext(this._gl);
        this._colorShader.initializeContext(this._gl);
        this._textureShader.initializeContext(this._gl);
        this._lassoShader.initializeContext(this._gl);
        this._modelShader.initializeContext(this._gl);
        this._sdfShader.initializeContext(this._gl);
        this._gridShader.initializeContext(this._gl);
        this._anaglyphShader.initializeContext(this._gl);
        this._blockShader.initializeContext(this._gl);
        this._sphereShader.initializeContext(this._gl);
        this._cylinderShader.initializeContext(this._gl);
        this._hexPrismShader.initializeContext(this._gl);
        this._quad.initializeContext(this._gl);
        this._lasso.initializeContext(this._gl);
        this._debugAxesVisual.initializeContext(this._gl);
        this._framebuffers = [
            null,
            null
        ];
        const texture = (0, _textureJs1.TextureHelper).create(this._gl, this._core.config.pickWidth, this._core.config.pickHeight, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._gl.LINEAR, null);
        const renderBuffer = this._gl.createRenderbuffer();
        this._gl.bindRenderbuffer(this._gl.RENDERBUFFER, renderBuffer);
        this._gl.renderbufferStorage(this._gl.RENDERBUFFER, this._gl.DEPTH_COMPONENT16, this._core.config.pickWidth, this._core.config.pickHeight);
        const framebuffer = this._gl.createFramebuffer();
        this._shaderResources.bindFramebuffer(framebuffer);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, texture, 0);
        this._gl.framebufferRenderbuffer(this._gl.FRAMEBUFFER, this._gl.DEPTH_ATTACHMENT, this._gl.RENDERBUFFER, renderBuffer);
        this._pickFrameBuffer = framebuffer;
        this._anaglyphTextures = [
            null,
            null
        ];
        this.anaglyphFramebuffers = [
            null,
            null
        ];
        for(let i = 0; i < this.transitionBuffers.length; i++)this.transitionBuffers[i].initializeContext(this._gl);
        if (this._axes1) for(let i1 = 0; i1 < this._axes1.length; i1++)this._axes1[i1].initializeContext(this._gl);
        if (this._axes2) for(let i2 = 0; i2 < this._axes2.length; i2++)this._axes2[i2].initializeContext(this._gl);
        for(let i3 = 0; i3 < this.labelSets.length; i3++)this.labelSets[i3].initializeContext(this._gl);
        for(let i4 = 0; i4 < this.images.length; i4++)this.images[i4].initializeContext(this._gl);
        for(let i5 = 0; i5 < this.controllers.length; i5++)this.controllers[i5].initializeContext(this._gl);
    }
    _resize(width, height) {
        super._resize(width, height);
        for(let i = 0; i < 2; i++){
            const texture = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._gl.LINEAR, null);
            const renderBuffer = this._gl.createRenderbuffer();
            this._gl.bindRenderbuffer(this._gl.RENDERBUFFER, renderBuffer);
            this._gl.renderbufferStorage(this._gl.RENDERBUFFER, this._gl.DEPTH_COMPONENT16, width, height);
            const framebuffer = this._gl.createFramebuffer();
            this._shaderResources.bindFramebuffer(framebuffer);
            this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, texture, 0);
            this._gl.framebufferRenderbuffer(this._gl.FRAMEBUFFER, this._gl.DEPTH_ATTACHMENT, this._gl.RENDERBUFFER, renderBuffer);
            this._anaglyphTextures[i] = texture;
            this.anaglyphFramebuffers[i] = framebuffer;
        }
        this._core.log.write((0, _mainJs.LogLevel).info, `buffers resized ${width},${height}`);
    }
    _createContext(canvas) {
        const antialias = this._options ? this._options.antialias === undefined ? false : this._options.antialias : false;
        const gl = canvas.getContext("webgl", {
            stencil: true,
            alpha: false,
            antialias: antialias
        });
        if (gl === null) this._core.log.write((0, _mainJs.LogLevel).error, "WebGL initialization failed");
        return gl;
    }
    initializeWebXR(session) {
        const promise = new Promise((resolve, reject)=>{
            this._gl.makeXRCompatible().then(()=>{
                session.updateRenderState({
                    baseLayer: new XRWebGLLayer(session, this._gl),
                    depthNear: this._core.config.nearPlane,
                    depthFar: this._core.config.farPlane
                });
                session.requestReferenceSpace("local").then((refSpace)=>{
                    this._webXRReferenceSpace = refSpace;
                    resolve();
                });
            });
        });
        return promise;
    }
    prepare(xrFrame) {
        if (xrFrame) {
            const pose = xrFrame.getViewerPose(this._webXRReferenceSpace);
            if (pose) {
                const glLayer = xrFrame.session.renderState.baseLayer;
                for(let i = 0; i < pose.views.length; i++){
                    const view = pose.views[i];
                    this.vMatrices[i] = view.transform.inverse.matrix;
                    this.inverseVMatrices[i] = view.transform.matrix;
                    (0, _glMatrix.mat4).multiply(this._mvMatrices[i], this.vMatrices[i], this.mMatrix);
                    this.mvMatrices[i] = this._mvMatrices[i];
                    this.pMatrices[i] = view.projectionMatrix;
                    const viewport = glLayer.getViewport(view);
                    this._viewports[i].x = viewport.x;
                    this._viewports[i].y = viewport.y;
                    this._viewports[i].width = viewport.width;
                    this._viewports[i].height = viewport.height;
                    this._framebuffers[i] = glLayer.framebuffer;
                }
            }
            this._viewportOffset = 0;
            this._viewportCount = 2;
        } else {
            let viewport1;
            switch(this._core.config.stereoMode){
                case (0, _mainJs.StereoMode).none:
                    viewport1 = this._viewports[0];
                    viewport1.x = 0;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width;
                    viewport1.height = this._canvas.height;
                    this._viewportOffset = 0;
                    this._viewportCount = 1;
                    this._framebuffers[0] = null;
                    break;
                case (0, _mainJs.StereoMode).left:
                    viewport1 = this._viewports[0];
                    viewport1.x = 0;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width;
                    viewport1.height = this._canvas.height;
                    this._viewportOffset = 0;
                    this._viewportCount = 1;
                    this._framebuffers[0] = null;
                    break;
                case (0, _mainJs.StereoMode).right:
                    viewport1 = this._viewports[1];
                    viewport1.x = 0;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width;
                    viewport1.height = this._canvas.height;
                    this._viewportOffset = 1;
                    this._viewportCount = 1;
                    this._framebuffers[1] = null;
                    break;
                case (0, _mainJs.StereoMode).anaglyph:
                    viewport1 = this._viewports[0];
                    viewport1.x = 0;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width;
                    viewport1.height = this._canvas.height;
                    viewport1 = this._viewports[1];
                    viewport1.x = 0;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width;
                    viewport1.height = this._canvas.height;
                    this._viewportOffset = 0;
                    this._viewportCount = 2;
                    this._framebuffers[0] = this.anaglyphFramebuffers[0];
                    this._framebuffers[1] = this.anaglyphFramebuffers[1];
                    break;
                case (0, _mainJs.StereoMode).split:
                    viewport1 = this._viewports[0];
                    viewport1.x = 0;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width / 2;
                    viewport1.height = this._canvas.height;
                    viewport1 = this._viewports[1];
                    viewport1.x = this._canvas.width / 2;
                    viewport1.y = 0;
                    viewport1.width = this._canvas.width / 2;
                    viewport1.height = this._canvas.height;
                    this._viewportOffset = 0;
                    this._viewportCount = 2;
                    this._framebuffers[0] = null;
                    this._framebuffers[1] = null;
                    break;
            }
        }
    }
    createTransitionBuffer(ids) {
        const buffer = new (0, _bufferJs.TransitionBuffer)(this._core, ids);
        buffer.initializeContext(this._gl);
        return buffer;
    }
    createControllerVisual(controller) {
        const visual = new (0, _controllerJs.ControllerVisual)(this._core, this, controller);
        visual.initializeContext(this._gl);
        return visual;
    }
    createCartesian2dAxesVisual(axes) {
        const visual = new (0, _cartesian2DJs.Cartesian2dVisual)(this._core, this, axes);
        visual.initializeContext(this._gl);
        return visual;
    }
    createCartesian3dAxesVisual(axes) {
        const visual = new (0, _cartesian3DJs.Cartesian3dVisual)(this._core, this, axes);
        visual.initializeContext(this._gl);
        return visual;
    }
    _createDebugAxesVisual(debugAxes) {
        return new (0, _debugJs.DebugAxesVisual)(this._core, this, debugAxes);
    }
    _createLabelVisual(label) {
        return new (0, _labelsJs.LabelVisual)(this._core, this, label);
    }
    createLabelSetVisual(labelSet) {
        const visual = new (0, _labelsJs.LabelSetVisual)(this._core, this, labelSet);
        visual.initializeContext(this._gl);
        return visual;
    }
    createImageVisual(image) {
        const visual = new (0, _imageJs.ImageVisual)(this._core, this, image);
        visual.initializeContext(this._gl);
        return visual;
    }
    createFontVisual(font) {
        const visual = new (0, _fontJs.FontVisual)(this._core, font);
        visual.initializeContext(this._gl);
        return visual;
    }
    getDataUrl(mimeType) {
        return this._canvas.toDataURL(mimeType);
    }
    render(elapsedTime, xrFrame) {
        this._gl.enable(this._gl.DEPTH_TEST);
        this._gl.enable(this._gl.CULL_FACE);
        this._gl.disable(this._gl.BLEND);
        if (this.isPickingEnabled) {
            this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
            this._gl.clearColor(0, 0, 0, 0);
            this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
        }
        const backgroundColor = this._backgroundColor || this._core.config.backgroundColor;
        this._gl.clearColor(backgroundColor[0], backgroundColor[1], backgroundColor[2], 1);
        if (xrFrame) {
            const glLayer = xrFrame.session.renderState.baseLayer;
            this._shaderResources.bindFramebuffer(glLayer.framebuffer);
            this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
        } else if (this._core.config.stereoMode == (0, _mainJs.StereoMode).anaglyph) {
            for(let i = 0; i < 2; i++){
                this._shaderResources.bindFramebuffer(this.anaglyphFramebuffers[i]);
                this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
            }
            this._shaderResources.bindFramebuffer(null);
            this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
        } else {
            this._shaderResources.bindFramebuffer(null);
            this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
        }
        if (this._core.config.isDebugVisible) {
            this._debugAxesVisual.framebuffers = this._framebuffers;
            this._debugAxesVisual.render(elapsedTime, xrFrame);
        }
        for(let i1 = 0; i1 < this.transitionBuffers.length; i1++){
            const transitionBuffer = this.transitionBuffers[i1];
            if (transitionBuffer.isVisible) this._renderTransitionBuffer(xrFrame, transitionBuffer);
        }
        const axesVisuals = this.axesVisibility == (0, _mainJs.AxesVisibility).current ? this.currentAxes : this.axesVisibility == (0, _mainJs.AxesVisibility).previous ? this.previousAxes : null;
        if (axesVisuals) for(let i2 = 0; i2 < axesVisuals.length; i2++){
            const axesVisual = axesVisuals[i2];
            if (axesVisual.isVisible) {
                axesVisual.pickedIdColor = this._pickedIdColor;
                axesVisual.pickFramebuffer = this._pickFrameBuffer;
                axesVisual.framebuffers = this._framebuffers;
                axesVisual.render(elapsedTime, xrFrame);
            }
        }
        if (this.areLabelsVisible) for(let i3 = 0; i3 < this.labelSets.length; i3++){
            const labelSetVisual = this.labelSets[i3];
            if (labelSetVisual.isVisible) {
                labelSetVisual.pickedIdColor = this._pickedIdColor;
                labelSetVisual.pickFramebuffer = this._pickFrameBuffer;
                labelSetVisual.framebuffers = this._framebuffers;
                labelSetVisual.render(elapsedTime, xrFrame);
            }
        }
        if (this.areImagesVisible) for(let i4 = 0; i4 < this.images.length; i4++){
            const imageVisual = this.images[i4];
            if (imageVisual.isVisible) {
                imageVisual.framebuffers = this._framebuffers;
                imageVisual.render(elapsedTime, xrFrame);
            }
        }
        for(let i5 = 0; i5 < this.controllers.length; i5++){
            const controllerVisual = this.controllers[i5];
            if (controllerVisual.isVisible) {
                controllerVisual.isRayVisible = this.isPickingEnabled;
                controllerVisual.framebuffers = this._framebuffers;
                controllerVisual.render(elapsedTime, xrFrame);
            }
        }
        if (this.isPickingEnabled) {
            this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
            this._gl.readPixels(this._core.config.pickWidth / 2, this._core.config.pickHeight / 2, 1, 1, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._pickedPixels);
            this._pickedType = (0, _pickJs.PickHelper).decodeType(this._pickedPixels);
            (0, _glMatrix.vec4).set(this._pickedIdColor, this._pickedPixels[0] / 0xff, this._pickedPixels[1] / 0xff, this._pickedPixels[2] / 0xff, this._pickedPixels[3] / 0xff);
            this._pickedId = (0, _pickJs.PickHelper).decodeNumber(this._pickedPixels);
            if (this._isCapturingPickImage && this.capturePickImageCallback) {
                this._isCapturingPickImage = false;
                const data = new Uint8ClampedArray(this._core.config.pickWidth * this._core.config.pickHeight * 4);
                this._gl.readPixels(0, 0, this._core.config.pickWidth, this._core.config.pickHeight, this._gl.RGBA, this._gl.UNSIGNED_BYTE, data);
                for(let i6 = 0; i6 < data.length / 4; i6++)if (data[i6 * 4 + 3] == (0, _mainJs.PickType).data) data[i6 * 4 + 3] = 255;
                else {
                    data[i6 * 4] = 0;
                    data[i6 * 4 + 1] = 0;
                    data[i6 * 4 + 2] = 0;
                    data[i6 * 4 + 3] = 0;
                }
                this.capturePickImageCallback(data, this._core.config.pickWidth, this._core.config.pickHeight);
            }
        } else {
            (0, _glMatrix.vec4).set(this._pickedIdColor, 0, 0, 0, 0);
            this._pickedId = 0;
        }
        if (this.isLassoPicking && this._lassoShader.isInitialized) {
            this._lassoShader.vertexBuffer = this._lasso.vertexBuffer;
            this._lassoShader.indexBuffer = this._lasso.indexBuffer;
            const lassoWidth = this.lassoX1 - this.lassoX0;
            const lassoHeight = this.lassoY1 - this.lassoY0;
            this._lassoShader.prepare();
            this._lassoShader.color = this.lassoColor ? this.lassoColor : this._core.config.lassoColor;
            this._lassoShader.dashWidth = this.lassoDashWidth ? this.lassoDashWidth : this._core.config.lassoDashWidth;
            this._lassoShader.apply();
            const lassoThickness = this.lassoThickness ? this.lassoThickness : this._core.config.lassoThickness;
            for(let i7 = 0; i7 < this._viewportCount; i7++){
                const viewportIndex = i7 + this._viewportOffset;
                this._shaderResources.bindFramebuffer(this._framebuffers[viewportIndex]);
                const viewport = this._viewports[viewportIndex];
                this._gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
                this._lassoMMatrix[0] = lassoWidth * 2 / viewport.width;
                this._lassoMMatrix[5] = lassoHeight * 2 / viewport.height;
                this._lassoMMatrix[10] = 1;
                this._lassoMMatrix[12] = (this.lassoX0 + lassoWidth / 2) / viewport.width * 2 - 1;
                this._lassoMMatrix[13] = 1 - (this.lassoY0 + lassoHeight / 2) / viewport.height * 2;
                this._lassoShader.mMatrix = this._lassoMMatrix;
                (0, _glMatrix.vec2).set(this._lassoThickness, lassoThickness / lassoWidth, lassoThickness / lassoHeight);
                this._lassoShader.thickness = this._lassoThickness;
                this._lassoShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLES, this._lasso.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
        }
        if (this._core.config.stereoMode == (0, _mainJs.StereoMode).anaglyph && this._anaglyphShader.isInitialized && this._quad.isInitialized) {
            this._shaderResources.bindFramebuffer(null);
            this._gl.viewport(this._viewports[0].x, this._viewports[0].y, this._viewports[0].width, this._viewports[0].height);
            this._anaglyphShader.vertexBuffer = this._quad.vertexBuffer;
            this._anaglyphShader.indexBuffer = this._quad.indexBuffer;
            this._anaglyphShader.texture2D1 = this._anaglyphTextures[0];
            this._anaglyphShader.texture2D2 = this._anaglyphTextures[1];
            this._anaglyphShader.prepare();
            this._anaglyphShader.viewport = this._viewports[0];
            this._anaglyphShader.apply();
            this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
        }
    }
    _renderTransitionBuffer(xrFrame, transitionBuffer) {
        const currentBuffer = transitionBuffer.currentBuffer;
        const previousBuffer = transitionBuffer.previousBuffer;
        const currentPalette = transitionBuffer.currentPalette;
        const previousPalette = transitionBuffer.previousPalette;
        const unitType = transitionBuffer.unitType === undefined ? currentBuffer.unitType : transitionBuffer.unitType;
        const id = currentBuffer.lookup[transitionBuffer.pickIdLookup[this._pickedId]];
        const hoverId = id > -1 ? (0, _vertexJs.UnitVertex).getIdHover(currentBuffer.dataView, id) : -1;
        const activeId = transitionBuffer.activeId;
        if (this._blockShader.isInitialized && (unitType == (0, _mainJs.UnitType).block || unitType == (0, _mainJs.UnitType).blockSdf)) {
            this._blockShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._blockShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._blockShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._blockShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._blockShader.prepare();
            this._blockShader.mMatrix = this.mMatrix;
            this._blockShader.time = this.transitionTime;
            this._blockShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._blockShader.rangeMin = 0;
            this._blockShader.rangeMax = transitionBuffer.length - 1;
            this._blockShader.hover = hoverId;
            this._blockShader.active = activeId;
            this._blockShader.selectedColor = this._core.config.selectionColor;
            this._blockShader.hoverColor = this._core.config.hoverColor;
            this._blockShader.activeColor = this._core.config.activeColor;
            this._blockShader.highlightMode = this._core.config.hightlightMode;
            this._blockShader.specularPower = this._config.specularPower;
            this._blockShader.specularIntensity = this._config.specularIntensity;
            this._blockShader.apply();
            this._blockShader.isPickShader = false;
            for(let i = 0; i < this._viewportCount; i++){
                const viewport = i + this._viewportOffset;
                this._shaderResources.bindFramebuffer(this._framebuffers[viewport]);
                this._gl.viewport(this._viewports[viewport].x, this._viewports[viewport].y, this._viewports[viewport].width, this._viewports[viewport].height);
                const vMatrix = this.vMatrices[viewport];
                if (xrFrame) {
                    (0, _glMatrix.vec3).set(this._modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToLight, this._config.lightPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToLight, this._directionToLight);
                    const inverseVMatrix = this.inverseVMatrices[viewport];
                    (0, _glMatrix.vec3).set(this._cameraPosition, inverseVMatrix[12], inverseVMatrix[13], inverseVMatrix[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToCamera, this._cameraPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToCamera, this._directionToCamera);
                    (0, _glMatrix.vec3).add(this._halfAngle, this._directionToLight, this._directionToCamera);
                    (0, _glMatrix.vec3).normalize(this._halfAngle, this._halfAngle);
                    (0, _glMatrix.mat3).fromMat4(this._mat3, vMatrix);
                    (0, _glMatrix.vec3).transformMat3(this._directionToLight, this._directionToLight, this._mat3);
                    (0, _glMatrix.vec3).transformMat3(this._halfAngle, this._halfAngle, this._mat3);
                    this._blockShader.directionToLight = this._directionToLight;
                    this._blockShader.halfAngle = this._halfAngle;
                } else {
                    this._blockShader.directionToLight = this._config.directionToLight;
                    this._blockShader.halfAngle = this._config.halfAngle;
                }
                this._blockShader.vMatrix = vMatrix;
                this._blockShader.pMatrix = this.pMatrices[viewport];
                this._blockShader.applyView();
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._blockShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this.isPickingEnabled && transitionBuffer.isPickingEnabled) {
                this._blockShader.isPickShader = true;
                this._blockShader.pMatrix = this.pickPMatrix;
                this._blockShader.vMatrix = this.pickVMatrix;
                this._blockShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._blockShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        } else if (this._sphereShader.isInitialized && (unitType == (0, _mainJs.UnitType).sphere || unitType == (0, _mainJs.UnitType).sphereSdf)) {
            this._sphereShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._sphereShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._sphereShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._sphereShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._sphereShader.prepare();
            this._sphereShader.mMatrix = this.mMatrix;
            this._sphereShader.time = this.transitionTime;
            this._sphereShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._sphereShader.rangeMin = 0;
            this._sphereShader.rangeMax = transitionBuffer.length - 1;
            this._sphereShader.hover = hoverId;
            this._sphereShader.active = activeId;
            this._sphereShader.selectedColor = this._core.config.selectionColor;
            this._sphereShader.hoverColor = this._core.config.hoverColor;
            this._sphereShader.activeColor = this._core.config.activeColor;
            this._sphereShader.highlightMode = this._core.config.hightlightMode;
            this._sphereShader.specularPower = this._config.specularPower;
            this._sphereShader.specularIntensity = this._config.specularIntensity;
            this._sphereShader.apply();
            this._sphereShader.isPickShader = false;
            for(let i1 = 0; i1 < this._viewportCount; i1++){
                const viewport1 = i1 + this._viewportOffset;
                this._shaderResources.bindFramebuffer(this._framebuffers[viewport1]);
                this._gl.viewport(this._viewports[viewport1].x, this._viewports[viewport1].y, this._viewports[viewport1].width, this._viewports[viewport1].height);
                const vMatrix1 = this.vMatrices[viewport1];
                if (xrFrame) {
                    (0, _glMatrix.vec3).set(this._modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToLight, this._config.lightPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToLight, this._directionToLight);
                    const inverseVMatrix1 = this.inverseVMatrices[viewport1];
                    (0, _glMatrix.vec3).set(this._cameraPosition, inverseVMatrix1[12], inverseVMatrix1[13], inverseVMatrix1[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToCamera, this._cameraPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToCamera, this._directionToCamera);
                    (0, _glMatrix.vec3).add(this._halfAngle, this._directionToLight, this._directionToCamera);
                    (0, _glMatrix.vec3).normalize(this._halfAngle, this._halfAngle);
                    (0, _glMatrix.mat3).fromMat4(this._mat3, vMatrix1);
                    (0, _glMatrix.vec3).transformMat3(this._directionToLight, this._directionToLight, this._mat3);
                    (0, _glMatrix.vec3).transformMat3(this._halfAngle, this._halfAngle, this._mat3);
                    this._sphereShader.directionToLight = this._directionToLight;
                    this._sphereShader.halfAngle = this._halfAngle;
                } else {
                    this._sphereShader.directionToLight = this._config.directionToLight;
                    this._sphereShader.halfAngle = this._config.halfAngle;
                }
                this._sphereShader.vMatrix = vMatrix1;
                this._sphereShader.pMatrix = this.pMatrices[viewport1];
                this._sphereShader.applyView();
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._sphereShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this.isPickingEnabled && transitionBuffer.isPickingEnabled) {
                this._sphereShader.isPickShader = true;
                this._sphereShader.pMatrix = this.pickPMatrix;
                this._sphereShader.vMatrix = this.pickVMatrix;
                this._sphereShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._sphereShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        } else if (this._cylinderShader.isInitialized && (unitType == (0, _mainJs.UnitType).cylinder || unitType == (0, _mainJs.UnitType).cylinderSdf)) {
            this._cylinderShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._cylinderShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._cylinderShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._cylinderShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._cylinderShader.prepare();
            this._cylinderShader.mMatrix = this.mMatrix;
            this._cylinderShader.time = this.transitionTime;
            this._cylinderShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._cylinderShader.rangeMin = 0;
            this._cylinderShader.rangeMax = transitionBuffer.length - 1;
            this._cylinderShader.hover = hoverId;
            this._cylinderShader.active = activeId;
            this._cylinderShader.selectedColor = this._core.config.selectionColor;
            this._cylinderShader.hoverColor = this._core.config.hoverColor;
            this._cylinderShader.activeColor = this._core.config.activeColor;
            this._cylinderShader.highlightMode = this._core.config.hightlightMode;
            this._cylinderShader.specularPower = this._config.specularPower;
            this._cylinderShader.specularIntensity = this._config.specularIntensity;
            this._cylinderShader.apply();
            this._cylinderShader.isPickShader = false;
            for(let i2 = 0; i2 < this._viewportCount; i2++){
                const viewport2 = i2 + this._viewportOffset;
                this._shaderResources.bindFramebuffer(this._framebuffers[viewport2]);
                this._gl.viewport(this._viewports[viewport2].x, this._viewports[viewport2].y, this._viewports[viewport2].width, this._viewports[viewport2].height);
                const vMatrix2 = this.vMatrices[viewport2];
                if (xrFrame) {
                    (0, _glMatrix.vec3).set(this._modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToLight, this._config.lightPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToLight, this._directionToLight);
                    const inverseVMatrix2 = this.inverseVMatrices[viewport2];
                    (0, _glMatrix.vec3).set(this._cameraPosition, inverseVMatrix2[12], inverseVMatrix2[13], inverseVMatrix2[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToCamera, this._cameraPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToCamera, this._directionToCamera);
                    (0, _glMatrix.vec3).add(this._halfAngle, this._directionToLight, this._directionToCamera);
                    (0, _glMatrix.vec3).normalize(this._halfAngle, this._halfAngle);
                    (0, _glMatrix.mat3).fromMat4(this._mat3, vMatrix2);
                    (0, _glMatrix.vec3).transformMat3(this._directionToLight, this._directionToLight, this._mat3);
                    (0, _glMatrix.vec3).transformMat3(this._halfAngle, this._halfAngle, this._mat3);
                    this._cylinderShader.directionToLight = this._directionToLight;
                    this._cylinderShader.halfAngle = this._halfAngle;
                } else {
                    this._cylinderShader.directionToLight = this._config.directionToLight;
                    this._cylinderShader.halfAngle = this._config.halfAngle;
                }
                this._cylinderShader.vMatrix = vMatrix2;
                this._cylinderShader.pMatrix = this.pMatrices[viewport2];
                this._cylinderShader.applyView();
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._cylinderShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this.isPickingEnabled && transitionBuffer.isPickingEnabled) {
                this._cylinderShader.isPickShader = true;
                this._cylinderShader.pMatrix = this.pickPMatrix;
                this._cylinderShader.vMatrix = this.pickVMatrix;
                this._cylinderShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._cylinderShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        } else if (this._hexPrismShader.isInitialized && (unitType == (0, _mainJs.UnitType).hexPrism || unitType == (0, _mainJs.UnitType).hexPrismSdf)) {
            this._hexPrismShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._hexPrismShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._hexPrismShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._hexPrismShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._hexPrismShader.prepare();
            this._hexPrismShader.mMatrix = this.mMatrix;
            this._hexPrismShader.time = this.transitionTime;
            this._hexPrismShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._hexPrismShader.rangeMin = 0;
            this._hexPrismShader.rangeMax = transitionBuffer.length - 1;
            this._hexPrismShader.hover = hoverId;
            this._hexPrismShader.active = activeId;
            this._hexPrismShader.selectedColor = this._core.config.selectionColor;
            this._hexPrismShader.hoverColor = this._core.config.hoverColor;
            this._hexPrismShader.activeColor = this._core.config.activeColor;
            this._hexPrismShader.highlightMode = this._core.config.hightlightMode;
            this._hexPrismShader.specularPower = this._config.specularPower;
            this._hexPrismShader.specularIntensity = this._config.specularIntensity;
            this._hexPrismShader.apply();
            this._hexPrismShader.isPickShader = false;
            for(let i3 = 0; i3 < this._viewportCount; i3++){
                const viewport3 = i3 + this._viewportOffset;
                this._shaderResources.bindFramebuffer(this._framebuffers[viewport3]);
                this._gl.viewport(this._viewports[viewport3].x, this._viewports[viewport3].y, this._viewports[viewport3].width, this._viewports[viewport3].height);
                const vMatrix3 = this.vMatrices[viewport3];
                if (xrFrame) {
                    (0, _glMatrix.vec3).set(this._modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToLight, this._config.lightPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToLight, this._directionToLight);
                    const inverseVMatrix3 = this.inverseVMatrices[viewport3];
                    (0, _glMatrix.vec3).set(this._cameraPosition, inverseVMatrix3[12], inverseVMatrix3[13], inverseVMatrix3[14]);
                    (0, _glMatrix.vec3).subtract(this._directionToCamera, this._cameraPosition, this._modelPosition);
                    (0, _glMatrix.vec3).normalize(this._directionToCamera, this._directionToCamera);
                    (0, _glMatrix.vec3).add(this._halfAngle, this._directionToLight, this._directionToCamera);
                    (0, _glMatrix.vec3).normalize(this._halfAngle, this._halfAngle);
                    (0, _glMatrix.mat3).fromMat4(this._mat3, vMatrix3);
                    (0, _glMatrix.vec3).transformMat3(this._directionToLight, this._directionToLight, this._mat3);
                    (0, _glMatrix.vec3).transformMat3(this._halfAngle, this._halfAngle, this._mat3);
                    this._hexPrismShader.directionToLight = this._directionToLight;
                    this._hexPrismShader.halfAngle = this._halfAngle;
                } else {
                    this._hexPrismShader.directionToLight = this._config.directionToLight;
                    this._hexPrismShader.halfAngle = this._config.halfAngle;
                }
                this._hexPrismShader.vMatrix = vMatrix3;
                this._hexPrismShader.pMatrix = this.pMatrices[viewport3];
                this._hexPrismShader.applyView();
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._hexPrismShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this.isPickingEnabled && transitionBuffer.isPickingEnabled) {
                this._hexPrismShader.isPickShader = true;
                this._hexPrismShader.pMatrix = this.pickPMatrix;
                this._hexPrismShader.vMatrix = this.pickVMatrix;
                this._hexPrismShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._shaderResources.ANGLE_instanced_arrays.drawElementsInstancedANGLE(this._gl.TRIANGLE_STRIP, this._hexPrismShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        }
    }
}

},{"gl-matrix":"3mrln","../../main.js":"2JYph","../renderer.js":"aTXAw","./components/quad.js":"6qb92","./buffer.js":"hWTlx","./config.js":"iUM4T","./shaders/shader.js":"e7ZKA","./shaders/color.js":"1QYjT","./shaders/texture.js":"hP3Wm","./shaders/lasso.js":"3GeRj","./shaders/model.js":"aEajO","./shaders/sdftext.js":"jZPJo","./shaders/pickgrid.js":"hrlvb","./shaders/unitblock.js":"eCrkd","./shaders/unitsphere.js":"hASTw","./shaders/unitcylinder.js":"6mSD9","./shaders/unithexprism":"6VtnI","./shaders/anaglyph.js":"znCvp","../../helpers/texture.js":"eZ0Tk","../../helpers/pick.js":"jhV3p","./components/debug.js":"h3oJk","./components/axes/cartesian2d.js":"jtXyZ","./components/axes/cartesian3d.js":"aqv5q","./components/controller.js":"84Y5o","./components/image.js":"5hDEx","../../vertex.js":"7T2qu","./components/labels.js":"aIxo5","./font.js":"gSFUH","./components/lasso.js":"ff79l","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aTXAw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RendererConfig", ()=>RendererConfig);
parcelHelpers.export(exports, "RendererBase", ()=>RendererBase);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../main.js");
var _axesJs = require("../components/axes/axes.js");
var _bufferJs = require("../buffer.js");
var _vertexJs = require("../vertex.js");
var _labelsJs = require("../components/labels.js");
var _debugJs = require("../components/debug.js");
var _controllerJs = require("../components/controller.js");
var _imageJs = require("../components/image.js");
var _fontJs = require("../font.js");
class RendererConfig {
    reset() {}
}
class RendererBase {
    constructor(options){
        this._options = options;
        this._resizeMinimumDelay = -1;
        this.fonts = {};
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get config() {
        return this._config;
    }
    get devicePixelRatio() {
        return this._devicePixelRatio;
    }
    get width() {
        return this._canvas.width;
    }
    set width(value) {
        this._options.width = value;
    }
    get height() {
        return this._canvas.height;
    }
    set height(value) {
        this._options.height = value;
    }
    get webXRReferenceSpace() {
        return this._webXRReferenceSpace;
    }
    get pickedType() {
        return this._pickedType;
    }
    get pickedId() {
        return this._pickedId;
    }
    get isCapturingPickImage() {
        return this._isCapturingPickImage;
    }
    capturePickImage() {
        this._isCapturingPickImage = true;
    }
    get backgroundColor() {
        return this._backgroundColor;
    }
    set backgroundColor(value) {
        if (!(0, _glMatrix.vec3).exactEquals(value, this._backgroundColor)) this._backgroundColor = value;
    }
    get currentAxes() {
        return this._isAxes1Current ? this._axes1 : this._axes2;
    }
    set currentAxes(value) {
        if (this._isAxes1Current) this._axes1 = value;
        else this._axes2 = value;
    }
    get previousAxes() {
        return this._isAxes1Current ? this._axes2 : this._axes1;
    }
    set previousAxes(value) {
        if (this._isAxes1Current) this._axes2 = value;
        else this._axes1 = value;
    }
    swapAxes() {
        this._isAxes1Current = !this._isAxes1Current;
    }
    createCartesian2dAxesVisual(axes) {
        return new (0, _axesJs.AxesVisual)(axes);
    }
    createCartesian3dAxesVisual(axes) {
        return new (0, _axesJs.AxesVisual)(axes);
    }
    _createDebugAxesVisual(debugAxes) {
        return null;
    }
    createLabelSetVisual(labelSet) {
        return new (0, _labelsJs.LabelSetVisual)(labelSet);
    }
    createControllerVisual(controller) {
        return new (0, _controllerJs.ControllerVisual)(controller);
    }
    createTransitionBuffer(ids) {
        return new (0, _bufferJs.TransitionBuffer)(this._core, ids);
    }
    createImageVisual(image) {
        return new (0, _imageJs.ImageVisual)(image);
    }
    createFontVisual(font) {
        return new (0, _fontJs.FontVisual)(font);
    }
    get isWebXRSupported() {
        return false;
    }
    initialize(core) {
        this._core = core;
        this._canvas = document.createElement("canvas");
        this._canvas.addEventListener("contextmenu", (e)=>{
            e.preventDefault();
        });
        this._canvas.tabIndex = this._core.container.tabIndex;
        this._canvas.style.display = "block";
        this._canvas.style.touchAction = "none";
        this._core.container.appendChild(this._canvas);
        this._mvMatrices = [
            (0, _glMatrix.mat4).create(),
            (0, _glMatrix.mat4).create()
        ];
        this.pickPMatrix = (0, _glMatrix.mat4).create();
        this.axesVisibility = (0, _mainJs.AxesVisibility).current;
        this._debugAxes = new (0, _debugJs.DebugAxes)();
        this._debugAxesVisual = this._createDebugAxesVisual(this._debugAxes);
        this.transitionTime = 1;
        this.transitionBuffers = [];
        this.areLabelsVisible = true;
        this.labelSets = [];
        this.controllers = [];
        this.areImagesVisible = true;
        this.images = [];
        this._viewports = [
            new DOMRect(),
            new DOMRect()
        ];
        this.isPickingEnabled = false;
        this._pickedType = (0, _mainJs.PickType).none;
        this._pickedId = 0;
        this._lassoMMatrix = (0, _glMatrix.mat4).create();
        this._lassoThickness = (0, _glMatrix.vec2).create();
    }
    remove() {
        this._core.container.removeChild(this._canvas);
    }
    finalize() {}
    setSize(elapsedTime) {
        if (this._options && this._options.width && this._options.height) {
            this._devicePixelRatio = 1;
            this._resizeWidth = this._options.width;
            this._resizeHeight = this._options.height;
        } else {
            this._devicePixelRatio = window.devicePixelRatio || 1;
            this._resizeWidth = this._core.container.clientWidth * devicePixelRatio;
            this._resizeHeight = this._core.container.clientHeight * devicePixelRatio;
        }
        if (this._resizeWidth != this._previousResizeWidth || this._resizeHeight != this._previousResizeHeight) {
            this._previousResizeWidth = this._resizeWidth;
            this._previousResizeHeight = this._resizeHeight;
            this._isResizing = true;
            this._resizeElapsedTime = 0;
        }
        if (this._isResizing) {
            if (this._resizeElapsedTime > this._resizeMinimumDelay && this._isInitialized) {
                this._isResizing = false;
                this._resizeMinimumDelay = this._core.config.resizeMinimumDelay;
                this._resize(this._resizeWidth, this._resizeHeight);
            } else this._resizeElapsedTime += elapsedTime;
        }
    }
    _resize(width, height) {
        this._canvas.style.width = `${Math.floor(width / this._devicePixelRatio)}px`;
        this._canvas.style.height = `${Math.floor(height / this._devicePixelRatio)}px`;
        width = Math.floor(width);
        height = Math.floor(height);
        this._canvas.width = width;
        this._canvas.height = height;
    }
    update(elapsedTime) {
        for(let i = 0; i < this.transitionBuffers.length; i++){
            const transitionBuffer = this.transitionBuffers[i];
            if (transitionBuffer.isVisible) {
                const previous = transitionBuffer.previousPalette;
                const current = transitionBuffer.currentPalette;
                if (previous) previous.update();
                if (current) current.update();
            }
        }
        if (this._core.config.isDebugVisible) {
            if (this._debugAxesVisual) {
                this._debugAxesVisual.mMatrix = this.mMatrix;
                this._debugAxesVisual.vMatrices = this.vMatrices;
                this._debugAxesVisual.pMatrices = this.pMatrices;
                this._debugAxesVisual.viewports = this._viewports;
                this._debugAxesVisual.viewportOffset = this._viewportOffset;
                this._debugAxesVisual.viewportCount = this._viewportCount;
            }
        }
        if (this.areLabelsVisible) for(let i1 = 0; i1 < this.labelSets.length; i1++){
            const labelSetVisual = this.labelSets[i1];
            if (labelSetVisual.isVisible) {
                this.labelSets[i1].label.update(elapsedTime);
                labelSetVisual.mMatrix = this.mMatrix;
                labelSetVisual.vMatrices = this.vMatrices;
                labelSetVisual.pMatrices = this.pMatrices;
                labelSetVisual.isPickingEnabled = this.isPickingEnabled;
                labelSetVisual.pickPMatrix = this.pickPMatrix;
                labelSetVisual.pickVMatrix = this.pickVMatrix;
                labelSetVisual.viewports = this._viewports;
                labelSetVisual.viewportOffset = this._viewportOffset;
                labelSetVisual.viewportCount = this._viewportCount;
                labelSetVisual.update(elapsedTime);
            }
        }
        if (this.areImagesVisible) for(let i2 = 0; i2 < this.images.length; i2++){
            const imageVisual = this.images[i2];
            if (imageVisual && imageVisual.isVisible) {
                const image = this.images[i2].image;
                image.update(elapsedTime);
                imageVisual.mMatrix = this.mMatrix;
                imageVisual.vMatrices = this.vMatrices;
                imageVisual.pMatrices = this.pMatrices;
                imageVisual.viewports = this._viewports;
                imageVisual.viewportOffset = this._viewportOffset;
                imageVisual.viewportCount = this._viewportCount;
                imageVisual.update(elapsedTime);
            }
        }
        for(let i3 = 0; i3 < this.controllers.length; i3++){
            const controllerVisual = this.controllers[i3];
            if (controllerVisual.isVisible) {
                const controller = this.controllers[i3].controller;
                controller.update(elapsedTime);
                controllerVisual.vMatrices = this.vMatrices;
                controllerVisual.inverseVMatrices = this.vMatrices;
                controllerVisual.pMatrices = this.pMatrices;
                controllerVisual.viewports = this._viewports;
                controllerVisual.viewportOffset = this._viewportOffset;
                controllerVisual.viewportCount = this._viewportCount;
                controllerVisual.update(elapsedTime);
            }
        }
        const axesVisuals = this.axesVisibility == (0, _mainJs.AxesVisibility).current ? this.currentAxes : this.axesVisibility == (0, _mainJs.AxesVisibility).previous ? this.previousAxes : null;
        if (axesVisuals) for(let i4 = 0; i4 < axesVisuals.length; i4++){
            const axesVisual = axesVisuals[i4];
            if (axesVisual.isVisible) {
                const axes = axesVisual.axes;
                axes.mMatrix = this.mMatrix;
                axes.vMatrix = this.vMatrices[0];
                axes.update(elapsedTime);
                axesVisual.vMatrices = this.vMatrices;
                axesVisual.pMatrices = this.pMatrices;
                axesVisual.isPickingEnabled = this.isPickingEnabled;
                axesVisual.pickPMatrix = this.pickPMatrix;
                axesVisual.pickVMatrix = this.pickVMatrix;
                axesVisual.viewports = this._viewports;
                axesVisual.viewportOffset = this._viewportOffset;
                axesVisual.viewportCount = this._viewportCount;
                axesVisual.update(elapsedTime);
            }
        }
        for(const key in this.fonts){
            const fontVisual = this.fonts[key];
            const font = fontVisual.font;
            font.update();
            fontVisual.update();
        }
    }
    getVertexPosition(position, pickedId) {
        for(let i = 0; i < this.transitionBuffers.length; i++){
            const transitionBuffer = this.transitionBuffers[i];
            const id = transitionBuffer.pickIdLookup[pickedId];
            if (id > -1) {
                const index = transitionBuffer.currentBuffer.lookup[id];
                const dataView = transitionBuffer.currentBuffer.dataView;
                (0, _vertexJs.UnitVertex).getTranslation(dataView, index, position);
                break;
            }
        }
    }
    render(elapsedTime, xrFrame) {}
    prepare(xrFrame) {}
    initializeWebXR(session) {
        return null;
    }
}

},{"gl-matrix":"3mrln","../main.js":"2JYph","../components/axes/axes.js":"l4fPN","../buffer.js":"lnUI7","../vertex.js":"7T2qu","../components/labels.js":"4PuF6","../components/debug.js":"5spg2","../components/controller.js":"9Kfa8","../components/image.js":"8weU6","../font.js":"kD06g","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lnUI7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BufferBase", ()=>BufferBase);
parcelHelpers.export(exports, "TransitionBufferBase", ()=>TransitionBufferBase);
parcelHelpers.export(exports, "Buffer", ()=>Buffer);
parcelHelpers.export(exports, "TransitionBuffer", ()=>TransitionBuffer);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("./constants.js");
var _paletteJs = require("./palette.js");
var _vertexJs = require("./vertex.js");
var _pickJs = require("./helpers/pick.js");
var _mainJs = require("./main.js");
class BufferBase {
    constructor(core, ids){
        this._core = core;
        this._ids = ids;
        this._length = ids.length;
        this._vertices = new ArrayBuffer(this._length * (0, _vertexJs.UnitVertex).SIZE_BYTES);
        this._dataView = new DataView(this._vertices);
        this._selected = new Set();
        this.from = 0;
        this.to = 1;
        this._lookup = {};
        for(let i = 0; i < this._length; i++){
            const id = ids[i];
            this._lookup[id] = i;
        }
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get ids() {
        return this._ids;
    }
    get dataView() {
        return this._dataView;
    }
    get vertices() {
        return this._vertices;
    }
    get lookup() {
        return this._lookup;
    }
    get length() {
        return this._length;
    }
    get selected() {
        return this._selected;
    }
    createShared() {
        const buffer = Object.create(this);
        buffer._vertices = new ArrayBuffer(buffer._vertices.byteLength);
        buffer._dataView = new DataView(buffer._vertices);
        return buffer;
    }
    copyFrom(buffer) {
        const start = window.performance.now();
        const _vec2 = (0, _glMatrix.vec2).create();
        const _vec3 = (0, _glMatrix.vec3).create();
        const _vec4 = (0, _glMatrix.vec4).create();
        const _quat = (0, _glMatrix.quat).create();
        const dataView = buffer.dataView;
        const lookup = buffer.lookup;
        for(let i = 0; i < this._length; i++){
            const index = lookup[this._ids[i]];
            if (index != null) {
                (0, _vertexJs.UnitVertex).setIdHover(this._dataView, i, (0, _vertexJs.UnitVertex).getIdHover(dataView, index));
                (0, _vertexJs.UnitVertex).getTranslation(dataView, index, _vec3);
                (0, _vertexJs.UnitVertex).setTranslation(this._dataView, i, _vec3);
                (0, _vertexJs.UnitVertex).getScale(dataView, index, _vec4);
                (0, _vertexJs.UnitVertex).setScale(this._dataView, i, _vec4);
                (0, _vertexJs.UnitVertex).getRotation(dataView, index, _quat);
                (0, _vertexJs.UnitVertex).setRotation(this._dataView, i, _quat);
                (0, _vertexJs.UnitVertex).getColor(dataView, index, _vec2);
                (0, _vertexJs.UnitVertex).setColor(this._dataView, i, _vec2);
                (0, _vertexJs.UnitVertex).setSelected(this._dataView, i, (0, _vertexJs.UnitVertex).getSelected(dataView, index));
                (0, _vertexJs.UnitVertex).setMaterial(this._dataView, i, (0, _vertexJs.UnitVertex).getMaterial(dataView, index));
                (0, _vertexJs.UnitVertex).setOrder(this._dataView, i, (0, _vertexJs.UnitVertex).getOrder(dataView, index));
                (0, _vertexJs.UnitVertex).setStaggerOrder(this._dataView, i, (0, _vertexJs.UnitVertex).getStaggerOrder(dataView, index));
            } else (0, _vertexJs.UnitVertex).setRotation(this._dataView, i, (0, _constantsJs.Constants).QUAT_IDENTITY);
        }
        this.unitType = buffer.unitType;
        this._selected = buffer.selected;
        this._core.log.write((0, _mainJs.LogLevel).info, `buffer copied ${this._length} ${Math.round(window.performance.now() - start)}ms`);
    }
    update() {}
    updateSelection(options) {
        const start = window.performance.now();
        const ids = options && options.ids ? options.ids : this._ids;
        const offset = options && options.offset !== undefined ? options.offset : 0;
        const count = options && options.count !== undefined ? options.count : ids.length;
        const selection = this._selected.size > 0;
        for(let i = 0; i < count; i++){
            const id = ids[i + offset];
            const index = this._lookup[id];
            (0, _vertexJs.UnitVertex).setSelected(this._dataView, index, selection ? this._selected.has(id) ? 1 : -1 : 0);
        }
        this.update();
        this._core.log.write((0, _mainJs.LogLevel).info, `buffer update selection ${count} ${Math.round(window.performance.now() - start)}ms`);
    }
}
class TransitionBufferBase {
    constructor(core, ids, bufferType, paletteType){
        this.bufferType = bufferType;
        this.paletteType = paletteType;
        this._core = core;
        this._length = ids.length;
        this.id = TransitionBufferBase._id++;
        this.isVisible = true;
        this.transitionTime = 1;
        this.activeId = -1;
        const start = window.performance.now();
        this._buffer1 = new bufferType(core, ids);
        this._buffer2 = this._buffer1.createShared();
        this._palette1 = new paletteType();
        this._palette2 = new paletteType();
        this.isPickingEnabled = true;
        this._pickIdLookup = {};
        const dataView1 = this._buffer1.dataView;
        const dataView2 = this._buffer2.dataView;
        const _vec4 = (0, _glMatrix.vec4).create();
        for(let i = 0; i < this._length; i++){
            const id = ids[i];
            const pickId = (0, _pickJs.PickHelper).nextPickId();
            this._pickIdLookup[pickId] = id;
            (0, _pickJs.PickHelper).encodeNumber(pickId, (0, _mainJs.PickType).data, _vec4);
            (0, _vertexJs.UnitVertex).setIdColor(dataView1, i, _vec4);
            (0, _vertexJs.UnitVertex).setIdColor(dataView2, i, _vec4);
        }
        this._core.log.write((0, _mainJs.LogLevel).info, `transition buffer created ${this._length} ${Math.round(window.performance.now() - start)}ms`);
    }
    get pickIdLookup() {
        return this._pickIdLookup;
    }
    get currentBuffer() {
        return this._isBuffer1Current ? this._buffer1 : this._buffer2;
    }
    get previousBuffer() {
        return this._isBuffer1Current ? this._buffer2 : this._buffer1;
    }
    get currentPalette() {
        return this._isBuffer1Current ? this._palette1 : this._palette2;
    }
    get previousPalette() {
        return this._isBuffer1Current ? this._palette2 : this._palette1;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get length() {
        return this._length;
    }
    swap() {
        this._isBuffer1Current = !this._isBuffer1Current;
    }
    copyFrom(transitionBuffer) {
        const start = window.performance.now();
        this.key = transitionBuffer.key;
        this.isVisible = transitionBuffer.isVisible;
        this.transitionTime = transitionBuffer.transitionTime;
        this.isPickingEnabled = transitionBuffer.isPickingEnabled;
        this.unitType = transitionBuffer.unitType;
        this.activeId = transitionBuffer.activeId;
        this.currentBuffer.copyFrom(transitionBuffer.currentBuffer);
        this.previousBuffer.copyFrom(transitionBuffer.previousBuffer);
        this.currentBuffer.update();
        this.previousBuffer.update();
        this.currentPalette.copyFrom(transitionBuffer.currentPalette);
        this.previousPalette.copyFrom(transitionBuffer.previousPalette);
        this._core.log.write((0, _mainJs.LogLevel).info, `transition buffer copied ${this._length} ${Math.round(window.performance.now() - start)}ms`);
    }
}
TransitionBufferBase._id = 1;
class Buffer extends BufferBase {
    constructor(core, ids){
        super(core, ids);
    }
}
class TransitionBuffer extends TransitionBufferBase {
    constructor(core, ids){
        super(core, ids, Buffer, (0, _paletteJs.Palette));
    }
}

},{"gl-matrix":"3mrln","./constants.js":"dtECF","./palette.js":"46mvC","./vertex.js":"7T2qu","./helpers/pick.js":"jhV3p","./main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5spg2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DebugAxes", ()=>DebugAxes);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _cubeJs = require("../meshes/cube.js");
var _vertexJs = require("../vertex.js");
class DebugAxes {
    get vertices() {
        return this._vertices;
    }
    get indices() {
        return this._indices;
    }
    get indexCount() {
        return this._indexCount;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    initialize() {
        let vertexOffset = 0;
        let indexOffset = 0;
        const axisVertices = (0, _cubeJs.Cube).POSITIONS;
        const axisIndices = (0, _cubeJs.Cube).INDICES;
        this._vertices = new ArrayBuffer(3 * (0, _vertexJs.PositionColorVertex).SIZE_BYTES * axisVertices.length / (0, _vertexJs.PositionVertex).SIZE);
        const verticesView = new DataView(this._vertices);
        this._indices = new Uint16Array(3 * axisIndices.length + 4);
        const vertexCount = axisVertices.length / (0, _vertexJs.PositionVertex).SIZE;
        const indexCount = axisIndices.length;
        const transform = (0, _glMatrix.mat4).create();
        const length = 1;
        const width = 0.01;
        transform[0] = length;
        transform[5] = width;
        transform[10] = width;
        transform[12] = 0.5;
        transform[13] = 0;
        transform[14] = 0;
        this._createAxis(axisVertices, axisIndices, verticesView, this._indices, (0, _constantsJs.Constants).VECTOR3_UNITX, transform, vertexOffset, indexOffset);
        indexOffset += indexCount;
        this._indices[indexOffset++] = axisIndices[indexCount - 1] + vertexOffset;
        vertexOffset += vertexCount;
        this._indices[indexOffset++] = axisIndices[0] + vertexOffset;
        transform[0] = width;
        transform[5] = length;
        transform[10] = width;
        transform[12] = 0;
        transform[13] = 0.5;
        transform[14] = 0;
        this._createAxis(axisVertices, axisIndices, verticesView, this._indices, (0, _constantsJs.Constants).VECTOR3_UNITY, transform, vertexOffset, indexOffset);
        indexOffset += indexCount;
        this._indices[indexOffset++] = axisIndices[indexCount - 1] + vertexOffset;
        vertexOffset += vertexCount;
        this._indices[indexOffset++] = axisIndices[0] + vertexOffset;
        transform[0] = width;
        transform[5] = width;
        transform[10] = length;
        transform[12] = 0;
        transform[13] = 0;
        transform[14] = 0.5;
        this._createAxis(axisVertices, axisIndices, verticesView, this._indices, (0, _constantsJs.Constants).VECTOR3_UNITZ, transform, vertexOffset, indexOffset);
        this._indexCount = this._indices.length;
        this._isInitialized = true;
    }
    update(elapsedTime) {}
    _createAxis(axisVertices, axisIndices, verticesView, indices, color, transform, vertexOffset, indexOffset) {
        const position = (0, _glMatrix.vec3).create();
        const vertexCount = axisVertices.length / (0, _vertexJs.PositionVertex).SIZE;
        const indexCount = axisIndices.length;
        for(let i = 0; i < vertexCount; i++){
            (0, _glMatrix.vec3).set(position, axisVertices[i * (0, _vertexJs.PositionVertex).SIZE], axisVertices[i * (0, _vertexJs.PositionVertex).SIZE + 1], axisVertices[i * (0, _vertexJs.PositionVertex).SIZE + 2]);
            (0, _glMatrix.vec3).transformMat4(position, position, transform);
            (0, _vertexJs.PositionColorVertex).setPosition(verticesView, vertexOffset + i, position);
            (0, _vertexJs.PositionColorVertex).setColor(verticesView, vertexOffset + i, color);
        }
        for(let i1 = 0; i1 < indexCount; i1++)indices[indexOffset + i1] = axisIndices[i1] + vertexOffset;
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","../meshes/cube.js":"dgOpu","../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6qb92":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Quad", ()=>Quad);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _quadJs = require("../../../meshes/quad.js");
class Quad {
    get isInitialized() {
        return this._isInitialized;
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    get indexBuffer() {
        return this._indexBuffer;
    }
    get indexCount() {
        return this._indexCount;
    }
    initializeContext(gl) {
        const _vec3 = (0, _glMatrix.vec3).fromValues(2, 2, 2);
        const _mat4 = (0, _glMatrix.mat4).create();
        (0, _glMatrix.mat4).fromScaling(_mat4, _vec3);
        const vertices = (0, _quadJs.Quad).positions(_mat4);
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        const indices = (0, _quadJs.Quad).INDICES;
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this._indexCount = indices.length;
        this._isInitialized = true;
    }
}

},{"gl-matrix":"3mrln","../../../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hWTlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Buffer", ()=>Buffer);
parcelHelpers.export(exports, "TransitionBuffer", ()=>TransitionBuffer);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _bufferJs = require("../../buffer.js");
var _mainJs = require("../../main.js");
var _paletteJs = require("./palette.js");
class Buffer extends (0, _bufferJs.BufferBase) {
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    initializeContext(gl) {
        this._gl = gl;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._vertices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update() {
        if (this._isInitialized) {
            const start = window.performance.now();
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, this._vertices);
            this._core.log.write((0, _mainJs.LogLevel).info, `buffer updated ${this._length} ${Math.round(window.performance.now() - start)}ms`);
        }
    }
}
class TransitionBuffer extends (0, _bufferJs.TransitionBufferBase) {
    constructor(core, ids){
        super(core, ids, Buffer, (0, _paletteJs.Palette));
    }
    initializeContext(gl) {
        this._buffer1.initializeContext(gl);
        this._buffer2.initializeContext(gl);
        this._palette1.initializeContext(this._core, gl);
        this._palette2.initializeContext(this._core, gl);
        this._isInitialized = true;
    }
}

},{"../../buffer.js":"lnUI7","../../main.js":"2JYph","./palette.js":"99qjs","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"99qjs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Palette", ()=>Palette);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _textureJs = require("../../helpers/texture.js");
var _paletteJs = require("../../palette.js");
class Palette extends (0, _paletteJs.PaletteBase) {
    get texture() {
        return this._texture;
    }
    get defaultTexture() {
        return this._defaultTexture;
    }
    initializeContext(core, gl) {
        this._gl = gl;
        this._defaultTexture = (0, _textureJs.TextureHelper).create(gl, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, gl.NEAREST, core.config.paletteColor);
        this._updateTexture();
    }
    update() {
        super.update();
        if (this._changed) {
            this._changed = false;
            this._updateTexture();
        }
    }
    _updateTexture() {
        if (this._colors) {
            const colors = new Uint8Array(this._colors);
            for(let i = 0; i < colors.length; i++)colors[i] = Math.pow(colors[i] / 0xff, 2.2) * 0xff;
            this._texture = (0, _textureJs.TextureHelper).create(this._gl, this._colors.length / 4, 1, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._gl.NEAREST, colors);
        } else this._texture = null;
    }
}

},{"../../helpers/texture.js":"eZ0Tk","../../palette.js":"46mvC","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iUM4T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Config", ()=>Config);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../../constants.js");
var _angleJs = require("../../helpers/angle.js");
var _rendererJs = require("../renderer.js");
class Config extends (0, _rendererJs.RendererConfig) {
    constructor(){
        super();
        this.reset();
    }
    reset() {
        this.specularIntensity = 0.15;
        this.specularPower = 150;
        this.lightPosition = (0, _glMatrix.vec3).fromValues(-0.5, 0.5, 0);
        const _quat1 = (0, _glMatrix.quat).create();
        const _quat2 = (0, _glMatrix.quat).create();
        let angle = (0, _angleJs.AngleHelper).degreesToRadians(15);
        (0, _glMatrix.quat).setAxisAngle(_quat1, (0, _constantsJs.Constants).VECTOR3_UNITX, angle);
        (0, _glMatrix.quat).multiply(_quat2, _quat1, _quat2);
        angle = (0, _angleJs.AngleHelper).degreesToRadians(-15);
        (0, _glMatrix.quat).setAxisAngle(_quat1, (0, _constantsJs.Constants).VECTOR3_UNITY, angle);
        (0, _glMatrix.quat).multiply(_quat2, _quat2, _quat1);
        this.directionToLight = (0, _glMatrix.vec3).create();
        (0, _glMatrix.vec3).transformQuat(this.directionToLight, (0, _constantsJs.Constants).VECTOR3_UNITZ, _quat2);
        this.halfAngle = (0, _glMatrix.vec3).create();
        (0, _glMatrix.vec3).add(this.halfAngle, (0, _constantsJs.Constants).VECTOR3_UNITZ, this.directionToLight);
        (0, _glMatrix.vec3).normalize(this.halfAngle, this.halfAngle);
        this.isFxaaEnabled = false;
    }
}

},{"gl-matrix":"3mrln","../../constants.js":"dtECF","../../helpers/angle.js":"3PBRj","../renderer.js":"aTXAw","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"e7ZKA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Resources", ()=>Resources);
parcelHelpers.export(exports, "ShaderBase", ()=>ShaderBase);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _pathJs = require("../../../helpers/path.js");
var _mainJs = require("../../../main.js");
class Resources {
    bindFramebuffer(framebuffer) {
        if (this.framebuffer != framebuffer) {
            this.framebuffer = framebuffer;
            this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, framebuffer);
        }
    }
    initializeContext(gl) {
        this._gl = gl;
        this.framebuffer = this._gl.createFramebuffer();
        this.ANGLE_instanced_arrays = gl.getExtension("ANGLE_instanced_arrays");
        this.OES_standard_derivatives = gl.getExtension("OES_standard_derivatives");
        this.EXT_frag_depth = gl.getExtension("EXT_frag_depth");
        this.WEBGL_lose_context = gl.getExtension("WEBGL_lose_context");
    }
}
Resources.glsl = {
    "anaglyph.fragment.fx": '#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform vec4 uViewport;\nuniform sampler2D uSampler1;\nuniform sampler2D uSampler2;\nconst vec3 LEFT_MASK = vec3(1.0, 0.0, 0.0);\nconst vec3 RIGHT_MASK = vec3(0.0, 1.0, 1.0);\nvoid main() {\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec3 color = LEFT_MASK * dot(texture2D(uSampler1, texCoords).rgb, LUMINANCE);\ncolor += RIGHT_MASK * dot(texture2D(uSampler2, texCoords).rgb, LUMINANCE);\ngl_FragColor = vec4(color, 1.0);\n}\n',
    "color.fragment.fx": '#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nvarying lowp vec3 vColor;\nvoid main(void)\n{\ngl_FragColor = vec4(pow(vColor, GAMMA), 1.0);\n}\n',
    "color.vertex.fx": "#version 100\nattribute vec3 aPosition;\nattribute lowp vec3 aColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nvarying lowp vec3 vColor;\nvoid main(void) {\ngl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aPosition, 1.0);\nvColor = aColor;\n}\n",
    "lasso.fragment.fx": '#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform vec3 uColor;\nuniform vec2 uThickness;\nuniform float uDashWidth;\nvarying mediump vec2 vTexCoord;\nvoid main(void)\n{\nvec2 distance = min(vTexCoord, 1.0 - vTexCoord);\nif (distance.x > uThickness.x && distance.y > uThickness.y) {\ndiscard;\n}\nvec2 texCoord = vec2(vTexCoord.x, 1.0 - vTexCoord.y);\nvec2 thickness = uThickness * uDashWidth;\nvec2 b = mod(floor(texCoord / thickness), 2.0);\nif (b.x > 0.0 && texCoord.x < 1.0 - thickness.x) {\ndiscard;\n}\nif (b.y > 0.0 && texCoord.y < 1.0 - thickness.y) {\ndiscard;\n}\ngl_FragColor = vec4(pow(uColor, GAMMA), 1.0);\n}\n',
    "lasso.vertex.fx": "#version 100\nattribute vec3 aPosition;\nattribute mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nvarying mediump vec2 vTexCoord;\nvoid main(void) {\ngl_Position = uMMatrix * vec4(aPosition, 1.0);\nvTexCoord = aTexCoord;\n}\n",
    "model.fragment.fx": '#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform sampler2D uSampler;\nuniform vec3 uDirectionToLight;\nuniform vec3 uHalfAngle;\nuniform float uSpecularPower;\nuniform float uSpecularIntensity;\nvarying mediump vec3 vNormal;\nvarying mediump vec2 vTexCoord;\nvoid main(void)\n{\ngl_FragColor = vec4(pow(texture2D(uSampler, vTexCoord).xyz, GAMMA), 1.0);\nvec3 color = texture2D(uSampler, vTexCoord).xyz;\nfloat ambient = 0.01;\nvec3 normal = normalize(vNormal);\nfloat diffuse = 0.5 * max(dot(uDirectionToLight, normal), 0.0);\nfloat specular = pow(clamp(dot(normal, uHalfAngle), 0.0, 1.0), uSpecularPower) * uSpecularIntensity;\ncolor *= (ambient + diffuse);\ncolor += specular;\ncolor = pow(color, GAMMA);\ngl_FragColor = vec4(color, 1.0);\n}\n',
    "model.vertex.fx": "#version 100\nattribute vec3 aPosition;\nattribute mediump vec3 aNormal;\nattribute mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nvarying mediump vec3 vNormal;\nvarying mediump vec2 vTexCoord;\nvoid main(void) {\nvTexCoord = aTexCoord;\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvNormal = vec3(mvMatrix * vec4(aNormal, 0.0));\ngl_Position = uPMatrix * mvMatrix * vec4(aPosition, 1.0);\n}\n",
    "pickgrid.fragment.fx": '#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\n#define Derivatives\nuniform bool uPick;\nuniform vec2 uFaceSize;\nuniform vec3 uMajorColor;\nuniform vec3 uMinorColor;\nuniform vec3 uZeroColor;\nuniform float uMajorThickness;\nuniform float uMinorThickness;\nuniform float uZeroThickness;\nuniform vec2 uZero;\nuniform vec2 uMinorGridlines;\nuniform vec3 uDirectionToLight;\nvarying lowp vec4 vColor;\nvarying mediump vec2 vTexCoord;\nvarying mediump vec4 vBounds;\nvarying mediump vec3 vNormal;\n#ifdef Derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\nvoid main(void) {\nif (uPick)\n{\ngl_FragColor = vColor;\n}\nelse\n{\nvec2 buffer;\n#ifdef Derivatives\nbuffer = fwidth(vTexCoord);\n#else\nbuffer = vec2(0.002);\n#endif\nvec2 distance, thickness, step;\nvec4 color = vColor;\nvec2 width = vBounds.zw - vBounds.xy;\ndistance = (vTexCoord - vBounds.xy) / width;\ndistance = min(abs(distance - floor(uMinorGridlines * distance) / uMinorGridlines), abs(distance - ceil(uMinorGridlines * distance) / uMinorGridlines));\ndistance *= width;\nthickness = vec2(uMinorThickness) / uFaceSize;\nstep = smoothstep(thickness, thickness + buffer, distance);\ncolor.xyz = mix(uMinorColor, color.xyz, min(step.x, step.y));\nthickness = vec2(uMajorThickness) / uFaceSize;\ndistance = min(vTexCoord - vBounds.xy, vBounds.zw - vTexCoord);\nstep = smoothstep(thickness, thickness + buffer, distance);\ncolor.xyz = mix(uMajorColor, color.xyz, min(step.x, step.y));\ndistance = abs(vTexCoord - uZero);\nthickness = vec2(uZeroThickness) / uFaceSize;\nstep = smoothstep(thickness, thickness + buffer, distance);\ncolor.xyz = mix(uZeroColor, color.xyz, min(step.x, step.y));\nfloat diffuse = 0.2 * max(dot(uDirectionToLight, vNormal), 0.0);\nfloat ambient = 0.8;\ncolor.xyz *= (ambient + diffuse);\ncolor.xyz = pow(color.xyz, GAMMA);\ngl_FragColor = color;\n}\n}\n',
    "pickgrid.vertex.fx": "#version 100\nattribute vec3 aPosition;\nattribute lowp vec4 aIdColor;\nattribute mediump vec2 aTexCoord;\nattribute mediump vec3 aNormal;\nattribute mediump vec4 aBounds;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform bool uPick;\nuniform vec4 uPickedIdColor;\nuniform vec3 uBackground;\nuniform vec3 uHighlight;\nvarying lowp vec4 vColor;\nvarying mediump vec2 vTexCoord;\nvarying mediump vec4 vBounds;\nvarying mediump vec3 vNormal;\nvoid main(void) {\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvNormal = normalize(vec3(mvMatrix * vec4(aNormal, 0.0)));\nvTexCoord = aTexCoord;\nvBounds = aBounds;\ngl_Position = uPMatrix * mvMatrix * vec4(aPosition, 1.0);\nif (uPick)\n{\nvColor = aIdColor;\n}\nelse\n{\nvColor = uPickedIdColor == aIdColor ? vec4(uHighlight, 1.0) : vColor = vec4(uBackground, 1.0);\n}\n}\n",
    "sdftext.fragment.fx": '#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\n#define Derivatives\nuniform sampler2D uSampler;\nuniform bool uPick;\nuniform vec3 uColor;\nuniform vec3 uHoverColor;\nuniform float uGamma;\nuniform vec3 uBorderColor;\nuniform float uBuffer;\nuniform float uBorderWidth;\nvarying mediump vec2 vTexCoord;\nvarying lowp vec4 vIdColor;\nvarying lowp float vHover;\n#ifdef Derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\nvoid main(void)\n{\nif (uPick) {\ngl_FragColor = vIdColor;\n}\nelse\n{\nfloat distance = texture2D(uSampler, vTexCoord).r;\nif (distance < uBuffer - uBorderWidth)\n{\ndiscard;\n}\nfloat gamma;\n#ifdef Derivatives\ngamma = fwidth(distance);\n#else\ngamma = uGamma;\n#endif\nfloat value = smoothstep(uBuffer - gamma, uBuffer + gamma, distance);\ngl_FragColor = vec4(pow(mix(uBorderColor, mix(uColor, uHoverColor, vHover), value), GAMMA), 1.0);\n}\n}\n',
    "sdftext.vertex.fx": "#version 100\nattribute lowp vec4 aIdColor;\nattribute vec3 aPosition;\nattribute mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform vec4 uPickedIdColor;\nvarying mediump vec2 vTexCoord;\nvarying lowp vec4 vIdColor;\nvarying lowp float vHover;\nvoid main(void) {\ngl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aPosition, 1.0);\nvTexCoord = aTexCoord;\nvIdColor = aIdColor;\nvHover = uPickedIdColor == aIdColor ? 1.0 : 0.0;\n}\n",
    "simple.vertex.fx": "#version 100\nattribute vec3 aPosition;\nvoid main(void) {\ngl_Position = vec4(aPosition, 1.0);\n}\n",
    "texture.fragment.fx": "#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;\nvarying mediump vec2 vTexCoord;\nvoid main(void)\n{\ngl_FragColor = vec4(texture2D(uSampler, vTexCoord).xyz, 1.0);\n}\n",
    "texture.vertex.fx": "#version 100\nattribute vec3 aPosition;\nattribute mediump vec3 aNormal;\nattribute mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nvarying mediump vec3 vNormal;\nvarying mediump vec2 vTexCoord;\nvoid main(void) {\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvNormal = normalize((mvMatrix * vec4(aNormal, 0.0)).xyz);\ngl_Position = uPMatrix * mvMatrix * vec4(aPosition, 1.0);\nvTexCoord = aTexCoord;\n}\n",
    "unitblock.fragment.fx": '#version 100\n#define Derivatives\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\n#ifdef Derivatives\nvarying vec3 vViewPosition;\n#endif\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nuniform vec3 uDirectionToLight;\nuniform vec3 uHalfAngle;\nuniform float uSpecularPower;\nuniform float uSpecularIntensity;\nuniform vec3 uHoverColor;\nuniform vec3 uActiveColor;\nuniform vec3 uSelectedColor;\nuniform float uHighlightMode;\n#ifdef Derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\nvoid main(void)\n{\nif (uPick)\n{\ngl_FragColor = vIdColor;\n}\nelse\n{\nfloat ambient = 0.01;\nfloat emissive = 0.0;\nvec3 previousColor = texture2D(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture2D(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\nif (uHighlightMode < 0.5) {\nemissive = vVertexSelected * 0.5;\nemissive += 1.5 * max(vHover, vActive);\nemissive /= 4.0;\n}\nelse {\npreviousColor = mix(previousColor, vec3(dot(LUMINANCE, previousColor)), max(-vVertexSelected, 0.0));\ncolor = mix(color, vec3(dot(LUMINANCE, color)), max(-vVertexSelected, 0.0));\npreviousColor = mix(previousColor, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uActiveColor, vActive);\ncolor = mix(color, uHoverColor, vHover);\n}\ncolor = mix(previousColor, color, vAnimation);\nfloat diffuse, specular;\n#ifdef Derivatives\nvec3 normal = normalize(cross(dFdx(vViewPosition), dFdy(vViewPosition)));\ndiffuse = dot(uDirectionToLight, normal);\nspecular = pow(clamp(dot(normal, uHalfAngle), 0.0, 1.0), uSpecularPower) * uSpecularIntensity;\n#else\ndiffuse = 1.0;\nspecular = 0.0;\n#endif\ncolor *= (ambient + diffuse + emissive);\ncolor += specular;\ncolor = clamp(color, 0.0, 1.0);\ncolor = pow(color, GAMMA);\ngl_FragColor = vec4(color, 1.0);\n}\n}\n',
    "unitblock.vertex.fx": '#version 100\n#include "quat.include.fx"\nattribute mediump vec3 aPosition;\nattribute vec3 aTranslation;\nattribute vec3 aPreviousTranslation;\nattribute mediump vec4 aRotation;\nattribute mediump vec4 aPreviousRotation;\nattribute lowp vec2 aColor;\nattribute lowp vec2 aPreviousColor;\nattribute vec3 aScale;\nattribute vec3 aPreviousScale;\nattribute float aId;\nattribute mediump float aStaggerOrder;\nattribute float aOrder;\nattribute lowp float aSelected;\nattribute lowp float aPreviousSelected;\nattribute lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\n#define Derivatives\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying highp float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\n#ifdef Derivatives\nvarying vec3 vViewPosition;\n#endif\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\ngl_Position = vec4(0.0);\n#ifdef Derivatives\nvViewPosition = vec3(0.0);\n#endif\n}\nelse\n{\nvIdColor = aIdColor;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nvec3 scale = mix(aPreviousScale, aScale, animation);\nvec3 position = aPosition * scale;\nif (aRotation.w * aPreviousRotation.w != 1.0)\n{\nvec4 quat = slerp(aPreviousRotation, aRotation, animation);\nposition = rotate(position, quat);\n}\nposition += mix(aPreviousTranslation, aTranslation, animation);\nmat4 mvMatrix = uVMatrix * uMMatrix;\n#ifdef Derivatives\nvec4 viewPosition = mvMatrix * vec4(position, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\n#else\ngl_Position = uPMatrix * mvMatrix * vec4(position, 1.0);\n#endif\nvVertexColor = aPosition.y < 0.0 ? vec2(aColor.x, aPreviousColor.x) : vec2(aColor.y, aPreviousColor.y);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\n}\n}\n',
    "unitcylinder.fragment.fx": '#version 100\n#define FragDepth\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\nvarying vec3 vViewPosition;\nvarying vec4 vCircle1;\nvarying vec4 vCircle2;\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nuniform vec3 uDirectionToLight;\nuniform vec3 uHalfAngle;\nuniform float uSpecularPower;\nuniform float uSpecularIntensity;\nuniform vec3 uHoverColor;\nuniform vec3 uActiveColor;\nuniform vec3 uSelectedColor;\nuniform float uHighlightMode;\n#ifdef FragDepth\n#extension GL_EXT_frag_depth : enable\n#endif\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat dot2(in vec3 v) { return dot(v, v); }\nvec4 iCappedCone(in vec3 ro, in vec3 rd,\nin vec3 pa, in vec3 pb,\nin float ra, in float rb)\n{\nvec3 ba = pb - pa;\nvec3 oa = ro - pa;\nvec3 ob = ro - pb;\nfloat m0 = dot(ba, ba);\nfloat m1 = dot(oa, ba);\nfloat m2 = dot(ob, ba);\nfloat m3 = dot(rd, ba);\nif (m1 < 0.0) { if (dot2(oa * m3 - rd * m1) < (ra * ra * m3 * m3)) return vec4(-m1 / m3, -ba * inversesqrt(m0)); }\nelse if (m2 > 0.0) { if (dot2(ob * m3 - rd * m2) < (rb * rb * m3 * m3)) return vec4(-m2 / m3, ba * inversesqrt(m0)); }\nfloat m4 = dot(rd, oa);\nfloat m5 = dot(oa, oa);\nfloat rr = ra - rb;\nfloat hy = m0 + rr * rr;\nfloat k2 = m0 * m0 - m3 * m3 * hy;\nfloat k1 = m0 * m0 * m4 - m1 * m3 * hy + m0 * ra * (rr * m3 * 1.0);\nfloat k0 = m0 * m0 * m5 - m1 * m1 * hy + m0 * ra * (rr * m1 * 2.0 - m0 * ra);\nfloat h = k1 * k1 - k2 * k0;\nif (h < 0.0) return vec4(-1.0);\nfloat t = (-k1 - sqrt(h)) / k2;\nfloat y = m1 + t * m3;\nif (y > 0.0 && y < m0)\n{\nreturn vec4(t, normalize(m0 * (m0 * (oa + t * rd) + rr * ba * ra) - ba * hy * y));\n}\nreturn vec4(-1.0);\n}\nvec4 iRoundedCone(in vec3 ro, in vec3 rd,\nin vec3 pa, in vec3 pb,\nin float ra, in float rb)\n{\nvec3 ba = pb - pa;\nvec3 oa = ro - pa;\nvec3 ob = ro - pb;\nfloat rr = ra - rb;\nfloat m0 = dot(ba, ba);\nfloat m1 = dot(ba, oa);\nfloat m2 = dot(ba, rd);\nfloat m3 = dot(rd, oa);\nfloat m5 = dot(oa, oa);\nfloat m6 = dot(ob, rd);\nfloat m7 = dot(ob, ob);\nfloat d2 = m0 - rr * rr;\nfloat k2 = d2 - m2 * m2;\nfloat k1 = d2 * m3 - m1 * m2 + m2 * rr * ra;\nfloat k0 = d2 * m5 - m1 * m1 + m1 * rr * ra * 2.0 - m0 * ra * ra;\nfloat h = k1 * k1 - k0 * k2;\nif (h < 0.0) return vec4(-1.0);\nfloat t = (-sqrt(h) - k1) / k2;\nfloat y = m1 - ra * rr + t * m2;\nif (y > 0.0 && y < d2)\n{\nreturn vec4(t, normalize(d2 * (oa + t * rd) - ba * y));\n}\nfloat h1 = m3 * m3 - m5 + ra * ra;\nfloat h2 = m6 * m6 - m7 + rb * rb;\nif (max(h1, h2) < 0.0) return vec4(-1.0);\nvec4 r = vec4(1e20);\nif (h1 > 0.0)\n{\nt = -m3 - sqrt(h1);\nr = vec4(t, (oa + t * rd) / ra);\n}\nif (h2 > 0.0)\n{\nt = -m6 - sqrt(h2);\nif (t < r.x)\nr = vec4(t, (ob + t * rd) / rb);\n}\nreturn r;\n}\nvoid main(void)\n{\nvec3 rd = normalize(vViewPosition);\nvec3 ro = vec3(0.0);\nvec4 tnor = iCappedCone(ro, rd, vCircle1.xyz, vCircle2.xyz, vCircle1.w, vCircle2.w);\nfloat t = tnor.x;\nif (t < 0.0)\n{\ndiscard;\n}\nelse\n{\nvec3 viewPosition = rd * t;\n#ifdef FragDepth\nfloat ndcDepth = DEPTH_A + DEPTH_B / viewPosition.z;\ngl_FragDepthEXT = ndcDepth * 0.5 + 0.5;\n#endif\nif (uPick)\n{\ngl_FragColor = vIdColor;\n}\nelse\n{\nfloat ambient = 0.01;\nfloat emissive = 0.0;\nvec3 previousColor = texture2D(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture2D(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\nif (uHighlightMode < 0.5) {\nemissive = vVertexSelected * 0.5;\nemissive += 1.5 * max(vHover, vActive);\nemissive /= 4.0;\n}\nelse {\npreviousColor = mix(previousColor, vec3(dot(LUMINANCE, previousColor)), max(-vVertexSelected, 0.0));\ncolor = mix(color, vec3(dot(LUMINANCE, color)), max(-vVertexSelected, 0.0));\npreviousColor = mix(previousColor, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uActiveColor, vActive);\ncolor = mix(color, uHoverColor, vHover);\n}\ncolor = mix(previousColor, color, vAnimation);\nvec3 normal = tnor.yzw;\nfloat diffuse = dot(uDirectionToLight, normal);\nfloat specular = pow(clamp(dot(normal, uHalfAngle), 0.0, 1.0), uSpecularPower) * uSpecularIntensity;\ncolor *= (ambient + diffuse + emissive);\ncolor += specular;\ncolor = clamp(color, 0.0, 1.0);\ncolor = pow(color, GAMMA);\ngl_FragColor = vec4(color, 1.0);\n}\n}\n}\n',
    "unitcylinder.vertex.fx": '#version 100\n#include "common.include.fx"\n#include "quat.include.fx"\nattribute mediump vec3 aPosition;\nattribute vec3 aTranslation;\nattribute vec3 aPreviousTranslation;\nattribute mediump vec4 aRotation;\nattribute mediump vec4 aPreviousRotation;\nattribute lowp vec2 aColor;\nattribute lowp vec2 aPreviousColor;\nattribute vec3 aScale;\nattribute vec3 aPreviousScale;\nattribute float aId;\nattribute float aOrder;\nattribute mediump float aStaggerOrder;\nattribute lowp float aSelected;\nattribute lowp float aPreviousSelected;\nattribute lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\nuniform vec3 uIdentityRotation;\n#define Derivatives\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying highp float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\nvarying vec3 vViewPosition;\nvarying vec4 vCircle1;\nvarying vec4 vCircle2;\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\nvViewPosition = vec3(0.0);\nvCircle1 = vec4(0.0);\nvCircle2 = vec4(0.0);\ngl_Position = vec4(0.0);\n}\nelse\n{\nvIdColor = aIdColor;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nvec3 translation = mix(aPreviousTranslation, aTranslation, animation);\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvec3 viewCenter = (mvMatrix * vec4(translation, 1.0)).xyz;\nvec3 scale = mix(aPreviousScale, aScale, animation);\nvec3 position = aPosition;\nposition.xz *= max(scale.x, scale.z);\nposition.y *= scale.y;\nvec3 direction = IDENTITY_ROTATION;\nif (aRotation.w * aPreviousRotation.w != 1.0)\n{\nvec4 quat = slerp(aPreviousRotation, aRotation, animation);\nposition = rotate(position, quat);\ndirection = rotate(direction, quat);\n}\nvec3 viewDirection = (mvMatrix * vec4(direction, 0.0)).xyz;\nvec3 h = viewDirection * scale.y * 0.5;\nfloat r1 = length(viewDirection) * 0.5;\nfloat r2 = r1 * scale.z;\nr1 *= scale.x;\nvCircle1 = vec4(viewCenter - h, r1);\nvCircle2 = vec4(viewCenter + h, r2);\nvec4 viewPosition = mvMatrix * vec4(position + translation, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvVertexColor = aPosition.y < 0.0 ? vec2(aColor.x, aPreviousColor.x) : vec2(aColor.y, aPreviousColor.y);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\n}\n}\n',
    "unithexprism.fragment.fx": '#version 100\n#define FragDepth\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\nvarying vec3 vViewPosition;\nvarying vec3 vViewCenter;\nvarying float vRadius;\nvarying float vHeight;\nvarying float vScaling;\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nuniform vec3 uDirectionToLight;\nuniform vec3 uHalfAngle;\nuniform float uSpecularPower;\nuniform float uSpecularIntensity;\nuniform vec3 uHoverColor;\nuniform vec3 uActiveColor;\nuniform vec3 uSelectedColor;\nuniform float uHighlightMode;\nuniform mat4 uVMatrix;\n#ifdef FragDepth\n#extension GL_EXT_frag_depth : enable\n#endif\nvec4 iHexPrism( in vec3 ro, in vec3 rd, in float ra, in float he )\n{\nconst vec3 n1 = vec3( 1.0,0.0,0.0);\nconst vec3 n2 = vec3( 0.5,0.0,ROOT_THREE_OVER_TWO);\nconst vec3 n3 = vec3(-0.5,0.0,ROOT_THREE_OVER_TWO);\nconst vec3 n4 = vec3( 0.0,1.0,0.0);\nvec3 t1 = vec3((vec2(ra,-ra)-dot(ro,n1))/dot(rd,n1), 1.0);\nvec3 t2 = vec3((vec2(ra,-ra)-dot(ro,n2))/dot(rd,n2), 1.0);\nvec3 t3 = vec3((vec2(ra,-ra)-dot(ro,n3))/dot(rd,n3), 1.0);\nvec3 t4 = vec3((vec2(he,-he)-dot(ro,n4))/dot(rd,n4), 1.0);\nif( t1.y<t1.x ) t1=vec3(t1.yx,-1.0);\nif( t2.y<t2.x ) t2=vec3(t2.yx,-1.0);\nif( t3.y<t3.x ) t3=vec3(t3.yx,-1.0);\nif( t4.y<t4.x ) t4=vec3(t4.yx,-1.0);\nvec4 tN=vec4(t1.x,t1.z*n1);\nif( t2.x>tN.x ) tN=vec4(t2.x,t2.z*n2);\nif( t3.x>tN.x ) tN=vec4(t3.x,t3.z*n3);\nif( t4.x>tN.x ) tN=vec4(t4.x,t4.z*n4);\nfloat tF = min(min(t1.y,t2.y),min(t3.y,t4.y));\nif( tN.x>tF || tF<0.0) return vec4(-1.0);\nreturn tN;\n}\nvoid main(void)\n{\nvec3 rd = normalize(vViewPosition);\nvec3 ro = -vViewCenter;\nmat3 rot = mat3(uVMatrix);\nvec3 rdd = rd * rot;\nvec3 roo = ro * rot;\nvec4 tnor = iHexPrism(roo, rdd, vRadius * vScaling, vHeight * vScaling);\nfloat t = tnor.x;\nif (t < 0.0)\n{\ndiscard;\n}\nelse\n{\nvec3 viewPosition = rd * t;\n#ifdef FragDepth\nfloat ndcDepth = DEPTH_A + DEPTH_B / viewPosition.z;\ngl_FragDepthEXT = ndcDepth * 0.5 + 0.5;\n#endif\nif (uPick)\n{\ngl_FragColor = vIdColor;\n}\nelse\n{\nfloat ambient = 0.01;\nfloat emissive = 0.0;\nvec3 previousColor = texture2D(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture2D(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\nif (uHighlightMode < 0.5) {\nemissive = vVertexSelected * 0.5;\nemissive += 1.5 * max(vHover, vActive);\nemissive /= 4.0;\n}\nelse {\npreviousColor = mix(previousColor, vec3(dot(LUMINANCE, previousColor)), max(-vVertexSelected, 0.0));\ncolor = mix(color, vec3(dot(LUMINANCE, color)), max(-vVertexSelected, 0.0));\npreviousColor = mix(previousColor, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uActiveColor, vActive);\ncolor = mix(color, uHoverColor, vHover);\n}\ncolor = mix(previousColor, color, vAnimation);\nvec3 normal = rot * tnor.yzw;\nfloat diffuse = dot(uDirectionToLight, normal);\nfloat specular = pow(clamp(dot(normal, uHalfAngle), 0.0, 1.0), uSpecularPower) * uSpecularIntensity;\ncolor *= (ambient + diffuse + emissive);\ncolor += specular;\ncolor = clamp(color, 0.0, 1.0);\ncolor = pow(color, GAMMA);\ngl_FragColor = vec4(color, 1.0);\n}\n}\n}\n',
    "unithexprism.vertex.fx": '#version 100\n#include "common.include.fx"\n#include "quat.include.fx"\nattribute mediump vec3 aPosition;\nattribute vec3 aTranslation;\nattribute vec3 aPreviousTranslation;\nattribute mediump vec4 aRotation;\nattribute mediump vec4 aPreviousRotation;\nattribute lowp vec2 aColor;\nattribute lowp vec2 aPreviousColor;\nattribute vec3 aScale;\nattribute vec3 aPreviousScale;\nattribute float aId;\nattribute float aOrder;\nattribute mediump float aStaggerOrder;\nattribute lowp float aSelected;\nattribute lowp float aPreviousSelected;\nattribute lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\nuniform vec3 uIdentityRotation;\n#define Derivatives\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying highp float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\nvarying vec3 vViewPosition;\nvarying vec3 vViewCenter;\nvarying float vRadius;\nvarying float vHeight;\nvarying float vScaling;\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\nvViewPosition = vec3(0.0);\nvRadius = 0.0;\nvHeight = 0.0;\ngl_Position = vec4(0.0);\n}\nelse\n{\nvIdColor = aIdColor;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nvec3 translation = mix(aPreviousTranslation, aTranslation, animation);\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvViewCenter = (mvMatrix * vec4(translation, 1.0)).xyz;\nvec3 scale = mix(aPreviousScale, aScale, animation);\nvRadius = scale.x * ROOT_THREE_OVER_TWO;\nvHeight = scale.y;\nvec3 position = aPosition;\nposition.y *= scale.y;\nposition.z *= scale.x;\nposition.x *= scale.x * ROOT_THREE_OVER_TWO;\nvec3 direction = IDENTITY_ROTATION;\nif (aRotation.w * aPreviousRotation.w != 1.0)\n{\nvec4 quat = slerp(aPreviousRotation, aRotation, animation);\nposition = rotate(position, quat);\ndirection = rotate(direction, quat);\n}\nvec3 viewDirection = (mvMatrix * vec4(direction, 0.0)).xyz;\nvec4 viewPosition = mvMatrix * vec4(position + translation, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvVertexColor = aPosition.y < 0.0 ? vec2(aColor.x, aPreviousColor.x) : vec2(aColor.y, aPreviousColor.y);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\nvScaling = length(uMMatrix[0].xyz) / 2.0;\n}\n}\n',
    "unitsphere.fragment.fx": '#version 100\n#define FragDepth\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\nvarying vec3 vViewPosition;\nvarying vec3 vViewCenter;\nvarying mediump float vRadius;\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nuniform vec3 uDirectionToLight;\nuniform vec3 uHalfAngle;\nuniform float uSpecularPower;\nuniform float uSpecularIntensity;\nuniform vec3 uHoverColor;\nuniform vec3 uActiveColor;\nuniform vec3 uSelectedColor;\nuniform float uHighlightMode;\n#ifdef FragDepth\n#extension GL_EXT_frag_depth : enable\n#endif\nfloat sphIntersect(in vec3 ro, in vec3 rd, in vec4 sph)\n{\nvec3 oc = ro - sph.xyz;\nfloat b = dot(oc, rd);\nfloat c = dot(oc, oc) - sph.w * sph.w;\nfloat h = b * b - c;\nif (h < 0.0) return -1.0;\nreturn -b - sqrt(h);\n}\nvoid main(void)\n{\nvec3 rd = normalize(vViewPosition);\nvec3 ro = vec3(0.0);\nvec4 s = vec4(vViewCenter, vRadius);\nfloat t = sphIntersect(ro, rd, s);\nif (t < 0.0)\n{\ndiscard;\n}\nelse\n{\nvec3 viewPosition = rd * t;\n#ifdef FragDepth\nfloat ndcDepth = DEPTH_A + DEPTH_B / viewPosition.z;\ngl_FragDepthEXT = ndcDepth * 0.5 + 0.5;\n#endif\nif (uPick)\n{\ngl_FragColor = vIdColor;\n}\nelse\n{\nfloat ambient = 0.01;\nfloat emissive = 0.0;\nvec3 previousColor = texture2D(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture2D(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\nif (uHighlightMode < 0.5) {\nemissive = vVertexSelected * 0.5;\nemissive += 1.5 * max(vHover, vActive);\nemissive /= 4.0;\n}\nelse {\npreviousColor = mix(previousColor, vec3(dot(LUMINANCE, previousColor)), max(-vVertexSelected, 0.0));\ncolor = mix(color, vec3(dot(LUMINANCE, color)), max(-vVertexSelected, 0.0));\npreviousColor = mix(previousColor, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uSelectedColor, max(vVertexSelected, 0.0));\ncolor = mix(color, uActiveColor, vActive);\ncolor = mix(color, uHoverColor, vHover);\n}\ncolor = mix(previousColor, color, vAnimation);\nvec3 normal = (viewPosition - vViewCenter) / s.w;\nfloat diffuse = dot(uDirectionToLight, normal);\nfloat specular = pow(clamp(dot(normal, uHalfAngle), 0.0, 1.0), uSpecularPower) * uSpecularIntensity;\ncolor *= (ambient + diffuse + emissive);\ncolor += specular;\ncolor = clamp(color, 0.0, 1.0);\ncolor = pow(color, GAMMA);\ngl_FragColor = vec4(color, 1.0);\n}\n}\n}\n',
    "unitsphere.vertex.fx": '#version 100\n#include "common.include.fx"\nattribute mediump vec3 aPosition;\nattribute vec3 aTranslation;\nattribute vec3 aPreviousTranslation;\nattribute lowp float aColor;\nattribute lowp float aPreviousColor;\nattribute vec3 aScale;\nattribute vec3 aPreviousScale;\nattribute float aId;\nattribute float aOrder;\nattribute mediump float aStaggerOrder;\nattribute lowp float aSelected;\nattribute lowp float aPreviousSelected;\nattribute lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\nvarying lowp vec4 vIdColor;\nvarying lowp vec2 vVertexColor;\nvarying lowp float vVertexSelected;\nvarying highp float vAnimation;\nvarying lowp float vHover;\nvarying lowp float vActive;\nvarying mediump float vRadius;\nvarying vec3 vViewPosition;\nvarying vec3 vViewCenter;\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\nvViewPosition = vec3(0.0);\nvViewCenter = vec3(0.0);\nvRadius = 0.0;\ngl_Position = vec4(0.0);\n}\nelse\n{\nvIdColor = aIdColor;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nfloat scale = mix(min(aPreviousScale.x, min(aPreviousScale.y, aPreviousScale.z)), min(aScale.x, min(aScale.y, aScale.z)), animation);\nvec4 translation = vec4(mix(aPreviousTranslation, aTranslation, animation), 1.0);\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvViewCenter = (mvMatrix * translation).xyz;\ntranslation.xyz += aPosition * scale;\nvViewPosition = (mvMatrix * translation).xyz;\ngl_Position = uPMatrix * vec4(vViewPosition, 1.0);\nvVertexColor = vec2(aColor, aPreviousColor);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\nvRadius = distance(vViewPosition, vViewCenter) / ROOT_THREE;\n}\n}\n',
    "common.include.fx": "const float NEAR_PLANE = 0.01;\nconst float FAR_PLANE = 100.0;\nconst float DEPTH_A = 1.0002000200020003;\nconst float DEPTH_B = 0.020002000200020003;\nconst vec3 GAMMA = vec3(0.45454545454545453);\nconst vec3 LUMINANCE = vec3(0.2126, 0.7152, 0.0722);\nconst float PI = 3.1415926538;\nconst float ROOT_TWO = 1.4142135624;\nconst float ROOT_TWO_OVER_TWO = 0.7071067811865476;\nconst float ROOT_THREE = 1.7320508075688772;\nconst float ROOT_THREE_OVER_TWO = 0.8660254037844386;\nconst vec3 IDENTITY_ROTATION = vec3(0.0, 1.0, 0.0);\nmat3 transpose(in mat3 mat) {\nvec3 i0 = mat[0];\nvec3 i1 = mat[1];\nvec3 i2 = mat[2];\nreturn mat3\n(\nvec3(i0.x, i1.x, i2.x),\nvec3(i0.y, i1.y, i2.y),\nvec3(i0.z, i1.z, i2.z)\n);\n}\n",
    "quat.include.fx": "const float EPSILON = 0.000001;\nmat3 fromQuat(in vec4 q) {\nfloat x = q.x;\nfloat y = q.y;\nfloat z = q.z;\nfloat w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat yx = y * x2;\nfloat yy = y * y2;\nfloat zx = z * x2;\nfloat zy = z * y2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nmat3 m;\nm[0][0] = 1.0 - yy - zz;\nm[0][1] = yx - wz;\nm[0][2] = zx + wy;\nm[1][0] = yx + wz;\nm[1][1] = 1.0 - xx - zz;\nm[1][2] = zy - wx;\nm[2][0] = zx - wy;\nm[2][1] = zy + wx;\nm[2][2] = 1.0 - xx - yy;\nreturn m;\n}\nvec3 rotate(in vec3 p, in vec4 q) {\nreturn p + 2.0 * cross(q.xyz, cross(q.xyz, p) + q.w * p);\n}\nvec4 slerp(in vec4 a, in vec4 b, in float t) {\nfloat cosom = dot(a, b);\nif (cosom < 0.0) {\ncosom = -cosom;\nb = -b;\n}\nfloat scale0, scale1;\nif (1.0 - cosom > EPSILON) {\nfloat omega = acos(cosom);\nfloat sinom = sin(omega);\nscale0 = sin((1.0 - t) * omega) / sinom;\nscale1 = sin(t * omega) / sinom;\n}\nelse {\nscale0 = 1.0 - t;\nscale1 = t;\n}\nreturn vec4(scale0 * a + scale1 * b);\n}\n"
};
class ShaderBase {
    constructor(core, main){
        this._core = core;
        this._main = main;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    set vertexBuffer(value) {
        if (this._vertexBuffer != value) {
            this._vertexBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    get indexBuffer() {
        return this._indexBuffer;
    }
    set indexBuffer(value) {
        if (this._indexBuffer != value) {
            this._indexBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    initializeContext(gl) {
        this._gl = gl;
    }
    _createProgram(vs, fs) {
        const program = this._gl.createProgram();
        this._gl.attachShader(program, vs);
        this._gl.attachShader(program, fs);
        this._gl.linkProgram(program);
        if (!this._gl.getProgramParameter(program, this._gl.LINK_STATUS)) this._core.log.write((0, _mainJs.LogLevel).error, this._gl.getProgramInfoLog(program));
        return program;
    }
    _compileShader(source, type) {
        const shader = this._gl.createShader(type);
        this._gl.shaderSource(shader, source);
        this._gl.compileShader(shader);
        if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) this._core.log.write((0, _mainJs.LogLevel).error, this._gl.getShaderInfoLog(shader));
        return shader;
    }
    _removeDirective(shaderSource, directive) {
        const remove = `#define ${directive}`;
        const index = shaderSource.indexOf(remove);
        shaderSource = index == -1 ? shaderSource : shaderSource.substring(0, index) + shaderSource.substring(index + remove.length);
        return shaderSource;
    }
    prepare() {
        if (this._program != this._main.shaderResources.currentProgram) {
            if (this._main.shaderResources.currentShader) this._main.shaderResources.currentShader.disableProgram();
            this.enableProgram(this._program);
            this.updateBuffers();
            this.updateTextures();
        } else {
            if (this._haveBuffersChanged) this.updateBuffers();
            if (this._haveTexturesChanged) this.updateTextures();
        }
    }
    apply() {}
    applyModel() {}
    applyView() {}
    enableProgram(program) {
        this._gl.useProgram(program);
        this._main.shaderResources.currentProgram = program;
        this._main.shaderResources.currentShader = this;
    }
    updateBuffers() {
        this._haveBuffersChanged = false;
    }
    updateTextures() {
        this._haveTexturesChanged = false;
    }
    disableProgram() {
        this._main.shaderResources.currentShader = null;
        this._main.shaderResources.currentProgram = null;
    }
    _shaderFromFile(vsName, fsName, callback) {
        callback(this._includesFromFile(Resources.glsl[vsName]), this._includesFromFile(Resources.glsl[fsName]));
    }
    _shaderFromUrl(vsName, fsName, callback) {
        this._sourceFromUrl(vsName, (vsSource)=>{
            this._includesFromUrl(vsSource, 0, (vsIncSource)=>{
                this._sourceFromUrl(fsName, (fsSource)=>{
                    this._includesFromUrl(fsSource, 0, (fsIncSource)=>{
                        callback(vsIncSource, fsIncSource);
                    });
                });
            });
        });
    }
    _sourceFromUrl(url, callback) {
        const request = new XMLHttpRequest();
        request.open("GET", (0, _pathJs.PathHelper).combine(this._core.config.shaderPath, url));
        request.onreadystatechange = ()=>{
            if (request.readyState == XMLHttpRequest.DONE && request.status == 200) callback(request.responseText);
        };
        request.send();
    }
    _includesFromFile(source) {
        let index = 0;
        do {
            index = source.indexOf("#include", index);
            if (index != -1) {
                const start = source.indexOf('"', index);
                const end = source.indexOf('"', start + 1);
                const name = source.substring(start + 1, end);
                const inc = Resources.glsl[name];
                source = source.substring(0, index) + inc + source.substring(end + 1);
            }
        }while (index != -1);
        return source;
    }
    _includesFromUrl(source, index, callback) {
        index = source.indexOf("#include", index);
        if (index != -1) {
            const start = source.indexOf('"', index);
            const end = source.indexOf('"', start + 1);
            const name = source.substring(start + 1, end);
            this._sourceFromUrl((0, _pathJs.PathHelper).combine("inc", name), (include)=>{
                source = source.substring(0, index) + include + source.substring(end + 1);
                this._includesFromUrl(source, index, callback);
            });
        } else callback(source);
    }
}

},{"../../../helpers/path.js":"cGK6q","../../../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1QYjT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Color extends (0, _shaderJs.ShaderBase) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("color.vertex.fx", "color.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._colorAttribute = gl.getAttribLocation(this._program, "aColor");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionColorVertex).SIZE_BYTES, (0, _vertexJs.PositionColorVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._colorAttribute, 3, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.PositionColorVertex).SIZE_BYTES, (0, _vertexJs.PositionColorVertex).COLOR_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._colorAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hP3Wm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Texture", ()=>Texture);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Texture extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("texture.vertex.fx", "texture.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._normalAttribute = gl.getAttribLocation(this._program, "aNormal");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform1i(this._samplerUniform, 0);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._normalAttribute, 3, this._gl.BYTE, true, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).NORMAL_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._normalAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3GeRj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lasso", ()=>Lasso);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Lasso extends (0, _shaderJs.ShaderBase) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("lasso.vertex.fx", "lasso.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._colorUniform = gl.getUniformLocation(this._program, "uColor");
        this._thicknessUniform = gl.getUniformLocation(this._program, "uThickness");
        this._dashWidthUniform = gl.getUniformLocation(this._program, "uDashWidth");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform3fv(this._colorUniform, this.color);
        this._gl.uniform1f(this._dashWidthUniform, this.dashWidth);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform2fv(this._thicknessUniform, this.thickness);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionTextureVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionTextureVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aEajO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Model", ()=>Model);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Model extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("model.vertex.fx", "model.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._normalAttribute = gl.getAttribLocation(this._program, "aNormal");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._directionToLightUniform = gl.getUniformLocation(this._program, "uDirectionToLight");
        this._halfAngleUniform = gl.getUniformLocation(this._program, "uHalfAngle");
        this._specularPowerUniform = gl.getUniformLocation(this._program, "uSpecularPower");
        this._specularIntensityUniform = gl.getUniformLocation(this._program, "uSpecularIntensity");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform1i(this._samplerUniform, 0);
        this._gl.uniform1f(this._specularPowerUniform, this.specularPower);
        this._gl.uniform1f(this._specularIntensityUniform, this.specularIntensity);
    }
    applyView() {
        this._gl.uniform3fv(this._directionToLightUniform, this.directionToLight);
        this._gl.uniform3fv(this._halfAngleUniform, this.halfAngle);
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._normalAttribute, 3, this._gl.BYTE, true, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).NORMAL_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._normalAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jZPJo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SdfText", ()=>SdfText);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class SdfText extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("sdftext.vertex.fx", "sdftext.fragment.fx", (vsSource, fsSource)=>{
            if (this._main.shaderResources.OES_standard_derivatives == null) fsSource = this._removeDirective(fsSource, "Derivatives");
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._idColorAttribute = gl.getAttribLocation(this._program, "aIdColor");
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._colorUniform = gl.getUniformLocation(this._program, "uColor");
        this._hoverColorUniform = gl.getUniformLocation(this._program, "uHoverColor");
        this._pickUniform = gl.getUniformLocation(this._program, "uPick");
        this._pickedIdColorUniform = gl.getUniformLocation(this._program, "uPickedIdColor");
        this._borderColorUniform = gl.getUniformLocation(this._program, "uBorderColor");
        this._bufferUniform = gl.getUniformLocation(this._program, "uBuffer");
        this._borderWidthUniform = gl.getUniformLocation(this._program, "uBorderWidth");
        this._gammaUniform = gl.getUniformLocation(this._program, "uGamma");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._samplerUniform, 0);
        this._gl.uniform3fv(this._colorUniform, this.color);
        this._gl.uniform3fv(this._hoverColorUniform, this.hoverColor);
        this._gl.uniform3fv(this._borderColorUniform, this.borderColor);
        this._gl.uniform1f(this._gammaUniform, this.gamma);
        this._gl.uniform1f(this._bufferUniform, this.buffer);
        this._gl.uniform1f(this._borderWidthUniform, this.borderWidth);
        this._gl.uniform4fv(this._pickedIdColorUniform, this.pickedIdColor);
    }
    applyModel() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
    }
    applyView() {
        this._gl.uniform1i(this._pickUniform, this.isPickShader ? 1 : 0);
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._idColorAttribute, 4, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES, (0, _vertexJs.PositionTexturePickVertex).ID_COLOR_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._idColorAttribute);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES, (0, _vertexJs.PositionTexturePickVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES, (0, _vertexJs.PositionTexturePickVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hrlvb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PickGrid", ()=>PickGrid);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class PickGrid extends (0, _shaderJs.ShaderBase) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("pickgrid.vertex.fx", "pickgrid.fragment.fx", (vsSource, fsSource)=>{
            if (this._main.shaderResources.OES_standard_derivatives == null) fsSource = this._removeDirective(fsSource, "Derivatives");
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = this._gl.getAttribLocation(this._program, "aPosition");
        this._idColorAttribute = this._gl.getAttribLocation(this._program, "aIdColor");
        this._texCoordAttribute = this._gl.getAttribLocation(this._program, "aTexCoord");
        this._normalAttribute = this._gl.getAttribLocation(this._program, "aNormal");
        this._boundsAttribute = this._gl.getAttribLocation(this._program, "aBounds");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pickUniform = gl.getUniformLocation(this._program, "uPick");
        this._majorColorUniform = gl.getUniformLocation(this._program, "uMajorColor");
        this._minorColorUniform = gl.getUniformLocation(this._program, "uMinorColor");
        this._zeroColorUniform = gl.getUniformLocation(this._program, "uZeroColor");
        this._backgroundUniform = gl.getUniformLocation(this._program, "uBackground");
        this._highlightUniform = gl.getUniformLocation(this._program, "uHighlight");
        this._pickedIdColorUniform = gl.getUniformLocation(this._program, "uPickedIdColor");
        this._faceSizeUniform = gl.getUniformLocation(this._program, "uFaceSize");
        this._majorThicknessUniform = gl.getUniformLocation(this._program, "uMajorThickness");
        this._minorThicknessUniform = gl.getUniformLocation(this._program, "uMinorThickness");
        this._zeroThicknessUniform = gl.getUniformLocation(this._program, "uZeroThickness");
        this._zeroUniform = gl.getUniformLocation(this._program, "uZero");
        this._minorGridlinesUniform = gl.getUniformLocation(this._program, "uMinorGridlines");
        this._directionToLightUniform = gl.getUniformLocation(this._program, "uDirectionToLight");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1f(this._majorThicknessUniform, this.majorThickness);
        this._gl.uniform1f(this._minorThicknessUniform, this.minorThickness);
        this._gl.uniform1f(this._zeroThicknessUniform, this.zeroThickness);
        this._gl.uniform3fv(this._backgroundUniform, this.backgroundColor);
        this._gl.uniform3fv(this._highlightUniform, this.highlightColor);
        this._gl.uniform3fv(this._majorColorUniform, this.majorColor);
        this._gl.uniform3fv(this._minorColorUniform, this.minorColor);
        this._gl.uniform3fv(this._zeroColorUniform, this.zeroColor);
        this._gl.uniform3fv(this._directionToLightUniform, this.directionToLight);
        this._gl.uniform4fv(this._pickedIdColorUniform, this.pickedIdColor);
    }
    applyView() {
        this._gl.uniform1i(this._pickUniform, this.isPickShader ? 1 : 0);
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    ApplyFace() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform2f(this._faceSizeUniform, this.faceWidth, this.faceHeight);
        this._gl.uniform2fv(this._zeroUniform, this.zero);
        this._gl.uniform2fv(this._minorGridlinesUniform, this.minorGridlines);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).TRANSLATION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._normalAttribute, 3, this._gl.BYTE, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).NORMAL_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._normalAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.vertexAttribPointer(this._idColorAttribute, 4, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).ID_COLOR_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._idColorAttribute);
        this._gl.vertexAttribPointer(this._boundsAttribute, 4, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).BOUNDS_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._boundsAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eCrkd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitBlock", ()=>UnitBlock);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitBlock extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unitblock.vertex.fx", "unitblock.fragment.fx", (vsSource, fsSource)=>{
            if (this._main.shaderResources.OES_standard_derivatives == null) {
                vsSource = this._removeDirective(vsSource, "Derivatives");
                fsSource = this._removeDirective(fsSource, "Derivatives");
            }
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._rotationAttribute = gl.getAttribLocation(this._program, "aRotation");
        this._previousRotationAttribute = gl.getAttribLocation(this._program, "aPreviousRotation");
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._rotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._rotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._rotationAttribute);
        this._gl.vertexAttribPointer(this._colorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._previousRotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousRotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousRotationAttribute);
        this._gl.vertexAttribPointer(this._previousColorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
    disableProgram() {
        super.disableProgram();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._rotationAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousRotationAttribute, 0);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"dV3hh","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dV3hh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitShader", ()=>UnitShader);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _cubeJs = require("../../../meshes/cube.js");
var _vertexJs = require("../../../vertex.js");
var _mainJs = require("../../../main.js");
class UnitShader extends (0, _shaderJs.ShaderBase) {
    get paletteTexture() {
        return this._paletteTexture;
    }
    set paletteTexture(value) {
        if (this._paletteTexture != value) {
            this._paletteTexture = value;
            this._haveTexturesChanged = true;
        }
    }
    get previousPaletteTexture() {
        return this._previousPaletteTexture;
    }
    set previousPaletteTexture(value) {
        if (this._previousPaletteTexture != value) {
            this._previousPaletteTexture = value;
            this._haveTexturesChanged = true;
        }
    }
    set instanceBuffer(value) {
        if (this._instanceBuffer != value) {
            this._instanceBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    set previousInstanceBuffer(value) {
        if (this._previousInstanceBuffer != value) {
            this._previousInstanceBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    initializeData() {
        this._areBuffersInitialized = false;
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._translationAttribute = gl.getAttribLocation(this._program, "aTranslation");
        this._previousTranslationAttribute = gl.getAttribLocation(this._program, "aPreviousTranslation");
        this._scaleAttribute = gl.getAttribLocation(this._program, "aScale");
        this._previousScaleAttribute = gl.getAttribLocation(this._program, "aPreviousScale");
        this._colorAttribute = gl.getAttribLocation(this._program, "aColor");
        this._previousColorAttribute = gl.getAttribLocation(this._program, "aPreviousColor");
        this._selectedAttribute = gl.getAttribLocation(this._program, "aSelected");
        this._previousSelectedAttribute = gl.getAttribLocation(this._program, "aPreviousSelected");
        this._staggerOrderAttribute = gl.getAttribLocation(this._program, "aStaggerOrder");
        this._orderAttribute = gl.getAttribLocation(this._program, "aOrder");
        this._idAttribute = gl.getAttribLocation(this._program, "aId");
        this._idColorAttribute = gl.getAttribLocation(this._program, "aIdColor");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._previousSamplerUniform = gl.getUniformLocation(this._program, "uPreviousSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._timeUniform = gl.getUniformLocation(this._program, "uTime");
        this._durationUniform = gl.getUniformLocation(this._program, "uDuration");
        this._fromOrderUniform = gl.getUniformLocation(this._program, "uOrderFrom");
        this._toOrderUniform = gl.getUniformLocation(this._program, "uOrderTo");
        this._hoverUniform = gl.getUniformLocation(this._program, "uHover");
        this._activeUniform = gl.getUniformLocation(this._program, "uActive");
        this._pickUniform = gl.getUniformLocation(this._program, "uPick");
        this._directionToLightUniform = gl.getUniformLocation(this._program, "uDirectionToLight");
        this._halfAngleUniform = gl.getUniformLocation(this._program, "uHalfAngle");
        this._specularPowerUniform = gl.getUniformLocation(this._program, "uSpecularPower");
        this._specularIntensityUniform = gl.getUniformLocation(this._program, "uSpecularIntensity");
        this._hoverColorUniform = gl.getUniformLocation(this._program, "uHoverColor");
        this._activeColorUniform = gl.getUniformLocation(this._program, "uActiveColor");
        this._selectedColorUniform = gl.getUniformLocation(this._program, "uSelectedColor");
        this._highlightModeUniform = gl.getUniformLocation(this._program, "uHighlightMode");
        const vertices = (0, _cubeJs.Cube).POSITIONS;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        const indices = (0, _cubeJs.Cube).INDICES;
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this.indexCount = indices.length;
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, 12, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._updateCurrentBuffer();
        this._updatePreviousBuffer();
    }
    _updateCurrentBuffer() {
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._instanceBuffer);
        this._gl.vertexAttribPointer(this._idAttribute, 1, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ID_HOVER_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._idAttribute, 1);
        this._gl.enableVertexAttribArray(this._idAttribute);
        this._gl.vertexAttribPointer(this._idColorAttribute, 4, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ID_COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._idColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._idColorAttribute);
        this._gl.vertexAttribPointer(this._translationAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).TRANSLATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._translationAttribute, 1);
        this._gl.enableVertexAttribArray(this._translationAttribute);
        this._gl.vertexAttribPointer(this._scaleAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SCALE_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._scaleAttribute, 1);
        this._gl.enableVertexAttribArray(this._scaleAttribute);
        this._gl.vertexAttribPointer(this._staggerOrderAttribute, 1, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).STAGGER_ORDER_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._staggerOrderAttribute, 1);
        this._gl.enableVertexAttribArray(this._staggerOrderAttribute);
        this._gl.vertexAttribPointer(this._selectedAttribute, 1, this._gl.BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SELECTED_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._selectedAttribute, 1);
        this._gl.enableVertexAttribArray(this._selectedAttribute);
        this._gl.vertexAttribPointer(this._orderAttribute, 1, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ORDER_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._orderAttribute, 1);
        this._gl.enableVertexAttribArray(this._orderAttribute);
    }
    _updatePreviousBuffer() {
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        if (this._previousInstanceBuffer != this._instanceBuffer) this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._previousInstanceBuffer);
        this._gl.vertexAttribPointer(this._previousTranslationAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).TRANSLATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousTranslationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousTranslationAttribute);
        this._gl.vertexAttribPointer(this._previousScaleAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SCALE_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousScaleAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousScaleAttribute);
        this._gl.vertexAttribPointer(this._previousSelectedAttribute, 1, this._gl.BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SELECTED_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousSelectedAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousSelectedAttribute);
    }
    apply() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform1f(this._timeUniform, this.time);
        this._gl.uniform1f(this._durationUniform, this.duration);
        this._gl.uniform1f(this._fromOrderUniform, this.rangeMin);
        this._gl.uniform1f(this._toOrderUniform, this.rangeMax);
        this._gl.uniform1i(this._previousSamplerUniform, 0);
        this._gl.uniform1i(this._samplerUniform, 1);
        this._gl.uniform1f(this._specularPowerUniform, this.specularPower);
        this._gl.uniform1f(this._specularIntensityUniform, this.specularIntensity);
        this._gl.uniform3fv(this._hoverColorUniform, this.hoverColor);
        this._gl.uniform3fv(this._activeColorUniform, this.activeColor);
        this._gl.uniform3fv(this._selectedColorUniform, this.selectedColor);
        this._gl.uniform1f(this._hoverUniform, this.hover);
        this._gl.uniform1f(this._activeUniform, this.active);
        this._gl.uniform1f(this._highlightModeUniform, this.highlightMode == (0, _mainJs.HighlightMode).luminance ? 0.0 : 1.0);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
        this._gl.uniform3fv(this._directionToLightUniform, this.directionToLight);
        this._gl.uniform3fv(this._halfAngleUniform, this.halfAngle);
        this._gl.uniform1i(this._pickUniform, this.isPickShader ? 1 : 0);
    }
    updateTextures() {
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._previousPaletteTexture);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._paletteTexture);
    }
    disableProgram() {
        super.disableProgram();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._translationAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousTranslationAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._scaleAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousScaleAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._colorAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousColorAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._selectedAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousSelectedAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._staggerOrderAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._orderAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._idAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._idColorAttribute, 0);
    }
}

},{"./shader.js":"e7ZKA","../../../meshes/cube.js":"dgOpu","../../../vertex.js":"7T2qu","../../../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hASTw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitSphere", ()=>UnitSphere);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitSphere extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unitsphere.vertex.fx", "unitsphere.fragment.fx", (vsSource, fsSource)=>{
            if (this._main.shaderResources.EXT_frag_depth == null) fsSource = this._removeDirective(fsSource, "FragDepth");
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._colorAttribute, 1, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._previousColorAttribute, 1, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"dV3hh","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6mSD9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitCylinder", ()=>UnitCylinder);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitCylinder extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unitcylinder.vertex.fx", "unitcylinder.fragment.fx", (vsSource, fsSource)=>{
            if (this._main.shaderResources.EXT_frag_depth == null) fsSource = this._removeDirective(fsSource, "FragDepth");
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._rotationAttribute = gl.getAttribLocation(this._program, "aRotation");
        this._previousRotationAttribute = gl.getAttribLocation(this._program, "aPreviousRotation");
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._rotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._rotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._rotationAttribute);
        this._gl.vertexAttribPointer(this._colorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._previousRotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousRotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousRotationAttribute);
        this._gl.vertexAttribPointer(this._previousColorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
    disableProgram() {
        super.disableProgram();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._rotationAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousRotationAttribute, 0);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"dV3hh","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6VtnI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitHexPrism", ()=>UnitHexPrism);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitHexPrism extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unithexprism.vertex.fx", "unithexprism.fragment.fx", (vsSource, fsSource)=>{
            if (this._main.shaderResources.EXT_frag_depth == null) fsSource = this._removeDirective(fsSource, "FragDepth");
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._rotationAttribute = gl.getAttribLocation(this._program, "aRotation");
        this._previousRotationAttribute = gl.getAttribLocation(this._program, "aPreviousRotation");
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._rotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._rotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._rotationAttribute);
        this._gl.vertexAttribPointer(this._colorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        this._gl.vertexAttribPointer(this._previousRotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousRotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousRotationAttribute);
        this._gl.vertexAttribPointer(this._previousColorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
    disableProgram() {
        super.disableProgram();
        const ANGLE_instanced_arrays = this._main.shaderResources.ANGLE_instanced_arrays;
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._rotationAttribute, 0);
        ANGLE_instanced_arrays.vertexAttribDivisorANGLE(this._previousRotationAttribute, 0);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"dV3hh","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"znCvp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Anaglyph", ()=>Anaglyph);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Anaglyph extends (0, _shaderJs.ShaderBase) {
    get texture2D1() {
        return this._texture2D1;
    }
    set texture2D1(value) {
        if (this._texture2D1 != value) {
            this._texture2D1 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D2() {
        return this._texture2D2;
    }
    set texture2D2(value) {
        if (this._texture2D2 != value) {
            this._texture2D2 = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "anaglyph.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._samplerUniform1 = gl.getUniformLocation(this._program, "uSampler1");
        this._samplerUniform2 = gl.getUniformLocation(this._program, "uSampler2");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform4f(this._viewportUniform, this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);
        this._gl.uniform1i(this._samplerUniform1, 0);
        this._gl.uniform1i(this._samplerUniform2, 1);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D1);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D2);
        this._gl.activeTexture(this._gl.TEXTURE2);
    }
}

},{"./shader.js":"e7ZKA","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"h3oJk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "DebugAxesVisual", ()=>DebugAxesVisual);
class DebugAxesVisual {
    constructor(core, main, debugAxes){
        this._main = main;
        this._debugAxes = debugAxes;
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized && this._main.colorShader.isInitialized;
    }
    initializeContext(gl) {
        if (!this._debugAxes.isInitialized) this._debugAxes.initialize();
        this._gl = gl;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._debugAxes.vertices, gl.STATIC_DRAW);
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._debugAxes.indices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update(elapsedTime) {}
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            const colorShader = this._main.colorShader;
            const shaderResources = this._main.shaderResources;
            colorShader.vertexBuffer = this._vertexBuffer;
            colorShader.indexBuffer = this._indexBuffer;
            colorShader.prepare();
            colorShader.mMatrix = this.mMatrix;
            colorShader.apply();
            for(let i = 0; i < this.viewportCount; i++){
                const viewport = i + this.viewportOffset;
                shaderResources.bindFramebuffer(this.framebuffers[viewport]);
                this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                colorShader.vMatrix = this.vMatrices[viewport];
                colorShader.pMatrix = this.pMatrices[viewport];
                colorShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLE_STRIP, this._debugAxes.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jtXyZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cartesian2dVisual", ()=>Cartesian2dVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _axesJs = require("./axes.js");
var _mainJs = require("../../../../main.js");
var _constantsJs = require("../../../../constants.js");
var _quadJs = require("../../../../meshes/quad.js");
class Cartesian2dVisual extends (0, _axesJs.AxesVisualBase) {
    constructor(core, main, cartesian2dAxes){
        super(core);
        this._main = main;
        this._axes = cartesian2dAxes;
        this._axes.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized && this._main.gridShader.isInitialized && this._main.sdfShader.isInitialized && this._main.fonts[this._axes.font.name].isInitialized;
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        const axes = this._axes;
        if (!axes.isInitialized) axes.initialize();
        if (axes.gridVertices) this._createGridBuffers();
        if (axes.textVertices) this._createTextBuffers();
        this._isInitialized = true;
    }
    _createGridBuffers() {
        const axes = this._axes;
        this._gridVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.gridVertices, this._gl.STATIC_DRAW);
        this._gridIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.gridIndices, this._gl.STATIC_DRAW);
        this._gridBufferSize = axes.gridVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual grid buffers created`);
    }
    _createTextBuffers() {
        const axes = this._axes;
        this._textVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.textVertices, this._gl.STATIC_DRAW);
        this._textIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.textIndices, this._gl.STATIC_DRAW);
        this._textBufferSize = axes.textVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual text buffers created`);
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            const axes = this._axes;
            if (!this._gridVertexBuffer || axes.gridVertices.byteLength > this._gridBufferSize) this._createGridBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.gridVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.gridIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual grid buffers updated`);
            }
            if (!this._textVertexBuffer || axes.textVertices.byteLength > this._textBufferSize) this._createTextBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.textVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.textIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual text buffers updated`);
            }
            this._main.shaderResources.currentProgram = null;
        }
    }
    _renderText() {
        const axes = this._axes;
        const sdfShader = this._main.sdfShader;
        const shaderResources = this._main.shaderResources;
        const fontVisual = this._main.fonts[axes.font.name];
        sdfShader.vertexBuffer = this._textVertexBuffer;
        sdfShader.indexBuffer = this._textIndexBuffer;
        sdfShader.texture2D = fontVisual.texture;
        sdfShader.prepare();
        sdfShader.buffer = fontVisual.font.edgeValue / 0xff;
        sdfShader.gamma = axes.gamma;
        sdfShader.borderWidth = axes.textBorderWidth;
        sdfShader.color = axes.textColor || this._core.config.axesTextColor;
        sdfShader.hoverColor = axes.textHoverColor || this._core.config.axesTextHoverColor;
        sdfShader.borderColor = axes.textBorderColor || this._core.config.textBorderColor;
        sdfShader.pickedIdColor = this.pickedIdColor;
        sdfShader.apply();
        let indexCount, indexOffset;
        for(let axisId = 0; axisId < 2; axisId++){
            const orientation = axes.getLabelOrientation(axisId);
            for(let edge = 0; edge < 2; edge++){
                const edgeId = (0, _quadJs.Quad).AXIS_EDGES[axisId][edge];
                if (axes.isEdgeVisible[edgeId]) {
                    if (orientation == (0, _mainJs.AxesTextOrientation).parallel && axes.getIsLeftToRightHorizontal(edgeId) || orientation == (0, _mainJs.AxesTextOrientation).perpendicular && axes.getIsLeftToRightVertical(edgeId)) {
                        indexCount = axes.getAxesLeftToRightIndexCount(axisId);
                        indexOffset = axes.getAxesLeftToRightIndexOffset(axisId);
                    } else {
                        indexCount = axes.getAxesRightToLeftIndexCount(axisId);
                        indexOffset = axes.getAxesRightToLeftIndexOffset(axisId);
                    }
                    if (indexCount > 0) {
                        sdfShader.mMatrix = axes.getLabelMMatrix(edgeId);
                        sdfShader.applyModel();
                        sdfShader.isPickShader = false;
                        for(let i = 0; i < this.viewportCount; i++){
                            const viewport = i + this.viewportOffset;
                            shaderResources.bindFramebuffer(this.framebuffers[viewport]);
                            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                            sdfShader.vMatrix = this.vMatrices[viewport];
                            sdfShader.pMatrix = this.pMatrices[viewport];
                            sdfShader.applyView();
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                        if (this.isPickingEnabled && axes.isLabelPickingEnabled[axisId]) {
                            sdfShader.isPickShader = true;
                            sdfShader.pMatrix = this.pickPMatrix;
                            sdfShader.vMatrix = this.pickVMatrix;
                            sdfShader.applyView();
                            shaderResources.bindFramebuffer(this.pickFramebuffer);
                            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                    }
                    indexCount = axes.getTitleIndexCount(axisId);
                    if (indexCount > 0) {
                        indexOffset = axes.getTitleIndexOffset(axisId);
                        sdfShader.mMatrix = axes.getTitleMMatrix(edgeId);
                        sdfShader.applyModel();
                        sdfShader.isPickShader = false;
                        for(let i1 = 0; i1 < this.viewportCount; i1++){
                            const viewport1 = i1 + this.viewportOffset;
                            shaderResources.bindFramebuffer(this.framebuffers[viewport1]);
                            this._gl.viewport(this.viewports[viewport1].x, this.viewports[viewport1].y, this.viewports[viewport1].width, this.viewports[viewport1].height);
                            sdfShader.vMatrix = this.vMatrices[viewport1];
                            sdfShader.pMatrix = this.pMatrices[viewport1];
                            sdfShader.applyView();
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                        if (this.isPickingEnabled && axes.isTitlePickingEnabled[axisId]) {
                            sdfShader.isPickShader = true;
                            sdfShader.pMatrix = this.pickPMatrix;
                            sdfShader.vMatrix = this.pickVMatrix;
                            sdfShader.applyView();
                            shaderResources.bindFramebuffer(this.pickFramebuffer);
                            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                    }
                }
                indexCount = axes.getHeadingIndexCount(axisId);
                if (indexCount > 0 && axes.isHeadingVisible[edgeId]) {
                    indexOffset = axes.getHeadingIndexOffset(axisId);
                    sdfShader.mMatrix = axes.getHeadingMMatrix(edgeId);
                    sdfShader.applyModel();
                    sdfShader.isPickShader = false;
                    for(let i2 = 0; i2 < this.viewportCount; i2++){
                        const viewport2 = i2 + this.viewportOffset;
                        shaderResources.bindFramebuffer(this.framebuffers[viewport2]);
                        this._gl.viewport(this.viewports[viewport2].x, this.viewports[viewport2].y, this.viewports[viewport2].width, this.viewports[viewport2].height);
                        sdfShader.vMatrix = this.vMatrices[viewport2];
                        sdfShader.pMatrix = this.pMatrices[viewport2];
                        sdfShader.applyView();
                        this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                    }
                    if (this.isPickingEnabled && axes.isHeadingPickingEnabled[axisId]) {
                        sdfShader.isPickShader = true;
                        sdfShader.pMatrix = this.pickPMatrix;
                        sdfShader.vMatrix = this.pickVMatrix;
                        sdfShader.applyView();
                        shaderResources.bindFramebuffer(this.pickFramebuffer);
                        this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                        this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                    }
                }
            }
        }
    }
    _renderGrid() {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        gridShader.vertexBuffer = this._gridVertexBuffer;
        gridShader.indexBuffer = this._gridIndexBuffer;
        gridShader.prepare();
        gridShader.majorThickness = axes.gridMajorThickness;
        gridShader.minorThickness = axes.gridMinorThickness;
        gridShader.zeroThickness = axes.gridZeroThickness;
        gridShader.backgroundColor = axes.gridBackgroundColor || this._core.config.axesGridBackgroundColor;
        gridShader.highlightColor = axes.gridHighlightColor || this._core.config.axesGridHighlightColor;
        gridShader.majorColor = axes.gridMajorColor || this._core.config.axesGridMajorColor;
        gridShader.minorColor = axes.gridMinorColor || this._core.config.axesGridMinorColor;
        gridShader.zeroColor = axes.gridZeroColor || this._core.config.axesGridZeroColor;
        gridShader.pickedIdColor = this.pickedIdColor;
        gridShader.directionToLight = (0, _constantsJs.Constants).VECTOR3_UNITZ;
        gridShader.apply();
        for(let axisId = 0; axisId < 2; axisId++)if (axes.arePickDivisionsVisible[axisId]) {
            const gridTicksScale = axes.getGridTicksScale(axisId);
            const width = gridTicksScale[0];
            const height = gridTicksScale[1];
            gridShader.zero = axes.getGridTicksZero(axisId);
            gridShader.minorGridlines = axes.getGridTicksMinorGridlines(axisId);
            for(let edge = 0; edge < 2; edge++){
                const edgeId = (0, _quadJs.Quad).AXIS_EDGES[axisId][edge];
                if (axes.isEdgeVisible[edgeId]) this._renderGridTicks(axisId, edgeId, width, height);
            }
        }
        this._gl.disable(this._gl.CULL_FACE);
        const size = axes.size;
        const axisId2 = 0;
        const axisId3 = 1;
        const width1 = size[axisId2];
        const height1 = size[axisId3];
        gridShader.zero = axes.gridFaceZero;
        gridShader.minorGridlines = axes.gridFaceMinorGridlines;
        for(let face = 0; face < 2; face++){
            const faceId = face;
            if (axes.getIsForwardFace(faceId)) this._renderGridFace(faceId, width1, height1);
        }
        this._gl.enable(this._gl.CULL_FACE);
    }
    _renderGridTicks(axisId, edgeId, width, height) {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        gridShader.mMatrix = axes.getGridTicksMMatrix(edgeId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            shaderResources.bindFramebuffer(this.framebuffers[viewport]);
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
        if (this.isPickingEnabled && axes.isDivisionPickingEnabled[axisId]) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, this._axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, this._axes.getGridTicksIndexOffset(axisId) * 2);
        }
    }
    _renderGridFace(faceId, width, height) {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        gridShader.mMatrix = axes.getGridFaceMMatrix(faceId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            shaderResources.bindFramebuffer(this.framebuffers[viewport]);
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
        if (this.isPickingEnabled && axes.isGridPickingEnabled) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
    }
}

},{"./axes.js":"8spOz","../../../../main.js":"2JYph","../../../../constants.js":"dtECF","../../../../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8spOz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "AxesVisualBase", ()=>AxesVisualBase);
class AxesVisualBase {
    constructor(core){
        this._core = core;
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get axes() {
        return this._axes;
    }
    initializeContext(gl) {
        this._gl = gl;
    }
    update(elapsedTime) {}
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            this._renderGrid();
            this._renderText();
        }
    }
    _renderGrid() {}
    _renderText() {}
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aqv5q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cartesian3dVisual", ()=>Cartesian3dVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _axesJs = require("./axes.js");
var _mainJs = require("../../../../main.js");
var _constantsJs = require("../../../../constants.js");
var _cubeJs = require("../../../../meshes/cube.js");
class Cartesian3dVisual extends (0, _axesJs.AxesVisualBase) {
    constructor(core, main, cartesian3dAxes){
        super(core);
        this._main = main;
        this._axes = cartesian3dAxes;
        this._axes.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized && this._main.gridShader.isInitialized && this._main.sdfShader.isInitialized && this._main.fonts[this._axes.font.name].isInitialized;
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        const axes = this._axes;
        if (!axes.isInitialized) axes.initialize();
        if (axes.gridVertices) this._createGridBuffers();
        if (axes.textVertices) this._createTextBuffers();
        this._isInitialized = true;
    }
    _createGridBuffers() {
        const axes = this._axes;
        this._gridVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.gridVertices, this._gl.STATIC_DRAW);
        this._gridIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.gridIndices, this._gl.STATIC_DRAW);
        this._gridBufferSize = axes.gridVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual grid buffers created`);
    }
    _createTextBuffers() {
        const axes = this._axes;
        this._textVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.textVertices, this._gl.STATIC_DRAW);
        this._textIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.textIndices, this._gl.STATIC_DRAW);
        this._textBufferSize = axes.textVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual text buffers created`);
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            const axes = this._axes;
            if (!this._gridVertexBuffer || axes.gridVertices.byteLength > this._gridBufferSize) this._createGridBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.gridVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.gridIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual grid buffers updated`);
            }
            if (!this._textVertexBuffer || axes.textVertices.byteLength > this._textBufferSize) this._createTextBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.textVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.textIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual text buffers updated`);
            }
            this._main.shaderResources.currentProgram = null;
        }
    }
    _renderText() {
        const axes = this._axes;
        const sdfShader = this._main.sdfShader;
        const shaderResources = this._main.shaderResources;
        const fontVisual = this._main.fonts[axes.font.name];
        sdfShader.vertexBuffer = this._textVertexBuffer;
        sdfShader.indexBuffer = this._textIndexBuffer;
        sdfShader.texture2D = fontVisual.texture;
        sdfShader.prepare();
        sdfShader.buffer = fontVisual.font.edgeValue / 0xff;
        sdfShader.gamma = axes.gamma;
        sdfShader.borderWidth = axes.textBorderWidth;
        sdfShader.color = axes.textColor || this._core.config.axesTextColor;
        sdfShader.hoverColor = axes.textHoverColor || this._core.config.axesTextHoverColor;
        sdfShader.borderColor = axes.textBorderColor || this._core.config.textBorderColor;
        sdfShader.pickedIdColor = this.pickedIdColor;
        sdfShader.apply();
        let indexCount, indexOffset;
        for(let axisId = 0; axisId < 3; axisId++){
            const orientation = axes.getLabelOrientation(axisId);
            for(let edge = 0; edge < 4; edge++){
                const edgeId = (0, _cubeJs.Cube).AXIS_EDGES[axisId][edge];
                if (axes.getIsOutsideEdge(edgeId)) {
                    if (axes.isEdgeVisible[edgeId]) {
                        if (orientation == (0, _mainJs.AxesTextOrientation).parallel && axes.getIsLeftToRightHorizontal(edgeId) || orientation == (0, _mainJs.AxesTextOrientation).perpendicular && axes.getIsLeftToRightVertical(edgeId)) {
                            indexCount = axes.getAxesLeftToRightIndexCount(axisId);
                            indexOffset = axes.getAxesLeftToRightIndexOffset(axisId);
                        } else {
                            indexCount = axes.getAxesRightToLeftIndexCount(axisId);
                            indexOffset = axes.getAxesRightToLeftIndexOffset(axisId);
                        }
                        if (indexCount > 0) {
                            sdfShader.mMatrix = axes.getLabelMMatrix(edgeId);
                            sdfShader.applyModel();
                            sdfShader.isPickShader = false;
                            for(let i = 0; i < this.viewportCount; i++){
                                const viewport = i + this.viewportOffset;
                                shaderResources.bindFramebuffer(this.framebuffers[viewport]);
                                this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                                sdfShader.vMatrix = this.vMatrices[viewport];
                                sdfShader.pMatrix = this.pMatrices[viewport];
                                sdfShader.applyView();
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                            if (this.isPickingEnabled && axes.isLabelPickingEnabled[axisId]) {
                                sdfShader.isPickShader = true;
                                sdfShader.pMatrix = this.pickPMatrix;
                                sdfShader.vMatrix = this.pickVMatrix;
                                sdfShader.applyView();
                                shaderResources.bindFramebuffer(this.pickFramebuffer);
                                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                        }
                        indexCount = axes.getTitleIndexCount(axisId);
                        if (indexCount > 0) {
                            indexOffset = axes.getTitleIndexOffset(axisId);
                            sdfShader.mMatrix = axes.getTitleMMatrix(edgeId);
                            sdfShader.applyModel();
                            sdfShader.isPickShader = false;
                            for(let i1 = 0; i1 < this.viewportCount; i1++){
                                const viewport1 = i1 + this.viewportOffset;
                                shaderResources.bindFramebuffer(this.framebuffers[viewport1]);
                                this._gl.viewport(this.viewports[viewport1].x, this.viewports[viewport1].y, this.viewports[viewport1].width, this.viewports[viewport1].height);
                                sdfShader.vMatrix = this.vMatrices[viewport1];
                                sdfShader.pMatrix = this.pMatrices[viewport1];
                                sdfShader.applyView();
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                            if (this.isPickingEnabled && axes.isTitlePickingEnabled[axisId]) {
                                sdfShader.isPickShader = true;
                                sdfShader.pMatrix = this.pickPMatrix;
                                sdfShader.vMatrix = this.pickVMatrix;
                                sdfShader.applyView();
                                shaderResources.bindFramebuffer(this.pickFramebuffer);
                                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                        }
                    }
                    indexCount = axes.getHeadingIndexCount(axisId);
                    if (indexCount > 0 && axes.isHeadingVisible[edgeId]) {
                        indexOffset = axes.getHeadingIndexOffset(axisId);
                        sdfShader.mMatrix = axes.getHeadingMMatrix(edgeId);
                        sdfShader.applyModel();
                        sdfShader.isPickShader = false;
                        for(let i2 = 0; i2 < this.viewportCount; i2++){
                            const viewport2 = i2 + this.viewportOffset;
                            shaderResources.bindFramebuffer(this.framebuffers[viewport2]);
                            this._gl.viewport(this.viewports[viewport2].x, this.viewports[viewport2].y, this.viewports[viewport2].width, this.viewports[viewport2].height);
                            sdfShader.vMatrix = this.vMatrices[viewport2];
                            sdfShader.pMatrix = this.pMatrices[viewport2];
                            sdfShader.applyView();
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                        if (this.isPickingEnabled && axes.isHeadingPickingEnabled[axisId]) {
                            sdfShader.isPickShader = true;
                            sdfShader.pMatrix = this.pickPMatrix;
                            sdfShader.vMatrix = this.pickVMatrix;
                            sdfShader.applyView();
                            shaderResources.bindFramebuffer(this.pickFramebuffer);
                            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                    }
                }
            }
        }
    }
    _renderGrid() {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        gridShader.vertexBuffer = this._gridVertexBuffer;
        gridShader.indexBuffer = this._gridIndexBuffer;
        gridShader.prepare();
        gridShader.majorThickness = axes.gridMajorThickness;
        gridShader.minorThickness = axes.gridMinorThickness;
        gridShader.zeroThickness = axes.gridZeroThickness;
        gridShader.backgroundColor = axes.gridBackgroundColor || this._core.config.axesGridBackgroundColor;
        gridShader.highlightColor = axes.gridHighlightColor || this._core.config.axesGridHighlightColor;
        gridShader.majorColor = axes.gridMajorColor || this._core.config.axesGridMajorColor;
        gridShader.minorColor = axes.gridMinorColor || this._core.config.axesGridMinorColor;
        gridShader.zeroColor = axes.gridZeroColor || this._core.config.axesGridZeroColor;
        gridShader.pickedIdColor = this.pickedIdColor;
        gridShader.directionToLight = (0, _constantsJs.Constants).VECTOR3_UNITZ;
        gridShader.apply();
        for(let axisId = 0; axisId < 3; axisId++)if (axes.arePickDivisionsVisible[axisId]) {
            const gridTicksScale = axes.getGridTicksScale(axisId);
            const width = gridTicksScale[0];
            const height = gridTicksScale[1];
            gridShader.zero = axes.getGridTicksZero(axisId);
            gridShader.minorGridlines = axes.getGridTicksMinorGridlines(axisId);
            for(let edge = 0; edge < 4; edge++){
                const edgeId = (0, _cubeJs.Cube).AXIS_EDGES[axisId][edge];
                if (axes.getIsOutsideEdge(edgeId) && axes.isEdgeVisible[edgeId]) this._renderGridTicks(axisId, edgeId, width, height);
            }
        }
        this._gl.disable(this._gl.CULL_FACE);
        const size = axes.size;
        for(let axisId1 = 0; axisId1 < 3; axisId1++)if (axes.areFacesVisible[axisId1]) {
            const axisId2 = axisId1 == 0 ? 1 : 0;
            const axisId3 = axisId1 == 2 ? 1 : 2;
            const width1 = size[axisId2];
            const height1 = size[axisId3];
            gridShader.zero = axes.getGridFaceZero(axisId1);
            gridShader.minorGridlines = axes.getGridFaceMinorGridlines(axisId1);
            for(let face = 0; face < 2; face++){
                const faceId = (0, _cubeJs.Cube).AXIS_FACES[axisId1][face];
                if (axes.getIsForwardFace(faceId) && axes.isFaceVisible[faceId]) this._renderGridFace(faceId, width1, height1);
            }
        }
        this._gl.enable(this._gl.CULL_FACE);
    }
    _renderGridTicks(axisId, edgeId, width, height) {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        gridShader.mMatrix = axes.getGridTicksMMatrix(edgeId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            shaderResources.bindFramebuffer(this.framebuffers[viewport]);
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
        if (this.isPickingEnabled && axes.isDivisionPickingEnabled[axisId]) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
    }
    _renderGridFace(faceId, width, height) {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        gridShader.mMatrix = axes.getGridFaceMMatrix(faceId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            shaderResources.bindFramebuffer(this.framebuffers[viewport]);
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
        if (this.isPickingEnabled && axes.isGridPickingEnabled) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
    }
}

},{"./axes.js":"8spOz","../../../../main.js":"2JYph","../../../../constants.js":"dtECF","../../../../meshes/cube.js":"dgOpu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"84Y5o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ControllerVisual", ()=>ControllerVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _textureJs = require("../../../helpers/texture.js");
var _constantsJs = require("../../../constants.js");
class ControllerVisual {
    constructor(core, main, controller){
        this._core = core;
        this._main = main;
        this._mMatrix = (0, _glMatrix.mat4).create();
        this._vec3 = (0, _glMatrix.vec3).create();
        this._controller = controller;
        this._modelShader = main.modelShader;
        this._colorShader = main.colorShader;
        this.mMatrix = (0, _glMatrix.mat4).create();
        this.rayMMatrix = (0, _glMatrix.mat4).create();
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized && this._modelShader.isInitialized && this._colorShader.isInitialized;
    }
    get controller() {
        return this._controller;
    }
    initializeContext(gl) {
        if (!this._controller.isInitialized) this._controller.initialize();
        this._initialize(gl);
    }
    _initialize(gl) {
        this._gl = gl;
        this.modelTexture = (0, _textureJs.TextureHelper).fromImage(gl, this._controller.texture, false, gl.LINEAR);
        this._modelVertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._modelVertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._controller.vertices, gl.STATIC_DRAW);
        this._modelIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._modelIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._controller.indices, gl.STATIC_DRAW);
        this._rayVertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._rayVertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._controller.rayVertices, gl.STATIC_DRAW);
        this._rayIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._rayIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._controller.rayIndices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update(elapsedTime) {}
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            this._modelShader.vertexBuffer = this._modelVertexBuffer;
            this._modelShader.indexBuffer = this._modelIndexBuffer;
            this._modelShader.texture2D = this.modelTexture;
            this._modelShader.prepare();
            (0, _glMatrix.mat4).multiply(this._mMatrix, this._controller.useRayPose ? this.rayMMatrix : this.mMatrix, this._controller.mMatrix);
            this._modelShader.mMatrix = this._mMatrix;
            this._modelShader.specularPower = 10;
            this._modelShader.specularIntensity = 0.01;
            this._modelShader.apply();
            this._modelShader.applyModel();
            for(let i = 0; i < this.viewportCount; i++){
                const viewport = i + this.viewportOffset;
                this._main.shaderResources.bindFramebuffer(this.framebuffers[viewport]);
                this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                this._modelShader.directionToLight = (0, _constantsJs.Constants).VECTOR3_UNITZ;
                this._modelShader.halfAngle = (0, _constantsJs.Constants).VECTOR3_UNITZ;
                this._modelShader.vMatrix = this.vMatrices[viewport];
                this._modelShader.pMatrix = this.pMatrices[viewport];
                this._modelShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLES, this._controller.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
            if (this.isRayVisible) {
                this._colorShader.vertexBuffer = this._rayVertexBuffer;
                this._colorShader.indexBuffer = this._rayIndexBuffer;
                this._colorShader.prepare();
                (0, _glMatrix.mat4).multiply(this._mMatrix, this.rayMMatrix, this._controller.rayMMatrix);
                this._colorShader.mMatrix = this._mMatrix;
                this._colorShader.apply();
                this._colorShader.applyModel();
                for(let i1 = 0; i1 < this.viewportCount; i1++){
                    const viewport1 = i1 + this.viewportOffset;
                    this._main.shaderResources.bindFramebuffer(this.framebuffers[viewport1]);
                    this._gl.viewport(this.viewports[viewport1].x, this.viewports[viewport1].y, this.viewports[viewport1].width, this.viewports[viewport1].height);
                    this._colorShader.vMatrix = this.vMatrices[viewport1];
                    this._colorShader.pMatrix = this.pMatrices[viewport1];
                    this._colorShader.applyView();
                    this._gl.drawElements(this._gl.TRIANGLE_STRIP, this._controller.rayIndexCount, this._gl.UNSIGNED_SHORT, 0);
                }
            }
        }
    }
}

},{"gl-matrix":"3mrln","../../../helpers/texture.js":"eZ0Tk","../../../constants.js":"dtECF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5hDEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageVisual", ()=>ImageVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _textureJs = require("../../../helpers/texture.js");
class ImageVisual {
    constructor(core, main, image){
        this._core = core;
        this._main = main;
        this._image = image;
        this._image.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        this.mMatrix = (0, _glMatrix.mat4).create();
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized && this._main.textureShader.isInitialized;
    }
    get image() {
        return this._image;
    }
    initializeContext(gl) {
        if (!this._image.isInitialized) this._image.initialize();
        this._gl = gl;
        if (this._image.imageData) this.texture = (0, _textureJs.TextureHelper).fromImage(gl, this._image.imageData, false, gl.LINEAR);
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._image.vertices, gl.STATIC_DRAW);
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._image.indices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, this._image.vertices);
            this._main.shaderResources.currentProgram = null;
        }
    }
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            const textureShader = this._main.textureShader;
            const shaderResources = this._main.shaderResources;
            textureShader.vertexBuffer = this._vertexBuffer;
            textureShader.indexBuffer = this._indexBuffer;
            textureShader.texture2D = this.texture;
            textureShader.prepare();
            textureShader.mMatrix = this.mMatrix;
            textureShader.apply();
            for(let i = 0; i < this.viewportCount; i++){
                const viewport = i + this.viewportOffset;
                shaderResources.bindFramebuffer(this.framebuffers[viewport]);
                this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                textureShader.vMatrix = this.vMatrices[viewport];
                textureShader.pMatrix = this.pMatrices[viewport];
                textureShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLES, this._image.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
        }
    }
}

},{"gl-matrix":"3mrln","../../../helpers/texture.js":"eZ0Tk","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aIxo5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LabelVisual", ()=>LabelVisual);
parcelHelpers.export(exports, "LabelSetVisual", ()=>LabelSetVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class LabelVisualBase {
    constructor(core, main, label){
        this._core = core;
        this._main = main;
        this._label = label;
        this._label.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        this._mMatrix = (0, _glMatrix.mat4).create();
        this.mMatrix = (0, _glMatrix.mat4).create();
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized && this._main.sdfShader.isInitialized && this._main.fonts[this._label.font.name].isInitialized;
    }
    initializeContext(gl) {
        if (!this._label.isInitialized) this._label.initialize();
        this._gl = gl;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._label.vertices, gl.STATIC_DRAW);
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._label.indices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, this._label.vertices);
            this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, this._label.indices);
            this._main.shaderResources.currentProgram = null;
        }
    }
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            const indexCount = this._label.indexCount;
            if (indexCount > 0) {
                const shader = this._main.sdfShader;
                const fontVisual = this._main.fonts[this._label.font.name];
                shader.vertexBuffer = this._vertexBuffer;
                shader.indexBuffer = this._indexBuffer;
                shader.texture2D = fontVisual.texture;
                shader.prepare();
                shader.gamma = this._label.gamma;
                shader.buffer = fontVisual.font.edgeValue / 0xff;
                shader.borderWidth = this._label.borderWidth;
                shader.color = this._label.color || this._core.config.textColor;
                shader.borderColor = this._label.borderColor || this._core.config.textBorderColor;
                shader.hoverColor = this._label.hoverColor || this._core.config.textHoverColor;
                shader.pickedIdColor = this.pickedIdColor;
                shader.apply();
                (0, _glMatrix.mat4).multiply(this._mMatrix, this.mMatrix, this._label.mMatrix);
                shader.mMatrix = this._mMatrix;
                shader.applyModel();
                shader.isPickShader = false;
                for(let i = 0; i < this.viewportCount; i++){
                    const viewport = i + this.viewportOffset;
                    this._main.shaderResources.bindFramebuffer(this.framebuffers[viewport]);
                    this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                    shader.vMatrix = this.vMatrices[viewport];
                    shader.pMatrix = this.pMatrices[viewport];
                    shader.applyView();
                    this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, 0);
                }
                if (this.isPickingEnabled) {
                    shader.isPickShader = true;
                    shader.pMatrix = this.pickPMatrix;
                    shader.vMatrix = this.pickVMatrix;
                    shader.applyView();
                    this._main.shaderResources.bindFramebuffer(this.pickFramebuffer);
                    this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                    this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, 0);
                }
            }
        }
    }
}
class LabelVisual extends LabelVisualBase {
    constructor(core, main, label){
        super(core, main, label);
    }
    get label() {
        return this._label;
    }
    set text(value) {
        this._label.text = value;
    }
    get text() {
        return this._label.text;
    }
}
class LabelSetVisual extends LabelVisualBase {
    constructor(core, main, label){
        super(core, main, label);
    }
    get label() {
        return this._label;
    }
}

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gSFUH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FontVisual", ()=>FontVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _textureJs = require("../../helpers/texture.js");
var _mainJs = require("../../main.js");
class FontVisual {
    constructor(core, font){
        this._core = core;
        this._font = font;
        font.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get font() {
        return this._font;
    }
    initializeContext(gl) {
        this._gl = gl;
        this._isInitialized = true;
        if (this._font.count > 0) this._hasChanged = true;
    }
    update() {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            this.texture = (0, _textureJs.TextureHelper).fromImage(this._gl, this._font.atlas.imageData, false, this._gl.LINEAR);
            this._core.log.write((0, _mainJs.LogLevel).info, `${this._font.name} texture updated`);
        }
    }
}

},{"../../helpers/texture.js":"eZ0Tk","../../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ff79l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lasso", ()=>Lasso);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _constantsJs = require("../../../constants.js");
var _quadJs = require("../../../meshes/quad.js");
class Lasso {
    get isInitialized() {
        return this._isInitialized;
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    get indexBuffer() {
        return this._indexBuffer;
    }
    get indexCount() {
        return this._indexCount;
    }
    initializeContext(gl) {
        const vertices = (0, _quadJs.Quad).textured((0, _constantsJs.Constants).MAT4_IDENTITY);
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        const indices = (0, _quadJs.Quad).INDICES;
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this._indexCount = indices.length;
        this._isInitialized = true;
    }
}

},{"../../../constants.js":"dtECF","../../../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3ZCXP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Main", ()=>(0, _mainJs.Main));
var _mainJs = require("./main.js");

},{"./main.js":"9Qw3X","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9Qw3X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Main", ()=>Main);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../../main.js");
var _rendererJs = require("../renderer.js");
var _quadJs = require("./components/quad.js");
var _bufferJs = require("./buffer.js");
var _configJs = require("./config.js");
var _shaderJs = require("./shaders/shader.js");
var _textureJs = require("./shaders/texture.js");
var _lassoJs = require("./shaders/lasso.js");
var _sdftextJs = require("./shaders/sdftext.js");
var _pickgridJs = require("./shaders/pickgrid.js");
var _unitblockJs = require("./shaders/unitblock.js");
var _unitsphereJs = require("./shaders/unitsphere.js");
var _unitcylinderJs = require("./shaders/unitcylinder.js");
var _backgroundJs = require("./shaders/background.js");
var _ssaoJs = require("./shaders/ssao.js");
var _boxJs = require("./shaders/box.js");
var _deferredJs = require("./shaders/deferred.js");
var _combineJs = require("./shaders/combine.js");
var _dofblurJs = require("./shaders/dofblur.js");
var _downsampleJs = require("./shaders/downsample.js");
var _gaussianJs = require("./shaders/gaussian.js");
var _dofcombineJs = require("./shaders/dofcombine.js");
var _fxaaJs = require("./shaders/fxaa.js");
var _brightJs = require("./shaders/bright.js");
var _angleJs = require("../../helpers/angle.js");
var _pickJs = require("../../helpers/pick.js");
var _cartesian2DJs = require("./components/axes/cartesian2d.js");
var _cartesian3DJs = require("./components/axes/cartesian3d.js");
var _fontJs = require("./font.js");
var _mathJs = require("./../../helpers/math.js");
var _constantsJs = require("../../constants.js");
var _vertexJs = require("../../vertex.js");
var _textureJs1 = require("../../helpers/texture.js");
var _labelsJs = require("./components/labels.js");
var _imageJs = require("./components/image.js");
var _lassoJs1 = require("./components/lasso.js");
class Main extends (0, _rendererJs.RendererBase) {
    constructor(options){
        super(options);
        this._config = new (0, _configJs.Config)();
        this._quad = new (0, _quadJs.Quad)();
        this._lasso = new (0, _lassoJs1.Lasso)();
        this._pickedPixels = new Uint8Array(4);
        this._pickedIdColor = (0, _glMatrix.vec4).create();
        this._position = (0, _glMatrix.vec3).create();
        this._direction = (0, _glMatrix.vec3).create();
        this._cameraRotation = (0, _glMatrix.mat3).create();
        this._cameraPosition = (0, _glMatrix.vec3).create();
        this._modelPosition = (0, _glMatrix.vec3).create();
        this._modelManipulationOrigin = (0, _glMatrix.vec3).create();
        this._shadowVMatrix = (0, _glMatrix.mat4).create();
        this._shadowPMatrix = (0, _glMatrix.mat4).create();
    }
    get shaderResources() {
        return this._shaderResources;
    }
    get textureShader() {
        return this._textureShader;
    }
    get lassoShader() {
        return this._lassoShader;
    }
    get sdfShader() {
        return this._sdfShader;
    }
    get gridShader() {
        return this._gridShader;
    }
    get blockShader() {
        return this._blockShader;
    }
    get sphereShader() {
        return this._sphereShader;
    }
    get cyclinderShader() {
        return this._cylinderShader;
    }
    get currentAxes() {
        return this._isAxes1Current ? this._axes1 : this._axes2;
    }
    set currentAxes(value) {
        if (this._isAxes1Current) this._axes1 = value;
        else this._axes2 = value;
    }
    get previousAxes() {
        return this._isAxes1Current ? this._axes2 : this._axes1;
    }
    set previousAxes(value) {
        if (this._isAxes1Current) this._axes2 = value;
        else this._axes1 = value;
    }
    get config() {
        return this._config;
    }
    get isSupported() {
        return this._createContext(document.createElement("canvas")) !== null;
    }
    initialize(core) {
        super.initialize(core);
        this._shaderResources = new (0, _shaderJs.Resources)();
        this._textureShader = new (0, _textureJs.Texture)(core, this);
        this._lassoShader = new (0, _lassoJs.Lasso)(core, this);
        this._sdfShader = new (0, _sdftextJs.SdfText)(core, this);
        this._gridShader = new (0, _pickgridJs.PickGrid)(core, this);
        this._blockShader = new (0, _unitblockJs.UnitBlock)(core, this);
        this._sphereShader = new (0, _unitsphereJs.UnitSphere)(core, this);
        this._cylinderShader = new (0, _unitcylinderJs.UnitCylinder)(core, this);
        this._backgroundShader = new (0, _backgroundJs.Background)(core, this);
        this._ssaoShader = new (0, _ssaoJs.Ssao)(core, this);
        this._boxShader = new (0, _boxJs.Box)(core, this);
        this._deferredShader = new (0, _deferredJs.Deferred)(core, this);
        this._combineShader = new (0, _combineJs.Combine)(core, this);
        this._dofBlurShader = new (0, _dofblurJs.DofBlur)(core, this);
        this._downsampleShader = new (0, _downsampleJs.Downsample)(core, this);
        this._gaussianShader = new (0, _gaussianJs.Gaussian)(core, this);
        this._dofCombineShader = new (0, _dofcombineJs.DofCombine)(core, this);
        this._fxaaShader = new (0, _fxaaJs.Fxaa)(core, this);
        this._brightPassShader = new (0, _brightJs.Bright)(core, this);
        this._initializeContext(this._createContext(this._canvas));
        this._canvas.addEventListener("webglcontextlost", (event)=>{
            this._core.log.write((0, _mainJs.LogLevel).warn, "WebGL context lost");
            event.preventDefault();
        }, false);
        this._canvas.addEventListener("webglcontextrestored", ()=>{
            this._initializeContext(this._createContext(this._canvas));
            this._core.log.write((0, _mainJs.LogLevel).info, "WebGL context restored");
        }, false);
        this._isInitialized = true;
    }
    _initializeContext(gl) {
        this._gl = gl;
        for(const key in this.fonts){
            const fontVisual = this.fonts[key];
            fontVisual.initializeContext(gl);
        }
        this._ssaoSampleKernel = new Float32Array(this._config.ssaoKernelSize * 3);
        const random = new (0, _mathJs.PseudoRandom)(0);
        const _vec3 = (0, _glMatrix.vec3).create();
        for(let i = 0; i < this._config.ssaoKernelSize; i++){
            _vec3[0] = random.nextFloat() * 2 - 1;
            _vec3[1] = random.nextFloat() * 2 - 1;
            _vec3[2] = random.nextFloat();
            (0, _glMatrix.vec3).normalize(_vec3, _vec3);
            (0, _glMatrix.vec3).scale(_vec3, _vec3, random.nextFloat());
            let scale = i / this._config.ssaoKernelSize;
            scale = (0, _mathJs.MathHelper).lerp(0.1, 1, scale * scale);
            (0, _glMatrix.vec3).scale(_vec3, _vec3, scale);
            this._ssaoSampleKernel[i * 3] = _vec3[0];
            this._ssaoSampleKernel[i * 3 + 1] = _vec3[1];
            this._ssaoSampleKernel[i * 3 + 2] = _vec3[2];
        }
        const noise = new Float32Array(this._config.ssaoNoiseSize * this._config.ssaoNoiseSize * 4);
        _vec3[2] = 0;
        for(let i1 = 0; i1 < this._config.ssaoNoiseSize * this._config.ssaoNoiseSize; i1++){
            _vec3[0] = random.nextFloat() * 2 - 1;
            _vec3[1] = random.nextFloat() * 2 - 1;
            (0, _glMatrix.vec3).normalize(_vec3, _vec3);
            noise[i1 * 4] = _vec3[0];
            noise[i1 * 4 + 1] = _vec3[1];
        }
        this._ssaoNoiseTexture = this._gl.createTexture();
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._ssaoNoiseTexture);
        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.REPEAT);
        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.REPEAT);
        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.NEAREST);
        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.NEAREST);
        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA32F, this._config.ssaoNoiseSize, this._config.ssaoNoiseSize, 0, this._gl.RGBA, this._gl.FLOAT, noise);
        this._shaderResources.initializeContext(this._gl);
        this._textureShader.initializeContext(this._gl);
        this._lassoShader.initializeContext(this._gl);
        this._sdfShader.initializeContext(this._gl);
        this._gridShader.initializeContext(this._gl);
        this._blockShader.initializeContext(this._gl);
        this._sphereShader.initializeContext(this._gl);
        this._cylinderShader.initializeContext(this._gl);
        this._backgroundShader.initializeContext(this._gl);
        this._ssaoShader.initializeContext(this._gl);
        this._boxShader.initializeContext(this._gl);
        this._deferredShader.initializeContext(this._gl);
        this._combineShader.initializeContext(this._gl);
        this._dofBlurShader.initializeContext(this._gl);
        this._downsampleShader.initializeContext(this._gl);
        this._gaussianShader.initializeContext(this._gl);
        this._dofCombineShader.initializeContext(this._gl);
        this._fxaaShader.initializeContext(this._gl);
        this._brightPassShader.initializeContext(this._gl);
        this._quad.initializeContext(this._gl);
        this._lasso.initializeContext(this._gl);
        this._framebuffers = [
            null,
            null
        ];
        const texture = (0, _textureJs1.TextureHelper).create(this._gl, this._core.config.pickWidth, this._core.config.pickHeight, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._gl.LINEAR, null);
        const renderBuffer = this._gl.createRenderbuffer();
        this._gl.bindRenderbuffer(this._gl.RENDERBUFFER, renderBuffer);
        this._gl.renderbufferStorage(this._gl.RENDERBUFFER, this._gl.DEPTH_COMPONENT24, this._core.config.pickWidth, this._core.config.pickHeight);
        const framebuffer = this._gl.createFramebuffer();
        this._shaderResources.bindFramebuffer(framebuffer);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, texture, 0);
        this._gl.framebufferRenderbuffer(this._gl.FRAMEBUFFER, this._gl.DEPTH_ATTACHMENT, this._gl.RENDERBUFFER, renderBuffer);
        this._pickFrameBuffer = framebuffer;
        for(let i2 = 0; i2 < this.transitionBuffers.length; i2++)this.transitionBuffers[i2].initializeContext(this._gl);
        if (this._axes1) for(let i3 = 0; i3 < this._axes1.length; i3++)this._axes1[i3].initializeContext(this._gl);
        if (this._axes2) for(let i4 = 0; i4 < this._axes2.length; i4++)this._axes2[i4].initializeContext(this._gl);
        for(let i5 = 0; i5 < this.labelSets.length; i5++)this.labelSets[i5].initializeContext(this._gl);
        for(let i6 = 0; i6 < this.images.length; i6++)this.images[i6].initializeContext(this._gl);
    }
    _resize(width, height) {
        super._resize(width, height);
        this._positionTexture = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RGBA, this._gl.FLOAT, this._gl.NEAREST, null, this._gl.RGBA32F);
        this._colorTexture = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._normalTexture = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._geometryFrameBuffer = this._gl.createFramebuffer();
        this._shaderResources.bindFramebuffer(this._geometryFrameBuffer);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._positionTexture, 0);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT1, this._gl.TEXTURE_2D, this._colorTexture, 0);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT2, this._gl.TEXTURE_2D, this._normalTexture, 0);
        const renderBuffer = this._gl.createRenderbuffer();
        this._gl.bindRenderbuffer(this._gl.RENDERBUFFER, renderBuffer);
        this._gl.renderbufferStorage(this._gl.RENDERBUFFER, this._gl.DEPTH_COMPONENT24, width, height);
        this._gl.framebufferRenderbuffer(this._gl.FRAMEBUFFER, this._gl.DEPTH_ATTACHMENT, this._gl.RENDERBUFFER, renderBuffer);
        this._gl.drawBuffers([
            this._gl.COLOR_ATTACHMENT0,
            this._gl.COLOR_ATTACHMENT1,
            this._gl.COLOR_ATTACHMENT2
        ]);
        this._postProcessTexture1 = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessDepthTexture = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.DEPTH_COMPONENT, this._gl.UNSIGNED_INT, this._gl.NEAREST, null, this._gl.DEPTH_COMPONENT24);
        this._postProcessFrameBuffer1 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessFrameBuffer1);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessTexture1, 0);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.DEPTH_ATTACHMENT, this._gl.TEXTURE_2D, this._postProcessDepthTexture, 0);
        this._postProcessTexture2 = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessFrameBuffer2 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessFrameBuffer2);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessTexture2, 0);
        this._postProcessDofTexture = (0, _textureJs1.TextureHelper).create(this._gl, width, height, this._gl.RED, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.R32F);
        this._postProcessDofFrameBuffer = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessDofFrameBuffer);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessDofTexture, 0);
        const widthHalf = Math.round(width / 2);
        const heightHalf = Math.round(height / 2);
        this._postProcessHalfTexture1 = (0, _textureJs1.TextureHelper).create(this._gl, widthHalf, heightHalf, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessHalfFrameBuffer1 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessHalfFrameBuffer1);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessHalfTexture1, 0);
        this._postProcessHalfTexture2 = (0, _textureJs1.TextureHelper).create(this._gl, widthHalf, heightHalf, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessHalfFrameBuffer2 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessHalfFrameBuffer2);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessHalfTexture2, 0);
        const widthQuarter = Math.round(widthHalf / 2);
        const heightQuarter = Math.round(heightHalf / 2);
        this._postProcessQuarterTexture1 = (0, _textureJs1.TextureHelper).create(this._gl, widthQuarter, heightQuarter, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessQuarterFrameBuffer1 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessQuarterFrameBuffer1);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessQuarterTexture1, 0);
        this._postProcessQuarterTexture2 = (0, _textureJs1.TextureHelper).create(this._gl, widthQuarter, heightQuarter, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessQuarterFrameBuffer2 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessQuarterFrameBuffer2);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessQuarterTexture2, 0);
        const widthEighth = Math.round(widthQuarter / 2);
        const heightEighth = Math.round(heightQuarter / 2);
        this._postProcessEighthTexture1 = (0, _textureJs1.TextureHelper).create(this._gl, widthEighth, heightEighth, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessEighthFrameBuffer1 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessEighthFrameBuffer1);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessEighthTexture1, 0);
        this._postProcessEighthTexture2 = (0, _textureJs1.TextureHelper).create(this._gl, widthEighth, heightEighth, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessEighthFrameBuffer2 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessEighthFrameBuffer2);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessEighthTexture2, 0);
        const widthSixteenth = Math.round(widthEighth / 2);
        const hgeightSixteenth = Math.round(heightEighth / 2);
        this._postProcessSixteenthTexture1 = (0, _textureJs1.TextureHelper).create(this._gl, widthSixteenth, hgeightSixteenth, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessSixteenthFrameBuffer1 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessSixteenthFrameBuffer1);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessSixteenthTexture1, 0);
        this._postProcessSixteenthTexture2 = (0, _textureJs1.TextureHelper).create(this._gl, widthSixteenth, hgeightSixteenth, this._gl.RGBA, this._gl.FLOAT, this._gl.LINEAR, null, this._gl.RGBA32F);
        this._postProcessSixteenthFrameBuffer2 = this._gl.createFramebuffer();
        this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessSixteenthFrameBuffer2);
        this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._postProcessSixteenthTexture2, 0);
        this._core.log.write((0, _mainJs.LogLevel).info, `buffers resized ${width},${height}`);
    }
    _createContext(canvas) {
        var options = {
            stencil: true,
            alpha: false,
            antialias: false
        };
        const gl = canvas.getContext("webgl2", options);
        if (gl === null) this._core.log.write((0, _mainJs.LogLevel).error, "WebGL initialization failed");
        const OES_texture_float_linear = gl.getExtension("OES_texture_float_linear");
        const EXT_color_buffer_float = gl.getExtension("EXT_color_buffer_float");
        let supported = false;
        if (OES_texture_float_linear && EXT_color_buffer_float && gl.MAX_DRAW_BUFFERS > 3) {
            const texture = (0, _textureJs1.TextureHelper).create(gl, 1, 1, gl.RGBA, gl.FLOAT, gl.LINEAR, null, gl.RGBA32F);
            const framebuffer = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
            if (status == gl.FRAMEBUFFER_COMPLETE) supported = true;
            else this._core.log.write((0, _mainJs.LogLevel).warn, "Advanced renderer not supported");
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        return supported ? gl : null;
    }
    prepare() {
        let viewport;
        switch(this._core.config.stereoMode){
            case (0, _mainJs.StereoMode).none:
                viewport = this._viewports[0];
                viewport.x = 0;
                viewport.y = 0;
                viewport.width = this._canvas.width;
                viewport.height = this._canvas.height;
                this._viewportOffset = 0;
                this._viewportCount = 1;
                break;
            case (0, _mainJs.StereoMode).left:
                viewport = this._viewports[0];
                viewport.x = 0;
                viewport.y = 0;
                viewport.width = this._canvas.width;
                viewport.height = this._canvas.height;
                this._viewportOffset = 0;
                this._viewportCount = 1;
                break;
            case (0, _mainJs.StereoMode).right:
                viewport = this._viewports[1];
                viewport.x = 0;
                viewport.y = 0;
                viewport.width = this._canvas.width;
                viewport.height = this._canvas.height;
                this._viewportOffset = 1;
                this._viewportCount = 1;
                break;
        }
    }
    createTransitionBuffer(ids) {
        const buffer = new (0, _bufferJs.TransitionBuffer)(this._core, ids);
        buffer.initializeContext(this._gl);
        return buffer;
    }
    createCartesian2dAxesVisual(axes) {
        const visual = new (0, _cartesian2DJs.Cartesian2dVisual)(this._core, this, axes);
        visual.initializeContext(this._gl);
        return visual;
    }
    createCartesian3dAxesVisual(axes) {
        const visual = new (0, _cartesian3DJs.Cartesian3dVisual)(this._core, this, axes);
        visual.initializeContext(this._gl);
        return visual;
    }
    _createLabelVisual(label) {
        return new (0, _labelsJs.LabelVisual)(this._core, this, label);
    }
    createLabelSetVisual(labelSet) {
        const visual = new (0, _labelsJs.LabelSetVisual)(this._core, this, labelSet);
        visual.initializeContext(this._gl);
        return visual;
    }
    createImageVisual(image) {
        const visual = new (0, _imageJs.ImageVisual)(this._core, this, image);
        visual.initializeContext(this._gl);
        return visual;
    }
    createFontVisual(font) {
        const visual = new (0, _fontJs.FontVisual)(this._core, font);
        visual.initializeContext(this._gl);
        return visual;
    }
    getDataUrl(mimeType) {
        return this._canvas.toDataURL(mimeType);
    }
    update(elapsedTime) {
        if (this._isInitialized) {
            super.update(elapsedTime);
            if (this._shadowWidth != this._config.shadowWidth || this._shadowHeight != this._config.shadowHeight) {
                this._shadowWidth = this._config.shadowWidth;
                this._shadowHeight = this._config.shadowHeight;
                this._shadowColorTexture = (0, _textureJs1.TextureHelper).create(this._gl, this._config.shadowWidth, this._config.shadowHeight, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._gl.LINEAR, null);
                this._shadowDepthTexture = (0, _textureJs1.TextureHelper).create(this._gl, this._config.shadowWidth, this._config.shadowHeight, this._gl.DEPTH_COMPONENT, this._gl.UNSIGNED_INT, this._gl.NEAREST, null, this._gl.DEPTH_COMPONENT24);
                this._shadowFrameBuffer = this._gl.createFramebuffer();
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._shadowFrameBuffer);
                this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._shadowColorTexture, 0);
                this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.DEPTH_ATTACHMENT, this._gl.TEXTURE_2D, this._shadowDepthTexture, 0);
                this._core.log.write((0, _mainJs.LogLevel).info, `shadow map resized ${this._shadowWidth},${this._shadowHeight}`);
            }
            if (this._ssaoWidth != this._config.ssaoWidth || this._ssaoHeight != this._config.ssaoHeight) {
                this._ssaoWidth = this._config.ssaoWidth;
                this._ssaoHeight = this._config.ssaoHeight;
                this._ssaoTexture1 = (0, _textureJs1.TextureHelper).create(this._gl, this._config.ssaoWidth, this._config.ssaoHeight, this._gl.RED, this._gl.UNSIGNED_BYTE, this._gl.LINEAR, null, this._gl.R8);
                this._ssaoFrameBuffer1 = this._gl.createFramebuffer();
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._ssaoFrameBuffer1);
                this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._ssaoTexture1, 0);
                this._ssaoTexture2 = (0, _textureJs1.TextureHelper).create(this._gl, this._config.ssaoWidth, this._config.ssaoHeight, this._gl.RED, this._gl.UNSIGNED_BYTE, this._gl.LINEAR, null, this._gl.R8);
                this._ssaoFrameBuffer2 = this._gl.createFramebuffer();
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._ssaoFrameBuffer2);
                this._gl.framebufferTexture2D(this._gl.FRAMEBUFFER, this._gl.COLOR_ATTACHMENT0, this._gl.TEXTURE_2D, this._ssaoTexture2, 0);
                this._core.log.write((0, _mainJs.LogLevel).info, `ssao map resized ${this._ssaoWidth},${this._ssaoHeight}`);
            }
            if (this._config.isDofEnabled && this._config.dofAutoFocus) {
                this._core.getModelManipulationOrigin(this._modelManipulationOrigin);
                this._core.getModelPosition(this._modelPosition);
                (0, _glMatrix.vec3).add(this._position, this._modelManipulationOrigin, this._modelPosition);
                this._core.camera.getPosition(this._cameraPosition);
                (0, _glMatrix.vec3).subtract(this._position, this._position, this._cameraPosition);
                const distance = -this._position[2];
                const amount = Math.min(elapsedTime * this._core.config.focusSmoothing, 1);
                this._config.dofFocusDistance = (0, _mathJs.MathHelper).lerp(this._config.dofFocusDistance, distance, amount);
            }
        }
    }
    render(elapsedTime) {
        this._gl.enable(this._gl.DEPTH_TEST);
        this._gl.enable(this._gl.CULL_FACE);
        this._gl.cullFace(this._gl.BACK);
        this._gl.disable(this._gl.BLEND);
        if (this.isPickingEnabled) {
            this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
            this._gl.clearColor(0, 0, 0, 0);
            this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
        }
        this._shaderResources.bindFramebuffer(this._geometryFrameBuffer);
        const backgroundColor = this._backgroundColor || this._core.config.backgroundColor;
        this._gl.clearColor(backgroundColor[0], backgroundColor[1], backgroundColor[2], 1);
        this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT | this._gl.STENCIL_BUFFER_BIT);
        if (this.config.isShadowEnabled) {
            this._shaderResources.bindFramebuffer(this._shadowFrameBuffer);
            this._gl.clear(this._gl.DEPTH_BUFFER_BIT);
            (0, _glMatrix.mat4).perspective(this._shadowPMatrix, (0, _angleJs.AngleHelper).degreesToRadians(30), this._config.shadowWidth / this._config.shadowHeight, this._core.config.nearPlane, this._core.config.farPlane);
            (0, _glMatrix.vec3).set(this._modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
            (0, _glMatrix.mat3).fromMat4(this._cameraRotation, this.inverseVMatrices[0]);
            (0, _glMatrix.vec3).transformMat3(this._position, this._config.keyLightPosition, this._cameraRotation);
            (0, _glMatrix.vec3).add(this._position, this._position, this._modelPosition);
            (0, _glMatrix.mat4).lookAt(this._shadowVMatrix, this._position, this._modelPosition, (0, _constantsJs.Constants).VECTOR3_UNITY);
        }
        for(let i = 0; i < this.transitionBuffers.length; i++){
            const transitionBuffer = this.transitionBuffers[i];
            if (transitionBuffer.isVisible) this._renderTransitionBuffer(transitionBuffer);
        }
        const axesVisuals = this.axesVisibility == (0, _mainJs.AxesVisibility).current ? this.currentAxes : this.axesVisibility == (0, _mainJs.AxesVisibility).previous ? this.previousAxes : null;
        if (axesVisuals) for(let i1 = 0; i1 < axesVisuals.length; i1++){
            const axesVisual = axesVisuals[i1];
            if (axesVisual.isVisible) {
                axesVisual.pickedIdColor = this._pickedIdColor;
                axesVisual.pickFramebuffer = this._pickFrameBuffer;
                axesVisual.geometryFramebuffer = this._geometryFrameBuffer;
                axesVisual.render(elapsedTime);
            }
        }
        if (this.areLabelsVisible) for(let i2 = 0; i2 < this.labelSets.length; i2++){
            const labelSetVisual = this.labelSets[i2];
            if (labelSetVisual.isVisible) {
                labelSetVisual.pickedIdColor = this._pickedIdColor;
                labelSetVisual.pickFramebuffer = this._pickFrameBuffer;
                labelSetVisual.geometryFramebuffer = this._geometryFrameBuffer;
                labelSetVisual.render(elapsedTime);
            }
        }
        if (this.areImagesVisible) for(let i3 = 0; i3 < this.images.length; i3++){
            const imageVisual = this.images[i3];
            if (imageVisual.isVisible) {
                imageVisual.geometryFramebuffer = this._geometryFrameBuffer;
                imageVisual.render(elapsedTime);
            }
        }
        if (this._backgroundShader.isInitialized) {
            this._backgroundShader.prepare();
            this._backgroundShader.color = this._core.config.backgroundColor;
            this._backgroundShader.apply();
            this._shaderResources.bindFramebuffer(this._geometryFrameBuffer);
            for(let i4 = 0; i4 < this._viewportCount; i4++){
                const viewport = i4 + this._viewportOffset;
                this._gl.viewport(this._viewports[viewport].x, this._viewports[viewport].y, this._viewports[viewport].width, this._viewports[viewport].height);
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
            this._gl.bindVertexArray(null);
        }
        if (this.isPickingEnabled) {
            this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
            this._gl.readPixels(this._core.config.pickWidth / 2, this._core.config.pickHeight / 2, 1, 1, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._pickedPixels);
            this._pickedType = (0, _pickJs.PickHelper).decodeType(this._pickedPixels);
            (0, _glMatrix.vec4).set(this._pickedIdColor, this._pickedPixels[0] / 0xff, this._pickedPixels[1] / 0xff, this._pickedPixels[2] / 0xff, this._pickedPixels[3] / 0xff);
            this._pickedId = (0, _pickJs.PickHelper).decodeNumber(this._pickedPixels);
        } else {
            (0, _glMatrix.vec4).set(this._pickedIdColor, 0, 0, 0, 0);
            this._pickedId = 0;
        }
        if (this.transitionBuffers.length > 0 && this._quad.isInitialized) {
            const viewport1 = this._viewportOffset;
            this._postProcess(this.vMatrices[viewport1], this.inverseVMatrices[viewport1], this.pMatrices[viewport1], this._viewports[viewport1]);
        }
        if (this.isLassoPicking && this._lassoShader.isInitialized) {
            this._lassoShader.vertexBuffer = this._lasso.vertexBuffer;
            this._lassoShader.indexBuffer = this._lasso.indexBuffer;
            const lassoWidth = this.lassoX1 - this.lassoX0;
            const lassoHeight = this.lassoY1 - this.lassoY0;
            this._lassoShader.prepare();
            this._lassoShader.color = this.lassoColor ? this.lassoColor : this._core.config.lassoColor;
            this._lassoShader.dashWidth = this.lassoDashWidth ? this.lassoDashWidth : this._core.config.lassoDashWidth;
            this._lassoShader.apply();
            const lassoThickness = this.lassoThickness ? this.lassoThickness : this._core.config.lassoThickness;
            for(let i5 = 0; i5 < this._viewportCount; i5++){
                const viewportIndex = i5 + this._viewportOffset;
                this._shaderResources.bindFramebuffer(this._framebuffers[viewportIndex]);
                const viewport2 = this._viewports[viewportIndex];
                this._gl.viewport(viewport2.x, viewport2.y, viewport2.width, viewport2.height);
                this._lassoMMatrix[0] = lassoWidth * 2 / viewport2.width;
                this._lassoMMatrix[5] = lassoHeight * 2 / viewport2.height;
                this._lassoMMatrix[10] = 1;
                this._lassoMMatrix[12] = (this.lassoX0 + lassoWidth / 2) / viewport2.width * 2 - 1;
                this._lassoMMatrix[13] = 1 - (this.lassoY0 + lassoHeight / 2) / viewport2.height * 2;
                this._lassoShader.mMatrix = this._lassoMMatrix;
                (0, _glMatrix.vec2).set(this._lassoThickness, lassoThickness / lassoWidth, lassoThickness / lassoHeight);
                this._lassoShader.thickness = this._lassoThickness;
                this._lassoShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLES, this._lasso.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
        }
    }
    _renderTransitionBuffer(transitionBuffer) {
        const currentBuffer = transitionBuffer.currentBuffer;
        const previousBuffer = transitionBuffer.previousBuffer;
        const currentPalette = transitionBuffer.currentPalette;
        const previousPalette = transitionBuffer.previousPalette;
        const unitType = transitionBuffer.unitType === undefined ? currentBuffer.unitType : transitionBuffer.unitType;
        const id = currentBuffer.lookup[transitionBuffer.pickIdLookup[this._pickedId]];
        const hoverId = id > -1 ? (0, _vertexJs.UnitVertex).getIdHover(currentBuffer.dataView, id) : -1;
        const activeId = transitionBuffer.activeId;
        if (this._blockShader.isInitialized && (unitType == (0, _mainJs.UnitType).block || unitType == (0, _mainJs.UnitType).blockSdf)) {
            this._blockShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._blockShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._blockShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._blockShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._blockShader.prepare();
            this._blockShader.mMatrix = this.mMatrix;
            this._blockShader.time = this.transitionTime;
            this._blockShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._blockShader.rangeMin = currentBuffer.from;
            this._blockShader.rangeMax = currentBuffer.to;
            this._blockShader.hover = hoverId;
            this._blockShader.active = activeId;
            this._blockShader.specularPower = this._config.specularPower;
            this._blockShader.specularIntensity = this._config.specularIntensity;
            this._blockShader.apply();
            this._blockShader.isPickShader = false;
            this._blockShader.isShadowMap = false;
            this._shaderResources.bindFramebuffer(this._geometryFrameBuffer);
            for(let i = 0; i < this._viewportCount; i++){
                const viewport = i + this._viewportOffset;
                this._gl.viewport(this._viewports[viewport].x, this._viewports[viewport].y, this._viewports[viewport].width, this._viewports[viewport].height);
                this._blockShader.vMatrix = this.vMatrices[viewport];
                this._blockShader.pMatrix = this.pMatrices[viewport];
                this._blockShader.applyView();
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._blockShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this._config.isShadowEnabled) {
                this._shaderResources.bindFramebuffer(this._shadowFrameBuffer);
                this._gl.viewport(0, 0, this._config.shadowWidth, this._config.shadowHeight);
                this._gl.cullFace(this._gl.FRONT);
                this._blockShader.isPickShader = false;
                this._blockShader.isShadowMap = true;
                this._blockShader.vMatrix = this._shadowVMatrix;
                this._blockShader.pMatrix = this._shadowPMatrix;
                this._blockShader.applyView();
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._blockShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
                this._gl.colorMask(true, true, true, true);
                this._gl.cullFace(this._gl.BACK);
            }
            if (this.isPickingEnabled) {
                this._blockShader.isPickShader = true;
                this._blockShader.isShadowMap = false;
                this._blockShader.pMatrix = this.pickPMatrix;
                this._blockShader.vMatrix = this.pickVMatrix;
                this._blockShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._blockShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        } else if (this._sphereShader.isInitialized && unitType == (0, _mainJs.UnitType).sphere) {
            this._sphereShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._sphereShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._sphereShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._sphereShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._sphereShader.prepare();
            this._sphereShader.mMatrix = this.mMatrix;
            this._sphereShader.time = this.transitionTime;
            this._sphereShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._sphereShader.rangeMin = currentBuffer.from;
            this._sphereShader.rangeMax = currentBuffer.to;
            this._sphereShader.hover = hoverId;
            this._sphereShader.active = activeId;
            this._sphereShader.specularPower = this._config.specularPower;
            this._sphereShader.specularIntensity = this._config.specularIntensity;
            this._sphereShader.apply();
            this._sphereShader.isPickShader = false;
            this._sphereShader.isShadowMap = false;
            this._shaderResources.bindFramebuffer(this._geometryFrameBuffer);
            for(let i1 = 0; i1 < this._viewportCount; i1++){
                const viewport1 = i1 + this._viewportOffset;
                this._gl.viewport(this._viewports[viewport1].x, this._viewports[viewport1].y, this._viewports[viewport1].width, this._viewports[viewport1].height);
                this._sphereShader.vMatrix = this.vMatrices[viewport1];
                this._sphereShader.pMatrix = this.pMatrices[viewport1];
                this._sphereShader.applyView();
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._sphereShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this._config.isShadowEnabled) {
                this._shaderResources.bindFramebuffer(this._shadowFrameBuffer);
                this._gl.viewport(0, 0, this._config.shadowWidth, this._config.shadowHeight);
                this._sphereShader.isPickShader = false;
                this._sphereShader.isShadowMap = true;
                this._sphereShader.vMatrix = this._shadowVMatrix;
                this._sphereShader.pMatrix = this._shadowPMatrix;
                this._sphereShader.applyView();
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._sphereShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
                this._gl.colorMask(true, true, true, true);
            }
            if (this.isPickingEnabled) {
                this._sphereShader.isPickShader = true;
                this._sphereShader.isShadowMap = false;
                this._sphereShader.pMatrix = this.pickPMatrix;
                this._sphereShader.vMatrix = this.pickVMatrix;
                this._sphereShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._sphereShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        } else if (this._cylinderShader.isInitialized && unitType == (0, _mainJs.UnitType).cylinder) {
            this._cylinderShader.instanceBuffer = currentBuffer.vertexBuffer;
            this._cylinderShader.previousInstanceBuffer = previousBuffer.vertexBuffer;
            this._cylinderShader.paletteTexture = currentPalette.texture || currentPalette.defaultTexture;
            this._cylinderShader.previousPaletteTexture = previousPalette.texture || previousPalette.defaultTexture;
            this._cylinderShader.prepare();
            this._cylinderShader.mMatrix = this.mMatrix;
            this._cylinderShader.time = this.transitionTime;
            this._cylinderShader.duration = this._core.config.transitionDuration / (this._core.config.transitionDuration + this._core.config.transitionStaggering);
            this._cylinderShader.rangeMin = currentBuffer.from;
            this._cylinderShader.rangeMax = currentBuffer.to;
            this._cylinderShader.hover = hoverId;
            this._cylinderShader.active = activeId;
            this._cylinderShader.specularPower = this._config.specularPower;
            this._cylinderShader.specularIntensity = this._config.specularIntensity;
            this._cylinderShader.apply();
            this._cylinderShader.isPickShader = false;
            this._cylinderShader.isShadowMap = false;
            this._shaderResources.bindFramebuffer(this._geometryFrameBuffer);
            for(let i2 = 0; i2 < this._viewportCount; i2++){
                const viewport2 = i2 + this._viewportOffset;
                this._gl.viewport(this._viewports[viewport2].x, this._viewports[viewport2].y, this._viewports[viewport2].width, this._viewports[viewport2].height);
                this._cylinderShader.vMatrix = this.vMatrices[viewport2];
                this._cylinderShader.pMatrix = this.pMatrices[viewport2];
                this._cylinderShader.applyView();
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._cylinderShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
            if (this._config.isShadowEnabled) {
                this._shaderResources.bindFramebuffer(this._shadowFrameBuffer);
                this._gl.viewport(0, 0, this._config.shadowWidth, this._config.shadowHeight);
                this._cylinderShader.isPickShader = false;
                this._cylinderShader.isShadowMap = true;
                this._cylinderShader.vMatrix = this._shadowVMatrix;
                this._cylinderShader.pMatrix = this._shadowPMatrix;
                this._cylinderShader.applyView();
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._cylinderShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
                this._gl.colorMask(true, true, true, true);
            }
            if (this.isPickingEnabled) {
                this._cylinderShader.isPickShader = true;
                this._cylinderShader.isShadowMap = false;
                this._cylinderShader.pMatrix = this.pickPMatrix;
                this._cylinderShader.vMatrix = this.pickVMatrix;
                this._cylinderShader.applyView();
                this._shaderResources.bindFramebuffer(this._pickFrameBuffer);
                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                this._gl.drawElementsInstanced(this._gl.TRIANGLE_STRIP, this._cylinderShader.indexCount, this._gl.UNSIGNED_SHORT, 0, transitionBuffer.length);
            }
        }
    }
    _postProcess(vMatrix, inverseVMatrix, pMatrix, viewport) {
        if (this._deferredShader.isInitialized) {
            this._gl.disable(this._gl.DEPTH_TEST);
            let ssaoTexture;
            if (this._config.isSsaoEnabled && this._ssaoShader.isInitialized) {
                this._gl.viewport(0, 0, this._config.ssaoWidth, this._config.ssaoHeight);
                ssaoTexture = this._ssaoTexture1;
                this._shaderResources.bindFramebuffer(this._ssaoFrameBuffer1);
                this._ssaoShader.vertexBuffer = this._quad.vertexBuffer;
                this._ssaoShader.indexBuffer = this._quad.indexBuffer;
                this._ssaoShader.texture2D1 = this._positionTexture;
                this._ssaoShader.texture2D2 = this._normalTexture;
                this._ssaoShader.texture2D3 = this._ssaoNoiseTexture;
                this._ssaoShader.prepare();
                this._ssaoShader.pMatrix = pMatrix;
                this._ssaoShader.ssaoNoiseSize = this._config.ssaoNoiseSize;
                this._ssaoShader.ssaoRadius = this._config.ssaoRadius;
                this._ssaoShader.ssaoPower = this._config.ssaoPower;
                this._ssaoShader.ssaoKernel = this._ssaoSampleKernel;
                this._ssaoShader.left = 0;
                this._ssaoShader.top = 0;
                this._ssaoShader.width = this._config.ssaoWidth;
                this._ssaoShader.height = this._config.ssaoHeight;
                this._ssaoShader.apply();
                this._ssaoShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                if (this._config.ssaoBlurEnabled && this._boxShader.isInitialized) {
                    ssaoTexture = this._ssaoTexture2;
                    this._shaderResources.bindFramebuffer(this._ssaoFrameBuffer2);
                    this._boxShader.vertexBuffer = this._quad.vertexBuffer;
                    this._boxShader.indexBuffer = this._quad.indexBuffer;
                    this._boxShader.texture2D = this._ssaoTexture1;
                    this._boxShader.prepare();
                    this._boxShader.left = 0;
                    this._boxShader.top = 0;
                    this._boxShader.width = this._config.ssaoWidth;
                    this._boxShader.height = this._config.ssaoHeight;
                    this._boxShader.apply();
                    this._boxShader.applyView();
                    this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                }
            }
            this._gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
            let postProcessFrameBuffer = this._postProcessFrameBuffer1;
            this._shaderResources.bindFramebuffer(postProcessFrameBuffer);
            this._deferredShader.vertexBuffer = this._quad.vertexBuffer;
            this._deferredShader.indexBuffer = this._quad.indexBuffer;
            this._deferredShader.texture2D1 = this._positionTexture;
            this._deferredShader.texture2D2 = this._colorTexture;
            this._deferredShader.texture2D3 = this._normalTexture;
            this._deferredShader.texture2D4 = this._config.isSsaoEnabled ? ssaoTexture : null;
            this._deferredShader.texture2D5 = this._shadowDepthTexture;
            this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);
            this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);
            this._deferredShader.prepare();
            this._deferredShader.isShadowEnabled = this._config.isShadowEnabled;
            this._deferredShader.isSsaoEnabled = this._config.isSsaoEnabled;
            this._deferredShader.inverseVMatrix = inverseVMatrix;
            this._deferredShader.shadowVMatrix = this._shadowVMatrix;
            this._deferredShader.shadowPMatrix = this._shadowPMatrix;
            this._deferredShader.vMatrix = vMatrix;
            this._deferredShader.keyLightIntensity = this._config.keyLightIntensity;
            this._deferredShader.fillLight1Intensity = this._config.fillLight1Intensity;
            this._deferredShader.fillLight2Intensity = this._config.fillLight2Intensity;
            this._core.camera.getPosition(this._cameraPosition);
            (0, _glMatrix.mat3).fromMat4(this._cameraRotation, vMatrix);
            (0, _glMatrix.vec3).set(this._position, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
            (0, _glMatrix.vec3).normalize(this._deferredShader.directionToKeyLight, this._config.keyLightPosition);
            (0, _glMatrix.vec3).subtract(this._direction, this._cameraPosition, this._position);
            (0, _glMatrix.vec3).normalize(this._direction, this._direction);
            (0, _glMatrix.vec3).add(this._deferredShader.keyLightHalfAngle, this._direction, this._deferredShader.directionToKeyLight);
            (0, _glMatrix.vec3).normalize(this._deferredShader.keyLightHalfAngle, this._deferredShader.keyLightHalfAngle);
            (0, _glMatrix.vec3).copy(this._deferredShader.directionToFillLight1, this._config.fillLight1Position);
            (0, _glMatrix.vec3).copy(this._deferredShader.directionToFillLight2, this._config.fillLight2Position);
            this._deferredShader.left = viewport.left;
            this._deferredShader.top = viewport.top;
            this._deferredShader.width = viewport.width;
            this._deferredShader.height = viewport.height;
            this._deferredShader.shadowMapWidth = this._config.shadowWidth;
            this._deferredShader.shadowMapHeight = this._config.shadowHeight;
            this._deferredShader.ambientIntensity = this._config.ambientIntensity;
            this._deferredShader.materialIntensity = this._config.materialIntensity;
            this._deferredShader.specularPower = this._config.specularPower;
            this._deferredShader.specularIntensity = this._config.specularIntensity;
            this._deferredShader.apply();
            this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
            const widthHalf = Math.round(viewport.width / 2);
            const heightHalf = Math.round(viewport.height / 2);
            const widthQuarter = Math.round(widthHalf / 2);
            const heightQuarter = Math.round(heightHalf / 2);
            const widthEighth = Math.round(widthQuarter / 2);
            const heightEighth = Math.round(heightQuarter / 2);
            const widthSixteenth = Math.round(widthEighth / 2);
            const heightSixteenth = Math.round(heightEighth / 2);
            if (this._config.isDofEnabled && this._dofBlurShader.isInitialized && this._dofCombineShader.isInitialized) {
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessDofFrameBuffer);
                this._dofBlurShader.vertexBuffer = this._quad.vertexBuffer;
                this._dofBlurShader.indexBuffer = this._quad.indexBuffer;
                this._dofBlurShader.texture2D1 = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessTexture2 : this._postProcessTexture1;
                this._dofBlurShader.texture2D2 = this._positionTexture;
                this._dofBlurShader.prepare();
                this._dofBlurShader.focusDepth = this._config.dofFocusDistance;
                this._dofBlurShader.nearFocusDepth = this._config.dofFocusDistance - this._config.dofFocusRange / 2;
                this._dofBlurShader.farFocusDepth = this._config.dofFocusDistance + this._config.dofFocusRange / 2;
                this._dofBlurShader.maxBackgroundBlur = this._config.dofMaxBackgroundBlur;
                this._dofBlurShader.left = viewport.left;
                this._dofBlurShader.top = viewport.top;
                this._dofBlurShader.width = viewport.width;
                this._dofBlurShader.height = viewport.height;
                this._dofBlurShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                postProcessFrameBuffer = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessFrameBuffer2 : this._postProcessFrameBuffer1;
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, postProcessFrameBuffer);
                this._dofCombineShader.vertexBuffer = this._quad.vertexBuffer;
                this._dofCombineShader.indexBuffer = this._quad.indexBuffer;
                this._dofCombineShader.texture2D1 = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessTexture2 : this._postProcessTexture1;
                this._dofCombineShader.texture2D2 = this._postProcessDofTexture;
                this._dofCombineShader.prepare();
                this._dofCombineShader.focusDepth = this._config.dofFocusDistance;
                this._dofCombineShader.left = viewport.left;
                this._dofCombineShader.top = viewport.top;
                this._dofCombineShader.width = viewport.width;
                this._dofCombineShader.height = viewport.height;
                this._dofCombineShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
            if (this._config.isBloomEnabled && this._brightPassShader.isInitialized && this._gaussianShader.isInitialized) {
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessHalfFrameBuffer1);
                this._brightPassShader.vertexBuffer = this._quad.vertexBuffer;
                this._brightPassShader.indexBuffer = this._quad.indexBuffer;
                this._brightPassShader.texture2D = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessTexture1 : this._postProcessTexture2;
                this._brightPassShader.prepare();
                this._brightPassShader.width = widthHalf;
                this._brightPassShader.height = heightHalf;
                this._brightPassShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessQuarterFrameBuffer1);
                this._brightPassShader.vertexBuffer = this._quad.vertexBuffer;
                this._brightPassShader.indexBuffer = this._quad.indexBuffer;
                this._brightPassShader.texture2D = this._postProcessHalfTexture1;
                this._brightPassShader.prepare();
                this._brightPassShader.width = widthQuarter;
                this._brightPassShader.height = heightQuarter;
                this._brightPassShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessEighthFrameBuffer1);
                this._brightPassShader.vertexBuffer = this._quad.vertexBuffer;
                this._brightPassShader.indexBuffer = this._quad.indexBuffer;
                this._brightPassShader.texture2D = this._postProcessQuarterTexture1;
                this._brightPassShader.prepare();
                this._brightPassShader.width = widthEighth;
                this._brightPassShader.height = heightEighth;
                this._brightPassShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessSixteenthFrameBuffer1);
                this._brightPassShader.vertexBuffer = this._quad.vertexBuffer;
                this._brightPassShader.indexBuffer = this._quad.indexBuffer;
                this._brightPassShader.texture2D = this._postProcessEighthTexture1;
                this._brightPassShader.prepare();
                this._brightPassShader.width = widthSixteenth;
                this._brightPassShader.height = heightSixteenth;
                this._brightPassShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessHalfFrameBuffer2);
                this._gaussianShader.vertexBuffer = this._quad.vertexBuffer;
                this._gaussianShader.indexBuffer = this._quad.indexBuffer;
                this._gaussianShader.texture2D = this._postProcessHalfTexture1;
                this._gaussianShader.prepare();
                this._gaussianShader.width = widthHalf;
                this._gaussianShader.height = heightHalf;
                this._gaussianShader.horizontal = true;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessHalfFrameBuffer1);
                this._gaussianShader.texture2D = this._postProcessHalfTexture2;
                this._gaussianShader.prepare();
                this._gaussianShader.horizontal = false;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessQuarterFrameBuffer2);
                this._gaussianShader.vertexBuffer = this._quad.vertexBuffer;
                this._gaussianShader.indexBuffer = this._quad.indexBuffer;
                this._gaussianShader.texture2D = this._postProcessQuarterTexture1;
                this._gaussianShader.prepare();
                this._gaussianShader.width = widthQuarter;
                this._gaussianShader.height = heightQuarter;
                this._gaussianShader.horizontal = true;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessQuarterFrameBuffer1);
                this._gaussianShader.texture2D = this._postProcessQuarterTexture2;
                this._gaussianShader.prepare();
                this._gaussianShader.horizontal = false;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessEighthFrameBuffer2);
                this._gaussianShader.vertexBuffer = this._quad.vertexBuffer;
                this._gaussianShader.indexBuffer = this._quad.indexBuffer;
                this._gaussianShader.texture2D = this._postProcessEighthTexture1;
                this._gaussianShader.prepare();
                this._gaussianShader.width = widthEighth;
                this._gaussianShader.height = heightEighth;
                this._gaussianShader.horizontal = true;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessEighthFrameBuffer1);
                this._gaussianShader.texture2D = this._postProcessEighthTexture2;
                this._gaussianShader.prepare();
                this._gaussianShader.horizontal = false;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessSixteenthFrameBuffer2);
                this._gaussianShader.vertexBuffer = this._quad.vertexBuffer;
                this._gaussianShader.indexBuffer = this._quad.indexBuffer;
                this._gaussianShader.texture2D = this._postProcessSixteenthTexture1;
                this._gaussianShader.prepare();
                this._gaussianShader.width = widthSixteenth;
                this._gaussianShader.height = heightSixteenth;
                this._gaussianShader.horizontal = true;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, this._postProcessSixteenthFrameBuffer1);
                this._gaussianShader.texture2D = this._postProcessSixteenthTexture2;
                this._gaussianShader.prepare();
                this._gaussianShader.horizontal = false;
                this._gaussianShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
            if (this._config.isFxaaEnabled && this._fxaaShader.isInitialized) {
                postProcessFrameBuffer = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessFrameBuffer2 : this._postProcessFrameBuffer1;
                this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, postProcessFrameBuffer);
                this._fxaaShader.vertexBuffer = this._quad.vertexBuffer;
                this._fxaaShader.indexBuffer = this._quad.indexBuffer;
                this._fxaaShader.texture2D = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessTexture2 : this._postProcessTexture1;
                this._fxaaShader.prepare();
                this._fxaaShader.left = viewport.left;
                this._fxaaShader.top = viewport.top;
                this._fxaaShader.width = viewport.width;
                this._fxaaShader.height = viewport.height;
                this._fxaaShader.apply();
                this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
            this._shaderResources.bindFramebuffer(null);
            this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);
            this._gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
            this._combineShader.vertexBuffer = this._quad.vertexBuffer;
            this._combineShader.indexBuffer = this._quad.indexBuffer;
            this._combineShader.texture2D1 = postProcessFrameBuffer == this._postProcessFrameBuffer1 ? this._postProcessTexture1 : this._postProcessTexture2;
            if (this._config.isBloomEnabled) {
                this._combineShader.texture2D2 = this._postProcessHalfTexture1;
                this._combineShader.texture2D3 = this._postProcessQuarterTexture1;
                this._combineShader.texture2D4 = this._postProcessEighthTexture1;
                this._combineShader.texture2D5 = this._postProcessSixteenthTexture1;
            } else {
                this._combineShader.texture2D2 = null;
                this._combineShader.texture2D3 = null;
                this._combineShader.texture2D4 = null;
                this._combineShader.texture2D5 = null;
            }
            this._combineShader.prepare();
            this._combineShader.viewport = viewport;
            this._combineShader.intensity = this._config.bloomIntensity;
            this._combineShader.apply();
            this._gl.drawElements(this._gl.TRIANGLES, this._quad.indexCount, this._gl.UNSIGNED_SHORT, 0);
        }
    }
}

},{"gl-matrix":"3mrln","../../main.js":"2JYph","../renderer.js":"aTXAw","./components/quad.js":"icjK9","./buffer.js":"4XU8f","./config.js":"iAxFU","./shaders/shader.js":"3apOx","./shaders/texture.js":"dFMb0","./shaders/lasso.js":"13D6D","./shaders/sdftext.js":"5gMBV","./shaders/pickgrid.js":"4tWF3","./shaders/unitblock.js":"5MXmo","./shaders/unitsphere.js":"6ckfy","./shaders/unitcylinder.js":"bx50r","./shaders/background.js":"4jhMx","./shaders/ssao.js":"3q8U6","./shaders/box.js":"3oPoG","./shaders/deferred.js":"cInfb","./shaders/combine.js":"knpYo","./shaders/dofblur.js":"kUZun","./shaders/downsample.js":"4hVuk","./shaders/gaussian.js":"502D7","./shaders/dofcombine.js":"b6rsp","./shaders/fxaa.js":"bzB4a","./shaders/bright.js":"c0EzU","../../helpers/angle.js":"3PBRj","../../helpers/pick.js":"jhV3p","./components/axes/cartesian2d.js":"5x2ES","./components/axes/cartesian3d.js":"cecL3","./font.js":"8Gw0o","./../../helpers/math.js":"jeH35","../../constants.js":"dtECF","../../vertex.js":"7T2qu","../../helpers/texture.js":"eZ0Tk","./components/labels.js":"i24Kk","./components/image.js":"7TsjH","./components/lasso.js":"6AOf4","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"icjK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Quad", ()=>Quad);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _quadJs = require("../../../meshes/quad.js");
class Quad {
    get isInitialized() {
        return this._isInitialized;
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    get indexBuffer() {
        return this._indexBuffer;
    }
    get indexCount() {
        return this._indexCount;
    }
    initializeContext(gl) {
        const _vec3 = (0, _glMatrix.vec3).fromValues(2, 2, 2);
        const _mat4 = (0, _glMatrix.mat4).create();
        (0, _glMatrix.mat4).fromScaling(_mat4, _vec3);
        const vertices = (0, _quadJs.Quad).positions(_mat4);
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        const indices = (0, _quadJs.Quad).INDICES;
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this._indexCount = indices.length;
        this._isInitialized = true;
    }
}

},{"gl-matrix":"3mrln","../../../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4XU8f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Buffer", ()=>Buffer);
parcelHelpers.export(exports, "TransitionBuffer", ()=>TransitionBuffer);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _bufferJs = require("../../buffer.js");
var _mainJs = require("../../main.js");
var _paletteJs = require("./palette.js");
class Buffer extends (0, _bufferJs.BufferBase) {
    constructor(core, ids){
        super(core, ids);
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    initializeContext(gl) {
        this._gl = gl;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._vertices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update() {
        if (this._isInitialized) {
            const start = window.performance.now();
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, this._vertices);
            this._core.log.write((0, _mainJs.LogLevel).info, `buffer updated ${this._length} ${Math.round(window.performance.now() - start)}ms`);
        }
    }
}
class TransitionBuffer extends (0, _bufferJs.TransitionBufferBase) {
    constructor(core, ids){
        super(core, ids, Buffer, (0, _paletteJs.Palette));
    }
    initializeContext(gl) {
        this._buffer1.initializeContext(gl);
        this._buffer2.initializeContext(gl);
        this._palette1.initializeContext(this._core, gl);
        this._palette2.initializeContext(this._core, gl);
        this._isInitialized = true;
    }
}

},{"../../buffer.js":"lnUI7","../../main.js":"2JYph","./palette.js":"lWEbe","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lWEbe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Palette", ()=>Palette);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _textureJs = require("../../helpers/texture.js");
var _paletteJs = require("../../palette.js");
class Palette extends (0, _paletteJs.PaletteBase) {
    get texture() {
        return this._texture;
    }
    get defaultTexture() {
        return this._defaultTexture;
    }
    initializeContext(core, gl) {
        this._gl = gl;
        this._defaultTexture = (0, _textureJs.TextureHelper).create(gl, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, gl.NEAREST, core.config.paletteColor);
        this._updateTexture();
    }
    update() {
        super.update();
        if (this._changed) {
            this._changed = false;
            this._updateTexture();
        }
    }
    _updateTexture() {
        if (this._colors) {
            const colors = new Uint8Array(this._colors);
            for(let i = 0; i < colors.length; i++)colors[i] = Math.pow(colors[i] / 0xff, 2.2) * 0xff;
            this._texture = (0, _textureJs.TextureHelper).create(this._gl, this._colors.length / 4, 1, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._gl.NEAREST, colors);
        } else this._texture = null;
    }
}

},{"../../helpers/texture.js":"eZ0Tk","../../palette.js":"46mvC","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iAxFU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Config", ()=>Config);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../../constants.js");
var _angleJs = require("../../helpers/angle.js");
var _rendererJs = require("../renderer.js");
class Config extends (0, _rendererJs.RendererConfig) {
    constructor(){
        super();
        this._rotation = (0, _glMatrix.quat).create();
        this.keyLightPosition = (0, _glMatrix.vec3).create();
        this.fillLight1Position = (0, _glMatrix.vec3).create();
        this.fillLight2Position = (0, _glMatrix.vec3).create();
        this.reset();
    }
    get keyLightAltitude() {
        return this._keyLightAltitude;
    }
    set keyLightAltitude(value) {
        this._keyLightAltitude = value;
        this._updateLights();
    }
    get keyLightAzimuth() {
        return this._keyLightAzimuth;
    }
    set keyLightAzimuth(value) {
        this._keyLightAzimuth = value;
        this._updateLights();
    }
    get keyLightDistance() {
        return this._keyLightDistance;
    }
    set keyLightDistance(value) {
        this._keyLightDistance = value;
        this._updateLights();
    }
    get fillLight1Altitude() {
        return this._fillLight1Altitude;
    }
    set fillLight1Altitude(value) {
        this._fillLight1Altitude = value;
        this._updateLights();
    }
    get fillLight1Azimuth() {
        return this._fillLight1Azimuth;
    }
    set fillLight1Azimuth(value) {
        this._fillLight1Azimuth = value;
        this._updateLights();
    }
    get fillLight2Altitude() {
        return this._fillLight2Altitude;
    }
    set fillLight2Altitude(value) {
        this._fillLight2Altitude = value;
        this._updateLights();
    }
    get fillLight2Azimuth() {
        return this._fillLight2Azimuth;
    }
    set fillLight2Azimuth(value) {
        this._fillLight2Azimuth = value;
        this._updateLights();
    }
    _updateLights() {
        this._updateLight(this._keyLightAltitude, this._keyLightAzimuth, this._keyLightDistance, this.keyLightPosition);
        this._updateLight(this._fillLight1Altitude, this._fillLight1Azimuth, 1, this.fillLight1Position);
        this._updateLight(this._fillLight2Altitude, this._fillLight2Azimuth, 1, this.fillLight2Position);
    }
    _updateLight(altitude, azimuth, distance, position) {
        (0, _glMatrix.quat).rotateY(this._rotation, (0, _constantsJs.Constants).QUAT_IDENTITY, (0, _angleJs.AngleHelper).degreesToRadians(azimuth));
        (0, _glMatrix.quat).rotateX(this._rotation, this._rotation, (0, _angleJs.AngleHelper).degreesToRadians(-altitude));
        (0, _glMatrix.vec3).transformQuat(position, (0, _constantsJs.Constants).VECTOR3_UNITZ, this._rotation);
        (0, _glMatrix.vec3).scale(position, position, distance);
    }
    reset() {
        this.isSsaoEnabled = true;
        this.ssaoWidth = 1024;
        this.ssaoHeight = 1024;
        this.ssaoBlurEnabled = true;
        this.ssaoKernelSize = 8;
        this.ssaoNoiseSize = 4;
        this.ssaoRadius = 0.02;
        this.ssaoPower = 1;
        this.isShadowEnabled = true;
        this.shadowWidth = 1024;
        this.shadowHeight = 1024;
        this.isDofEnabled = false;
        this.dofAutoFocus = true;
        this.dofFocusDistance = 0.5;
        this.dofFocusRange = 0.5;
        this.dofMaxBackgroundBlur = 0.75;
        this.isBloomEnabled = false;
        this.bloomIntensity = 2;
        this.specularIntensity = 0.15;
        this.specularPower = 150;
        this.ambientIntensity = 0.1;
        this.materialIntensity = 0.5;
        this.keyLightIntensity = 1.5;
        this.fillLight1Intensity = 0.25;
        this.fillLight2Intensity = 0.25;
        this._keyLightAltitude = 30;
        this._keyLightAzimuth = -45;
        this._keyLightDistance = 1;
        this._fillLight1Altitude = 30;
        this._fillLight1Azimuth = 45;
        this._fillLight2Altitude = 30;
        this._fillLight2Azimuth = -135;
        this._updateLights();
        this.isFxaaEnabled = false;
    }
}

},{"gl-matrix":"3mrln","../../constants.js":"dtECF","../../helpers/angle.js":"3PBRj","../renderer.js":"aTXAw","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3apOx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Resources", ()=>Resources);
parcelHelpers.export(exports, "ShaderBase", ()=>ShaderBase);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _pathJs = require("../../../helpers/path.js");
var _mainJs = require("../../../main.js");
class Resources {
    bindFramebuffer(framebuffer) {
        if (this.framebuffer != framebuffer) {
            this.framebuffer = framebuffer;
            this._gl.bindFramebuffer(this._gl.FRAMEBUFFER, framebuffer);
        }
    }
    initializeContext(gl) {
        this._gl = gl;
        this.framebuffer = this._gl.createFramebuffer();
        this.OES_texture_float = gl.getExtension("OES_texture_float");
        this.OES_texture_float_linear = gl.getExtension("OES_texture_float_linear");
        this.WEBGL_lose_context = gl.getExtension("WEBGL_lose_context");
    }
}
Resources.glsl = {
    "background.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform vec3 uColor;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void)\n{\ngl_FragDepth = 0.99999;\nmyPosition = vec4(0.0, 0.0, -FAR_PLANE, 0.0);\nmyColor = vec4(uColor, 1.0);\nmyNormal = vec4(0.0, 0.0, 1.0, 0.0);\n}\n',
    "box.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform vec4 uViewport;\nuniform sampler2D uSampler;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec2 texelSize = vec2(1.0) / uViewport.zw;\nfloat result = 0.0;\nfor (int x = -2; x < 2; x++)\n{\nfor (int y = -2; y < 2; y++)\n{\nvec2 offset = vec2(float(x) + 0.5, float(y) + 0.5) * texelSize;\nresult += texture(uSampler, texCoords + offset).r;\n}\n}\nresult /= 16.0;\nmyOutputColor = vec4(vec3(result), 1.0);\n}\n",
    "bright.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;\nuniform vec2 uResolution;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = gl_FragCoord.xy / uResolution;\nvec4 color = texture(uSampler, texCoords);\nmyOutputColor = vec4(color.rgb * color.a, 1.0);\n}\n",
    "combine.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler1;\nuniform sampler2D uSampler2;\nuniform sampler2D uSampler3;\nuniform sampler2D uSampler4;\nuniform sampler2D uSampler5;\nuniform vec4 uViewport;\nuniform float uIntensity;\nout vec4 myOutputColor;\nvoid main() {\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec3 bloom =\ntexture(uSampler2, texCoords).rgb +\ntexture(uSampler3, texCoords).rgb +\ntexture(uSampler4, texCoords).rgb +\ntexture(uSampler5, texCoords).rgb;\nbloom *= uIntensity;\nvec3 color = texture(uSampler1, texCoords).rgb;\ncolor += bloom;\nmyOutputColor = vec4(color, 1.0);\n}\n",
    "deferred.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform mat4 uInverseVMatrix;\nuniform mat4 uShadowVMatrix;\nuniform mat4 uShadowPMatrix;\nuniform bool uShadow;\nuniform bool uSsao;\nuniform sampler2D uSampler1;\nuniform sampler2D uSampler2;\nuniform sampler2D uSampler3;\nuniform sampler2D uSampler4;\nuniform sampler2D uSampler5;\nuniform vec4 uViewport;\nuniform vec3 uKeyLightHalfAngle;\nuniform vec3 uDirectionToKeyLight;\nuniform vec3 uDirectionToFillLight1;\nuniform vec3 uDirectionToFillLight2;\nuniform vec2 uShadowMapSize;\nuniform float uKeyLightIntensity;\nuniform float uFillLight1Intensity;\nuniform float uFillLight2Intensity;\nuniform float uSpecularPower;\nuniform float uSpecularIntensity;\nuniform float uAmbientIntensity;\nuniform float uMaterialIntensity;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec4 position = texture(uSampler1, texCoords);\nvec4 color = texture(uSampler2, texCoords);\nvec4 normal = texture(uSampler3, texCoords);\nfloat shadow;\nif (uShadow)\n{\nvec4 positionWorld = uInverseVMatrix * vec4(position.xyz, 1.0);\nvec4 positionShadowView = uShadowVMatrix * positionWorld;\nvec4 positionShadowViewProjection = uShadowPMatrix * positionShadowView;\nvec3 projCoords = positionShadowViewProjection.xyz / positionShadowViewProjection.w;\nprojCoords = projCoords * 0.5 + 0.5;\nfloat minProjCoords = min(projCoords.x, projCoords.y);\nfloat maxProjCoords = max(projCoords.x, projCoords.y);\nif (minProjCoords < 0.0 || maxProjCoords > 1.0)\n{\nshadow = 1.0;\n}\nelse\n{\nfloat currentDepth = projCoords.z;\nfloat bias = 0.0;\nvec2 texelSize = 1.0 / uShadowMapSize;\nfor(int x = -1; x <= 1; ++x)\n{\nfor(int y = -1; y <= 1; ++y)\n{\nfloat pcfDepth = texture(uSampler5, projCoords.xy + vec2(x, y) * texelSize).r;\nshadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;\n}\n}\nshadow /= 9.0;\nshadow = clamp(1.0 - shadow, 0.0, 1.0);\n}\n}\nelse\n{\nshadow = 1.0;\n}\nfloat ssao = uSsao ? texture(uSampler4, texCoords).r : 1.0;\nfloat diffuseIntensity = clamp(dot(normal.rgb, uDirectionToKeyLight), 0.0, 1.0) * uKeyLightIntensity * shadow;\ndiffuseIntensity += clamp(dot(normal.rgb, uDirectionToFillLight1), 0.0, 1.0) * uFillLight1Intensity * ssao;\ndiffuseIntensity += clamp(dot(normal.rgb, uDirectionToFillLight2), 0.0, 1.0) * uFillLight2Intensity * ssao;\nvec3 diffuse = color.rgb * diffuseIntensity * uMaterialIntensity;\nvec3 ambient = uAmbientIntensity * color.rgb * ssao;\nvec3 emissive = color.w * color.rgb;\nfloat specular = normal.w * clamp(pow(clamp(dot(normal.rgb, uKeyLightHalfAngle), 0.0, 1.0), uSpecularPower) * uSpecularIntensity * uKeyLightIntensity * shadow, 0.0, 1.0);\nvec3 result = min(ambient + diffuse + specular + emissive, 1.0);\nresult = pow(result, GAMMA);\nmyOutputColor = vec4(result, position.w);\n}\n',
    "dofblur.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler1;\nuniform sampler2D uSampler2;\nuniform vec4 uViewport;\nuniform float uFocusDepth;\nuniform float uNearFocusDepth;\nuniform float uFarFocusDepth;\nuniform float uMaxBackgroundBlur;\nout vec4 myOutputColor;\nfloat circleOfConfusion(in float depth )\n{\nfloat f;\nif (depth < uFocusDepth)\n{\nf = (depth - uFocusDepth) / (uFocusDepth - uNearFocusDepth);\nf = clamp(f, -1.0, 0.0);\n}\nelse\n{\nf = (depth - uFocusDepth) / (uFarFocusDepth - uFocusDepth);\nf = clamp(f, 0.0, uMaxBackgroundBlur);\n}\nreturn f * 0.5 + 0.5;\n}\nvoid main(void)\n{\nvec2 texCoords = gl_FragCoord.xy / uViewport.zw;\nvec4 color = texture(uSampler1, texCoords);\nfloat depth = -texture(uSampler2, texCoords).z;\nfloat coc = circleOfConfusion(depth);\nmyOutputColor = vec4(coc);\n}\n",
    "dofcombine.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform vec4 uViewport;\nuniform float uFocusDepth;\nuniform float uAperture;\nuniform sampler2D uSampler1;\nuniform sampler2D uSampler2;\nout vec4 myOutputColor;\nconst float MAX_CIRCLE_OF_CONFUSION = 3.0;\nvoid main(void)\n{\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec2 texelSize = vec2(1.0) / uViewport.zw;\nvec2 texelSizeLow = texelSize * 4.0;\nconst int NUM_TAPS = 13;\nvec2 samples[NUM_TAPS];\nsamples[0] = vec2(-0.326212,-0.405810);\nsamples[1] = vec2(-0.840144,-0.073580);\nsamples[2] = vec2(-0.695914, 0.457137);\nsamples[3] = vec2(-0.203345, 0.620716);\nsamples[4] = vec2( 0.962340,-0.194983);\nsamples[5] = vec2( 0.473434,-0.480026);\nsamples[6] = vec2( 0.519456, 0.767022);\nsamples[7] = vec2( 0.185461,-0.893124);\nsamples[8] = vec2( 0.507431, 0.064425);\nsamples[9] = vec2( 0.896420, 0.412458);\nsamples[10] = vec2(-0.321940,-0.932615);\nsamples[11] = vec2(-0.791559,-0.597710);\nsamples[12] = vec2( 0.000000, 0.000000);\nconst float maxCoC = 5.0;\nconst float radiusScale = 0.5;\nvec4 cOut = texture(uSampler1, texCoords);\nfloat coc = texture(uSampler2, texCoords).r;\nfloat centerDepth = coc;\nfloat discRadius = abs(coc * 2.0 - 1.0) * maxCoC;\nfloat discRadiusLow = discRadius * radiusScale;\ncOut = vec4(0.0);\nfloat acc = 0.0;\nfor (int t = 0; t < NUM_TAPS; t++)\n{\nvec2 coordLow = texCoords + (texelSizeLow * samples[t] * discRadiusLow);\nvec2 coordHigh = texCoords + (texelSize * samples[t] * discRadius);\nvec4 tapLow = texture(uSampler1, coordLow);\nvec4 tapHigh = texture(uSampler1, coordHigh);\nfloat cocLow = texture(uSampler2, coordLow).r;\nfloat cocHigh = texture(uSampler2, coordHigh).r;\nfloat tapBlur = abs(cocHigh * 2.0 - 1.0);\nvec4 tap = mix(tapHigh, tapLow, tapBlur);\nfloat cocBlur = mix(cocHigh, cocLow, tapBlur);\ncocBlur = (cocBlur >= centerDepth) ? 1.0 : abs(cocBlur * 2.0 - 1.0);\ncOut += tap * cocBlur;\nacc += cocBlur;\n}\nvec4 result = cOut / acc;\nmyOutputColor = result;\n}\n",
    "downsample.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;\nuniform vec4 uViewport;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = gl_FragCoord.xy / uViewport.zw;\nmyOutputColor = texture(uSampler, texCoords);\n}\n",
    "fxaa.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nconst float FXAA_SPAN_MAX = 8.0;\nconst float FXAA_REDUCE_MUL = 1.0 / 8.0;\nconst float FXAA_REDUCE_MIN = 1.0 / 128.0;\nuniform sampler2D uSampler;\nuniform vec4 uViewport;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec2 texelSize = vec2(1.0) / uViewport.zw;\nvec3 color = texture(uSampler, texCoords).rgb;\nvec3 colorNW = texture(uSampler, vec2(texCoords.x - texelSize.x, texCoords.y - texelSize.y)).rgb;\nvec3 colorNE = texture(uSampler, vec2(texCoords.x + texelSize.x, texCoords.y - texelSize.y)).rgb;\nvec3 colorSW = texture(uSampler, vec2(texCoords.x - texelSize.x, texCoords.y + texelSize.y)).rgb;\nvec3 colorSE = texture(uSampler, vec2(texCoords.x + texelSize.x, texCoords.y + texelSize.y)).rgb;\nfloat luminance = dot(color, LUMINANCE);\nfloat luminanceNW = dot(colorNW, LUMINANCE);\nfloat luminanceNE = dot(colorNE, LUMINANCE);\nfloat luminanceSW = dot(colorSW, LUMINANCE);\nfloat luminanceSE = dot(colorSE, LUMINANCE);\nfloat luminanceMin = min(luminance, min(min(luminanceNW, luminanceNE), min(luminanceSW, luminanceSE)));\nfloat luminanceMax = max(luminance, max(max(luminanceNW, luminanceNE), max(luminanceSW, luminanceSE)));\nvec2 dir = vec2(luminanceSW + luminanceSE - luminanceNW - luminanceNE, luminanceNW + luminanceSW - luminanceNE - luminanceSE);\nfloat dirReduce = max((luminanceNW + luminanceNE + luminanceSW + luminanceSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\nfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\ndir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * texelSize;\nvec3 colorA = 0.5 * (\ntexture(uSampler, texCoords.xy + dir * (1.0/3.0 - 0.5)).rgb +\ntexture(uSampler, texCoords.xy + dir * (2.0/3.0 - 0.5)).rgb);\nvec3 colorB = colorA * 0.5 + 0.25 * (\ntexture(uSampler, texCoords.xy - dir * 0.5).rgb +\ntexture(uSampler, texCoords.xy + dir * 0.5).rgb);\nluminance = dot(colorB, LUMINANCE);\nif (luminance < luminanceMin || luminance > luminanceMax)\n{\nmyOutputColor = vec4(colorA, 1.0);\n}\nelse\n{\nmyOutputColor = vec4(colorB, 1.0);\n}\n}\n',
    "gaussian.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;\nuniform vec2 uResolution;\nuniform bool uHorizontal;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = gl_FragCoord.xy / uResolution;\nvec2 texelSize = vec2(1.0) / uResolution;\nconst int NUM_WEIGHTS = 3;\nfloat weights[NUM_WEIGHTS];\nweights[0] = 0.2270270270;\nweights[1] = 0.3162162162;\nweights[2] = 0.0702702703;\nfloat offsets[NUM_WEIGHTS];\noffsets[0] = 0.0;\noffsets[1] = 1.3846153846;\noffsets[2] = 3.2307692308;\nvec3 color = texture(uSampler, texCoords).rgb * weights[0];\nif (uHorizontal)\n{\nfor (int i = 1; i < NUM_WEIGHTS; i++) {\ncolor += texture(uSampler, texCoords + vec2(texelSize.x * offsets[i], 0.0)).rgb * weights[i];\ncolor += texture(uSampler, texCoords - vec2(texelSize.x * offsets[i], 0.0)).rgb * weights[i];\n}\n}\nelse\n{\nfor (int i = 1; i < NUM_WEIGHTS; i++) {\ncolor += texture(uSampler, texCoords + vec2(0.0, texelSize.y * offsets[i])).rgb * weights[i];\ncolor += texture(uSampler, texCoords - vec2(0.0, texelSize.y * offsets[i])).rgb * weights[i];\n}\n}\nmyOutputColor = vec4(color, 1.0);\n}\n",
    "lasso.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform vec3 uColor;\nuniform vec2 uThickness;\nuniform float uDashWidth;\nin mediump vec2 vTexCoord;\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 distance = min(vTexCoord, 1.0 - vTexCoord);\nif (distance.x > uThickness.x && distance.y > uThickness.y) {\ndiscard;\n}\nvec2 texCoord = vec2(vTexCoord.x, 1.0 - vTexCoord.y);\nvec2 thickness = uThickness * uDashWidth;\nvec2 b = mod(floor(texCoord / thickness), 2.0);\nif (b.x > 0.0 && texCoord.x < 1.0 - thickness.x) {\ndiscard;\n}\nif (b.y > 0.0 && texCoord.y < 1.0 - thickness.y) {\ndiscard;\n}\nmyOutputColor = vec4(pow(uColor, GAMMA), 1.0);\n}\n',
    "lasso.vertex.fx": "#version 300 es\nin vec3 aPosition;\nin mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nout mediump vec2 vTexCoord;\nvoid main(void) {\ngl_Position = uMMatrix * vec4(aPosition, 1.0);\nvTexCoord = aTexCoord;\n}\n",
    "pickgrid.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform bool uPick;\nuniform vec2 uFaceSize;\nuniform vec3 uMajorColor;\nuniform vec3 uMinorColor;\nuniform vec3 uZeroColor;\nuniform float uMajorThickness;\nuniform float uMinorThickness;\nuniform float uZeroThickness;\nuniform vec2 uZero;\nuniform vec2 uMinorGridlines;\nin lowp vec4 vColor;\nin mediump vec2 vTexCoord;\nin mediump vec4 vBounds;\nin mediump vec3 vNormal;\nin vec3 vViewPosition;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void) {\nif (uPick)\n{\nmyPosition = vColor;\n}\nelse\n{\nmyPosition.xyz = vViewPosition;\nvec2 buffer = fwidth(vTexCoord);\nvec2 distance, thickness, step;\nvec4 color = vColor;\nvec2 width = vBounds.zw - vBounds.xy;\ndistance = (vTexCoord - vBounds.xy) / width;\ndistance = min(abs(distance - floor(uMinorGridlines * distance) / uMinorGridlines), abs(distance - ceil(uMinorGridlines * distance) / uMinorGridlines));\ndistance *= width;\nthickness = vec2(uMinorThickness) / uFaceSize;\nstep = smoothstep(thickness, thickness + buffer, distance);\ncolor.xyz = mix(uMinorColor, color.xyz, min(step.x, step.y));\nthickness = vec2(uMajorThickness) / uFaceSize;\ndistance = min(vTexCoord - vBounds.xy, vBounds.zw - vTexCoord);\nstep = smoothstep(thickness, thickness + buffer, distance);\ncolor.xyz = mix(uMajorColor, color.xyz, min(step.x, step.y));\ndistance = abs(vTexCoord - uZero);\nthickness = vec2(uZeroThickness) / uFaceSize;\nstep = smoothstep(thickness, thickness + buffer, distance);\ncolor.xyz = mix(uZeroColor, color.xyz, min(step.x, step.y));\nmyColor.w = 0.0;\nmyNormal.xyz = vNormal;\nmyNormal.w = 0.0;\nmyColor.xyz = color.xyz;\n}\n}\n',
    "pickgrid.vertex.fx": "#version 300 es\nin vec3 aPosition;\nin lowp vec4 aIdColor;\nin mediump vec2 aTexCoord;\nin mediump vec3 aNormal;\nin mediump vec4 aBounds;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform bool uPick;\nuniform vec4 uPickedIdColor;\nuniform vec3 uBackground;\nuniform vec3 uHighlight;\nout lowp vec4 vColor;\nout mediump vec2 vTexCoord;\nout mediump vec4 vBounds;\nout mediump vec3 vNormal;\nout vec3 vViewPosition;\nvoid main(void) {\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvNormal = normalize(vec3(mvMatrix * vec4(aNormal, 0.0)));\nvTexCoord = aTexCoord;\nvBounds = aBounds;\nvec4 viewPosition = mvMatrix * vec4(aPosition, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nif (uPick)\n{\nvColor = aIdColor;\n}\nelse\n{\nvColor = uPickedIdColor == aIdColor ? vec4(uHighlight, 1.0) : vColor = vec4(uBackground, 1.0);\n}\n}\n",
    "sdftext.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;\nuniform bool uPick;\nuniform vec3 uColor;\nuniform vec3 uHoverColor;\nuniform float uGamma;\nuniform vec3 uBorderColor;\nuniform float uBuffer;\nuniform float uBorderWidth;\nin mediump vec2 vTexCoord;\nin vec3 vViewPosition;\nin vec3 vNormal;\nin lowp vec4 vIdColor;\nin lowp float vHover;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void)\n{\nif (uPick) {\nmyPosition = vIdColor;\n}\nelse\n{\nfloat distance = texture(uSampler, vTexCoord).r;\nif (distance < uBuffer - uBorderWidth)\n{\ndiscard;\n}\nfloat gamma = fwidth(distance);\nfloat value = smoothstep(uBuffer - gamma, uBuffer + gamma, distance);\nmyColor.xyz = mix(uBorderColor, mix(uColor, uHoverColor, vHover), value);\nmyPosition.xyz = vViewPosition;\nmyNormal.xyz = vNormal;\nmyColor.w = 1.0;\nmyPosition.w = 0.0;\nmyNormal.w = 0.0;\n}\n}\n",
    "sdftext.vertex.fx": "#version 300 es\nin lowp vec4 aIdColor;\nin vec3 aPosition;\nin mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform vec4 uPickedIdColor;\nout vec3 vViewPosition;\nout vec3 vNormal;\nout mediump vec2 vTexCoord;\nout lowp vec4 vIdColor;\nout lowp float vHover;\nvoid main(void)\n{\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvNormal = vec3(mvMatrix * vec4(0.0, 0.0, 1.0, 0.0));\nvec4 viewPosition = mvMatrix* vec4(aPosition, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvTexCoord = aTexCoord;\nvIdColor = aIdColor;\nvHover = uPickedIdColor == aIdColor ? 1.0 : 0.0;\n}\n",
    "simple.vertex.fx": "#version 300 es\nin vec3 aPosition;\nvoid main(void) {\ngl_Position = vec4(aPosition, 1.0);\n}\n",
    "ssao.fragment.fx": "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nconst int SSAO_KERNEL_SIZE = 8;\nuniform sampler2D uSampler1;\nuniform sampler2D uSampler2;\nuniform sampler2D uSampler3;\nuniform mat4 uPMatrix;\nuniform vec4 uViewport;\nuniform float uSsaoNoiseSize;\nuniform float uSsaoRadius;\nuniform float uSsaoPower;\nuniform vec3 uSsaoKernel[SSAO_KERNEL_SIZE];\nout vec4 myOutputColor;\nvoid main(void)\n{\nvec2 texCoords = (gl_FragCoord.xy - uViewport.xy) / uViewport.zw;\nvec3 position = texture(uSampler1, texCoords).rgb;\nvec3 normal = texture(uSampler2, texCoords).rgb;\nfloat occlusion = 0.0;\nvec2 noiseScale = uViewport.zw / uSsaoNoiseSize;\nvec3 randomVec = texture(uSampler3, texCoords * noiseScale).rgb;\nvec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));\nvec3 bitangent = cross(normal, tangent);\nmat3 tbn = mat3(tangent, bitangent, normal);\nfor(int i = 0; i < SSAO_KERNEL_SIZE; i++)\n{\nvec3 mySample = tbn * uSsaoKernel[i];\nmySample = position + mySample * uSsaoRadius;\nvec4 offset = vec4(mySample, 1.0);\noffset = uPMatrix * offset;\noffset.xy /= offset.w;\noffset.xy = offset.xy * 0.5 + 0.5;\nfloat sampleDepth = texture(uSampler1, offset.xy).z;\nfloat rangeCheck = abs(position.z - sampleDepth) > uSsaoRadius ? 0.0 : 1.0;\nocclusion += (sampleDepth < mySample.z ? 0.0 : 1.0) * rangeCheck;\n}\nocclusion /= float(SSAO_KERNEL_SIZE);\nocclusion = pow(1.0 - occlusion, uSsaoPower);\nmyOutputColor = vec4(occlusion, 0.0, 0.0, 1.0);\n}\n",
    "texture.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\nuniform sampler2D uSampler;\nin mediump vec2 vTexCoord;\nin vec3 vViewPosition;\nin vec3 vNormal;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void)\n{\nmyPosition.xyz = vViewPosition;\nmyColor.xyz = pow(texture(uSampler, vTexCoord).xyz, INV_GAMMA);\nmyColor.w = 0.0;\nmyNormal.xyz = vNormal;\nmyNormal.w = 0.0;\n}\n',
    "texture.vertex.fx": "#version 300 es\nin vec3 aPosition;\nin mediump vec3 aNormal;\nin mediump vec2 aTexCoord;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nout vec3 vViewPosition;\nout mediump vec3 vNormal;\nout mediump vec2 vTexCoord;\nvoid main(void)\n{\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvNormal = normalize((mvMatrix * vec4(aNormal, 0.0)).xyz);\nvec4 viewPosition = mvMatrix * vec4(aPosition, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvTexCoord = aTexCoord;\n}\n",
    "unitblock.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\n#include "intersect.include.fx"\nin lowp vec4 vIdColor;\nin lowp vec2 vVertexColor;\nin lowp float vVertexSelected;\nin float vAnimation;\nin lowp float vHover;\nin lowp float vActive;\nin mediump vec3 vModelPosition;\nin vec3 vViewPosition;\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void)\n{\nif (uPick)\n{\nmyPosition = vIdColor;\n}\nelse\n{\nmyPosition.xyz = vViewPosition;\nvec3 previousColor = texture(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\ncolor = mix(previousColor, color, vAnimation);\nfloat distanceSquared = (0.75 - dot2(vModelPosition)) * 2.0;\nfloat emissive = max(vVertexSelected, 0.0);\nemissive += max(vHover, vActive);\nemissive *= distanceSquared;\nmyColor.w = emissive;\nmyPosition.w = emissive;\nvec3 normal = normalize(cross(dFdx(vViewPosition), dFdy(vViewPosition)));\nmyNormal.xyz = normal;\nfloat specular = 1.0;\nmyNormal.w = specular;\nmyColor.xyz = color;\n}\n}\n',
    "unitblock.vertex.fx": '#version 300 es\n#include "quat.include.fx"\nin mediump vec3 aPosition;\nin vec3 aTranslation;\nin vec3 aPreviousTranslation;\nin mediump vec4 aRotation;\nin mediump vec4 aPreviousRotation;\nin lowp vec2 aColor;\nin lowp vec2 aPreviousColor;\nin vec3 aScale;\nin vec3 aPreviousScale;\nin mediump float aStaggerOrder;\nin float aId;\nin float aOrder;\nin lowp float aSelected;\nin lowp float aPreviousSelected;\nin lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\nout lowp vec4 vIdColor;\nout lowp vec2 vVertexColor;\nout lowp float vVertexSelected;\nout highp float vAnimation;\nout lowp float vHover;\nout lowp float vActive;\nout mediump vec3 vModelPosition;\nout vec3 vViewPosition;\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\nvModelPosition = vec3(0.0);\ngl_Position = vec4(0.0);\nvViewPosition = vec3(0.0);\n}\nelse\n{\nvIdColor = aIdColor;\nvModelPosition = aPosition;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nvec3 scale = mix(aPreviousScale, aScale, animation);\nvec3 position = aPosition * scale;\nif (aRotation.w * aPreviousRotation.w != 1.0)\n{\nvec4 quat = slerp(aPreviousRotation, aRotation, animation);\nposition = rotate(position, quat);\n}\nposition += mix(aPreviousTranslation, aTranslation, animation);\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvec4 viewPosition = mvMatrix * vec4(position, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvVertexColor = aPosition.y < 0.0 ? vec2(aColor.x, aPreviousColor.x) : vec2(aColor.y, aPreviousColor.y);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\n}\n}\n',
    "unitcylinder.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\n#include "intersect.include.fx"\nin lowp vec4 vIdColor;\nin lowp vec2 vVertexColor;\nin lowp float vVertexSelected;\nin float vAnimation;\nin lowp float vHover;\nin lowp float vActive;\nin vec3 vViewPosition;\nin vec4 vCircle1;\nin vec4 vCircle2;\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nuniform bool uShadow;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void)\n{\nvec3 rd = normalize(vViewPosition);\nvec3 ro = vec3(0.0);\nvec4 tnor = iCappedCone(ro, rd, vCircle1.xyz, vCircle2.xyz, vCircle1.w, vCircle2.w, uShadow ? -1.0 : 1.0);\nfloat t = tnor.x;\nif (t < 0.0)\n{\ndiscard;\n}\nvec3 viewPosition = rd * t;\nfloat ndcDepth = DEPTH_A + DEPTH_B / viewPosition.z;\ngl_FragDepth = ndcDepth * 0.5 + 0.5;\nif (uPick)\n{\nmyPosition = vIdColor;\n}\nelse\n{\nmyPosition.xyz = viewPosition;\nvec3 previousColor = texture(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\ncolor = mix(previousColor, color, vAnimation);\nvec3 normal = tnor.yzw;\nmyNormal.xyz = normal;\nfloat distanceSquared = dot(normal, rd);\ndistanceSquared *= distanceSquared;\nfloat emissive = max(vVertexSelected, 0.0);\nemissive += max(vHover, vActive);\nemissive *= distanceSquared;\nmyColor.w = emissive;\nmyPosition.w = emissive;\nfloat specular = 1.0;\nmyNormal.w = specular;\nmyColor.xyz = color;\n}\n}\n',
    "unitcylinder.vertex.fx": '#version 300 es\n#include "common.include.fx"\n#include "quat.include.fx"\nin mediump vec3 aPosition;\nin vec3 aTranslation;\nin vec3 aPreviousTranslation;\nin mediump vec4 aRotation;\nin mediump vec4 aPreviousRotation;\nin lowp vec2 aColor;\nin lowp vec2 aPreviousColor;\nin vec3 aScale;\nin vec3 aPreviousScale;\nin float aId;\nin float aOrder;\nin mediump float aStaggerOrder;\nin lowp float aSelected;\nin lowp float aPreviousSelected;\nin lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\nuniform vec3 uIdentityRotation;\nout lowp vec4 vIdColor;\nout lowp vec2 vVertexColor;\nout lowp float vVertexSelected;\nout highp float vAnimation;\nout lowp float vHover;\nout lowp float vActive;\nout vec3 vViewPosition;\nout vec4 vCircle1;\nout vec4 vCircle2;\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\nvViewPosition = vec3(0.0);\nvCircle1 = vec4(0.0);\nvCircle2 = vec4(0.0);\ngl_Position = vec4(0.0);\n}\nelse\n{\nvIdColor = aIdColor;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nvec3 translation = mix(aPreviousTranslation, aTranslation, animation);\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvec3 viewCenter = (mvMatrix * vec4(translation, 1.0)).xyz;\nvec3 scale = mix(aPreviousScale, aScale, animation);\nvec3 position = aPosition;\nposition.xz *= max(scale.x, scale.z);\nposition.y *= scale.y;\nvec3 direction = IDENTITY_ROTATION;\nif (aRotation.w * aPreviousRotation.w != 1.0)\n{\nvec4 quat = slerp(aPreviousRotation, aRotation, animation);\nposition = rotate(position, quat);\ndirection = rotate(direction, quat);\n}\nvec3 viewDirection = (mvMatrix * vec4(direction, 0.0)).xyz;\nvec3 h = viewDirection * scale.y * 0.5;\nfloat r1 = length(viewDirection) * 0.5;\nfloat r2 = r1 * scale.z;\nr1 *= scale.x;\nvCircle1 = vec4(viewCenter - h, r1);\nvCircle2 = vec4(viewCenter + h, r2);\nvec4 viewPosition = mvMatrix * vec4(position + translation, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvVertexColor = aPosition.y < 0.0 ? vec2(aColor.x, aPreviousColor.x) : vec2(aColor.y, aPreviousColor.y);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\n}\n}\n',
    "unitsphere.fragment.fx": '#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include "common.include.fx"\n#include "intersect.include.fx"\nin lowp vec4 vIdColor;\nin lowp vec2 vVertexColor;\nin lowp float vVertexSelected;\nin float vAnimation;\nin lowp float vHover;\nin lowp float vActive;\nin vec3 vViewPosition;\nin vec3 vViewCenter;\nin mediump float vRadius;\nuniform sampler2D uSampler;\nuniform sampler2D uPreviousSampler;\nuniform bool uPick;\nuniform bool uShadow;\nlayout(location = 0) out vec4 myPosition;\nlayout(location = 1) out vec4 myColor;\nlayout(location = 2) out vec4 myNormal;\nvoid main(void)\n{\nvec3 rd = normalize(vViewPosition);\nvec3 ro = vec3(0.0);\nvec4 s = vec4(vViewCenter, vRadius);\nfloat t = sphIntersect(ro, rd, s, uShadow ? -1.0 : 1.0);\nif (t < 0.0)\n{\ndiscard;\n}\nvec3 viewPosition = rd * t;\nfloat ndcDepth = DEPTH_A + DEPTH_B / viewPosition.z;\ngl_FragDepth = ndcDepth * 0.5 + 0.5;\nif (uPick)\n{\nmyPosition = vIdColor;\n}\nelse\n{\nmyPosition.xyz = viewPosition;\nvec3 previousColor = texture(uPreviousSampler, vec2(vVertexColor.y, 0.0)).xyz;\nvec3 color = texture(uSampler, vec2(vVertexColor.x, 0.0)).xyz;\ncolor = mix(previousColor, color, vAnimation);\nvec3 normal = (viewPosition - vViewCenter) / s.w;\nmyNormal.xyz = normal;\nfloat distanceSquared = dot(normal, rd);\ndistanceSquared *= distanceSquared;\nfloat emissive = max(vVertexSelected, 0.0);\nemissive += max(vHover, vActive);\nemissive *= distanceSquared;\nmyColor.w = emissive;\nmyPosition.w = emissive;\nfloat specular = 1.0;\nmyNormal.w = specular;\nmyColor.xyz = color;\n}\n}\n',
    "unitsphere.vertex.fx": '#version 300 es\n#include "common.include.fx"\nin mediump vec3 aPosition;\nin vec3 aTranslation;\nin vec3 aPreviousTranslation;\nin lowp float aColor;\nin lowp float aPreviousColor;\nin vec3 aScale;\nin vec3 aPreviousScale;\nin float aId;\nin float aOrder;\nin mediump float aStaggerOrder;\nin lowp float aSelected;\nin lowp float aPreviousSelected;\nin lowp vec4 aIdColor;\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\nuniform float uTime;\nuniform float uDuration;\nuniform float uOrderFrom;\nuniform float uOrderTo;\nuniform float uHover;\nuniform float uActive;\nout lowp vec4 vIdColor;\nout lowp vec2 vVertexColor;\nout lowp float vVertexSelected;\nout highp float vAnimation;\nout lowp float vHover;\nout lowp float vActive;\nout mediump float vRadius;\nout vec3 vViewPosition;\nout vec3 vViewCenter;\nvoid main(void)\n{\nif (aOrder < uOrderFrom || aOrder > uOrderTo)\n{\nvIdColor = vec4(0.0);\nvVertexColor = vec2(0.0);\nvVertexSelected = 0.0;\nvAnimation = 0.0;\nvHover = 0.0;\nvActive = 0.0;\nvViewPosition = vec3(0.0);\nvViewCenter = vec3(0.0);\nvRadius = 0.0;\ngl_Position = vec4(0.0);\n}\nelse\n{\nvIdColor = aIdColor;\nfloat startTime = aStaggerOrder * (1.0 - uDuration);\nfloat animation = clamp((uTime - startTime) / uDuration, 0.0, 1.0);\nanimation = smoothstep(0.0, 1.0, animation);\nfloat scale = mix(min(aPreviousScale.x, min(aPreviousScale.y, aPreviousScale.z)), min(aScale.x, min(aScale.y, aScale.z)), animation);\nvec3 translation = mix(aPreviousTranslation, aTranslation, animation);\nmat4 mvMatrix = uVMatrix * uMMatrix;\nvViewCenter = (mvMatrix * vec4(translation, 1.0)).xyz;\ntranslation.xyz += aPosition * scale;\nvec4 viewPosition = mvMatrix * vec4(translation, 1.0);\nvViewPosition = viewPosition.xyz;\ngl_Position = uPMatrix * viewPosition;\nvVertexColor = vec2(aColor, aPreviousColor);\nvVertexSelected = mix(aPreviousSelected, aSelected, animation);\nvAnimation = animation;\nvHover = uHover == aId ? 1.0 : 0.0;\nvActive = uActive == aId ? 1.0 : 0.0;\nvRadius = distance(vViewPosition, vViewCenter) / ROOT_THREE;\n}\n}\n',
    "common.include.fx": "const float NEAR_PLANE = 0.01;\nconst float FAR_PLANE = 100.0;\nconst float DEPTH_A = 1.0002000200020003;\nconst float DEPTH_B = 0.020002000200020003;\nconst vec3 GAMMA = vec3(0.45454545454545453);\nconst vec3 INV_GAMMA = vec3(2.2);\nconst vec3 LUMINANCE = vec3(0.2126, 0.7152, 0.0722);\nconst float PI = 3.1415926538;\nconst float ROOT_TWO = 1.4142135624;\nconst float ROOT_TWO_OVER_TWO = 0.7071067811865476;\nconst float ROOT_THREE = 1.7320508075688772;\nconst float ROOT_THREE_OVER_TWO = 0.8660254037844386;\nconst vec3 IDENTITY_ROTATION = vec3(0.0, 1.0, 0.0);\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat dot2(in vec3 v) { return dot(v, v); }\n",
    "intersect.include.fx": "float sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph, in float shadow)\n{\nvec3 oc = ro - sph.xyz;\nfloat b = dot( oc, rd );\nfloat c = dot( oc, oc ) - sph.w*sph.w;\nfloat h = b*b - c;\nif( h<0.0 ) return -1.0;\nreturn -b - shadow * sqrt( h );\n}\nfloat roundedboxIntersect( in vec3 ro, in vec3 rd, in vec3 size, in float rad )\n{\nvec3 m = 1.0/rd;\nvec3 n = m*ro;\nvec3 k = abs(m)*(size+rad);\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\nif( tN > tF || tF < 0.0) return -1.0;\nfloat t = tN;\nvec3 pos = ro+t*rd;\nvec3 s = sign(pos);\nro *= s;\nrd *= s;\npos *= s;\npos -= size;\npos = max( pos.xyz, pos.yzx );\nif( min(min(pos.x,pos.y),pos.z)<0.0 ) return t;\nvec3 oc = ro - size;\nvec3 dd = rd*rd;\nvec3 oo = oc*oc;\nvec3 od = oc*rd;\nfloat ra2 = rad*rad;\nt = 1e20;\n{\nfloat b = od.x + od.y + od.z;\nfloat c = oo.x + oo.y + oo.z - ra2;\nfloat h = b*b - c;\nif( h>0.0 ) t = -b-sqrt(h);\n}\n{\nfloat a = dd.y + dd.z;\nfloat b = od.y + od.z;\nfloat c = oo.y + oo.z - ra2;\nfloat h = b*b - a*c;\nif( h>0.0 )\n{\nh = (-b-sqrt(h))/a;\nif( h>0.0 && h<t && abs(ro.x+rd.x*h)<size.x ) t = h;\n}\n}\n{\nfloat a = dd.z + dd.x;\nfloat b = od.z + od.x;\nfloat c = oo.z + oo.x - ra2;\nfloat h = b*b - a*c;\nif( h>0.0 )\n{\nh = (-b-sqrt(h))/a;\nif( h>0.0 && h<t && abs(ro.y+rd.y*h)<size.y ) t = h;\n}\n}\n{\nfloat a = dd.x + dd.y;\nfloat b = od.x + od.y;\nfloat c = oo.x + oo.y - ra2;\nfloat h = b*b - a*c;\nif( h>0.0 )\n{\nh = (-b-sqrt(h))/a;\nif( h>0.0 && h<t && abs(ro.z+rd.z*h)<size.z ) t = h;\n}\n}\nif( t>1e19 ) t=-1.0;\nreturn t;\n}\nvec3 roundedboxNormal( in vec3 pos, in vec3 siz, in float rad )\n{\nreturn sign(pos)*normalize(max(abs(pos)-siz,0.0));\n}\nvec4 iCappedCone(in vec3 ro, in vec3 rd,\nin vec3 pa, in vec3 pb,\nin float ra, in float rb, in float shadow)\n{\nvec3 ba = pb - pa;\nvec3 oa = ro - pa;\nvec3 ob = ro - pb;\nfloat m0 = dot(ba, ba);\nfloat m1 = dot(oa, ba);\nfloat m2 = dot(ob, ba);\nfloat m3 = dot(rd, ba);\nif (m1 < 0.0) { if (dot2(oa * m3 - rd * m1) < (ra * ra * m3 * m3)) return vec4(-m1 / m3, -ba * inversesqrt(m0)); }\nelse if (m2 > 0.0) { if (dot2(ob * m3 - rd * m2) < (rb * rb * m3 * m3)) return vec4(-m2 / m3, ba * inversesqrt(m0)); }\nfloat m4 = dot(rd, oa);\nfloat m5 = dot(oa, oa);\nfloat rr = ra - rb;\nfloat hy = m0 + rr * rr;\nfloat k2 = m0 * m0 - m3 * m3 * hy;\nfloat k1 = m0 * m0 * m4 - m1 * m3 * hy + m0 * ra * (rr * m3 * 1.0);\nfloat k0 = m0 * m0 * m5 - m1 * m1 * hy + m0 * ra * (rr * m1 * 2.0 - m0 * ra);\nfloat h = k1 * k1 - k2 * k0;\nif (h < 0.0) return vec4(-1.0);\nfloat t = (-k1 - shadow * sqrt(h)) / k2;\nfloat y = m1 + t * m3;\nif (y > 0.0 && y < m0)\n{\nreturn vec4(t, normalize(m0 * (m0 * (oa + t * rd) + rr * ba * ra) - ba * hy * y));\n}\nreturn vec4(-1.0);\n}\nvec4 iRoundedCone(in vec3 ro, in vec3 rd,\nin vec3 pa, in vec3 pb,\nin float ra, in float rb, in float shadow)\n{\nvec3 ba = pb - pa;\nvec3 oa = ro - pa;\nvec3 ob = ro - pb;\nfloat rr = ra - rb;\nfloat m0 = dot(ba, ba);\nfloat m1 = dot(ba, oa);\nfloat m2 = dot(ba, rd);\nfloat m3 = dot(rd, oa);\nfloat m5 = dot(oa, oa);\nfloat m6 = dot(ob, rd);\nfloat m7 = dot(ob, ob);\nfloat d2 = m0 - rr * rr;\nfloat k2 = d2 - m2 * m2;\nfloat k1 = d2 * m3 - m1 * m2 + m2 * rr * ra;\nfloat k0 = d2 * m5 - m1 * m1 + m1 * rr * ra * 2.0 - m0 * ra * ra;\nfloat h = k1 * k1 - k0 * k2;\nif (h < 0.0) return vec4(-1.0);\nfloat t = (-shadow * sqrt(h) - k1) / k2;\nfloat y = m1 - ra * rr + t * m2;\nif (y > 0.0 && y < d2)\n{\nreturn vec4(t, normalize(d2 * (oa + t * rd) - ba * y));\n}\nfloat h1 = m3 * m3 - m5 + ra * ra;\nfloat h2 = m6 * m6 - m7 + rb * rb;\nif (max(h1, h2) < 0.0) return vec4(-1.0);\nvec4 r = vec4(1e20);\nif (h1 > 0.0)\n{\nt = -m3 - shadow * sqrt( h1 );\nr = vec4(t, (oa + t * rd) / ra);\n}\nif (h2 > 0.0)\n{\nt = -m6 - shadow * sqrt( h2 );\nif (t < r.x)\nr = vec4(t, (ob + t * rd) / rb);\n}\nreturn r;\n}\n",
    "quat.include.fx": "const float EPSILON = 0.000001;\nmat3 fromQuat(in vec4 q) {\nfloat x = q.x;\nfloat y = q.y;\nfloat z = q.z;\nfloat w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat yx = y * x2;\nfloat yy = y * y2;\nfloat zx = z * x2;\nfloat zy = z * y2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nmat3 m;\nm[0][0] = 1.0 - yy - zz;\nm[0][1] = yx - wz;\nm[0][2] = zx + wy;\nm[1][0] = yx + wz;\nm[1][1] = 1.0 - xx - zz;\nm[1][2] = zy - wx;\nm[2][0] = zx - wy;\nm[2][1] = zy + wx;\nm[2][2] = 1.0 - xx - yy;\nreturn m;\n}\nvec3 rotate(in vec3 p, in vec4 q) {\nreturn p + 2.0 * cross(q.xyz, cross(q.xyz, p) + q.w * p);\n}\nvec4 slerp(in vec4 a, in vec4 b, in float t) {\nfloat cosom = dot(a, b);\nif (cosom < 0.0) {\ncosom = -cosom;\nb = -b;\n}\nfloat scale0, scale1;\nif (1.0 - cosom > EPSILON) {\nfloat omega = acos(cosom);\nfloat sinom = sin(omega);\nscale0 = sin((1.0 - t) * omega) / sinom;\nscale1 = sin(t * omega) / sinom;\n}\nelse {\nscale0 = 1.0 - t;\nscale1 = t;\n}\nreturn vec4(scale0 * a + scale1 * b);\n}\n"
};
class ShaderBase {
    constructor(core, main){
        this._core = core;
        this._main = main;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    set vertexBuffer(value) {
        if (this._vertexBuffer != value) {
            this._vertexBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    get indexBuffer() {
        return this._indexBuffer;
    }
    set indexBuffer(value) {
        if (this._indexBuffer != value) {
            this._indexBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    initializeContext(gl) {
        this._gl = gl;
    }
    _createProgram(vs, fs) {
        const program = this._gl.createProgram();
        this._gl.attachShader(program, vs);
        this._gl.attachShader(program, fs);
        this._gl.linkProgram(program);
        if (!this._gl.getProgramParameter(program, this._gl.LINK_STATUS)) this._core.log.write((0, _mainJs.LogLevel).error, this._gl.getProgramInfoLog(program));
        return program;
    }
    _compileShader(source, type) {
        const shader = this._gl.createShader(type);
        this._gl.shaderSource(shader, source);
        this._gl.compileShader(shader);
        if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) this._core.log.write((0, _mainJs.LogLevel).error, this._gl.getShaderInfoLog(shader));
        return shader;
    }
    _removeDirective(shaderSource, directive) {
        const remove = `#define ${directive}`;
        const index = shaderSource.indexOf(remove);
        shaderSource = index == -1 ? shaderSource : shaderSource.substring(0, index) + shaderSource.substring(index + remove.length);
        return shaderSource;
    }
    prepare() {
        if (this._program != this._main.shaderResources.currentProgram) {
            if (this._main.shaderResources.currentShader) this._main.shaderResources.currentShader.disableProgram();
            this.enableProgram(this._program);
            this.updateBuffers();
            this.updateTextures();
        } else {
            if (this._haveBuffersChanged) this.updateBuffers();
            if (this._haveTexturesChanged) this.updateTextures();
        }
    }
    apply() {}
    applyModel() {}
    applyView() {}
    enableProgram(program) {
        this._gl.useProgram(program);
        this._main.shaderResources.currentProgram = program;
        this._main.shaderResources.currentShader = this;
    }
    updateBuffers() {
        this._haveBuffersChanged = false;
    }
    updateTextures() {
        this._haveTexturesChanged = false;
    }
    disableProgram() {
        this._main.shaderResources.currentShader = null;
        this._main.shaderResources.currentProgram = null;
    }
    _shaderFromFile(vsName, fsName, callback) {
        callback(this._includesFromFile(Resources.glsl[vsName]), this._includesFromFile(Resources.glsl[fsName]));
    }
    _shaderFromUrl(vsName, fsName, callback) {
        this._sourceFromUrl(vsName, (vsSource)=>{
            this._includesFromUrl(vsSource, 0, (vsIncSource)=>{
                this._sourceFromUrl(fsName, (fsSource)=>{
                    this._includesFromUrl(fsSource, 0, (fsIncSource)=>{
                        callback(vsIncSource, fsIncSource);
                    });
                });
            });
        });
    }
    _sourceFromUrl(url, callback) {
        const request = new XMLHttpRequest();
        request.open("GET", (0, _pathJs.PathHelper).combine(this._core.config.shaderPath, url));
        request.onreadystatechange = ()=>{
            if (request.readyState == XMLHttpRequest.DONE && request.status == 200) callback(request.responseText);
        };
        request.send();
    }
    _includesFromFile(source) {
        let index = 0;
        do {
            index = source.indexOf("#include", index);
            if (index != -1) {
                const start = source.indexOf('"', index);
                const end = source.indexOf('"', start + 1);
                const name = source.substring(start + 1, end);
                const inc = Resources.glsl[name];
                source = source.substring(0, index) + inc + source.substring(end + 1);
            }
        }while (index != -1);
        return source;
    }
    _includesFromUrl(source, index, callback) {
        index = source.indexOf("#include", index);
        if (index != -1) {
            const start = source.indexOf('"', index);
            const end = source.indexOf('"', start + 1);
            const name = source.substring(start + 1, end);
            this._sourceFromUrl((0, _pathJs.PathHelper).combine("inc", name), (include)=>{
                source = source.substring(0, index) + include + source.substring(end + 1);
                this._includesFromUrl(source, index, callback);
            });
        } else callback(source);
    }
}

},{"../../../helpers/path.js":"cGK6q","../../../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dFMb0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Texture", ()=>Texture);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Texture extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("texture.vertex.fx", "texture.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._normalAttribute = gl.getAttribLocation(this._program, "aNormal");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform1i(this._samplerUniform, 0);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._normalAttribute, 3, this._gl.BYTE, true, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).NORMAL_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._normalAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionNormalTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionNormalTextureVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"13D6D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lasso", ()=>Lasso);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Lasso extends (0, _shaderJs.ShaderBase) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("lasso.vertex.fx", "lasso.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._colorUniform = gl.getUniformLocation(this._program, "uColor");
        this._thicknessUniform = gl.getUniformLocation(this._program, "uThickness");
        this._dashWidthUniform = gl.getUniformLocation(this._program, "uDashWidth");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform3fv(this._colorUniform, this.color);
        this._gl.uniform1f(this._dashWidthUniform, this.dashWidth);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform2fv(this._thicknessUniform, this.thickness);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionTextureVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionTextureVertex).SIZE_BYTES, (0, _vertexJs.PositionTextureVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5gMBV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SdfText", ()=>SdfText);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class SdfText extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("sdftext.vertex.fx", "sdftext.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._idColorAttribute = gl.getAttribLocation(this._program, "aIdColor");
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._texCoordAttribute = gl.getAttribLocation(this._program, "aTexCoord");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._colorUniform = gl.getUniformLocation(this._program, "uColor");
        this._hoverColorUniform = gl.getUniformLocation(this._program, "uHoverColor");
        this._pickUniform = gl.getUniformLocation(this._program, "uPick");
        this._pickedIdColorUniform = gl.getUniformLocation(this._program, "uPickedIdColor");
        this._borderColorUniform = gl.getUniformLocation(this._program, "uBorderColor");
        this._bufferUniform = gl.getUniformLocation(this._program, "uBuffer");
        this._borderWidthUniform = gl.getUniformLocation(this._program, "uBorderWidth");
        this._gammaUniform = gl.getUniformLocation(this._program, "uGamma");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._samplerUniform, 0);
        this._gl.uniform3fv(this._colorUniform, this.color);
        this._gl.uniform3fv(this._hoverColorUniform, this.hoverColor);
        this._gl.uniform3fv(this._borderColorUniform, this.borderColor);
        this._gl.uniform1f(this._gammaUniform, this.gamma);
        this._gl.uniform1f(this._bufferUniform, this.buffer);
        this._gl.uniform1f(this._borderWidthUniform, this.borderWidth);
        this._gl.uniform4fv(this._pickedIdColorUniform, this.pickedIdColor);
    }
    applyModel() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
    }
    applyView() {
        this._gl.uniform1i(this._pickUniform, this.isPickShader ? 1 : 0);
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._idColorAttribute, 4, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES, (0, _vertexJs.PositionTexturePickVertex).ID_COLOR_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._idColorAttribute);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES, (0, _vertexJs.PositionTexturePickVertex).POSITION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PositionTexturePickVertex).SIZE_BYTES, (0, _vertexJs.PositionTexturePickVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4tWF3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PickGrid", ()=>PickGrid);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class PickGrid extends (0, _shaderJs.ShaderBase) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("pickgrid.vertex.fx", "pickgrid.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = this._gl.getAttribLocation(this._program, "aPosition");
        this._idColorAttribute = this._gl.getAttribLocation(this._program, "aIdColor");
        this._texCoordAttribute = this._gl.getAttribLocation(this._program, "aTexCoord");
        this._normalAttribute = this._gl.getAttribLocation(this._program, "aNormal");
        this._boundsAttribute = this._gl.getAttribLocation(this._program, "aBounds");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pickUniform = gl.getUniformLocation(this._program, "uPick");
        this._majorColorUniform = gl.getUniformLocation(this._program, "uMajorColor");
        this._minorColorUniform = gl.getUniformLocation(this._program, "uMinorColor");
        this._zeroColorUniform = gl.getUniformLocation(this._program, "uZeroColor");
        this._backgroundUniform = gl.getUniformLocation(this._program, "uBackground");
        this._highlightUniform = gl.getUniformLocation(this._program, "uHighlight");
        this._pickedIdColorUniform = gl.getUniformLocation(this._program, "uPickedIdColor");
        this._faceSizeUniform = gl.getUniformLocation(this._program, "uFaceSize");
        this._majorThicknessUniform = gl.getUniformLocation(this._program, "uMajorThickness");
        this._minorThicknessUniform = gl.getUniformLocation(this._program, "uMinorThickness");
        this._zeroThicknessUniform = gl.getUniformLocation(this._program, "uZeroThickness");
        this._zeroUniform = gl.getUniformLocation(this._program, "uZero");
        this._minorGridlinesUniform = gl.getUniformLocation(this._program, "uMinorGridlines");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1f(this._majorThicknessUniform, this.majorThickness);
        this._gl.uniform1f(this._minorThicknessUniform, this.minorThickness);
        this._gl.uniform1f(this._zeroThicknessUniform, this.zeroThickness);
        this._gl.uniform3fv(this._backgroundUniform, this.backgroundColor);
        this._gl.uniform3fv(this._highlightUniform, this.highlightColor);
        this._gl.uniform3fv(this._majorColorUniform, this.majorColor);
        this._gl.uniform3fv(this._minorColorUniform, this.minorColor);
        this._gl.uniform3fv(this._zeroColorUniform, this.zeroColor);
        this._gl.uniform4fv(this._pickedIdColorUniform, this.pickedIdColor);
    }
    applyView() {
        this._gl.uniform1i(this._pickUniform, this.isPickShader ? 1 : 0);
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    ApplyFace() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform2f(this._faceSizeUniform, this.faceWidth, this.faceHeight);
        this._gl.uniform2fv(this._zeroUniform, this.zero);
        this._gl.uniform2fv(this._minorGridlinesUniform, this.minorGridlines);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).TRANSLATION_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.vertexAttribPointer(this._normalAttribute, 3, this._gl.BYTE, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).NORMAL_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._normalAttribute);
        this._gl.vertexAttribPointer(this._texCoordAttribute, 2, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).TEX_COORD_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._texCoordAttribute);
        this._gl.vertexAttribPointer(this._idColorAttribute, 4, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).ID_COLOR_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._idColorAttribute);
        this._gl.vertexAttribPointer(this._boundsAttribute, 4, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.PickGridVertex).SIZE_BYTES, (0, _vertexJs.PickGridVertex).BOUNDS_OFFSET_BYTES);
        this._gl.enableVertexAttribArray(this._boundsAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5MXmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitBlock", ()=>UnitBlock);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitBlock extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unitblock.vertex.fx", "unitblock.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._rotationAttribute = gl.getAttribLocation(this._program, "aRotation");
        this._previousRotationAttribute = gl.getAttribLocation(this._program, "aPreviousRotation");
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        this._gl.vertexAttribPointer(this._rotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._rotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._rotationAttribute);
        this._gl.vertexAttribPointer(this._colorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        this._gl.vertexAttribPointer(this._previousRotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousRotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousRotationAttribute);
        this._gl.vertexAttribPointer(this._previousColorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
    disableProgram() {
        super.disableProgram();
        this._gl.vertexAttribDivisor(this._rotationAttribute, 0);
        this._gl.vertexAttribDivisor(this._previousRotationAttribute, 0);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"9qdGO","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9qdGO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitShader", ()=>UnitShader);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _cubeJs = require("../../../meshes/cube.js");
var _vertexJs = require("../../../vertex.js");
class UnitShader extends (0, _shaderJs.ShaderBase) {
    get paletteTexture() {
        return this._paletteTexture;
    }
    set paletteTexture(value) {
        if (this._paletteTexture != value) {
            this._paletteTexture = value;
            this._haveTexturesChanged = true;
        }
    }
    get previousPaletteTexture() {
        return this._previousPaletteTexture;
    }
    set previousPaletteTexture(value) {
        if (this._previousPaletteTexture != value) {
            this._previousPaletteTexture = value;
            this._haveTexturesChanged = true;
        }
    }
    set instanceBuffer(value) {
        if (this._instanceBuffer != value) {
            this._instanceBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    set previousInstanceBuffer(value) {
        if (this._previousInstanceBuffer != value) {
            this._previousInstanceBuffer = value;
            this._haveBuffersChanged = true;
        }
    }
    initializeData() {
        this._areBuffersInitialized = false;
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._translationAttribute = gl.getAttribLocation(this._program, "aTranslation");
        this._previousTranslationAttribute = gl.getAttribLocation(this._program, "aPreviousTranslation");
        this._scaleAttribute = gl.getAttribLocation(this._program, "aScale");
        this._previousScaleAttribute = gl.getAttribLocation(this._program, "aPreviousScale");
        this._colorAttribute = gl.getAttribLocation(this._program, "aColor");
        this._previousColorAttribute = gl.getAttribLocation(this._program, "aPreviousColor");
        this._selectedAttribute = gl.getAttribLocation(this._program, "aSelected");
        this._previousSelectedAttribute = gl.getAttribLocation(this._program, "aPreviousSelected");
        this._staggerOrderAttribute = gl.getAttribLocation(this._program, "aStaggerOrder");
        this._orderAttribute = gl.getAttribLocation(this._program, "aOrder");
        this._idAttribute = gl.getAttribLocation(this._program, "aId");
        this._idColorAttribute = gl.getAttribLocation(this._program, "aIdColor");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._previousSamplerUniform = gl.getUniformLocation(this._program, "uPreviousSampler");
        this._mMatrixUniform = gl.getUniformLocation(this._program, "uMMatrix");
        this._vMatrixUniform = gl.getUniformLocation(this._program, "uVMatrix");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._timeUniform = gl.getUniformLocation(this._program, "uTime");
        this._durationUniform = gl.getUniformLocation(this._program, "uDuration");
        this._fromOrderUniform = gl.getUniformLocation(this._program, "uOrderFrom");
        this._toOrderUniform = gl.getUniformLocation(this._program, "uOrderTo");
        this._hoverUniform = gl.getUniformLocation(this._program, "uHover");
        this._activeUniform = gl.getUniformLocation(this._program, "uActive");
        this._pickUniform = gl.getUniformLocation(this._program, "uPick");
        this._shadowUniform = gl.getUniformLocation(this._program, "uShadow");
        const vertices = (0, _cubeJs.Cube).POSITIONS;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        const indices = (0, _cubeJs.Cube).INDICES;
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this.indexCount = indices.length;
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, 12, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._updateCurrentBuffer();
        this._updatePreviousBuffer();
    }
    _updateCurrentBuffer() {
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._instanceBuffer);
        this._gl.vertexAttribPointer(this._idAttribute, 1, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ID_HOVER_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._idAttribute, 1);
        this._gl.enableVertexAttribArray(this._idAttribute);
        this._gl.vertexAttribPointer(this._idColorAttribute, 4, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ID_COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._idColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._idColorAttribute);
        this._gl.vertexAttribPointer(this._translationAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).TRANSLATION_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._translationAttribute, 1);
        this._gl.enableVertexAttribArray(this._translationAttribute);
        this._gl.vertexAttribPointer(this._scaleAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SCALE_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._scaleAttribute, 1);
        this._gl.enableVertexAttribArray(this._scaleAttribute);
        this._gl.vertexAttribPointer(this._staggerOrderAttribute, 1, this._gl.UNSIGNED_SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).STAGGER_ORDER_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._staggerOrderAttribute, 1);
        this._gl.enableVertexAttribArray(this._staggerOrderAttribute);
        this._gl.vertexAttribPointer(this._selectedAttribute, 1, this._gl.BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SELECTED_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._selectedAttribute, 1);
        this._gl.enableVertexAttribArray(this._selectedAttribute);
        this._gl.vertexAttribPointer(this._orderAttribute, 1, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ORDER_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._orderAttribute, 1);
        this._gl.enableVertexAttribArray(this._orderAttribute);
    }
    _updatePreviousBuffer() {
        if (this._previousInstanceBuffer != this._instanceBuffer) this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._previousInstanceBuffer);
        this._gl.vertexAttribPointer(this._previousTranslationAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).TRANSLATION_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousTranslationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousTranslationAttribute);
        this._gl.vertexAttribPointer(this._previousScaleAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SCALE_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousScaleAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousScaleAttribute);
        this._gl.vertexAttribPointer(this._previousSelectedAttribute, 1, this._gl.BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).SELECTED_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousSelectedAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousSelectedAttribute);
    }
    apply() {
        this._gl.uniformMatrix4fv(this._mMatrixUniform, false, this.mMatrix);
        this._gl.uniform1f(this._timeUniform, this.time);
        this._gl.uniform1f(this._durationUniform, this.duration);
        this._gl.uniform1f(this._fromOrderUniform, this.rangeMin);
        this._gl.uniform1f(this._toOrderUniform, this.rangeMax);
        this._gl.uniform1i(this._previousSamplerUniform, 0);
        this._gl.uniform1i(this._samplerUniform, 1);
        this._gl.uniform1f(this._hoverUniform, this.hover);
        this._gl.uniform1f(this._activeUniform, this.active);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._vMatrixUniform, false, this.vMatrix);
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
        this._gl.uniform1i(this._pickUniform, this.isPickShader ? 1 : 0);
        this._gl.uniform1i(this._shadowUniform, this.isShadowMap ? 1 : 0);
    }
    updateTextures() {
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._previousPaletteTexture);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._paletteTexture);
    }
    disableProgram() {
        super.disableProgram();
        this._gl.vertexAttribDivisor(this._translationAttribute, 0);
        this._gl.vertexAttribDivisor(this._previousTranslationAttribute, 0);
        this._gl.vertexAttribDivisor(this._scaleAttribute, 0);
        this._gl.vertexAttribDivisor(this._previousScaleAttribute, 0);
        this._gl.vertexAttribDivisor(this._colorAttribute, 0);
        this._gl.vertexAttribDivisor(this._previousColorAttribute, 0);
        this._gl.vertexAttribDivisor(this._selectedAttribute, 0);
        this._gl.vertexAttribDivisor(this._previousSelectedAttribute, 0);
        this._gl.vertexAttribDivisor(this._staggerOrderAttribute, 0);
        this._gl.vertexAttribDivisor(this._orderAttribute, 0);
        this._gl.vertexAttribDivisor(this._idAttribute, 0);
        this._gl.vertexAttribDivisor(this._idColorAttribute, 0);
    }
}

},{"./shader.js":"3apOx","../../../meshes/cube.js":"dgOpu","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6ckfy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitSphere", ()=>UnitSphere);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitSphere extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unitsphere.vertex.fx", "unitsphere.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        this._gl.vertexAttribPointer(this._colorAttribute, 1, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        this._gl.vertexAttribPointer(this._previousColorAttribute, 1, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"9qdGO","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bx50r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitCylinder", ()=>UnitCylinder);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _vertexJs = require("../../../vertex.js");
var _unitshaderJs = require("./unitshader.js");
class UnitCylinder extends (0, _unitshaderJs.UnitShader) {
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("unitcylinder.vertex.fx", "unitcylinder.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        super._initializeShader(gl, vsSource, fsSource);
        this._rotationAttribute = gl.getAttribLocation(this._program, "aRotation");
        this._previousRotationAttribute = gl.getAttribLocation(this._program, "aPreviousRotation");
        this._isInitialized = true;
    }
    _updateCurrentBuffer() {
        super._updateCurrentBuffer();
        this._gl.vertexAttribPointer(this._rotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._rotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._rotationAttribute);
        this._gl.vertexAttribPointer(this._colorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._colorAttribute, 1);
        this._gl.enableVertexAttribArray(this._colorAttribute);
    }
    _updatePreviousBuffer() {
        super._updatePreviousBuffer();
        this._gl.vertexAttribPointer(this._previousRotationAttribute, 4, this._gl.SHORT, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).ROTATION_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousRotationAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousRotationAttribute);
        this._gl.vertexAttribPointer(this._previousColorAttribute, 2, this._gl.UNSIGNED_BYTE, true, (0, _vertexJs.UnitVertex).SIZE_BYTES, (0, _vertexJs.UnitVertex).COLOR_OFFSET_BYTES);
        this._gl.vertexAttribDivisor(this._previousColorAttribute, 1);
        this._gl.enableVertexAttribArray(this._previousColorAttribute);
    }
    disableProgram() {
        super.disableProgram();
        this._gl.vertexAttribDivisor(this._rotationAttribute, 0);
        this._gl.vertexAttribDivisor(this._previousRotationAttribute, 0);
    }
}

},{"../../../vertex.js":"7T2qu","./unitshader.js":"9qdGO","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4jhMx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Background", ()=>Background);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
var _quadJs = require("../components/quad.js");
class Background extends (0, _shaderJs.ShaderBase) {
    constructor(core, main){
        super(core, main);
        this._quad = new (0, _quadJs.Quad)();
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        this._quad.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "background.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._colorUniform = gl.getUniformLocation(this._program, "uColor");
        this._isInitialized = true;
        this._vao = gl.createVertexArray();
        gl.bindVertexArray(this._vao);
        gl.bindBuffer(gl.ARRAY_BUFFER, this._quad.vertexBuffer);
        gl.vertexAttribPointer(this._positionAttribute, 3, gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        gl.enableVertexAttribArray(this._positionAttribute);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quad.indexBuffer);
        gl.bindVertexArray(null);
    }
    apply() {
        this._gl.uniform3fv(this._colorUniform, this.color);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindVertexArray(this._vao);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","../components/quad.js":"icjK9","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3q8U6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Ssao", ()=>Ssao);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Ssao extends (0, _shaderJs.ShaderBase) {
    get texture2D1() {
        return this._texture2D1;
    }
    set texture2D1(value) {
        if (this._texture2D1 != value) {
            this._texture2D1 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D2() {
        return this._texture2D2;
    }
    set texture2D2(value) {
        if (this._texture2D2 != value) {
            this._texture2D2 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D3() {
        return this._texture2D3;
    }
    set texture2D3(value) {
        if (this._texture2D3 != value) {
            this._texture2D3 = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "ssao.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._samplerUniform1 = gl.getUniformLocation(this._program, "uSampler1");
        this._samplerUniform2 = gl.getUniformLocation(this._program, "uSampler2");
        this._samplerUniform3 = gl.getUniformLocation(this._program, "uSampler3");
        this._pMatrixUniform = gl.getUniformLocation(this._program, "uPMatrix");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._ssaoNoiseSizeUniform = gl.getUniformLocation(this._program, "uSsaoNoiseSize");
        this._ssaoRadiusUniform = gl.getUniformLocation(this._program, "uSsaoRadius");
        this._ssaoPowerUniform = gl.getUniformLocation(this._program, "uSsaoPower");
        this._ssaoKernelUniform = gl.getUniformLocation(this._program, "uSsaoKernel");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._samplerUniform1, 0);
        this._gl.uniform1i(this._samplerUniform2, 1);
        this._gl.uniform1i(this._samplerUniform3, 2);
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
        this._gl.uniform1f(this._ssaoNoiseSizeUniform, this.ssaoNoiseSize);
        this._gl.uniform1f(this._ssaoRadiusUniform, this.ssaoRadius);
        this._gl.uniform1f(this._ssaoPowerUniform, this.ssaoPower);
        this._gl.uniform3fv(this._ssaoKernelUniform, this.ssaoKernel);
    }
    applyView() {
        this._gl.uniformMatrix4fv(this._pMatrixUniform, false, this.pMatrix);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D1);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D2);
        this._gl.activeTexture(this._gl.TEXTURE2);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D3);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"3oPoG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Box", ()=>Box);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Box extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "box.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._samplerUniform, 0);
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cInfb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Deferred", ()=>Deferred);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
var _glMatrix = require("gl-matrix");
class Deferred extends (0, _shaderJs.ShaderBase) {
    constructor(core, main){
        super(core, main);
        this.directionToKeyLight = (0, _glMatrix.vec3).create();
        this.directionToFillLight1 = (0, _glMatrix.vec3).create();
        this.directionToFillLight2 = (0, _glMatrix.vec3).create();
        this.keyLightHalfAngle = (0, _glMatrix.vec3).create();
    }
    get texture2D1() {
        return this._texture2D1;
    }
    set texture2D1(value) {
        if (this._texture2D1 != value) {
            this._texture2D1 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D2() {
        return this._texture2D2;
    }
    set texture2D2(value) {
        if (this._texture2D2 != value) {
            this._texture2D2 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D3() {
        return this._texture2D3;
    }
    set texture2D3(value) {
        if (this._texture2D3 != value) {
            this._texture2D3 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D4() {
        return this._texture2D4;
    }
    set texture2D4(value) {
        if (this._texture2D4 != value) {
            this._texture2D4 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D5() {
        return this._texture2D5;
    }
    set texture2D5(value) {
        if (this._texture2D5 != value) {
            this._texture2D5 = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "deferred.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._shadowUniform = gl.getUniformLocation(this._program, "uShadow");
        this._ssaoUniform = gl.getUniformLocation(this._program, "uSsao");
        this._inverseVMatrixUniform = gl.getUniformLocation(this._program, "uInverseVMatrix");
        this._shadowVMatrixUniform = gl.getUniformLocation(this._program, "uShadowVMatrix");
        this._shadowPMatrixUniform = gl.getUniformLocation(this._program, "uShadowPMatrix");
        this._samplerUniform1 = gl.getUniformLocation(this._program, "uSampler1");
        this._samplerUniform2 = gl.getUniformLocation(this._program, "uSampler2");
        this._samplerUniform3 = gl.getUniformLocation(this._program, "uSampler3");
        this._samplerUniform4 = gl.getUniformLocation(this._program, "uSampler4");
        this._samplerUniform5 = gl.getUniformLocation(this._program, "uSampler5");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._shadowMapSizeUniform = gl.getUniformLocation(this._program, "uShadowMapSize");
        this._keyLightHalfAngleUniform = gl.getUniformLocation(this._program, "uKeyLightHalfAngle");
        this._directionToKeyLightUniform = gl.getUniformLocation(this._program, "uDirectionToKeyLight");
        this._directionToFillLight1Uniform = gl.getUniformLocation(this._program, "uDirectionToFillLight1");
        this._directionToFillLight2Uniform = gl.getUniformLocation(this._program, "uDirectionToFillLight2");
        this._keyLightIntensityUniform = gl.getUniformLocation(this._program, "uKeyLightIntensity");
        this._fillLight1IntensityUniform = gl.getUniformLocation(this._program, "uFillLight1Intensity");
        this._fillLight2IntensityUniform = gl.getUniformLocation(this._program, "uFillLight2Intensity");
        this._ambientIntensityUniform = gl.getUniformLocation(this._program, "uAmbientIntensity");
        this._materialIntensityUniform = gl.getUniformLocation(this._program, "uMaterialIntensity");
        this._specularPowerUniform = gl.getUniformLocation(this._program, "uSpecularPower");
        this._specularIntensityUniform = gl.getUniformLocation(this._program, "uSpecularIntensity");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._shadowUniform, this.isShadowEnabled ? 1 : 0);
        this._gl.uniform1i(this._ssaoUniform, this.isSsaoEnabled ? 1 : 0);
        this._gl.uniformMatrix4fv(this._inverseVMatrixUniform, false, this.inverseVMatrix);
        this._gl.uniformMatrix4fv(this._shadowVMatrixUniform, false, this.shadowVMatrix);
        this._gl.uniformMatrix4fv(this._shadowPMatrixUniform, false, this.shadowPMatrix);
        this._gl.uniform1i(this._samplerUniform1, 0);
        this._gl.uniform1i(this._samplerUniform2, 1);
        this._gl.uniform1i(this._samplerUniform3, 2);
        this._gl.uniform1i(this._samplerUniform4, 3);
        this._gl.uniform1i(this._samplerUniform5, 4);
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
        this._gl.uniform2f(this._shadowMapSizeUniform, this.shadowMapWidth, this.shadowMapHeight);
        this._gl.uniform1f(this._keyLightIntensityUniform, this.keyLightIntensity);
        this._gl.uniform1f(this._fillLight1IntensityUniform, this.fillLight1Intensity);
        this._gl.uniform1f(this._fillLight2IntensityUniform, this.fillLight2Intensity);
        this._gl.uniform1f(this._ambientIntensityUniform, this.ambientIntensity);
        this._gl.uniform1f(this._materialIntensityUniform, this.materialIntensity);
        this._gl.uniform1f(this._specularPowerUniform, this.specularPower);
        this._gl.uniform1f(this._specularIntensityUniform, this.specularIntensity);
        this._gl.uniform3fv(this._directionToKeyLightUniform, this.directionToKeyLight);
        this._gl.uniform3fv(this._directionToFillLight1Uniform, this.directionToFillLight1);
        this._gl.uniform3fv(this._directionToFillLight2Uniform, this.directionToFillLight2);
        this._gl.uniform3fv(this._keyLightHalfAngleUniform, this.keyLightHalfAngle);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D1);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D2);
        this._gl.activeTexture(this._gl.TEXTURE2);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D3);
        this._gl.activeTexture(this._gl.TEXTURE3);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D4);
        this._gl.activeTexture(this._gl.TEXTURE4);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D5);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"knpYo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Combine", ()=>Combine);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Combine extends (0, _shaderJs.ShaderBase) {
    get texture2D1() {
        return this._texture2D1;
    }
    set texture2D1(value) {
        if (this._texture2D1 != value) {
            this._texture2D1 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D2() {
        return this._texture2D2;
    }
    set texture2D2(value) {
        if (this._texture2D2 != value) {
            this._texture2D2 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D3() {
        return this._texture2D3;
    }
    set texture2D3(value) {
        if (this._texture2D3 != value) {
            this._texture2D3 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D4() {
        return this._texture2D4;
    }
    set texture2D4(value) {
        if (this._texture2D4 != value) {
            this._texture2D4 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D5() {
        return this._texture2D5;
    }
    set texture2D5(value) {
        if (this._texture2D5 != value) {
            this._texture2D5 = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "combine.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._intensityUniform = gl.getUniformLocation(this._program, "uIntensity");
        this._samplerUniform1 = gl.getUniformLocation(this._program, "uSampler1");
        this._samplerUniform2 = gl.getUniformLocation(this._program, "uSampler2");
        this._samplerUniform3 = gl.getUniformLocation(this._program, "uSampler3");
        this._samplerUniform4 = gl.getUniformLocation(this._program, "uSampler4");
        this._samplerUniform5 = gl.getUniformLocation(this._program, "uSampler5");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform4f(this._viewportUniform, this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);
        this._gl.uniform1f(this._intensityUniform, this.intensity);
        this._gl.uniform1i(this._samplerUniform1, 0);
        this._gl.uniform1i(this._samplerUniform2, 1);
        this._gl.uniform1i(this._samplerUniform3, 2);
        this._gl.uniform1i(this._samplerUniform4, 3);
        this._gl.uniform1i(this._samplerUniform5, 4);
    }
    updateBuffers() {
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D1);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D2);
        this._gl.activeTexture(this._gl.TEXTURE2);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D3);
        this._gl.activeTexture(this._gl.TEXTURE3);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D4);
        this._gl.activeTexture(this._gl.TEXTURE4);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D5);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kUZun":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DofBlur", ()=>DofBlur);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class DofBlur extends (0, _shaderJs.ShaderBase) {
    get texture2D1() {
        return this._texture2D1;
    }
    set texture2D1(value) {
        if (this._texture2D1 != value) {
            this._texture2D1 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D2() {
        return this._texture2D2;
    }
    set texture2D2(value) {
        if (this._texture2D2 != value) {
            this._texture2D2 = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "dofblur.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._focusDepthUniform = gl.getUniformLocation(this._program, "uFocusDepth");
        this._nearFocusDepthUniform = gl.getUniformLocation(this._program, "uNearFocusDepth");
        this._farFocusDepthUniform = gl.getUniformLocation(this._program, "uFarFocusDepth");
        this._maxBackgroundBlurUniform = gl.getUniformLocation(this._program, "uMaxBackgroundBlur");
        this._samplerUniform1 = gl.getUniformLocation(this._program, "uSampler1");
        this._samplerUniform2 = gl.getUniformLocation(this._program, "uSampler2");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
        this._gl.uniform1f(this._focusDepthUniform, this.focusDepth);
        this._gl.uniform1f(this._nearFocusDepthUniform, this.nearFocusDepth);
        this._gl.uniform1f(this._farFocusDepthUniform, this.farFocusDepth);
        this._gl.uniform1f(this._maxBackgroundBlurUniform, this.maxBackgroundBlur);
        this._gl.uniform1i(this._samplerUniform1, 0);
        this._gl.uniform1i(this._samplerUniform2, 1);
    }
    updateBuffers() {
        super.updateBuffers();
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D1);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D2);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4hVuk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Downsample", ()=>Downsample);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Downsample extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "downsample.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
        this._gl.uniform1i(this._samplerUniform, 0);
    }
    updateBuffers() {
        super.updateBuffers();
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"502D7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Gaussian", ()=>Gaussian);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Gaussian extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "gaussian.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._resolutionUniform = gl.getUniformLocation(this._program, "uResolution");
        this._horizontalUniform = gl.getUniformLocation(this._program, "uHorizontal");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._samplerUniform, 0);
        this._gl.uniform2f(this._resolutionUniform, this.width, this.height);
        this._gl.uniform1i(this._horizontalUniform, this.horizontal ? 1 : 0);
    }
    updateBuffers() {
        super.updateBuffers();
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"b6rsp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DofCombine", ()=>DofCombine);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class DofCombine extends (0, _shaderJs.ShaderBase) {
    get texture2D1() {
        return this._texture2D1;
    }
    set texture2D1(value) {
        if (this._texture2D1 != value) {
            this._texture2D1 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D2() {
        return this._texture2D2;
    }
    set texture2D2(value) {
        if (this._texture2D2 != value) {
            this._texture2D2 = value;
            this._haveTexturesChanged = true;
        }
    }
    get texture2D3() {
        return this._texture2D3;
    }
    set texture2D3(value) {
        if (this._texture2D3 != value) {
            this._texture2D3 = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "dofcombine.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._focusDepthUniform = gl.getUniformLocation(this._program, "uFocusDepth");
        this._apertureUniform = gl.getUniformLocation(this._program, "uAperture");
        this._samplerUniform1 = gl.getUniformLocation(this._program, "uSampler1");
        this._samplerUniform2 = gl.getUniformLocation(this._program, "uSampler2");
        this._samplerUniform3 = gl.getUniformLocation(this._program, "uSampler3");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
        this._gl.uniform1f(this._focusDepthUniform, this.focusDepth);
        this._gl.uniform1f(this._apertureUniform, this.aperture);
        this._gl.uniform1i(this._samplerUniform1, 0);
        this._gl.uniform1i(this._samplerUniform2, 1);
        this._gl.uniform1i(this._samplerUniform3, 2);
    }
    updateBuffers() {
        super.updateBuffers();
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D1);
        this._gl.activeTexture(this._gl.TEXTURE1);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D2);
        this._gl.activeTexture(this._gl.TEXTURE2);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D3);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bzB4a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Fxaa", ()=>Fxaa);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Fxaa extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "fxaa.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._viewportUniform = gl.getUniformLocation(this._program, "uViewport");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform4f(this._viewportUniform, this.left, this.top, this.width, this.height);
        this._gl.uniform1i(this._samplerUniform, 0);
    }
    updateBuffers() {
        super.updateBuffers();
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"c0EzU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Bright", ()=>Bright);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _shaderJs = require("./shader.js");
var _vertexJs = require("../../../vertex.js");
class Bright extends (0, _shaderJs.ShaderBase) {
    get texture2D() {
        return this._texture2D;
    }
    set texture2D(value) {
        if (this._texture2D != value) {
            this._texture2D = value;
            this._haveTexturesChanged = true;
        }
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        if (this._isLoaded) this._initializeShader(gl, this._vsSource, this._fsSource);
        else this._shaderFromFile("simple.vertex.fx", "bright.fragment.fx", (vsSource, fsSource)=>{
            this._vsSource = vsSource;
            this._fsSource = fsSource;
            this._isLoaded = true;
            this._initializeShader(gl, vsSource, fsSource);
        });
    }
    _initializeShader(gl, vsSource, fsSource) {
        const vs = this._compileShader(vsSource, gl.VERTEX_SHADER);
        const fs = this._compileShader(fsSource, gl.FRAGMENT_SHADER);
        this._program = this._createProgram(vs, fs);
        this._positionAttribute = gl.getAttribLocation(this._program, "aPosition");
        this._samplerUniform = gl.getUniformLocation(this._program, "uSampler");
        this._resolutionUniform = gl.getUniformLocation(this._program, "uResolution");
        this._isInitialized = true;
    }
    apply() {
        this._gl.uniform1i(this._samplerUniform, 0);
        this._gl.uniform2f(this._resolutionUniform, this.width, this.height);
    }
    updateBuffers() {
        super.updateBuffers();
        super.updateBuffers();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
        this._gl.vertexAttribPointer(this._positionAttribute, 3, this._gl.FLOAT, false, (0, _vertexJs.PositionVertex).SIZE_BYTES, 0);
        this._gl.enableVertexAttribArray(this._positionAttribute);
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
    }
    updateTextures() {
        super.updateTextures();
        this._gl.activeTexture(this._gl.TEXTURE0);
        this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture2D);
    }
}

},{"./shader.js":"3apOx","../../../vertex.js":"7T2qu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5x2ES":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cartesian2dVisual", ()=>Cartesian2dVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _axesJs = require("./axes.js");
var _mainJs = require("../../../../main.js");
var _quadJs = require("../../../../meshes/quad.js");
class Cartesian2dVisual extends (0, _axesJs.AxesVisualBase) {
    constructor(core, main, cartesian2dAxes){
        super(core);
        this._main = main;
        this._axes = cartesian2dAxes;
        this._axes.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized && this._main.gridShader.isInitialized && this._main.sdfShader.isInitialized && this._main.fonts[this._axes.font.name].isInitialized;
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        const axes = this._axes;
        if (!axes.isInitialized) axes.initialize();
        if (axes.gridVertices) this._createGridBuffers();
        if (axes.textVertices) this._createTextBuffers();
        this._isInitialized = true;
    }
    _createGridBuffers() {
        const axes = this._axes;
        this._gridVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.gridVertices, this._gl.STATIC_DRAW);
        this._gridIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.gridIndices, this._gl.STATIC_DRAW);
        this._gridBufferSize = axes.gridVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual grid buffers created`);
    }
    _createTextBuffers() {
        const axes = this._axes;
        this._textVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.textVertices, this._gl.STATIC_DRAW);
        this._textIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.textIndices, this._gl.STATIC_DRAW);
        this._textBufferSize = axes.textVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual text buffers created`);
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            const axes = this._axes;
            if (!this._gridVertexBuffer || axes.gridVertices.byteLength > this._gridBufferSize) this._createGridBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.gridVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.gridIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual grid buffers updated`);
            }
            if (!this._textVertexBuffer || axes.textVertices.byteLength > this._textBufferSize) this._createTextBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.textVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.textIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian2d visual text buffers updated`);
            }
            this._main.shaderResources.currentProgram = null;
        }
    }
    _renderText() {
        const sdfShader = this._main.sdfShader;
        const shaderResources = this._main.shaderResources;
        const axes = this._axes;
        const fontVisual = this._main.fonts[axes.font.name];
        sdfShader.vertexBuffer = this._textVertexBuffer;
        sdfShader.indexBuffer = this._textIndexBuffer;
        sdfShader.texture2D = fontVisual.texture;
        sdfShader.prepare();
        sdfShader.buffer = fontVisual.font.edgeValue / 0xff;
        sdfShader.gamma = axes.gamma;
        sdfShader.borderWidth = axes.textBorderWidth;
        sdfShader.color = axes.textColor || this._core.config.axesTextColor;
        sdfShader.hoverColor = axes.textHoverColor || this._core.config.axesTextHoverColor;
        sdfShader.borderColor = axes.textBorderColor || this._core.config.textBorderColor;
        sdfShader.pickedIdColor = this.pickedIdColor;
        sdfShader.apply();
        let indexCount, indexOffset;
        for(let axisId = 0; axisId < 2; axisId++){
            const orientation = axes.getLabelOrientation(axisId);
            for(let edge = 0; edge < 2; edge++){
                const edgeId = (0, _quadJs.Quad).AXIS_EDGES[axisId][edge];
                if (axes.isEdgeVisible[edgeId]) {
                    if (orientation == (0, _mainJs.AxesTextOrientation).parallel && axes.getIsLeftToRightHorizontal(edgeId) || orientation == (0, _mainJs.AxesTextOrientation).perpendicular && axes.getIsLeftToRightVertical(edgeId)) {
                        indexCount = axes.getAxesLeftToRightIndexCount(axisId);
                        indexOffset = axes.getAxesLeftToRightIndexOffset(axisId);
                    } else {
                        indexCount = axes.getAxesRightToLeftIndexCount(axisId);
                        indexOffset = axes.getAxesRightToLeftIndexOffset(axisId);
                    }
                    if (indexCount > 0) {
                        sdfShader.mMatrix = axes.getLabelMMatrix(edgeId);
                        sdfShader.applyModel();
                        sdfShader.isPickShader = false;
                        shaderResources.bindFramebuffer(this.geometryFramebuffer);
                        for(let i = 0; i < this.viewportCount; i++){
                            const viewport = i + this.viewportOffset;
                            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                            sdfShader.vMatrix = this.vMatrices[viewport];
                            sdfShader.pMatrix = this.pMatrices[viewport];
                            sdfShader.applyView();
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                        if (this.isPickingEnabled && axes.isLabelPickingEnabled[axisId]) {
                            sdfShader.isPickShader = true;
                            sdfShader.pMatrix = this.pickPMatrix;
                            sdfShader.vMatrix = this.pickVMatrix;
                            sdfShader.applyView();
                            shaderResources.bindFramebuffer(this.pickFramebuffer);
                            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                    }
                    indexCount = axes.getTitleIndexCount(axisId);
                    if (indexCount > 0) {
                        indexOffset = axes.getTitleIndexOffset(axisId);
                        sdfShader.mMatrix = axes.getTitleMMatrix(edgeId);
                        sdfShader.applyModel();
                        sdfShader.isPickShader = false;
                        shaderResources.bindFramebuffer(this.geometryFramebuffer);
                        for(let i1 = 0; i1 < this.viewportCount; i1++){
                            const viewport1 = i1 + this.viewportOffset;
                            this._gl.viewport(this.viewports[viewport1].x, this.viewports[viewport1].y, this.viewports[viewport1].width, this.viewports[viewport1].height);
                            sdfShader.vMatrix = this.vMatrices[viewport1];
                            sdfShader.pMatrix = this.pMatrices[viewport1];
                            sdfShader.applyView();
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                        if (this.isPickingEnabled && axes.isTitlePickingEnabled[axisId]) {
                            sdfShader.isPickShader = true;
                            sdfShader.pMatrix = this.pickPMatrix;
                            sdfShader.vMatrix = this.pickVMatrix;
                            sdfShader.applyView();
                            shaderResources.bindFramebuffer(this.pickFramebuffer);
                            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                    }
                }
                indexCount = axes.getHeadingIndexCount(axisId);
                if (indexCount > 0 && axes.isHeadingVisible[edgeId]) {
                    indexOffset = axes.getHeadingIndexOffset(axisId);
                    sdfShader.mMatrix = axes.getHeadingMMatrix(edgeId);
                    sdfShader.applyModel();
                    sdfShader.isPickShader = false;
                    shaderResources.bindFramebuffer(this.geometryFramebuffer);
                    for(let i2 = 0; i2 < this.viewportCount; i2++){
                        const viewport2 = i2 + this.viewportOffset;
                        this._gl.viewport(this.viewports[viewport2].x, this.viewports[viewport2].y, this.viewports[viewport2].width, this.viewports[viewport2].height);
                        sdfShader.vMatrix = this.vMatrices[viewport2];
                        sdfShader.pMatrix = this.pMatrices[viewport2];
                        sdfShader.applyView();
                        this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                    }
                    if (this.isPickingEnabled && axes.isHeadingPickingEnabled[axisId]) {
                        sdfShader.isPickShader = true;
                        sdfShader.pMatrix = this.pickPMatrix;
                        sdfShader.vMatrix = this.pickVMatrix;
                        sdfShader.applyView();
                        shaderResources.bindFramebuffer(this.pickFramebuffer);
                        this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                        this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                    }
                }
            }
        }
    }
    _renderGrid() {
        const gridShader = this._main.gridShader;
        const axes = this._axes;
        gridShader.vertexBuffer = this._gridVertexBuffer;
        gridShader.indexBuffer = this._gridIndexBuffer;
        gridShader.prepare();
        gridShader.majorThickness = axes.gridMajorThickness;
        gridShader.minorThickness = axes.gridMinorThickness;
        gridShader.zeroThickness = axes.gridZeroThickness;
        gridShader.backgroundColor = axes.gridBackgroundColor || this._core.config.axesGridBackgroundColor;
        gridShader.highlightColor = axes.gridHighlightColor || this._core.config.axesGridHighlightColor;
        gridShader.majorColor = axes.gridMajorColor || this._core.config.axesGridMajorColor;
        gridShader.minorColor = axes.gridMinorColor || this._core.config.axesGridMinorColor;
        gridShader.zeroColor = axes.gridZeroColor || this._core.config.axesGridZeroColor;
        gridShader.pickedIdColor = this.pickedIdColor;
        gridShader.apply();
        for(let axisId = 0; axisId < 2; axisId++)if (axes.arePickDivisionsVisible[axisId]) {
            const gridTicksScale = axes.getGridTicksScale(axisId);
            const width = gridTicksScale[0];
            const height = gridTicksScale[1];
            gridShader.zero = axes.getGridTicksZero(axisId);
            gridShader.minorGridlines = axes.getGridTicksMinorGridlines(axisId);
            for(let edge = 0; edge < 2; edge++){
                const edgeId = (0, _quadJs.Quad).AXIS_EDGES[axisId][edge];
                if (axes.isEdgeVisible[edgeId]) this._renderGridTicks(axisId, edgeId, width, height);
            }
        }
        this._gl.disable(this._gl.CULL_FACE);
        const size = axes.size;
        const axisId2 = 0;
        const axisId3 = 1;
        const width1 = size[axisId2];
        const height1 = size[axisId3];
        gridShader.zero = axes.gridFaceZero;
        gridShader.minorGridlines = axes.gridFaceMinorGridlines;
        for(let face = 0; face < 2; face++){
            const faceId = face;
            if (axes.getIsForwardFace(faceId)) this._renderGridFace(faceId, width1, height1);
        }
        this._gl.enable(this._gl.CULL_FACE);
    }
    _renderGridTicks(axisId, edgeId, width, height) {
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        const axes = this._axes;
        gridShader.mMatrix = axes.getGridTicksMMatrix(edgeId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        shaderResources.bindFramebuffer(this.geometryFramebuffer);
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
        if (this.isPickingEnabled && axes.isDivisionPickingEnabled[axisId]) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
    }
    _renderGridFace(faceId, width, height) {
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        const axes = this._axes;
        gridShader.mMatrix = axes.getGridFaceMMatrix(faceId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        shaderResources.bindFramebuffer(this.geometryFramebuffer);
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
        if (this.isPickingEnabled && axes.isGridPickingEnabled) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
    }
}

},{"./axes.js":"uzxsW","../../../../main.js":"2JYph","../../../../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"uzxsW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "AxesVisualBase", ()=>AxesVisualBase);
class AxesVisualBase {
    constructor(core){
        this._core = core;
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get axes() {
        return this._axes;
    }
    initializeContext(gl) {
        this._gl = gl;
    }
    update(elapsedTime) {}
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            this._renderGrid();
            this._renderText();
        }
    }
    _renderGrid() {}
    _renderText() {}
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cecL3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cartesian3dVisual", ()=>Cartesian3dVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _axesJs = require("./axes.js");
var _mainJs = require("../../../../main.js");
var _cubeJs = require("../../../../meshes/cube.js");
class Cartesian3dVisual extends (0, _axesJs.AxesVisualBase) {
    constructor(core, main, cartesian3dAxes){
        super(core);
        this._main = main;
        this._axes = cartesian3dAxes;
        this._axes.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized && this._main.gridShader.isInitialized && this._main.sdfShader.isInitialized && this._main.fonts[this._axes.font.name].isInitialized;
    }
    initializeContext(gl) {
        super.initializeContext(gl);
        const axes = this._axes;
        if (!axes.isInitialized) axes.initialize();
        if (axes.gridVertices) this._createGridBuffers();
        if (axes.textVertices) this._createTextBuffers();
        this._isInitialized = true;
    }
    _createGridBuffers() {
        const axes = this._axes;
        this._gridVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.gridVertices, this._gl.STATIC_DRAW);
        this._gridIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.gridIndices, this._gl.STATIC_DRAW);
        this._gridBufferSize = axes.gridVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual grid buffers created`);
    }
    _createTextBuffers() {
        const axes = this._axes;
        this._textVertexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
        this._gl.bufferData(this._gl.ARRAY_BUFFER, axes.textVertices, this._gl.STATIC_DRAW);
        this._textIndexBuffer = this._gl.createBuffer();
        this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
        this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, axes.textIndices, this._gl.STATIC_DRAW);
        this._textBufferSize = axes.textVertices.byteLength;
        this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual text buffers created`);
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            const axes = this._axes;
            if (!this._gridVertexBuffer || axes.gridVertices.byteLength > this._gridBufferSize) this._createGridBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._gridVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.gridVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._gridIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.gridIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual grid buffers updated`);
            }
            if (!this._textVertexBuffer || axes.textVertices.byteLength > this._textBufferSize) this._createTextBuffers();
            else {
                this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._textVertexBuffer);
                this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, axes.textVertices);
                this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._textIndexBuffer);
                this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, axes.textIndices);
                this._core.log.write((0, _mainJs.LogLevel).info, `cartesian3d visual text buffers updated`);
            }
            this._main.shaderResources.currentProgram = null;
        }
    }
    _renderText() {
        const axes = this._axes;
        const sdfShader = this._main.sdfShader;
        const shaderResources = this._main.shaderResources;
        const fontVisual = this._main.fonts[axes.font.name];
        sdfShader.vertexBuffer = this._textVertexBuffer;
        sdfShader.indexBuffer = this._textIndexBuffer;
        sdfShader.texture2D = fontVisual.texture;
        sdfShader.prepare();
        sdfShader.buffer = fontVisual.font.edgeValue / 0xff;
        sdfShader.gamma = axes.gamma;
        sdfShader.borderWidth = axes.textBorderWidth;
        sdfShader.color = axes.textColor || this._core.config.axesTextColor;
        sdfShader.hoverColor = axes.textHoverColor || this._core.config.axesTextHoverColor;
        sdfShader.borderColor = axes.textBorderColor || this._core.config.textBorderColor;
        sdfShader.pickedIdColor = this.pickedIdColor;
        sdfShader.apply();
        let indexCount, indexOffset;
        for(let axisId = 0; axisId < 3; axisId++){
            const orientation = axes.getLabelOrientation(axisId);
            for(let edge = 0; edge < 4; edge++){
                const edgeId = (0, _cubeJs.Cube).AXIS_EDGES[axisId][edge];
                if (axes.getIsOutsideEdge(edgeId)) {
                    if (axes.isEdgeVisible[edgeId]) {
                        if (orientation == (0, _mainJs.AxesTextOrientation).parallel && axes.getIsLeftToRightHorizontal(edgeId) || orientation == (0, _mainJs.AxesTextOrientation).perpendicular && axes.getIsLeftToRightVertical(edgeId)) {
                            indexCount = axes.getAxesLeftToRightIndexCount(axisId);
                            indexOffset = axes.getAxesLeftToRightIndexOffset(axisId);
                        } else {
                            indexCount = axes.getAxesRightToLeftIndexCount(axisId);
                            indexOffset = axes.getAxesRightToLeftIndexOffset(axisId);
                        }
                        if (indexCount > 0) {
                            sdfShader.mMatrix = axes.getLabelMMatrix(edgeId);
                            sdfShader.applyModel();
                            sdfShader.isPickShader = false;
                            shaderResources.bindFramebuffer(this.geometryFramebuffer);
                            for(let i = 0; i < this.viewportCount; i++){
                                const viewport = i + this.viewportOffset;
                                this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                                sdfShader.vMatrix = this.vMatrices[viewport];
                                sdfShader.pMatrix = this.pMatrices[viewport];
                                sdfShader.applyView();
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                            if (this.isPickingEnabled && axes.isLabelPickingEnabled[axisId]) {
                                sdfShader.isPickShader = true;
                                sdfShader.pMatrix = this.pickPMatrix;
                                sdfShader.vMatrix = this.pickVMatrix;
                                sdfShader.applyView();
                                shaderResources.bindFramebuffer(this.pickFramebuffer);
                                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                        }
                        indexCount = axes.getTitleIndexCount(axisId);
                        if (indexCount > 0) {
                            indexOffset = axes.getTitleIndexOffset(axisId);
                            sdfShader.mMatrix = axes.getTitleMMatrix(edgeId);
                            sdfShader.applyModel();
                            sdfShader.isPickShader = false;
                            shaderResources.bindFramebuffer(this.geometryFramebuffer);
                            for(let i1 = 0; i1 < this.viewportCount; i1++){
                                const viewport1 = i1 + this.viewportOffset;
                                this._gl.viewport(this.viewports[viewport1].x, this.viewports[viewport1].y, this.viewports[viewport1].width, this.viewports[viewport1].height);
                                sdfShader.vMatrix = this.vMatrices[viewport1];
                                sdfShader.pMatrix = this.pMatrices[viewport1];
                                sdfShader.applyView();
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                            if (this.isPickingEnabled && axes.isTitlePickingEnabled[axisId]) {
                                sdfShader.isPickShader = true;
                                sdfShader.pMatrix = this.pickPMatrix;
                                sdfShader.vMatrix = this.pickVMatrix;
                                sdfShader.applyView();
                                shaderResources.bindFramebuffer(this.pickFramebuffer);
                                this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                                this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                            }
                        }
                    }
                    indexCount = axes.getHeadingIndexCount(axisId);
                    if (indexCount > 0 && axes.isHeadingVisible[edgeId]) {
                        indexOffset = axes.getHeadingIndexOffset(axisId);
                        sdfShader.mMatrix = axes.getHeadingMMatrix(edgeId);
                        sdfShader.applyModel();
                        sdfShader.isPickShader = false;
                        shaderResources.bindFramebuffer(this.geometryFramebuffer);
                        for(let i2 = 0; i2 < this.viewportCount; i2++){
                            const viewport2 = i2 + this.viewportOffset;
                            this._gl.viewport(this.viewports[viewport2].x, this.viewports[viewport2].y, this.viewports[viewport2].width, this.viewports[viewport2].height);
                            sdfShader.vMatrix = this.vMatrices[viewport2];
                            sdfShader.pMatrix = this.pMatrices[viewport2];
                            sdfShader.applyView();
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                        if (this.isPickingEnabled && axes.isHeadingPickingEnabled[axisId]) {
                            sdfShader.isPickShader = true;
                            sdfShader.pMatrix = this.pickPMatrix;
                            sdfShader.vMatrix = this.pickVMatrix;
                            sdfShader.applyView();
                            shaderResources.bindFramebuffer(this.pickFramebuffer);
                            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                            this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, indexOffset * 2);
                        }
                    }
                }
            }
        }
    }
    _renderGrid() {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        gridShader.vertexBuffer = this._gridVertexBuffer;
        gridShader.indexBuffer = this._gridIndexBuffer;
        gridShader.prepare();
        gridShader.majorThickness = axes.gridMajorThickness;
        gridShader.minorThickness = axes.gridMinorThickness;
        gridShader.zeroThickness = axes.gridZeroThickness;
        gridShader.backgroundColor = axes.gridBackgroundColor || this._core.config.axesGridBackgroundColor;
        gridShader.highlightColor = axes.gridHighlightColor || this._core.config.axesGridHighlightColor;
        gridShader.majorColor = axes.gridMajorColor || this._core.config.axesGridMajorColor;
        gridShader.minorColor = axes.gridMinorColor || this._core.config.axesGridMinorColor;
        gridShader.zeroColor = axes.gridZeroColor || this._core.config.axesGridZeroColor;
        gridShader.pickedIdColor = this.pickedIdColor;
        gridShader.apply();
        for(let axisId = 0; axisId < 3; axisId++)if (axes.arePickDivisionsVisible[axisId]) {
            const gridTicksScale = axes.getGridTicksScale(axisId);
            const width = gridTicksScale[0];
            const height = gridTicksScale[1];
            gridShader.zero = axes.getGridTicksZero(axisId);
            gridShader.minorGridlines = axes.getGridTicksMinorGridlines(axisId);
            for(let edge = 0; edge < 4; edge++){
                const edgeId = (0, _cubeJs.Cube).AXIS_EDGES[axisId][edge];
                if (axes.getIsOutsideEdge(edgeId) && axes.isEdgeVisible[edgeId]) this._renderGridTicks(axisId, edgeId, width, height);
            }
        }
        this._gl.disable(this._gl.CULL_FACE);
        const size = axes.size;
        for(let axisId1 = 0; axisId1 < 3; axisId1++)if (axes.areFacesVisible[axisId1]) {
            const axisId2 = axisId1 == 0 ? 1 : 0;
            const axisId3 = axisId1 == 2 ? 1 : 2;
            const width1 = size[axisId2];
            const height1 = size[axisId3];
            gridShader.zero = axes.getGridFaceZero(axisId1);
            gridShader.minorGridlines = axes.getGridFaceMinorGridlines(axisId1);
            for(let face = 0; face < 2; face++){
                const faceId = (0, _cubeJs.Cube).AXIS_FACES[axisId1][face];
                if (axes.getIsForwardFace(faceId) && axes.isFaceVisible[faceId]) this._renderGridFace(faceId, width1, height1);
            }
        }
        this._gl.enable(this._gl.CULL_FACE);
    }
    _renderGridTicks(axisId, edgeId, width, height) {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        gridShader.mMatrix = axes.getGridTicksMMatrix(edgeId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        shaderResources.bindFramebuffer(this.geometryFramebuffer);
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
        if (this.isPickingEnabled && axes.isDivisionPickingEnabled[axisId]) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridTicksIndexCount(axisId), this._gl.UNSIGNED_SHORT, axes.getGridTicksIndexOffset(axisId) * 2);
        }
    }
    _renderGridFace(faceId, width, height) {
        const axes = this._axes;
        const gridShader = this._main.gridShader;
        const shaderResources = this._main.shaderResources;
        gridShader.mMatrix = axes.getGridFaceMMatrix(faceId);
        gridShader.faceWidth = width;
        gridShader.faceHeight = height;
        gridShader.ApplyFace();
        gridShader.isPickShader = false;
        shaderResources.bindFramebuffer(this.geometryFramebuffer);
        for(let i = 0; i < this.viewportCount; i++){
            const viewport = i + this.viewportOffset;
            this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
            gridShader.vMatrix = this.vMatrices[viewport];
            gridShader.pMatrix = this.pMatrices[viewport];
            gridShader.applyView();
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
        if (this.isPickingEnabled && axes.isGridPickingEnabled) {
            gridShader.isPickShader = true;
            gridShader.vMatrix = this.pickVMatrix;
            gridShader.pMatrix = this.pickPMatrix;
            gridShader.applyView();
            shaderResources.bindFramebuffer(this.pickFramebuffer);
            this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
            this._gl.drawElements(this._gl.TRIANGLES, axes.getGridFaceIndexCount(faceId), this._gl.UNSIGNED_SHORT, axes.getGridFaceIndexOffset(faceId) * 2);
        }
    }
}

},{"./axes.js":"uzxsW","../../../../main.js":"2JYph","../../../../meshes/cube.js":"dgOpu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8Gw0o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FontVisual", ()=>FontVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _textureJs = require("../../helpers/texture.js");
var _mainJs = require("../../main.js");
class FontVisual {
    constructor(core, font){
        this._core = core;
        this._font = font;
        font.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get font() {
        return this._font;
    }
    initializeContext(gl) {
        this._gl = gl;
        this._isInitialized = true;
        if (this._font.count > 0) this._hasChanged = true;
    }
    update() {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            this.texture = (0, _textureJs.TextureHelper).fromImage(this._gl, this._font.atlas.imageData, false, this._gl.LINEAR);
            this._core.log.write((0, _mainJs.LogLevel).info, `${this._font.name} texture updated`);
        }
    }
}

},{"../../helpers/texture.js":"eZ0Tk","../../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"i24Kk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LabelVisual", ()=>LabelVisual);
parcelHelpers.export(exports, "LabelSetVisual", ()=>LabelSetVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class LabelVisualBase {
    constructor(core, main, label){
        this._core = core;
        this._main = main;
        this._label = label;
        this._label.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        this._mMatrix = (0, _glMatrix.mat4).create();
        this.mMatrix = (0, _glMatrix.mat4).create();
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized && this._main.sdfShader.isInitialized && this._main.fonts[this._label.font.name].isInitialized;
    }
    initializeContext(gl) {
        if (!this._label.isInitialized) this._label.initialize();
        this._gl = gl;
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._label.vertices, gl.STATIC_DRAW);
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._label.indices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, this._label.vertices);
            this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            this._gl.bufferSubData(this._gl.ELEMENT_ARRAY_BUFFER, 0, this._label.indices);
        }
    }
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            const indexCount = this._label.indexCount;
            if (indexCount > 0) {
                const shader = this._main.sdfShader;
                const fontVisual = this._main.fonts[this._label.font.name];
                shader.vertexBuffer = this._vertexBuffer;
                shader.indexBuffer = this._indexBuffer;
                shader.texture2D = fontVisual.texture;
                shader.prepare();
                shader.gamma = this._label.gamma;
                shader.buffer = fontVisual.font.edgeValue / 0xff;
                shader.borderWidth = this._label.borderWidth;
                shader.color = this._label.color || this._core.config.textColor;
                shader.borderColor = this._label.borderColor || this._core.config.textBorderColor;
                shader.hoverColor = this._label.hoverColor || this._core.config.textHoverColor;
                shader.pickedIdColor = this.pickedIdColor;
                shader.apply();
                (0, _glMatrix.mat4).multiply(this._mMatrix, this.mMatrix, this._label.mMatrix);
                shader.mMatrix = this._mMatrix;
                shader.applyModel();
                shader.isPickShader = false;
                this._main.shaderResources.bindFramebuffer(this.geometryFramebuffer);
                for(let i = 0; i < this.viewportCount; i++){
                    const viewport = i + this.viewportOffset;
                    this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                    shader.vMatrix = this.vMatrices[viewport];
                    shader.pMatrix = this.pMatrices[viewport];
                    shader.applyView();
                    this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, 0);
                }
                if (this.isPickingEnabled) {
                    shader.isPickShader = true;
                    shader.pMatrix = this.pickPMatrix;
                    shader.vMatrix = this.pickVMatrix;
                    shader.applyView();
                    this._main.shaderResources.bindFramebuffer(this.pickFramebuffer);
                    this._gl.viewport(0, 0, this._core.config.pickWidth, this._core.config.pickHeight);
                    this._gl.drawElements(this._gl.TRIANGLES, indexCount, this._gl.UNSIGNED_SHORT, 0);
                }
            }
        }
    }
}
class LabelVisual extends LabelVisualBase {
    constructor(core, main, label){
        super(core, main, label);
    }
    get label() {
        return this._label;
    }
    set text(value) {
        this._label.text = value;
    }
    get text() {
        return this._label.text;
    }
}
class LabelSetVisual extends LabelVisualBase {
    constructor(core, main, label){
        super(core, main, label);
    }
    get label() {
        return this._label;
    }
}

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7TsjH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageVisual", ()=>ImageVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _textureJs = require("../../../helpers/texture.js");
class ImageVisual {
    constructor(core, main, image){
        this._core = core;
        this._main = main;
        this._image = image;
        this._image.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        this.mMatrix = (0, _glMatrix.mat4).create();
        this.isVisible = true;
    }
    get isInitialized() {
        return this._isInitialized && this._main.textureShader.isInitialized;
    }
    get image() {
        return this._image;
    }
    initializeContext(gl) {
        if (!this._image.isInitialized) this._image.initialize();
        this._gl = gl;
        if (this._image.imageData) this.texture = (0, _textureJs.TextureHelper).fromImage(gl, this._image.imageData, false, gl.LINEAR);
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this._image.vertices, gl.STATIC_DRAW);
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._image.indices, gl.STATIC_DRAW);
        this._isInitialized = true;
    }
    update(elapsedTime) {
        if (this._hasChanged) {
            this._hasChanged = false;
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);
            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, this._image.vertices);
            this._main.shaderResources.currentProgram = null;
        }
    }
    render(elapsedTime, xrFrame) {
        if (this.isInitialized) {
            const textureShader = this._main.textureShader;
            textureShader.vertexBuffer = this._vertexBuffer;
            textureShader.indexBuffer = this._indexBuffer;
            textureShader.texture2D = this.texture;
            textureShader.prepare();
            textureShader.mMatrix = this.mMatrix;
            textureShader.apply();
            this._main.shaderResources.bindFramebuffer(this.geometryFramebuffer);
            for(let i = 0; i < this.viewportCount; i++){
                const viewport = i + this.viewportOffset;
                this._gl.viewport(this.viewports[viewport].x, this.viewports[viewport].y, this.viewports[viewport].width, this.viewports[viewport].height);
                textureShader.vMatrix = this.vMatrices[viewport];
                textureShader.pMatrix = this.pMatrices[viewport];
                textureShader.applyView();
                this._gl.drawElements(this._gl.TRIANGLES, this._image.indexCount, this._gl.UNSIGNED_SHORT, 0);
            }
        }
    }
}

},{"gl-matrix":"3mrln","../../../helpers/texture.js":"eZ0Tk","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6AOf4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lasso", ()=>Lasso);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _constantsJs = require("../../../constants.js");
var _quadJs = require("../../../meshes/quad.js");
class Lasso {
    get isInitialized() {
        return this._isInitialized;
    }
    get vertexBuffer() {
        return this._vertexBuffer;
    }
    get indexBuffer() {
        return this._indexBuffer;
    }
    get indexCount() {
        return this._indexCount;
    }
    initializeContext(gl) {
        const vertices = (0, _quadJs.Quad).textured((0, _constantsJs.Constants).MAT4_IDENTITY);
        this._vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        const indices = (0, _quadJs.Quad).INDICES;
        this._indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        this._indexCount = indices.length;
        this._isInitialized = true;
    }
}

},{"../../../constants.js":"dtECF","../../../meshes/quad.js":"5BIpU","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eiv3v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Main", ()=>(0, _mainJs.Main));
parcelHelpers.export(exports, "Material", ()=>(0, _materialJs.Material));
parcelHelpers.export(exports, "MetalMaterial", ()=>(0, _materialJs.MetalMaterial));
parcelHelpers.export(exports, "GlossyMaterial", ()=>(0, _materialJs.GlossyMaterial));
parcelHelpers.export(exports, "LambertianMaterial", ()=>(0, _materialJs.LambertianMaterial));
parcelHelpers.export(exports, "DielectricMaterial", ()=>(0, _materialJs.DielectricMaterial));
parcelHelpers.export(exports, "DiffuseLightMaterial", ()=>(0, _materialJs.DiffuseLightMaterial));
parcelHelpers.export(exports, "Texture", ()=>(0, _textureJs.Texture));
parcelHelpers.export(exports, "SolidColorTexture", ()=>(0, _textureJs.SolidColorTexture));
parcelHelpers.export(exports, "ImageTexture", ()=>(0, _textureJs.ImageTexture));
parcelHelpers.export(exports, "CheckerTexture", ()=>(0, _textureJs.CheckerTexture));
parcelHelpers.export(exports, "GridTexture", ()=>(0, _textureJs.GridTexture));
var _mainJs = require("./main.js");
var _materialJs = require("./material.js");
var _textureJs = require("./texture.js");

},{"./main.js":"jigo6","./material.js":"kU48f","./texture.js":"1xqM3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jigo6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Main", ()=>Main);
var _glMatrix = require("gl-matrix");
var _rendererJs = require("../renderer.js");
var _mainJs = require("../../main.js");
var _configJs = require("./config.js");
var _hittableJs = require("./hittable.js");
var _materialJs = require("./material.js");
var _raytraceJs = require("./shaders/raytrace.js");
var _fullscreenquadJs = require("./shaders/fullscreenquad.js");
var _bvhJs = require("./bvh.js");
var _textureJs = require("./texture.js");
var _mathJs = require("../../helpers/math.js");
var _lightJs = require("./light.js");
var _constantsJs = require("../../constants.js");
var _angleJs = require("../../helpers/angle.js");
var _fontJs = require("./font.js");
var _imageJs = require("./image.js");
var _labelsJs = require("./labels.js");
var _bufferJs = require("./buffer.js");
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Main extends (0, _rendererJs.RendererBase) {
    constructor(options){
        super(options);
        (0, _glMatrix.glMatrix).setMatrixArrayType(Float32Array);
        this._config = new (0, _configJs.Config)();
        this._frameCount = 0;
        this._duration = 0;
        this._random = new (0, _mathJs.PseudoRandom)(0);
        this._position = (0, _glMatrix.vec3).create();
        this._right = (0, _glMatrix.vec3).create();
        this._up = (0, _glMatrix.vec3).create();
        this._forward = (0, _glMatrix.vec3).create();
        this._modelPosition = (0, _glMatrix.vec3).create();
        this._manipulationOrigin = (0, _glMatrix.vec3).create();
    }
    get frameCount() {
        return this._frameCount;
    }
    get duration() {
        return this._duration;
    }
    get config() {
        return this._config;
    }
    initialize(core) {
        super.initialize(core);
        this._initializeAPI().then(()=>{
            this._initializeResources();
            this._createWorld();
            this._resizeBackings();
            this._isInitialized = true;
        });
    }
    _initializeAPI() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const start = window.performance.now();
                const gpu = navigator.gpu;
                this._adapter = yield gpu.requestAdapter();
                this._device = yield this._adapter.requestDevice();
                this._queue = this._device.queue;
                this._context = this._canvas.getContext("webgpu");
                this._core.log.write((0, _mainJs.LogLevel).info, `WebGPU initialized ${Math.round(window.performance.now() - start)}ms`);
            } catch (e) {
                this._core.log.write((0, _mainJs.LogLevel).error, e);
                return false;
            }
            return true;
        });
    }
    _initializeResources() {
        const canvasConfig = {
            device: this._device,
            format: "bgra8unorm",
            alphaMode: "opaque"
        };
        this._context.configure(canvasConfig);
        const computeUniformBufferDescriptor = {
            size: (0, _raytraceJs.ComputeUniformBufferData).SIZE * 4,
            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
        };
        this._computeUniformBuffer = this._device.createBuffer(computeUniformBufferDescriptor);
        this._computeUniformBufferData = new (0, _raytraceJs.ComputeUniformBufferData)();
        const fullscreenQuadUniformBufferDescriptor = {
            size: (0, _fullscreenquadJs.FullscreenQuadUniformBufferData).SIZE * 4,
            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
        };
        this._fullscreenQuadUniformBuffer = this._device.createBuffer(fullscreenQuadUniformBufferDescriptor);
        this._fullscreenQuadUniformBufferData = new (0, _fullscreenquadJs.FullscreenQuadUniformBufferData)();
        this._sampler = this._device.createSampler({
            magFilter: "linear",
            minFilter: "linear"
        });
        for(const key in this.fonts){
            const fontVisual = this.fonts[key];
            fontVisual.initializeContext(this._device);
        }
        for(let i = 0; i < this.images.length; i++)this.images[i].initializeContext(this._device);
        const textureSize = {
            width: 1,
            height: 1
        };
        const textureDescriptor = {
            size: textureSize,
            format: "rgba8unorm",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
        };
        this._texture = this._device.createTexture(textureDescriptor);
    }
    get isSupported() {
        return navigator.gpu !== undefined;
    }
    _createWorld() {
        const start = performance.now();
        const world = this.transitionBuffers.length > 0 ? this._getHittables() : this._getHittablesTest();
        const bvhAccel = new (0, _bvhJs.BVHAccel)(this._core, world, 1, (0, _bvhJs.SplitMethod).sah);
        const hittables = bvhAccel.orderedPrimitives;
        const lights = this.standardLighting();
        const modelScale = this._core.getModelScale();
        (0, _glMatrix.vec3).set(this._modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
        for(let i = 0; i < lights.length; i++){
            const light = lights[i];
            (0, _glMatrix.vec2).scale(light.size, light.size, modelScale);
            (0, _glMatrix.vec3).scale(light.center, light.center, modelScale);
            (0, _glMatrix.vec3).add(light.center, light.center, this._modelPosition);
        }
        const materials = [];
        const materialIds = [];
        for(let i1 = 0; i1 < hittables.length; i1++){
            const hittable = hittables[i1];
            const material = hittable.material;
            let materialId;
            let found;
            for(let j = 0; j < materials.length; j++)if (materials[j] === material) {
                found = true;
                materialId = j;
                break;
            }
            if (!found) {
                materialId = materials.length;
                materials.push(material);
            }
            materialIds.push(materialId);
        }
        const textures = [];
        const textureIds = [];
        for(let i2 = 0; i2 < materials.length; i2++){
            const material1 = materials[i2];
            const texture = material1.texture;
            if (texture) {
                let textureId;
                let found1;
                for(let j1 = 0; j1 < textures.length; j1++)if (textures[j1] === texture) {
                    found1 = true;
                    textureId = j1;
                    break;
                }
                if (!found1) {
                    textureId = textures.length;
                    textures.push(texture);
                }
                textureIds.push(textureId);
            } else textureIds.push(0);
        }
        const textureBufferSizeBytes = textures.length * (0, _textureJs.TextureBufferData).SIZE * 4;
        const textureBufferDescriptor = {
            size: textureBufferSizeBytes,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
        };
        this._textureBuffer = this._device.createBuffer(textureBufferDescriptor);
        this._textureBufferData = new (0, _textureJs.TextureBufferData)(textures.length);
        for(let i3 = 0; i3 < textures.length; i3++)textures[i3].toBuffer(this._textureBufferData, i3);
        const materialBufferSizeBytes = materials.length * (0, _materialJs.MaterialBufferData).SIZE * 4;
        const materialBufferDescriptor = {
            size: materialBufferSizeBytes,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
        };
        this._materialBuffer = this._device.createBuffer(materialBufferDescriptor);
        this._materialBufferData = new (0, _materialJs.MaterialBufferData)(materials.length);
        for(let i4 = 0; i4 < materials.length; i4++)materials[i4].toBuffer(this._materialBufferData, i4, textureIds[i4]);
        const lightBufferSizeBytes = lights.length * (0, _lightJs.LightBufferData).SIZE * 4;
        const lightBufferDescriptor = {
            size: lightBufferSizeBytes,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
        };
        this._lightBuffer = this._device.createBuffer(lightBufferDescriptor);
        this._lightBufferData = new (0, _lightJs.LightBufferData)(lights.length);
        for(let i5 = 0; i5 < lights.length; i5++)lights[i5].toBuffer(this._lightBufferData, i5);
        const hittableBufferSizeBytes = hittables.length * (0, _hittableJs.HittableBufferData).SIZE * 4;
        const hittableBufferDescriptor = {
            size: hittableBufferSizeBytes,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
        };
        this._hittableBuffer = this._device.createBuffer(hittableBufferDescriptor);
        this._hittableBufferData = new (0, _hittableJs.HittableBufferData)(hittables.length);
        for(let i6 = 0; i6 < hittables.length; i6++){
            const hittable1 = hittables[i6];
            hittable1.toBuffer(this._hittableBufferData, i6, materialIds[i6]);
        }
        const linearBVHNodes = bvhAccel.nodes;
        const linearBVHNodeBufferSizeBytes = linearBVHNodes.length * (0, _bvhJs.LinearBVHNodeBufferData).SIZE * 4;
        const linearBVHNodeBufferDescriptor = {
            size: linearBVHNodeBufferSizeBytes,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
        };
        this._linearBVHNodeBuffer = this._device.createBuffer(linearBVHNodeBufferDescriptor);
        this._linearBVHNodeBufferData = new (0, _bvhJs.LinearBVHNodeBufferData)(linearBVHNodes.length);
        for(let i7 = 0; i7 < linearBVHNodes.length; i7++)linearBVHNodes[i7].toBuffer(this._linearBVHNodeBufferData, i7);
        this._device.queue.writeBuffer(this._hittableBuffer, 0, this._hittableBufferData.buffer, this._hittableBufferData.byteOffset, this._hittableBufferData.byteLength);
        this._device.queue.writeBuffer(this._materialBuffer, 0, this._materialBufferData.buffer, this._materialBufferData.byteOffset, this._materialBufferData.byteLength);
        this._device.queue.writeBuffer(this._textureBuffer, 0, this._textureBufferData.buffer, this._textureBufferData.byteOffset, this._textureBufferData.byteLength);
        this._device.queue.writeBuffer(this._lightBuffer, 0, this._lightBufferData.buffer, this._lightBufferData.byteOffset, this._lightBufferData.byteLength);
        this._device.queue.writeBuffer(this._linearBVHNodeBuffer, 0, this._linearBVHNodeBufferData.buffer, this._linearBVHNodeBufferData.byteOffset, this._linearBVHNodeBufferData.byteLength);
        this._core.log.write((0, _mainJs.LogLevel).info, `create world ${Math.round(window.performance.now() - start)}ms`);
    }
    standardLighting(options) {
        const azimuthOffset = options && options.azimuthOffset !== undefined ? options.azimuthOffset : 0;
        const altitude = options && options.altitude !== undefined ? (0, _angleJs.AngleHelper).degreesToRadians(-options.altitude) : (0, _angleJs.AngleHelper).degreesToRadians(-30);
        const distance = options && options.distance !== undefined ? options.distance : 1.5;
        const size = options && options.size !== undefined ? options.size : 0.5;
        const keyBrightness = options && options.keyBrightness !== undefined ? options.keyBrightness : 10;
        const fillBrightness = options && options.fillBrightness !== undefined ? options.fillBrightness : 1;
        const backBrightness = options && options.backBrightness !== undefined ? options.backBrightness : 1;
        const lights = [];
        let center = (0, _glMatrix.vec3).create();
        let rotation = (0, _glMatrix.quat).create();
        let azimuth = (0, _angleJs.AngleHelper).degreesToRadians(azimuthOffset - 45);
        (0, _glMatrix.quat).rotateY(rotation, (0, _constantsJs.Constants).QUAT_IDENTITY, azimuth);
        (0, _glMatrix.quat).rotateX(rotation, rotation, altitude);
        (0, _glMatrix.vec3).transformQuat(center, (0, _constantsJs.Constants).VECTOR3_UNITZ, rotation);
        (0, _glMatrix.vec3).scale(center, center, distance);
        lights.push(new (0, _lightJs.RectLight)({
            center: center,
            color: (0, _glMatrix.vec3).fromValues(keyBrightness, keyBrightness, keyBrightness),
            size: (0, _glMatrix.vec2).fromValues(size, size),
            rotation: rotation
        }));
        center = (0, _glMatrix.vec3).create();
        rotation = (0, _glMatrix.quat).create();
        azimuth = (0, _angleJs.AngleHelper).degreesToRadians(azimuthOffset + 45);
        (0, _glMatrix.quat).rotateY(rotation, (0, _constantsJs.Constants).QUAT_IDENTITY, azimuth);
        (0, _glMatrix.quat).rotateX(rotation, rotation, altitude);
        (0, _glMatrix.vec3).transformQuat(center, (0, _constantsJs.Constants).VECTOR3_UNITZ, rotation);
        (0, _glMatrix.vec3).scale(center, center, distance);
        lights.push(new (0, _lightJs.RectLight)({
            center: center,
            color: (0, _glMatrix.vec3).fromValues(fillBrightness, fillBrightness, fillBrightness),
            size: (0, _glMatrix.vec2).fromValues(size, size),
            rotation: rotation
        }));
        center = (0, _glMatrix.vec3).create();
        rotation = (0, _glMatrix.quat).create();
        azimuth = (0, _angleJs.AngleHelper).degreesToRadians(azimuthOffset - 135);
        (0, _glMatrix.quat).rotateY(rotation, (0, _constantsJs.Constants).QUAT_IDENTITY, azimuth);
        (0, _glMatrix.quat).rotateX(rotation, rotation, altitude);
        (0, _glMatrix.vec3).transformQuat(center, (0, _constantsJs.Constants).VECTOR3_UNITZ, rotation);
        (0, _glMatrix.vec3).scale(center, center, distance);
        lights.push(new (0, _lightJs.RectLight)({
            center: center,
            color: (0, _glMatrix.vec3).fromValues(backBrightness, backBrightness, backBrightness),
            size: (0, _glMatrix.vec2).fromValues(size, size),
            rotation: rotation
        }));
        return lights;
    }
    _getHittablesTest() {
        const textures = [];
        const dielectricMaterial = new (0, _materialJs.DielectricMaterial)({
            refractiveIndex: 1.5,
            color: (0, _constantsJs.Constants).VECTOR3_ONE
        });
        const spheres = [];
        spheres.push(new (0, _hittableJs.HittableSphere)({
            center: (0, _glMatrix.vec3).fromValues(0, 0.1, -1),
            radius: 0.2,
            material: dielectricMaterial
        }));
        textures.push(new (0, _textureJs.SolidColorTexture)({
            color: (0, _glMatrix.vec3).fromValues(0.4, 0.2, 0.1)
        }));
        spheres.push(new (0, _hittableJs.HittableSphere)({
            center: (0, _glMatrix.vec3).fromValues(-0.5, 0.1, -1),
            radius: 0.2,
            material: new (0, _materialJs.LambertianMaterial)({
                texture: textures[textures.length - 1]
            })
        }));
        textures.push(new (0, _textureJs.SolidColorTexture)({
            color: (0, _glMatrix.vec3).fromValues(0.7, 0.6, 0.5)
        }));
        spheres.push(new (0, _hittableJs.HittableSphere)({
            center: (0, _glMatrix.vec3).fromValues(0.5, 0.1, -1),
            radius: 0.2,
            material: new (0, _materialJs.MetalMaterial)({
                texture: textures[textures.length - 1],
                fuzz: 0
            })
        }));
        const radius = 0.04;
        let count = 0;
        while(count < 200){
            const r = this._random.nextFloat();
            const theta = this._random.nextFloat() * 2 * Math.PI;
            const sqrtr = Math.sqrt(r);
            const center = (0, _glMatrix.vec3).fromValues(sqrtr * Math.cos(theta), 0.02, sqrtr * Math.sin(theta) - 1);
            let overlap;
            for(let j = 0; j < spheres.length; j++){
                const sphere = spheres[j];
                overlap = (0, _glMatrix.vec3).distance(center, sphere.center) < radius + sphere.radius;
                if (overlap) break;
            }
            if (!overlap) {
                count++;
                const m = this._random.nextFloat();
                let material;
                if (m < 0.8) {
                    textures.push(new (0, _textureJs.SolidColorTexture)({
                        color: (0, _glMatrix.vec3).fromValues(this._random.nextFloat() * this._random.nextFloat(), this._random.nextFloat() * this._random.nextFloat(), this._random.nextFloat() * this._random.nextFloat())
                    }));
                    material = new (0, _materialJs.LambertianMaterial)({
                        texture: textures[textures.length - 1]
                    });
                } else if (m < 0.95) {
                    textures.push(new (0, _textureJs.SolidColorTexture)({
                        color: (0, _glMatrix.vec3).fromValues(this._random.nextFloat() * 0.5, this._random.nextFloat() * 0.5, this._random.nextFloat() * 0.5)
                    }));
                    material = new (0, _materialJs.MetalMaterial)({
                        fuzz: this._random.nextFloat() * 0.5,
                        texture: textures[textures.length - 1]
                    });
                } else material = dielectricMaterial;
                spheres.push(new (0, _hittableJs.HittableSphere)({
                    center: center,
                    radius: radius,
                    material: material
                }));
            }
        }
        const hittables = spheres;
        const height = 0.005;
        hittables.push(new (0, _hittableJs.HittableCylinder)({
            center: (0, _glMatrix.vec3).fromValues(0, -height / 2 - 0.001, -1),
            radius: 3,
            height: height,
            material: new (0, _materialJs.LambertianMaterial)({
                texture: new (0, _textureJs.SolidColorTexture)({
                    color: (0, _glMatrix.vec3).fromValues(0.8, 0.8, 0.8)
                })
            })
        }));
        return hittables;
    }
    _getHittables() {
        const hittables = [];
        let minY = 0;
        for(let i = 0; i < this.transitionBuffers.length; i++){
            const transitionBuffer = this.transitionBuffers[i];
            if (transitionBuffer.isVisible && transitionBuffer.hittables && transitionBuffer.hittables.length > 0) {
                minY = Math.min(minY, transitionBuffer.minY);
                for(let j = 0; j < transitionBuffer.hittables.length; j++)hittables.push(transitionBuffer.hittables[j]);
            }
        }
        if (this.labelSets && this.labelSets.length > 0) for(let i1 = 0; i1 < this.labelSets.length; i1++){
            const labelSet = this.labelSets[i1];
            if (labelSet.hittables) for(let j1 = 0; j1 < labelSet.hittables.length; j1++)hittables.push(labelSet.hittables[j1]);
        }
        if (this.images && this.images.length > 0 && this.images[0].hittable) hittables.push(this.images[0].hittable);
        const modelPosition = (0, _glMatrix.vec3).create();
        const modelScale = this._core.getModelScale();
        const modelRotation = (0, _glMatrix.quat).create();
        this._core.getModelRotation(modelRotation);
        (0, _glMatrix.vec3).set(modelPosition, this.mMatrix[12], this.mMatrix[13], this.mMatrix[14]);
        const halfHeight = 10 * modelScale;
        const halfWidth = 10 * modelScale;
        const offset = this.images && this.images.length > 0 ? 0.002 : 0.001;
        const groundOptions = {
            size: (0, _glMatrix.vec2).fromValues(halfWidth, halfHeight),
            center: (0, _glMatrix.vec3).fromValues(0, minY - offset, 0),
            texCoord0: (0, _glMatrix.vec2).fromValues(0, 0),
            texCoord1: (0, _glMatrix.vec2).fromValues(1, 1),
            material: new (0, _materialJs.LambertianMaterial)({
                texture: new (0, _textureJs.SolidColorTexture)({
                    color: (0, _glMatrix.vec3).fromValues(0.5, 0.5, 0.5)
                })
            })
        };
        (0, _glMatrix.vec3).add(groundOptions.center, groundOptions.center, modelPosition);
        hittables.push(new (0, _hittableJs.HittableXzRect)(groundOptions));
        return hittables;
    }
    createFontVisual(font) {
        const visual = new (0, _fontJs.FontVisual)(this._core, font);
        if (this._isInitialized) visual.initializeContext(this._device);
        visual.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        return visual;
    }
    createImageVisual(image) {
        const visual = new (0, _imageJs.ImageVisual)(this._core, this, image);
        if (this._isInitialized) visual.initializeContext(this._device);
        visual.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        return visual;
    }
    createLabelSetVisual(labelSet) {
        const visual = new (0, _labelsJs.LabelSetVisual)(this._core, this, labelSet);
        visual.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        return visual;
    }
    createTransitionBuffer(ids) {
        const transitionBuffer = new (0, _bufferJs.TransitionBuffer)(this._core, this, ids);
        transitionBuffer.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        return transitionBuffer;
    }
    _resizeBackings() {
        const width = this.width;
        const height = this.height;
        const colorChannels = 3;
        const outputColorBufferSizeBytes = Uint32Array.BYTES_PER_ELEMENT * width * height * colorChannels;
        const outputColorBufferDescriptor = {
            size: outputColorBufferSizeBytes,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC
        };
        const outputColorBuffer = this._device.createBuffer(outputColorBufferDescriptor);
        const computeShaderModuleDescriptor = {
            code: (0, _raytraceJs.ComputeShaderWgsl)
        };
        const computeModule = this._device.createShaderModule(computeShaderModuleDescriptor);
        const computeBindGroupLayoutDescriptor = {
            entries: [
                {
                    binding: 0,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "storage"
                    }
                },
                {
                    binding: 1,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "uniform"
                    }
                },
                {
                    binding: 2,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "read-only-storage"
                    }
                },
                {
                    binding: 3,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "read-only-storage"
                    }
                },
                {
                    binding: 4,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "read-only-storage"
                    }
                },
                {
                    binding: 5,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "read-only-storage"
                    }
                },
                {
                    binding: 6,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "read-only-storage"
                    }
                },
                {
                    binding: 7,
                    visibility: GPUShaderStage.COMPUTE,
                    sampler: {
                        type: "filtering"
                    }
                },
                {
                    binding: 8,
                    visibility: GPUShaderStage.COMPUTE,
                    texture: {
                        multisampled: false,
                        sampleType: "float",
                        viewDimension: "2d"
                    }
                },
                {
                    binding: 9,
                    visibility: GPUShaderStage.COMPUTE,
                    texture: {
                        multisampled: false,
                        sampleType: "float",
                        viewDimension: "2d"
                    }
                }
            ]
        };
        const computeBindGroupLayout = this._device.createBindGroupLayout(computeBindGroupLayoutDescriptor);
        const computeBindGroupDescriptor = {
            layout: computeBindGroupLayout,
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: outputColorBuffer
                    }
                },
                {
                    binding: 1,
                    resource: {
                        buffer: this._computeUniformBuffer
                    }
                },
                {
                    binding: 2,
                    resource: {
                        buffer: this._hittableBuffer
                    }
                },
                {
                    binding: 3,
                    resource: {
                        buffer: this._materialBuffer
                    }
                },
                {
                    binding: 4,
                    resource: {
                        buffer: this._textureBuffer
                    }
                },
                {
                    binding: 5,
                    resource: {
                        buffer: this._lightBuffer
                    }
                },
                {
                    binding: 6,
                    resource: {
                        buffer: this._linearBVHNodeBuffer
                    }
                },
                {
                    binding: 7,
                    resource: this._sampler
                },
                {
                    binding: 8,
                    resource: (this.fonts[this._core.font.name].texture || this._texture).createView()
                },
                {
                    binding: 9,
                    resource: (this.images && this.images.length > 0 && this.images[0].texture || this._texture).createView()
                }
            ]
        };
        this._computeBindGroup = this._device.createBindGroup(computeBindGroupDescriptor);
        const computePipelineLayoutDescriptor = {
            bindGroupLayouts: [
                computeBindGroupLayout
            ]
        };
        const computePipelineLayout = this._device.createPipelineLayout(computePipelineLayoutDescriptor);
        const compute = {
            module: computeModule,
            entryPoint: "main"
        };
        const computePipelineDescriptor = {
            layout: computePipelineLayout,
            compute: compute
        };
        this._computePipeline = this._device.createComputePipeline(computePipelineDescriptor);
        const clearBindGroupLayoutDescriptor = {
            entries: [
                {
                    binding: 0,
                    visibility: GPUShaderStage.COMPUTE,
                    buffer: {
                        type: "storage"
                    }
                }
            ]
        };
        const clearBindGroupLayout = this._device.createBindGroupLayout(clearBindGroupLayoutDescriptor);
        const clearBindGroupDescriptor = {
            layout: clearBindGroupLayout,
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: outputColorBuffer
                    }
                }
            ]
        };
        this._clearBindGroup = this._device.createBindGroup(clearBindGroupDescriptor);
        const clearPipelineLayoutDescriptor = {
            bindGroupLayouts: [
                clearBindGroupLayout
            ]
        };
        const clearPipelineLayout = this._device.createPipelineLayout(clearPipelineLayoutDescriptor);
        const clear = {
            module: computeModule,
            entryPoint: "clear"
        };
        const clearPipelineDescriptor = {
            layout: clearPipelineLayout,
            compute: clear
        };
        this._clearPipeline = this._device.createComputePipeline(clearPipelineDescriptor);
        const fullscreenQuadShaderDescriptor = {
            code: (0, _fullscreenquadJs.FullscreenQuadWgsl)
        };
        const fullscreenQuadModule = this._device.createShaderModule(fullscreenQuadShaderDescriptor);
        const fullscreenQuadBindGroupLayoutDescriptor = {
            entries: [
                {
                    binding: 0,
                    visibility: GPUShaderStage.FRAGMENT,
                    buffer: {
                        type: "uniform"
                    }
                },
                {
                    binding: 1,
                    visibility: GPUShaderStage.FRAGMENT,
                    buffer: {
                        type: "read-only-storage"
                    }
                }
            ]
        };
        const fullscreenQuadBindGroupLayout = this._device.createBindGroupLayout(fullscreenQuadBindGroupLayoutDescriptor);
        const fullscreenQuadPipelineLayoutDescriptor = {
            bindGroupLayouts: [
                fullscreenQuadBindGroupLayout
            ]
        };
        const fullscreenQuadPipelineLayout = this._device.createPipelineLayout(fullscreenQuadPipelineLayoutDescriptor);
        const vertex = {
            module: fullscreenQuadModule,
            entryPoint: "vert_main"
        };
        const colorState = {
            format: "bgra8unorm"
        };
        const fragment = {
            module: fullscreenQuadModule,
            entryPoint: "frag_main",
            targets: [
                colorState
            ]
        };
        const primitive = {
            topology: "triangle-list"
        };
        const fullscreenQuadPiplelineDescriptor = {
            layout: fullscreenQuadPipelineLayout,
            vertex: vertex,
            fragment: fragment,
            primitive: primitive
        };
        this._fullscreenQuadPipeline = this._device.createRenderPipeline(fullscreenQuadPiplelineDescriptor);
        const fullscreenQuadBindGroupDescriptor = {
            layout: fullscreenQuadBindGroupLayout,
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: this._fullscreenQuadUniformBuffer
                    }
                },
                {
                    binding: 1,
                    resource: {
                        buffer: outputColorBuffer
                    }
                }
            ]
        };
        this._fullscreenQuadBindGroup = this._device.createBindGroup(fullscreenQuadBindGroupDescriptor);
        this._computeUniformBufferData.setWidth(width);
        this._computeUniformBufferData.setHeight(height);
        this._fullscreenQuadUniformBufferData.setWidth(width);
        this._fullscreenQuadUniformBufferData.setHeight(height);
        this._computeDispatchCount = Math.min(Math.ceil(width * height / 256), this._device.limits.maxComputeWorkgroupsPerDimension);
        this._frameCount = 0;
    }
    update(elapsedTime) {
        super.update(elapsedTime);
        for(let i = 0; i < this.transitionBuffers.length; i++){
            const transitionBuffers = this.transitionBuffers[i];
            if (transitionBuffers.isVisible) transitionBuffers.update();
        }
        if (this._hasChanged && this.isInitialized) {
            this._hasChanged = false;
            this._createWorld();
            this._resizeBackings();
        }
        if (this._core.config.isDebugVisible) this._core.debugText.addLine(`frm tot  ${this._frameCount}`);
    }
    render(elapsedTime) {
        if (!this._isInitialized) return;
        const epsilon = 0.000001;
        let clear = this._frameCount == 0;
        if (Math.abs(this._computeUniformBufferData.getFieldOfView() - this._core.config.fov) > epsilon) {
            clear = true;
            this._computeUniformBufferData.setFieldOfView(this._core.config.fov);
        }
        if (Math.abs(this._computeUniformBufferData.getAperture() - this._config.aperture) > epsilon) {
            clear = true;
            this._computeUniformBufferData.setAperture(this._config.aperture);
        }
        const m = this.inverseVMatrices[0];
        this._computeUniformBufferData.getPosition(this._position);
        this._computeUniformBufferData.getRight(this._right);
        this._computeUniformBufferData.getUp(this._up);
        this._computeUniformBufferData.getForward(this._forward);
        if (Math.abs(this._position[0] - m[12]) > epsilon || Math.abs(this._position[1] - m[13]) > epsilon || Math.abs(this._position[2] - m[14]) > epsilon || Math.abs(this._right[0] - m[0]) > epsilon || Math.abs(this._right[1] - m[1]) > epsilon || Math.abs(this._right[2] - m[2]) > epsilon || Math.abs(this._up[0] - m[4]) > epsilon || Math.abs(this._up[1] - m[5]) > epsilon || Math.abs(this._up[2] - m[6]) > epsilon || Math.abs(this._forward[0] - m[8]) > epsilon || Math.abs(this._forward[1] - m[9]) > epsilon || Math.abs(this._forward[2] - m[10]) > epsilon) {
            clear = true;
            (0, _glMatrix.vec3).set(this._position, m[12], m[13], m[14]);
            (0, _glMatrix.vec3).set(this._right, m[0], m[1], m[2]);
            (0, _glMatrix.vec3).set(this._up, m[4], m[5], m[6]);
            (0, _glMatrix.vec3).set(this._forward, m[8], m[9], m[10]);
            this._computeUniformBufferData.setPosition(this._position);
            this._computeUniformBufferData.setRight(this._right);
            this._computeUniformBufferData.setUp(this._up);
            this._computeUniformBufferData.setForward(this._forward);
            this._core.getModelPosition(this._modelPosition);
            this._core.getModelManipulationOrigin(this._manipulationOrigin);
            (0, _glMatrix.vec3).add(this._modelPosition, this._modelPosition, this._manipulationOrigin);
            this._computeUniformBufferData.setLookAt(this._modelPosition);
        }
        if (clear) this.clear();
        this._computeUniformBufferData.setSeed(this._core.totalFrames);
        this._device.queue.writeBuffer(this._computeUniformBuffer, 0, this._computeUniformBufferData.buffer, this._computeUniformBufferData.byteOffset, this._computeUniformBufferData.byteLength);
        this._frameCount++;
        this._fullscreenQuadUniformBufferData.setSamplesPerPixel(this._frameCount);
        this._device.queue.writeBuffer(this._fullscreenQuadUniformBuffer, 0, this._fullscreenQuadUniformBufferData.buffer, this._fullscreenQuadUniformBufferData.byteOffset, this._fullscreenQuadUniformBufferData.byteLength);
        this._encodeCommands(clear);
        this._duration = performance.now() - this._startTime;
    }
    clear() {
        this._frameCount = 0;
        this._duration = 0;
        this._startTime = performance.now();
    }
    _encodeCommands(clear) {
        const commandEncoder = this._device.createCommandEncoder();
        if (clear) {
            const clearPassEncoder = commandEncoder.beginComputePass();
            clearPassEncoder.setPipeline(this._clearPipeline);
            clearPassEncoder.setBindGroup(0, this._clearBindGroup);
            clearPassEncoder.dispatchWorkgroups(this._computeDispatchCount, 1, 1);
            clearPassEncoder.end();
        }
        const computePassEncoder = commandEncoder.beginComputePass();
        computePassEncoder.setPipeline(this._computePipeline);
        computePassEncoder.setBindGroup(0, this._computeBindGroup);
        computePassEncoder.dispatchWorkgroups(this._computeDispatchCount, 1, 1);
        computePassEncoder.end();
        const colorAttachment = {
            view: this._context.getCurrentTexture().createView(),
            clearValue: {
                r: 0,
                g: 0,
                b: 0,
                a: 1
            },
            loadOp: "clear",
            storeOp: "store"
        };
        const fullscreenQuadRenderPassDescriptor = {
            colorAttachments: [
                colorAttachment
            ]
        };
        const renderPassEncoder = commandEncoder.beginRenderPass(fullscreenQuadRenderPassDescriptor);
        renderPassEncoder.setPipeline(this._fullscreenQuadPipeline);
        renderPassEncoder.setBindGroup(0, this._fullscreenQuadBindGroup);
        renderPassEncoder.draw(6, 1, 0, 0);
        renderPassEncoder.end();
        const commands = commandEncoder.finish();
        this._queue.submit([
            commands
        ]);
    }
    _resize(width, height) {
        super._resize(width, height);
        if (this._isInitialized) {
            this._resizeBackings();
            this._core.log.write((0, _mainJs.LogLevel).info, `buffers resized ${width},${height}`);
        }
    }
}

},{"gl-matrix":"3mrln","../renderer.js":"aTXAw","../../main.js":"2JYph","./config.js":"5Ynw4","./hittable.js":"9GVRY","./material.js":"kU48f","./shaders/raytrace.js":"OOqNf","./shaders/fullscreenquad.js":"h6Hz9","./bvh.js":"gTIjl","./texture.js":"1xqM3","../../helpers/math.js":"jeH35","./light.js":"1kubX","../../constants.js":"dtECF","../../helpers/angle.js":"3PBRj","./font.js":"g1W7O","./image.js":"2rRl3","./labels.js":"9OoIc","./buffer.js":"aSkNF","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5Ynw4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Config", ()=>Config);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _rendererJs = require("../renderer.js");
class Config extends (0, _rendererJs.RendererConfig) {
    constructor(){
        super();
        this.reset();
    }
    reset() {
        this.aperture = 0;
    }
}

},{"../renderer.js":"aTXAw","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9GVRY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HittableType", ()=>HittableType);
parcelHelpers.export(exports, "HittableBufferData", ()=>HittableBufferData);
parcelHelpers.export(exports, "Hittable", ()=>Hittable);
parcelHelpers.export(exports, "HittableSphere", ()=>HittableSphere);
parcelHelpers.export(exports, "HittableBox", ()=>HittableBox);
parcelHelpers.export(exports, "HittableBoxSdf", ()=>HittableBoxSdf);
parcelHelpers.export(exports, "HittableRotatedBox", ()=>HittableRotatedBox);
parcelHelpers.export(exports, "HittableCylinder", ()=>HittableCylinder);
parcelHelpers.export(exports, "HittableCylinderSdf", ()=>HittableCylinderSdf);
parcelHelpers.export(exports, "HittableHexPrism", ()=>HittableHexPrism);
parcelHelpers.export(exports, "HittableHexPrismSdf", ()=>HittableHexPrismSdf);
parcelHelpers.export(exports, "HittableRect", ()=>HittableRect);
parcelHelpers.export(exports, "HittableXyRect", ()=>HittableXyRect);
parcelHelpers.export(exports, "HittableXzRect", ()=>HittableXzRect);
parcelHelpers.export(exports, "HittableYzRect", ()=>HittableYzRect);
parcelHelpers.export(exports, "HittableFontXyRect", ()=>HittableFontXyRect);
parcelHelpers.export(exports, "HittableRotatedXyRect", ()=>HittableRotatedXyRect);
parcelHelpers.export(exports, "HittableRotatedFontXyRect", ()=>HittableRotatedFontXyRect);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../../constants.js");
var _boundsJs = require("../../helpers/bounds.js");
var _aabbJs = require("./aabb.js");
const HittableType = {
    sphere: 0,
    box: 1,
    cylinder: 2,
    hexPrism: 3,
    rotatedBox: 4,
    xyRect: 5,
    xzRect: 6,
    yzRect: 7,
    rotatedXyRect: 8,
    fontXyRect: 9,
    rotatedFontXyRect: 10,
    boxSdf: 11,
    cylinderSdf: 12,
    hexPrismSdf: 13
};
class HittableBufferData extends Float32Array {
    constructor(count){
        super(count * HittableBufferData.SIZE);
        this.CENTER_OFFSET = 0;
        this.TYPE_OFFSET = 3;
        this.SIZE_OFFSET = 4;
        this.MATERIAL_ID_OFFSET = 7;
        this.ROTATION_OFFSET = 8;
        this.TEXCOORD0_OFFSET = 12;
        this.TEXCOORD1_OFFSET = 14;
        this.RADIUS_OFFSET = 16;
    }
    getType(index) {
        return this[HittableBufferData.SIZE * index + this.TYPE_OFFSET];
    }
    setType(index, value) {
        this[HittableBufferData.SIZE * index + this.TYPE_OFFSET] = value;
    }
    getCenter(index, value) {
        const offset = HittableBufferData.SIZE * index + this.CENTER_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setCenter(index, value) {
        const offset = HittableBufferData.SIZE * index + this.CENTER_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getSize(index, value) {
        const offset = HittableBufferData.SIZE * index + this.SIZE_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setSize(index, value) {
        const offset = HittableBufferData.SIZE * index + this.SIZE_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getMaterialId(index) {
        return this[HittableBufferData.SIZE * index + this.MATERIAL_ID_OFFSET];
    }
    setMaterialId(index, value) {
        this[HittableBufferData.SIZE * index + this.MATERIAL_ID_OFFSET] = value;
    }
    getRotation(index, value) {
        const offset = HittableBufferData.SIZE * index + this.ROTATION_OFFSET;
        (0, _glMatrix.quat).set(value, this[offset], this[offset + 1], this[offset + 2], this[offset + 3]);
    }
    setRotation(index, value) {
        const offset = HittableBufferData.SIZE * index + this.ROTATION_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
        this[offset + 3] = value[3];
    }
    getTexCoord0(index, value) {
        const offset = HittableBufferData.SIZE * index + this.TEXCOORD0_OFFSET;
        (0, _glMatrix.vec2).set(value, this[offset], this[offset + 1]);
    }
    setTexCoord0(index, value) {
        const offset = HittableBufferData.SIZE * index + this.TEXCOORD0_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
    }
    getTexCoord1(index, value) {
        const offset = HittableBufferData.SIZE * index + this.TEXCOORD1_OFFSET;
        (0, _glMatrix.vec2).set(value, this[offset], this[offset + 1]);
    }
    setTexCoord1(index, value) {
        const offset = HittableBufferData.SIZE * index + this.TEXCOORD1_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
    }
    getRadius(index) {
        return this[HittableBufferData.SIZE * index + this.RADIUS_OFFSET];
    }
    setRadius(index, value) {
        this[HittableBufferData.SIZE * index + this.RADIUS_OFFSET] = value;
    }
}
HittableBufferData.SIZE = 20;
class Hittable {
    constructor(options){
        this._center = options.center;
        this._material = options.material;
        this._bounds = new (0, _aabbJs.AABB)();
    }
    get center() {
        return this._center;
    }
    get material() {
        return this._material;
    }
    get bounds() {
        return this._bounds;
    }
    toBuffer(buffer, index, materialId) {
        buffer.setCenter(index, this._center);
        buffer.setMaterialId(index, materialId);
    }
}
class HittableSphere extends Hittable {
    constructor(options){
        super(options);
        this._radius = options.radius;
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._radius;
        max[0] = this._center[0] + this._radius;
        min[1] = this._center[1] - this._radius;
        max[1] = this._center[1] + this._radius;
        min[2] = this._center[2] - this._radius;
        max[2] = this._center[2] + this._radius;
    }
    get radius() {
        return this._radius;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.sphere);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._radius, this._radius, this._radius));
    }
}
class HittableBox extends Hittable {
    constructor(options){
        super(options);
        this._size = options.size;
        (0, _glMatrix.vec3).subtract(this._bounds.min, this._center, this._size);
        (0, _glMatrix.vec3).add(this._bounds.max, this._center, this._size);
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.box);
        buffer.setSize(index, this._size);
    }
}
class HittableBoxSdf extends HittableBox {
    constructor(options){
        super(options);
        this._radius = options.radius;
        (0, _glMatrix.vec3).subtract(this._bounds.min, this._center, this._size);
        (0, _glMatrix.vec3).add(this._bounds.max, this._center, this._size);
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.boxSdf);
        buffer.setRadius(index, this._radius);
    }
}
class HittableRotatedBox extends HittableBox {
    constructor(options){
        super(options);
        this._rotation = options.rotation;
        const rotatedBounds = new (0, _aabbJs.AABB)();
        (0, _boundsJs.BoundsHelper).rotateBounds(this._bounds.min, this._bounds.max, this._rotation, rotatedBounds.min, rotatedBounds.max);
        this._bounds = rotatedBounds;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.rotatedBox);
        buffer.setRotation(index, this._rotation);
    }
}
class HittableCylinder extends Hittable {
    constructor(options){
        super(options);
        this._radius = options.radius;
        this._height = options.height;
        this._rotation = options.rotation || (0, _constantsJs.Constants).QUAT_IDENTITY;
        if (this._rotation[3] == 1) {
            const min = this._bounds.min;
            const max = this._bounds.max;
            min[0] = this._center[0] - this._radius;
            max[0] = this._center[0] + this._radius;
            min[1] = this._center[1] - this._height;
            max[1] = this._center[1] + this._height;
            min[2] = this._center[2] - this._radius;
            max[2] = this._center[2] + this._radius;
        } else {
            const ca = (0, _glMatrix.vec3).create();
            (0, _glMatrix.vec3).transformQuat(ca, (0, _constantsJs.Constants).VECTOR3_UNITY, this._rotation);
            const pa = (0, _glMatrix.vec3).create();
            const pb = (0, _glMatrix.vec3).create();
            (0, _glMatrix.vec3).scaleAndAdd(pa, this._center, ca, -this._height);
            (0, _glMatrix.vec3).scaleAndAdd(pb, this._center, ca, this._height);
            this._bounds.fromCylinder(pa, pb, this._radius);
        }
    }
    get radius() {
        return this._radius;
    }
    get height() {
        return this._height;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.cylinder);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._radius, this._height, this._radius));
        buffer.setRotation(index, this._rotation);
    }
}
class HittableCylinderSdf extends Hittable {
    constructor(options){
        super(options);
        this._height = options.height;
        this._radius0 = options.radius0;
        this._radius1 = options.radius1;
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._radius0;
        max[0] = this._center[0] + this._radius0;
        min[1] = this._center[1] - this._height;
        max[1] = this._center[1] + this._height;
        min[2] = this._center[2] - this._radius0;
        max[2] = this._center[2] + this._radius0;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.cylinderSdf);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._radius0, this._height, this._radius0));
        buffer.setRadius(index, this._radius1);
    }
}
class HittableHexPrism extends Hittable {
    constructor(options){
        super(options);
        this._radius = options.radius;
        this._height = options.height;
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._radius * (0, _constantsJs.Constants).ROOT_THREE_OVER_TWO;
        max[0] = this._center[0] + this._radius * (0, _constantsJs.Constants).ROOT_THREE_OVER_TWO;
        min[1] = this._center[1] - this._height;
        max[1] = this._center[1] + this._height;
        min[2] = this._center[2] - this._radius;
        max[2] = this._center[2] + this._radius;
    }
    get radius() {
        return this._radius;
    }
    get height() {
        return this._height;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.hexPrism);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._radius * (0, _constantsJs.Constants).ROOT_THREE_OVER_TWO, this._height, this._radius));
    }
}
class HittableHexPrismSdf extends Hittable {
    constructor(options){
        super(options);
        this._height = options.height;
        this._radius0 = options.radius0;
        this._radius1 = options.radius1;
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._radius0 * (0, _constantsJs.Constants).ROOT_THREE_OVER_TWO;
        max[0] = this._center[0] + this._radius0 * (0, _constantsJs.Constants).ROOT_THREE_OVER_TWO;
        min[1] = this._center[1] - this._height;
        max[1] = this._center[1] + this._height;
        min[2] = this._center[2] - this._radius0;
        max[2] = this._center[2] + this._radius0;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.hexPrismSdf);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._radius0 * (0, _constantsJs.Constants).ROOT_THREE_OVER_TWO, this._height, this._radius0));
        buffer.setRadius(index, this._radius1);
    }
}
class HittableRect extends Hittable {
    constructor(options){
        super(options);
        this._thickness = 0.00001;
        this._size = options.size;
        this._texCoord0 = options.texCoord0;
        this._texCoord1 = options.texCoord1;
        this._setBounds();
    }
    get texCoord0() {
        return this._texCoord0;
    }
    get texCoord1() {
        return this._texCoord1;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setTexCoord0(index, this._texCoord0);
        buffer.setTexCoord1(index, this._texCoord1);
    }
}
class HittableXyRect extends HittableRect {
    _setBounds() {
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._size[0];
        max[0] = this._center[0] + this._size[0];
        min[1] = this._center[1] - this._size[1];
        max[1] = this._center[1] + this._size[1];
        min[2] = this._center[2] - this._thickness;
        max[2] = this._center[2] + this._thickness;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.xyRect);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._size[0], this._size[1], this._thickness));
    }
}
class HittableXzRect extends HittableRect {
    _setBounds() {
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._size[0];
        max[0] = this._center[0] + this._size[0];
        min[1] = this._center[1] - this._thickness;
        max[1] = this._center[1] + this._thickness;
        min[2] = this._center[2] - this._size[1];
        max[2] = this._center[2] + this._size[1];
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.xzRect);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._size[0], this._thickness, this._size[1]));
    }
}
class HittableYzRect extends HittableRect {
    _setBounds() {
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._thickness;
        max[0] = this._center[0] + this._thickness;
        min[1] = this._center[1] - this._size[0];
        max[1] = this._center[1] + this._size[0];
        min[2] = this._center[2] - this._size[1];
        max[2] = this._center[2] + this._size[1];
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.xzRect);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._thickness, this._size[0], this._size[1]));
    }
}
class HittableFontXyRect extends HittableXyRect {
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.fontXyRect);
    }
}
class HittableRotatedXyRect extends HittableXyRect {
    constructor(options){
        super(options);
        this._rotation = options.rotation;
        const rotatedBounds = new (0, _aabbJs.AABB)();
        (0, _boundsJs.BoundsHelper).rotateBounds(this._bounds.min, this._bounds.max, this._rotation, rotatedBounds.min, rotatedBounds.max);
        this._bounds = rotatedBounds;
    }
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.rotatedXyRect);
        buffer.setRotation(index, this._rotation);
    }
}
class HittableRotatedFontXyRect extends HittableRotatedXyRect {
    toBuffer(buffer, index, materialId) {
        super.toBuffer(buffer, index, materialId);
        buffer.setType(index, HittableType.rotatedFontXyRect);
    }
}

},{"gl-matrix":"3mrln","../../constants.js":"dtECF","../../helpers/bounds.js":"7HUlt","./aabb.js":"1HNfg","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1HNfg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AABB", ()=>AABB);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _cubeJs = require("../../meshes/cube.js");
class AABB {
    constructor(){
        this._min = (0, _glMatrix.vec3).fromValues(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        this._max = (0, _glMatrix.vec3).fromValues(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
    }
    get min() {
        return this._min;
    }
    get max() {
        return this._max;
    }
    centroid(centroid) {
        centroid[0] = (this._min[0] + this._max[0]) / 2;
        centroid[1] = (this._min[1] + this._max[1]) / 2;
        centroid[2] = (this._min[2] + this._max[2]) / 2;
    }
    size(size) {
        size[0] = this._max[0] - this._min[0];
        size[1] = this._max[1] - this._min[1];
        size[2] = this._max[2] - this._min[2];
    }
    offset(point, normalized) {
        normalized[0] = (point[0] - this._min[0]) / (this._max[0] - this._min[0]);
        normalized[1] = (point[1] - this._min[1]) / (this._max[1] - this._min[1]);
        normalized[2] = (point[2] - this._min[2]) / (this._max[2] - this._min[2]);
    }
    unionBounds(bounds) {
        (0, _glMatrix.vec3).min(this._min, this._min, bounds.min);
        (0, _glMatrix.vec3).max(this._max, this._max, bounds.max);
    }
    unionPoint(point) {
        (0, _glMatrix.vec3).min(this._min, this._min, point);
        (0, _glMatrix.vec3).max(this._max, this._max, point);
    }
    maximumExtent() {
        const dx = this._max[0] - this._min[0];
        const dy = this._max[1] - this._min[1];
        const dz = this._max[2] - this._min[2];
        if (dx > dy && dx > dz) return 0;
        else if (dy > dz) return 1;
        return 2;
    }
    surfaceArea() {
        const dx = this._max[0] - this._min[0];
        const dy = this._max[1] - this._min[1];
        const dz = this._max[2] - this._min[2];
        return 2 * (dx * dy + dx * dz + dy * dz);
    }
    rotate(rotation) {
        const sizeX = this._max[0] - this._min[0];
        const sizeY = this._max[1] - this._min[1];
        const sizeZ = this._max[2] - this._min[2];
        const min = (0, _glMatrix.vec3).fromValues(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        const max = (0, _glMatrix.vec3).fromValues(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
        const position = (0, _glMatrix.vec3).create();
        const vertices = (0, _cubeJs.Cube).POSITIONS;
        for(let i = 0; i < 8; i++){
            (0, _glMatrix.vec3).set(position, vertices[i * 3] * sizeX, vertices[i * 3 + 1] * sizeY, vertices[i * 3 + 2] * sizeZ);
            (0, _glMatrix.vec3).transformQuat(position, position, rotation);
            (0, _glMatrix.vec3).min(min, min, position);
            (0, _glMatrix.vec3).max(max, max, position);
        }
        (0, _glMatrix.vec3).copy(this._min, min);
        (0, _glMatrix.vec3).copy(this._max, max);
    }
    fromCylinder(pa, pb, radius) {
        const a = (0, _glMatrix.vec3).create();
        (0, _glMatrix.vec3).subtract(a, pb, pa);
        const aa = (0, _glMatrix.vec3).dot(a, a);
        const ex = radius * Math.sqrt(1 - a[0] * a[0] / aa);
        const ey = radius * Math.sqrt(1 - a[1] * a[1] / aa);
        const ez = radius * Math.sqrt(1 - a[2] * a[2] / aa);
        this._min[0] = Math.min(pa[0] - ex, pb[0] - ex);
        this._min[1] = Math.min(pa[1] - ey, pb[1] - ey);
        this._min[2] = Math.min(pa[2] - ez, pb[2] - ez);
        this._max[0] = Math.max(pa[0] + ex, pb[0] + ex);
        this._max[1] = Math.max(pa[1] + ey, pb[1] + ey);
        this._max[2] = Math.max(pa[2] + ez, pb[2] + ez);
    }
}

},{"gl-matrix":"3mrln","../../meshes/cube.js":"dgOpu","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kU48f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MaterialType", ()=>MaterialType);
parcelHelpers.export(exports, "MaterialBufferData", ()=>MaterialBufferData);
parcelHelpers.export(exports, "Material", ()=>Material);
parcelHelpers.export(exports, "LambertianMaterial", ()=>LambertianMaterial);
parcelHelpers.export(exports, "MetalMaterial", ()=>MetalMaterial);
parcelHelpers.export(exports, "DielectricMaterial", ()=>DielectricMaterial);
parcelHelpers.export(exports, "DiffuseLightMaterial", ()=>DiffuseLightMaterial);
parcelHelpers.export(exports, "GlossyMaterial", ()=>GlossyMaterial);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
const MaterialType = {
    lambertian: 0,
    metal: 1,
    dielectric: 2,
    glossy: 3,
    diffuseLight: 4
};
class MaterialBufferData extends Float32Array {
    constructor(count){
        super(count * MaterialBufferData.SIZE);
        this.TYPE_OFFSET = 0;
        this.FUZZ_OFFSET = 1;
        this.REFRACTIVE_INDEX_OFFSET = 2;
        this.TEXTURE_ID_OFFSET = 3;
        this.COLOR_OFFSET = 4;
        this.GLOSSINESS_OFFSET = 7;
    }
    getType(index) {
        return this[MaterialBufferData.SIZE * index + this.TYPE_OFFSET];
    }
    setType(index, value) {
        this[MaterialBufferData.SIZE * index + this.TYPE_OFFSET] = value;
    }
    getFuzz(index) {
        return this[MaterialBufferData.SIZE * index + this.FUZZ_OFFSET];
    }
    setFuzz(index, value) {
        this[MaterialBufferData.SIZE * index + this.FUZZ_OFFSET] = value;
    }
    getRefractiveIndex(index) {
        return this[MaterialBufferData.SIZE * index + this.REFRACTIVE_INDEX_OFFSET];
    }
    setRefractiveIndex(index, value) {
        this[MaterialBufferData.SIZE * index + this.REFRACTIVE_INDEX_OFFSET] = value;
    }
    getTextureId(index) {
        return this[MaterialBufferData.SIZE * index + this.TEXTURE_ID_OFFSET];
    }
    setTextureId(index, value) {
        this[MaterialBufferData.SIZE * index + this.TEXTURE_ID_OFFSET] = value;
    }
    getColor(index, value) {
        const offset = MaterialBufferData.SIZE * index + this.COLOR_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setColor(index, value) {
        const offset = MaterialBufferData.SIZE * index + this.COLOR_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getGlossiness(index) {
        return this[MaterialBufferData.SIZE * index + this.GLOSSINESS_OFFSET];
    }
    setGlossiness(index, value) {
        this[MaterialBufferData.SIZE * index + this.GLOSSINESS_OFFSET] = value;
    }
}
MaterialBufferData.SIZE = 8;
class Material {
    constructor(options){}
    get texture() {
        return this._texture;
    }
    toBuffer(buffer, index, textureId) {}
}
class LambertianMaterial extends Material {
    constructor(options){
        super(options);
        this._texture = options.texture;
    }
    toBuffer(buffer, index, textureId) {
        buffer.setType(index, MaterialType.lambertian);
        buffer.setTextureId(index, textureId);
    }
}
class MetalMaterial extends Material {
    constructor(options){
        super(options);
        this.fuzz = options.fuzz;
        this._texture = options.texture;
    }
    toBuffer(buffer, index, textureId) {
        buffer.setType(index, MaterialType.metal);
        buffer.setFuzz(index, this.fuzz);
        buffer.setTextureId(index, textureId);
    }
}
class DielectricMaterial extends Material {
    constructor(options){
        super(options);
        this.refractiveIndex = options.refractiveIndex;
        this.color = options.color;
    }
    toBuffer(buffer, index, textureId) {
        buffer.setType(index, MaterialType.dielectric);
        buffer.setRefractiveIndex(index, this.refractiveIndex);
        buffer.setColor(index, this.color);
    }
}
class DiffuseLightMaterial extends Material {
    constructor(options){
        super(options);
        this.color = options.color;
    }
    toBuffer(buffer, index, textureId) {
        buffer.setType(index, MaterialType.diffuseLight);
        buffer.setColor(index, this.color);
    }
}
class GlossyMaterial extends Material {
    constructor(options){
        super(options);
        this._texture = options.texture;
        this.fuzz = options.fuzz;
        this.refractiveIndex = options.refractiveIndex || 1.5;
        this.glossiness = options.glossiness || 1;
    }
    toBuffer(buffer, index, textureId) {
        buffer.setType(index, MaterialType.glossy);
        buffer.setFuzz(index, this.fuzz);
        buffer.setGlossiness(index, this.glossiness);
        buffer.setRefractiveIndex(index, this.refractiveIndex);
        buffer.setTextureId(index, textureId);
    }
}

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"OOqNf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ComputeShaderWgsl", ()=>ComputeShaderWgsl);
parcelHelpers.export(exports, "ComputeUniformBufferData", ()=>ComputeUniformBufferData);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
const ComputeShaderWgsl = `
const PI = 3.1415926535897932385f;
const TWO_PI = 6.2831853071795864769f;
const ROOT_THREE_OVER_TWO = 0.86602540378443864676;

struct ColorBuffer {
    values: array<f32>,
}

struct Ray {
    origin: vec3<f32>,
    direction: vec3<f32>,
}

struct HitRecord {
    position: vec3<f32>,
    normal: vec3<f32>,
    t: f32,
    frontFace: bool,
    material: Material,
    uv: vec2<f32>,
}

struct Camera {
    origin: vec3<f32>,
    lowerLeftCorner: vec3<f32>,
    horizontal: vec3<f32>,
    vertical: vec3<f32>,
    lookAt: vec3<f32>,
    u: vec3<f32>,
    v: vec3<f32>,
    w: vec3<f32>,
    aspectRatio: f32,
    focusDistance: f32,
    viewportWidth: f32,
    viewportHeight: f32,
    fov: f32,
    aperture: f32,
}

                            //         offest   align    size
struct Uniforms {           // ------------------------------
    position: vec3<f32>,    //              0      16      12
    width: f32,             //             12       4       4
    right: vec3<f32>,       //             16      16      12
    height: f32,            //             28       4       4
    up: vec3<f32>,          //             32      16      12
    seed: f32,              //             44       4       4
    forward: vec3<f32>,     //             48      16      12
    fov: f32,               //             60       4       4
    lookAt: vec3<f32>,      //             64      16      12
    aperture: f32,          //             76       4       4
                            // ------------------------------
                            //                     16      80
}

// id   type
// ----------------
// 0    none
// 1    solidColor
// 2    image
// 3    sdfText
// 4    checker
// 5    grid
                            //         offest   align    size   stride
struct Texture {            // ---------------------------------------
    color0: vec3<f32>,      //              0      16      12
    typeId: f32,            //             12       4       4
    color1: vec3<f32>,      //             16      12      12
                            // padding     28      12      12
    size0: vec4<f32>,       //             32      16      16
    size1: vec4<f32>,       //             48      16      16
    offset: vec2<f32>,      //             64       8       8
}                           // ---------------------------------------
                            //                     16      72       80

// id   type
// ---------------
// 0    lambertian
// 1    metal
// 2    dielectric
// 3    diffuse light
                            //         offest   align    size   stride
struct Material {           // ---------------------------------------
    typeId: f32,            //              0       4       4
    fuzz: f32,              //              4       4       4
    refractiveIndex: f32,   //              8       4       4
    textureId: f32,         //             12       4       4
    color: vec3<f32>,       //             16      16      12
    glossiness: f32,        //             28       4       4
                            // ---------------------------------------
}                           //                     16      32       32

// id   type
// ----------------
// 0    distant
// 1    sphere
// 2    rect
// 3    disc
// 4    cylinder
// 5    dome
                            //         offest   align    size   stride
struct Light {              // ---------------------------------------
    rotation: vec4<f32>,    //              0      16      16
    center: vec3<f32>,      //             16      16      12
    typeId: f32,            //             28       4       4
    size: vec3<f32>,        //             32      16      12
                            // padding     44       4       4
    color: vec3<f32>,       //             48      16      12
}                           // ---------------------------------------
                            //                     16      60       64

// id   type
// ----------------
//  0   sphere
//  1   box
//  2   cylinder
//  3   hexPrism
//  4   rotatedBox
//  5   xyRect
//  6   xzRect
//  7   yzRect
//  8   rotatedXyRect
//  9   fontXyRect
// 10   rotatedFontXyRect
// 11   boxSdf
// 12   cylinderSdf
// 13   hexPrismSdf
                            //         offest   align    size   stride
struct Hittable {           // ---------------------------------------
    center: vec3<f32>,      //              0      16      12
    typeId: f32,            //             12       4       4
    size: vec3<f32>,        //             16      16      12
    materialId: f32,        //             28       4       4
    rotation: vec4<f32>,    //             32      16      16
    texCoord0: vec2<f32>,   //             48       8       8
    texCoord1: vec2<f32>,   //             56       8       8
    radius: f32,            //             64       4       4
}                           // ---------------------------------------
                            //                     16      68       80

                            //         offest   align    size   stride
struct LinearBVHNode {      // ---------------------------------------
    center: vec3<f32>,      //              0      16      12
    primitivesOffset: f32,  //             12       4       4
    size: vec3<f32>,        //             16      16      12
    secondChildOffset: f32, //             28       4       4
    nPrimitives: f32,       //             32       4       4
    axis: f32,              //             36       4       4
}                           // ---------------------------------------
                            //                     16      40       48

struct HittableBuffer {
    hittables: array<Hittable>,
}

struct MaterialBuffer {
    materials: array<Material>,
}

struct TextureBuffer {
    textures: array<Texture>,
}

struct LightBuffer {
    lights: array<Light>,
}

struct LinearBVHNodeBuffer {
    nodes: array<LinearBVHNode>,
}

// Schlick's approximation for reflectance
fn reflectance(cos: f32, refractiveIndex: f32) -> f32 {
    var r = (1f - refractiveIndex) / (1f + refractiveIndex);
    r = r * r;
    return r + (1f - r) * pow(1f - cos, 5f);
}

fn refraction(uv: vec3<f32>, n: vec3<f32>, etaiOverEtat: f32) -> vec3<f32> {
    let cosTheta = min(dot(-uv, n), 1f);
    let rOutPerp =  etaiOverEtat * (uv + cosTheta * n);
    let rOutParallel = -sqrt(abs(1f - dot(rOutPerp, rOutPerp))) * n;
    return rOutPerp + rOutParallel;
}

fn getCameraRay(camera: Camera, seed: ptr<function, u32>, texCoord: vec2<f32>) -> Ray {
    // Depth of field
    let rd = camera.aperture * randomInUnitDisk(seed);
    let offset = camera.u * rd.x + camera.v * rd.y;

    var ray: Ray;
    ray.origin = camera.origin + offset;
    ray.direction = normalize(camera.lowerLeftCorner + texCoord.x * camera.horizontal - texCoord.y * camera.vertical - camera.origin - offset);
    return ray;
}

fn degreesToRadians(degrees: f32) -> f32 {
    return degrees * PI / 180f;
}

// See https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
fn random(seed: ptr<function, u32>) -> f32 {
    var random = ((*seed >> ((*seed >> 28u) + 4u)) ^ *seed) * 277803737u;
    random = (random >> 22u) ^ random;
    *seed = *seed * 747796405u + 2891336453u;
    return f32(random) / 4294967295f; // [0,1]
}

// Don't use the rejection method to avoid infinite loops at texCoord(0,0)
fn randomInUnitDisk(seed: ptr<function, u32>) -> vec3<f32> {
    let t = TWO_PI * random(seed);
    let u = random(seed) + random(seed);
    let r = select(u, 1f - u, u > 1f);
    return vec3<f32>(r * cos(t), r * sin(t), 0f);
}
fn randomInUnitDisk2(seed: ptr<function, u32>) -> vec3<f32> {
    let t = TWO_PI * random(seed);
    let r = sqrt(random(seed));
    return vec3<f32>(r * cos(t), r * sin(t), 0f);
}

fn randomInUnitSphere(seed: ptr<function, u32>) -> vec3<f32> {
    var p: vec3<f32>;
    // A loop statement with texCoord(0,0) would create an infinate loop, since the length squared would never be below 1
    // Removing the loop results in a distribution weighted towards the corners of a unit cube
    // 1^3 - 4/3 * Pi * 0.5^3 = 48% of points would be rejected
    // loop {
        p = 2f * vec3<f32>(random(seed), random(seed), random(seed)) - vec3<f32>(1f, 1f, 1f);
        // if (dot(p, p) <= 1f) { break; }
    // }
    return p;
}

fn randomUnitVector(seed: ptr<function, u32>) -> vec3<f32> {
    return normalize(randomInUnitSphere(seed));
}
// Use an equal-area projection onto a rectangle, e.g. axial projection, then pick a random point in the rectangle and project to the sphere surface
fn randomUnitVector2(seed: ptr<function, u32>) -> vec3<f32> {
    let z = 2f * random(seed) - 1f; // [-1,1]
    let a = TWO_PI * random(seed); // [0,2Pi]
    let r = sqrt(1f - z * z);
    let x = r * cos(a);
    let y = r * sin(a);
    return vec3<f32>(x, y, z);
}

fn rayAt(ray: Ray, t: f32) -> vec3<f32> {
    return ray.origin + ray.direction * t;
}

fn setFaceNormal(ray: Ray, outwardNormal: vec3<f32>, hitRecord: ptr<function, HitRecord>) {
    (*hitRecord).frontFace = dot(ray.direction, outwardNormal) < 0f;
    (*hitRecord).normal = select(-outwardNormal, outwardNormal, (*hitRecord).frontFace);
}

fn hitWorld(ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    var hitAnything = false;
    var closestSoFar = tMax;
    let invDir = vec3<f32>(1f, 1f, 1f) / ray.direction;
    var tempHitRecord: HitRecord;
    var hit: bool;
    for (var i: u32 = 0u; i < arrayLength(&hittableBuffer.hittables); i = i + 1u) {
        let hittable = hittableBuffer.hittables[i];
        switch u32(hittable.typeId) {
            default: {
                hit = hitSphere(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 1u: {
                hit = hitBox(hittable, ray, invDir, tMin, closestSoFar, &tempHitRecord);
            }
            case 2u: {
                hit = hitCylinder(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 3u: {
                hit = hitHexPrism(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 4u: {
                hit = hitRotatedBox(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 5u: {
                hit = hitXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 6u: {
                hit = hitXzRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 7u: {
                hit = hitYzRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 8u: {
                hit = hitRotatedXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 9u: {
                hit = hitFontXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 10u: {
                hit = hitRotatedFontXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 11u: {
                hit = hitBoxSdf(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 12u: {
                hit = hitCylinderSdf(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
            case 13u: {
                hit = hitHexPrismSdf(hittable, ray, tMin, closestSoFar, &tempHitRecord);
            }
        }
        if (hit) {
            hitAnything = true;
            closestSoFar = tempHitRecord.t;
            tempHitRecord.material = materialBuffer.materials[u32(hittable.materialId)];
            *hitRecord = tempHitRecord;
        }
    }
    return hitAnything;
}

fn hitBVH(ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    var hitAnything = false;
    var closestSoFar = tMax;
    let invDir = vec3<f32>(1f, 1f, 1f) / ray.direction;
    var tempHitRecord: HitRecord;
    var materialId: f32;
    var hit: bool;
    var toVisitOffset = 0u;
    var currentNodeIndex = 0u;
    var nodesToVisit: array<u32, 64>;
    loop {
        let node = linearBVHNodeBuffer.nodes[currentNodeIndex];
        // Check ray against BVH node
        if (intersectBox(node.center, node.size, ray, invDir, tMin, closestSoFar)) {
            let nPrimitives = u32(node.nPrimitives);
            if (nPrimitives > 0u) {
                let primitiveOffset = u32(node.primitivesOffset);
                for (var i: u32 = 0u; i < nPrimitives; i = i + 1u) {
                    let hittable = hittableBuffer.hittables[primitiveOffset + i];
                    switch u32(hittable.typeId) {
                        default: {
                            hit = hitSphere(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 1u: {
                            hit = hitBox(hittable, ray, invDir, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 2u: {
                            hit = hitCylinder(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 3u: {
                            hit = hitHexPrism(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 4u: {
                            hit = hitRotatedBox(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 5u: {
                            hit = hitXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 6u: {
                            hit = hitXzRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 7u: {
                            hit = hitYzRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 8u: {
                            hit = hitRotatedXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 9u: {
                            hit = hitFontXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 10u: {
                            hit = hitRotatedFontXyRect(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 11u: {
                            hit = hitBoxSdf(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 12u: {
                            hit = hitCylinderSdf(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                        case 13u: {
                            hit = hitHexPrismSdf(hittable, ray, tMin, closestSoFar, &tempHitRecord);
                        }
                    }
                    if (hit) {
                        hitAnything = true;
                        closestSoFar = tempHitRecord.t;
                        materialId = hittable.materialId;
                    }
                }
                if (toVisitOffset == 0u) { break; }
                toVisitOffset = toVisitOffset - 1u;
                currentNodeIndex = nodesToVisit[toVisitOffset];
            }
            else {
                // Put far BVH node on nodesToVisit stack, advance to near node
                if (ray.direction[u32(node.axis)] < 0f) {
                   nodesToVisit[toVisitOffset] = currentNodeIndex + 1u;
                   currentNodeIndex = u32(node.secondChildOffset);
                } else {
                   nodesToVisit[toVisitOffset] = u32(node.secondChildOffset);
                   currentNodeIndex = currentNodeIndex + 1u;
                }
                toVisitOffset = toVisitOffset + 1u;
            }
        }
        else {
            if (toVisitOffset == 0u) { break; }
            toVisitOffset = toVisitOffset - 1u;
            currentNodeIndex = nodesToVisit[toVisitOffset];
        }
    }

    if (hitAnything) {
        tempHitRecord.material = materialBuffer.materials[u32(materialId)];
        *hitRecord = tempHitRecord;
        return true;
    };

    return false;
}

fn intersectBox(center: vec3<f32>, size: vec3<f32>, ray: Ray, invDir: vec3<f32>, tMin: f32, tMax: f32) -> bool {
    let oc = ray.origin - center;
    let n = invDir * oc;
    let k = abs(invDir) * size; // Box size is from center to edge
    let t0 = -n - k;
    let t1 = -n + k;
    let tNear = max(max(t0.x, t0.y), t0.z);
    let tFar = min(min(t1.x, t1.y), t1.z);
    if (tNear > tFar) { return false; }
    return tNear < tMax && tFar > 0f; // Must return true when inside box, even if closestSoFar is closer than far box intersection
}

fn hitSphere(sphere: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let radius = sphere.size.x;
    let oc = ray.origin - sphere.center;
    let b = dot(oc, ray.direction);
    let c = dot(oc, oc) - radius * radius;
    var h = b * b - c;
    if (h < 0f) { return false; }
    h = sqrt(h);

    // Find the nearest root in range
    var root = -b - h;
    if (root < tMin || root > tMax) {
        root = -b + h;
        if (root < tMin || root > tMax) { return false; }
    }
    
    (*hitRecord).t = root;
    (*hitRecord).position = rayAt(ray, root);
    let outwardNormal = ((*hitRecord).position - sphere.center) / radius;
    setFaceNormal(ray, outwardNormal, hitRecord);

    // TODO: Could move to hittable.sphereUV if expensive
    // UV
    let phi = atan2(outwardNormal.x, outwardNormal.z); // [-pi,pi]
    let theta = asin(outwardNormal.y); // [-pi/2, pi/2]
    (*hitRecord).uv = vec2<f32>(phi / TWO_PI + 0.5f, theta / PI + 0.5f); // [0,1]
    return true;
}

fn hitBox(box: Hittable, ray: Ray, invDir: vec3<f32>, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let oc = ray.origin - box.center;
    let n = invDir * oc;
    let k = abs(invDir) * box.size; // Box size is from center to edge
    let t1 = -n - k;
    let t2 = -n + k;
    let tNear = max(max(t1.x, t1.y), t1.z);
    let tFar = min(min(t2.x, t2.y), t2.z);
    // if (tFar <= tNear) { return false; }
    if (tNear > tFar || tFar < 0f) { return false; }
    
    // Find nearest root in range
    var outwardNormal: vec3<f32>;
    var root = tNear;
    if (root < tMin || root > tMax) {
        root = tFar;
        if (root < tMin || root > tMax) { return false; }
        outwardNormal = sign(ray.direction) * step(t2.xyz, t2.yzx) * step(t2.xyz, t2.zxy);
    }
    else {
        outwardNormal = -sign(ray.direction) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz);
    }
    
    (*hitRecord).t = root;
    (*hitRecord).position = rayAt(ray, root);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

fn hitRotatedBox(rotatedBox: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let center = rotatedBox.center;
    let rotation = rotatedBox.rotation;
    let invRotation = conjugate(rotation);
    var rotatedRay: Ray;
    rotatedRay.origin = rotateQuat(ray.origin - center, invRotation) + center;
    rotatedRay.direction = rotateQuat(ray.direction, invRotation);
    let rotatedInvDir = vec3<f32>(1f, 1f, 1f) / rotatedRay.direction;
    let hit = hitBox(rotatedBox, rotatedRay, rotatedInvDir, tMin, tMax, hitRecord);
    if (hit) {
        (*hitRecord).position = rotateQuat((*hitRecord).position - center, rotation) + center;
        (*hitRecord).normal = rotateQuat((*hitRecord).normal, rotation);
        return true;
    }
    return false;
}

fn hitXyRect(xyRect: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let oc = ray.origin - xyRect.center;

    // Distance to plane, t
    let t = -oc.z / ray.direction.z;

    // If direction == 0, t = +/- infinity, which always returns false
    if (t < tMin || t > tMax) { return false; }

    // Intersection point in model space
    let p = oc + t * ray.direction;

    // Bounds
    if (abs(p.x) > xyRect.size.x || abs(p.y) > xyRect.size.y) { return false; }

    // Texture coords
    var uv = vec2<f32>(0.5 * p.xy / xyRect.size.xy + vec2<f32>(0.5f, 0.5f));
    uv = xyRect.texCoord0 + uv * (xyRect.texCoord1 - xyRect.texCoord0);

    (*hitRecord).uv = uv;
    (*hitRecord).t = t;
    (*hitRecord).position = rayAt(ray, t);
    let outwardNormal = vec3<f32>(0f, 0f, 1f);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

fn hitRotatedXyRect(rotatedXyRect: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let center = rotatedXyRect.center;
    let rotation = rotatedXyRect.rotation;
    let invRotation = conjugate(rotation);
    var rotatedRay: Ray;
    rotatedRay.origin = rotateQuat(ray.origin - center, invRotation) + center;
    rotatedRay.direction = rotateQuat(ray.direction, invRotation);
    let hit = hitXyRect(rotatedXyRect, rotatedRay, tMin, tMax, hitRecord);
    if (hit) {
        (*hitRecord).position = rotateQuat((*hitRecord).position - center, rotation) + center;
        (*hitRecord).normal = rotateQuat((*hitRecord).normal, rotation);
        return true;
    }
    return false;
}

fn hitXzRect(xzRect: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let oc = ray.origin - xzRect.center;

    // Distance to plane, t
    let t = -oc.y / ray.direction.y;

    // If direction == 0, t = +/- infinity, which always returns false
    if (t < tMin || t > tMax) { return false; }

    // Intersection point in model space
    let p = oc + t * ray.direction;

    // Bounds
    if (abs(p.x) > xzRect.size.x || abs(p.z) > xzRect.size.z) { return false; }

    // Texture coords
    var uv = vec2<f32>(0.5 * p.xz / xzRect.size.xz + vec2<f32>(0.5f, 0.5f));
    uv = xzRect.texCoord0 + uv * (xzRect.texCoord1 - xzRect.texCoord0);

    (*hitRecord).uv = uv;
    (*hitRecord).t = t;
    (*hitRecord).position = rayAt(ray, t);
    let outwardNormal = vec3<f32>(0f, 1f, 0f);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

fn hitYzRect(yzRect: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let oc = ray.origin - yzRect.center;

    // Distance to plane, t
    let t = -oc.x / ray.direction.x;

    // If direction == 0, t = +/- infinity, which always returns false
    if (t < tMin || t > tMax) { return false; }

    // Intersection point in model space
    let p = oc + t * ray.direction;

    // Bounds
    if (abs(p.y) > yzRect.size.y || abs(p.z) > yzRect.size.z) { return false; }

    // Texture coords
    var uv = vec2<f32>(0.5 * p.yz / yzRect.size.yz + vec2<f32>(0.5f, 0.5f));
    uv = yzRect.texCoord0 + uv * (yzRect.texCoord1 - yzRect.texCoord0);

    (*hitRecord).uv = uv;
    (*hitRecord).t = t;
    (*hitRecord).position = rayAt(ray, t);
    let outwardNormal = vec3<f32>(1f, 0f, 0f);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

// TODO: Share hit function with XyRect
fn hitFontXyRect(xyRect: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let oc = ray.origin - xyRect.center;

    // Distance to plane, t
    let t = -oc.z / ray.direction.z;

    // If direction == 0, t = +/- infinity, which always returns false
    if (t < tMin || t > tMax) { return false; }

    // Intersection point in model space
    let p = oc + t * ray.direction;

    // Bounds
    if (abs(p.x) > xyRect.size.x || abs(p.y) > xyRect.size.y) { return false; }

    // Texture coords
    var uv = vec2<f32>(0.5 * p.xy / xyRect.size.xy + vec2<f32>(0.5f, 0.5f));
    uv = xyRect.texCoord0 + uv * (xyRect.texCoord1 - xyRect.texCoord0);

    // Sample sdf
    let buffer = 0xc0.f / 0xff.f; // TODO: Move to constant
    let r = textureSampleLevel(fontTexture, linearSampler, uv, 0f).r;
    if (r < buffer) { return false; }

    (*hitRecord).uv = uv;
    (*hitRecord).t = t;
    (*hitRecord).position = rayAt(ray, t);
    let outwardNormal = vec3<f32>(0f, 0f, 1f);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

fn hitRotatedFontXyRect(rotatedXyRect: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let center = rotatedXyRect.center;
    let rotation = rotatedXyRect.rotation;
    let invRotation = conjugate(rotation);
    var rotatedRay: Ray;
    rotatedRay.origin = rotateQuat(ray.origin - center, invRotation) + center;
    rotatedRay.direction = rotateQuat(ray.direction, invRotation);
    let hit = hitFontXyRect(rotatedXyRect, rotatedRay, tMin, tMax, hitRecord);
    if (hit) {
        (*hitRecord).position = rotateQuat((*hitRecord).position - center, rotation) + center;
        (*hitRecord).normal = rotateQuat((*hitRecord).normal, rotation);
        return true;
    }
    return false;
}

fn rotateQuat(v: vec3<f32>, q: vec4<f32>) -> vec3<f32> {
	return v + 2f * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

fn conjugate(q: vec4<f32>) -> vec4<f32> {
    return vec4<f32>(-q.x, -q.y, -q.z, q.w);
}

fn hitCylinder(cylinder: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let ra = cylinder.size.x; // Radius
    let ca = rotateQuat(vec3<f32>(0f, 1f, 0f), cylinder.rotation);
    let oc = ray.origin - cylinder.center;
    let card = dot(ca, ray.direction);
    let caoc = dot(ca, oc);
    let a = 1f - card * card; 
    let b = dot(oc, ray.direction) - caoc * card;
    let c = dot(oc, oc) - caoc * caoc - ra * ra;
    var h = b * b - a * c;
    if (h < 0f) { return false; }
    h = sqrt(h);
    let br0 = (-b - h) / a;
    let br1 = (-b + h) / a;

    // Body
    let ch = cylinder.size.y; // Half-height
    let y0 = caoc + br0 * card;
    let y1 = caoc + br1 * card;
    let bt0 = select(10000000f, br0, abs(y0) < ch);
    let bt1 = select(-10000000f, br1, abs(y1) < ch);

    // Caps
    let sy0 = sign(y0);
    let sy1 = sign(y1);
    let cr0 = (sy0 * ch - caoc) / card;
    let cr1 = (sy1 * ch - caoc) / card;
    let ct0 = select(10000000f, cr0, abs(b + a * cr0) < h);
    let ct1 = select(-10000000f, cr1, abs(b + a * cr1) < h);
    
    // Find the nearest root in range
    let tN = min(bt0, ct0);
    let tF = max(bt1, ct1);
    var root = tN;
    if (root < tMin || root > tMax) {
        root = tF;
        if (root < tMin || root > tMax) { return false; }
    }

    // Normal
    var outwardNormal: vec3<f32>;
    if (root == bt0 || root == bt1) {
        let y = select(y1, y0, root == bt0);
        outwardNormal = (oc + root * ray.direction - ca * y) / ra;
    }
    else {
        let sy = select(sy1, sy0, root == ct0);
        outwardNormal = ca * sy;
    }
    
    (*hitRecord).t = root;
    (*hitRecord).position = rayAt(ray, root);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

fn hitHexPrism(hexPrism: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    let oc = ray.origin - hexPrism.center;
    let ra = hexPrism.size.x; // Distance from center to edge
    let he = hexPrism.size.y; // Half-height
    let rd = ray.direction;

    // Normals
    let n1 = vec3<f32>(1f, 0f, 0f);
    let n2 = vec3<f32>(0.5f, 0f, ROOT_THREE_OVER_TWO);
    let n3 = vec3<f32>(-0.5f, 0f, ROOT_THREE_OVER_TWO);
    let n4 = vec3<f32>(0f, 1f, 0f);

    // Slabs intersections
    var t1 = vec3<f32>((vec2<f32>(ra, -ra) - dot(oc, n1)) / dot(rd, n1), 1f);
    var t2 = vec3<f32>((vec2<f32>(ra, -ra) - dot(oc, n2)) / dot(rd, n2), 1f);
    var t3 = vec3<f32>((vec2<f32>(ra, -ra) - dot(oc, n3)) / dot(rd, n3), 1f);
    var t4 = vec3<f32>((vec2<f32>(he, -he) - dot(oc, n4)) / dot(rd, n4), 1f);

    // Inetsection selection
    if (t1.y < t1.x) { t1 = vec3<f32>(t1.yx, -1f); }
    if (t2.y < t2.x) { t2 = vec3<f32>(t2.yx, -1f); }
    if (t3.y < t3.x) { t3 = vec3<f32>(t3.yx, -1f); }
    if (t4.y < t4.x) { t4 = vec3<f32>(t4.yx, -1f); }

    var tN = vec4<f32>(t1.x, t1.z * n1);
    if (t2.x > tN.x) { tN = vec4<f32>(t2.x, t2.z * n2); }
    if (t3.x > tN.x) { tN = vec4<f32>(t3.x, t3.z * n3); }
    if (t4.x > tN.x) { tN = vec4<f32>(t4.x, t4.z * n4); }

    let tF = min(min(t1.y,t2.y),min(t3.y,t4.y));

    if (tN.x > tF || tF < 0f) { return false; }

    // Find the nearest root in range
    var outwardNormal: vec3<f32>;
    var root = tN.x;
    if (root < tMin || root > tMax) {
        root = tF;
        if (root < tMin || root > tMax) { return false; }

        // Normal
        if (root == t1.y) { outwardNormal = -t1.z * n1; }
        else if (root == t2.y) { outwardNormal = -t2.z * n2; }
        else if (root == t3.y) { outwardNormal = -t3.z * n3; }
        else if (root == t4.y) { outwardNormal = -t4.z * n4; }
    }
    else {
        outwardNormal = tN.yzw;
    }

    (*hitRecord).t = root;
    (*hitRecord).position = rayAt(ray, root);
    setFaceNormal(ray, outwardNormal, hitRecord);
    return true;
}

fn mapBoxSdf(p: vec3<f32>, b: vec3<f32>, r: f32) -> f32 {
    let q = abs(p) - b;
    return length(max(q, vec3<f32>(0f, 0f, 0f))) + min(max(q.x, max(q.y, q.z)), 0f) - r;
}

fn mapCylinderSdf(p: vec3<f32>, h: f32, r0: f32, r1: f32) -> f32 {
    let d = abs(vec2<f32>(length(p.xz), p.y)) - vec2<f32>(h, r0);
    return min(max(d.x, d.y), 0f) + length(max(d, vec2<f32>(0f, 0f))) - r1;
}

fn mapHexPrismSdf(p: vec3<f32>, hx: f32, hy: f32, r: f32) -> f32 {
    let k = vec3<f32>(-0.8660254, 0.5, 0.57735); // (-sqrt(3)/2 or sin(60), 0.5, sqrt(3)/3 or tan(30))
    var p0 = abs(p.zxy);
    let p1 = p0.xy - 2f * min(dot(k.xy, p0.xy), 0f) * k.xy;
    let d = vec2<f32>(length(p1.xy - vec2(clamp(p1.x, -k.z * hx, k.z * hx), hx)) * sign(p1.y - hx), p0.z - hy);
    return min(max(d.x, d.y), 0f) + length(max(d, vec2<f32>(0f, 0f)));
}

fn hitBoxSdf(boxSdf: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    var t = tMin;
    let r = boxSdf.radius;
    let size = boxSdf.size - r;
    for (var i: u32 = 0u; i < 128u; i = i + 1u) {
        let position = rayAt(ray, t);
        let oc = position - boxSdf.center;
        let distance = abs(mapBoxSdf(oc, size, r));
        t = t + distance;
        if (t > tMax) { return false; }
        if (distance < 0.00001) {
            (*hitRecord).t = t;
            (*hitRecord).position = rayAt(ray, t);

            // Normal
            let h = 0.00001f; // replace by an appropriate value
            let k = vec2<f32>(1f, -1f);
            let outwardNormal =  normalize(
                k.xyy * mapBoxSdf(oc + k.xyy * h, size, r) + 
                k.yyx * mapBoxSdf(oc + k.yyx * h, size, r) + 
                k.yxy * mapBoxSdf(oc + k.yxy * h, size, r) + 
                k.xxx * mapBoxSdf(oc + k.xxx * h, size, r));
            setFaceNormal(ray, outwardNormal, hitRecord);
            return true;
        }
    }
    return false;
}

fn hitCylinderSdf(cylinderSdf: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    var t = tMin;
    let r1 = cylinderSdf.radius;
    let h0 = cylinderSdf.size.x - r1;
    let r0 = cylinderSdf.size.y - r1;
    for (var i: u32 = 0u; i < 128u; i = i + 1u) {
        let position = rayAt(ray, t);
        let oc = position - cylinderSdf.center;
        let distance = abs(mapCylinderSdf(oc, h0, r0, r1));
        t = t + distance;
        if (t > tMax) { return false; }
        if (distance < 0.00001) {
            (*hitRecord).t = t;
            (*hitRecord).position = rayAt(ray, t);

            // Normal
            let h = 0.00001f; // replace by an appropriate value
            let k = vec2<f32>(1f, -1f);
            let outwardNormal =  normalize(
                k.xyy * mapCylinderSdf(oc + k.xyy * h, h0, r0, r1) + 
                k.yyx * mapCylinderSdf(oc + k.yyx * h, h0, r0, r1) + 
                k.yxy * mapCylinderSdf(oc + k.yxy * h, h0, r0, r1) + 
                k.xxx * mapCylinderSdf(oc + k.xxx * h, h0, r0, r1));
            setFaceNormal(ray, outwardNormal, hitRecord);
            return true;
        }
    }
    return false;
}

fn hitHexPrismSdf(hexPrismSdf: Hittable, ray: Ray, tMin: f32, tMax: f32, hitRecord: ptr<function, HitRecord>) -> bool {
    var t = tMin;
    let r = hexPrismSdf.radius;
    let hx = hexPrismSdf.size.x - r;
    let hy = hexPrismSdf.size.y - r;
    for (var i: u32 = 0u; i < 128u; i = i + 1u) {
        let position = rayAt(ray, t);
        let oc = position - hexPrismSdf.center;
        let distance = abs(mapHexPrismSdf(oc, hx, hy, r));
        t = t + distance;
        if (t > tMax) { return false; }
        if (distance < 0.00001) {
            (*hitRecord).t = t;
            (*hitRecord).position = rayAt(ray, t);

            // Normal
            let h = 0.00001f; // replace by an appropriate value
            let k = vec2<f32>(1f, -1f);
            let outwardNormal =  normalize(
                k.xyy * mapHexPrismSdf(oc + k.xyy * h, hx, hy, r) + 
                k.yyx * mapHexPrismSdf(oc + k.yyx * h, hx, hy, r) + 
                k.yxy * mapHexPrismSdf(oc + k.yxy * h, hx, hy, r) + 
                k.xxx * mapHexPrismSdf(oc + k.xxx * h, hx, hy, r));
            setFaceNormal(ray, outwardNormal, hitRecord);
            return true;
        }
    }
    return false;
}

fn hitLights(ray: Ray) -> vec3<f32> {
    var hit: bool;
    for (var i: u32 = 0u; i < arrayLength(&lightBuffer.lights); i = i + 1u) {
        let light = lightBuffer.lights[i];
        switch u32(light.typeId) {
            default: {
                hit = hitSphereLight(light, ray);
            }
            case 2u: {
                hit = hitRectLight(light, ray);
            }
        }
        if (hit) {
            return light.color;
        }
    }
    
    // Background color
    return vec3<f32>(0f, 0f, 0f);
    // return vec3<f32>(0.1f, 0.1f, 0.1f);
    // return vec3<f32>(1f, 1f, 1f);

    // TODO: Dome light
    // let t = 0.5f * (ray.direction.y + 1f);
    // let background = (1f - t) * vec3<f32>(1f, 1f, 1f) + t * vec3<f32>(0.5f, 0.7f, 1.0f);
    // return background;
}

fn hitSphereLight(sphere: Light, ray: Ray) -> bool {
    let radius = sphere.size.x;
    let oc = ray.origin - sphere.center;
    let b = dot(oc, ray.direction);
    let c = dot(oc, oc) - radius * radius;
    var h = b * b - c;
    if (h < 0f) { return false; }
    return b < 0f; // Ensure ray towards light
}

fn hitRectLight(rotatedXyRect: Light, ray: Ray) -> bool {
    let center = rotatedXyRect.center;
    let rotation = rotatedXyRect.rotation;
    let invRotation = conjugate(rotation);
    var rotatedRay: Ray;
    rotatedRay.origin = rotateQuat(ray.origin - center, invRotation) + center;
    rotatedRay.direction = rotateQuat(ray.direction, invRotation);
    let oc = rotatedRay.origin - center;
    let t = -oc.z / rotatedRay.direction.z;
    if (t < 0f) { return false; }
    let p = oc + t * rotatedRay.direction;
    if (abs(p.x) > rotatedXyRect.size.x || abs(p.y) > rotatedXyRect.size.y) { return false; }
    return true;
}

fn nearZero(v: vec3<f32>) -> bool {
    return max(max(abs(v.x), abs(v.y)), abs(v.z)) < 0.00000001f; // 1e-8
}

fn scatterLambertian(ray: ptr<function, Ray>, hitRecord: HitRecord, attenuation: ptr<function, vec3<f32>>, seed: ptr<function, u32>) -> bool {
    let scatterDirection = hitRecord.normal + randomUnitVector(seed);
    
    // Catch degenerate scatter direction
    (*ray).direction = select(normalize(scatterDirection), hitRecord.normal, nearZero(scatterDirection));
    
    (*ray).origin = hitRecord.position;
    (*attenuation) = textureValue(hitRecord);
    return true;
}

fn scatterMetal(ray: ptr<function, Ray>, hitRecord: HitRecord, attenuation: ptr<function, vec3<f32>>, seed: ptr<function, u32>) -> bool {
    (*ray).direction = reflect((*ray).direction, hitRecord.normal) + hitRecord.material.fuzz * randomInUnitSphere(seed);
    (*ray).direction = normalize((*ray).direction);
    (*ray).origin = hitRecord.position;
    (*attenuation) = textureValue(hitRecord);

    // Absorb any rays which fuzz scatters below the surface
    return dot((*ray).direction, hitRecord.normal) > 0f;
}

fn scatterGlossy(ray: ptr<function, Ray>, hitRecord: HitRecord, attenuation: ptr<function, vec3<f32>>, seed: ptr<function, u32>) -> bool {
    let refractiveIndex = hitRecord.material.refractiveIndex;
    let refractionRatio = select(refractiveIndex, 1f / refractiveIndex, hitRecord.frontFace);
    let cosTheta = min(dot(-(*ray).direction, hitRecord.normal), 1f);
    if (reflectance(cosTheta, refractionRatio) * hitRecord.material.glossiness > random(seed)) {
        // Specular
        (*ray).direction = reflect((*ray).direction, hitRecord.normal) + hitRecord.material.fuzz * randomInUnitSphere(seed);
        (*ray).direction = normalize((*ray).direction);
        (*ray).origin = hitRecord.position;
        (*attenuation) = vec3<f32>(1f, 1f, 1f);
        
        // Absorb any rays which fuzz scatters below the surface
        return dot((*ray).direction, hitRecord.normal) > 0f;
    }
    else {
        // Lambertian
        return scatterLambertian(ray, hitRecord, attenuation, seed);
    }
}

fn scatterDielectric(ray: ptr<function, Ray>, hitRecord: HitRecord, attenuation: ptr<function, vec3<f32>>, seed: ptr<function, u32>) -> bool {
    let refractiveIndex = hitRecord.material.refractiveIndex;
    let refractionRatio = select(refractiveIndex, 1f / refractiveIndex, hitRecord.frontFace);
    let cosTheta = min(dot(-(*ray).direction, hitRecord.normal), 1f);
    let sinTheta = sqrt(1f - cosTheta * cosTheta);
    let cannotRefract = refractionRatio * sinTheta > 1f;
    if (cannotRefract || reflectance(cosTheta, refractionRatio) > random(seed)) {
        (*ray).direction = reflect((*ray).direction, hitRecord.normal);
    }
    else {
        (*ray).direction = refraction((*ray).direction, hitRecord.normal, refractionRatio);
    }
    (*ray).origin = hitRecord.position;
    // (*attenuation) = vec3<f32>(1f, 1f, 1f);
    (*attenuation) = hitRecord.material.color;
    return true;
}

fn textureValue(hitRecord: HitRecord) -> vec3<f32> {
    let texture = textureBuffer.textures[u32(hitRecord.material.textureId)];
    switch u32(texture.typeId) {
        // No texture
        default: {
            return vec3<f32>();
        }
        // Solid color
        case 1u: {
            return texture.color0;

            // Debug uv
            // return vec3<f32>(hitRecord.uv, 0f);
        }
        // Image
        case 2u: {
            // Sample in linear space
            return textureSampleLevel(backgroundTexture, linearSampler, hitRecord.uv, 0f).rgb;
        }
        // Checker
        case 4u: {
            let q = trunc((hitRecord.uv + texture.offset) / texture.size0.xy);
            return select(texture.color0, texture.color1, (q.x + q.y) % 2f > 0f);
        }
        // Grid
        case 5u: {
            let uv = hitRecord.uv + texture.offset - 0.5f;
            var d = hitRecord.uv / texture.size0.xy;
            d = abs(d - round(d)) * texture.size0.xy;
            if (d.x < texture.size1.x || d.y < texture.size1.y) {
                return texture.color0;
            }
            else {
                d = hitRecord.uv / texture.size0.zw;
                d = abs(d - round(d)) * texture.size0.zw;
                if (d.x < texture.size1.z || d.y < texture.size1.w) {
                    return texture.color0;
                }
                return texture.color1;
            }
        }
    }
}

fn rayColor(ray: ptr<function, Ray>, seed: ptr<function, u32>) -> vec3<f32> {
    let maxDepth = 16u; // TODO: Pass as uniform?
    var depth = 0u;
    var color = vec3<f32>(1f, 1f, 1f);
    var attenuation = vec3<f32>(1f, 1f, 1f);
    var emitted = vec3<f32>(0f, 0f, 0f);
    var hitRecord: HitRecord;
    var scatter: bool;
    loop {
        // if (hitWorld(*ray, 0.001f, 100f, &hitRecord)) {
        if (hitBVH(*ray, 0.001f, 100f, &hitRecord)) {
            
            // Normal
            // color = hitRecord.normal * 0.5f + vec3<f32>(0.5f, 0.5f, 0.5f);
            // return color;

            // Depth
            depth = depth + 1u;
            if (depth == maxDepth) { 
                // Exceeded bounce limit, no more light is gathered
                return vec3<f32>(0f, 0f, 0f);
            }
            
            // Bounce
            switch u32(hitRecord.material.typeId) {
                default: {
                    scatter = scatterLambertian(ray, hitRecord, &attenuation, seed);
                }
                case 1u: {
                    scatter = scatterMetal(ray, hitRecord, &attenuation, seed);
                }
                case 2u: {
                    scatter = scatterDielectric(ray, hitRecord, &attenuation, seed);
                }
                case 3u: {
                    scatter = scatterGlossy(ray, hitRecord, &attenuation, seed);
                }
                case 4u: {
                    // Diffuse light
                    scatter = false;
                    emitted = hitRecord.material.color;
                }
            }

            if (scatter) {
                // Attenuate
                color = color * attenuation;
            }
            else {
                // Emit
                return color * emitted;
            }
        }
        else {
            // No hits
            if (depth > 0u) { // Hide lights, background
                return hitLights(*ray) * color;
            }
            else { return vec3<f32>(0f, 0f, 0f); }

            // Background
            // let t = 0.5f * ((*ray).direction.y + 1f);
            // let background = (1f - t) * vec3<f32>(1f, 1f, 1f) + t * vec3<f32>(0.5f, 0.7f, 1.0f);
            // return color * background;
        }
    }
}

// TODO: Try writing color directly using var outputTexture : texture_storage_2d<rgb32f,read_write>;
// textureStore(outputTexture, uv, vec3<f32>(1f, 1f, 1f));
@group(0) @binding(0) var<storage, read_write> outputColorBuffer: ColorBuffer;
@group(0) @binding(1) var<uniform> uniforms: Uniforms;
@group(0) @binding(2) var<storage, read> hittableBuffer: HittableBuffer;
@group(0) @binding(3) var<storage, read> materialBuffer: MaterialBuffer;
@group(0) @binding(4) var<storage, read> textureBuffer: TextureBuffer;
@group(0) @binding(5) var<storage, read> lightBuffer: LightBuffer;
@group(0) @binding(6) var<storage, read> linearBVHNodeBuffer: LinearBVHNodeBuffer;
@group(0) @binding(7) var linearSampler: sampler;
@group(0) @binding(8) var fontTexture: texture_2d<f32>;
@group(0) @binding(9) var backgroundTexture: texture_2d<f32>;

@compute @workgroup_size(256, 1, 1)
fn clear(@builtin(global_invocation_id) globalId : vec3<u32>) {
    let index = globalId.x * 3u;
    outputColorBuffer.values[index] = 0f;
    outputColorBuffer.values[index + 1u] = 0f;
    outputColorBuffer.values[index + 2u] = 0f;
}

@compute @workgroup_size(256, 1, 1)
fn main(
    @builtin(global_invocation_id) globalId : vec3<u32>,
    @builtin(local_invocation_id) localId : vec3<u32>,
    @builtin(num_workgroups) numWorkgroups : vec3<u32>,
    @builtin(workgroup_id) workgroupId : vec3<u32>) {
    // TODO: Use workgroup dimensions xy to get position directly froem globalId
    //       Then store using textureStore
    //       Check within bounds due to overdispatching

    let imageSize = vec2<f32>(uniforms.width, uniforms.height);
    
    // Tex coords [0,1]
    // let id = f32(globalId.x);
    // // TODO: Divide by (imageSize.x - 1)
    // let v = floor(id / imageSize.x);
    // let u = (id - v * imageSize.x);
    // let uv = vec2<f32>(u, v);
    // let texCoord = uv / imageSize;

    // Pixel coords ([0,width-1], [0,height-1])
    let id = f32(globalId.x);
    let pixelY = floor(id / imageSize.x);
    let pixelX = id - pixelY * imageSize.x;
    
    // Tex coords ([0,1], [0,1])
    let texCoord = vec2<f32>(pixelX / (imageSize.x - 1f), pixelY / (imageSize.y - 1f));
    
    // Camera
    var camera: Camera;
    camera.aperture = uniforms.aperture;
    camera.aspectRatio = uniforms.width / uniforms.height;
    camera.fov = uniforms.fov;
    camera.viewportHeight = 2f * tan(camera.fov / 2f);
    camera.viewportWidth = camera.aspectRatio * camera.viewportHeight;
    camera.origin = uniforms.position;
    camera.lookAt = uniforms.lookAt;
    camera.u = uniforms.right;
    camera.v = uniforms.up;
    camera.w = uniforms.forward;
    let focusDistance = dot(camera.w, camera.origin - camera.lookAt);
    camera.horizontal = camera.u * camera.viewportWidth * focusDistance;
    camera.vertical = camera.v * camera.viewportHeight * focusDistance;
    camera.lowerLeftCorner = camera.origin - camera.horizontal / 2f + camera.vertical / 2f - camera.w * focusDistance;

    // Random number generator
    var seed = u32(pixelY * imageSize.x + pixelX) + u32(uniforms.seed) * u32(imageSize.x * imageSize.y);

    // Sample position (sub-pixel sampling has same seed, but only sampled once per frame)
    let samplePos = vec2<f32>(texCoord) + vec2<f32>(random(&seed), random(&seed)) / imageSize;

    // Ray
    var ray = getCameraRay(camera, &seed, samplePos);
    
    // Color [0,1]
    // let color = rayColor(&ray, &seed);
    // let color = clamp(rayColor(&ray, &seed), vec3<f32>(0f, 0f, 0f), vec3<f32>(1f, 1f, 1f));
    let color = clamp(rayColor(&ray, &seed), vec3<f32>(0f, 0f, 0f), vec3<f32>(10f, 10f, 10f)); // Max light
    let index = globalId.x * 3u;
    outputColorBuffer.values[index + 0u] = outputColorBuffer.values[index + 0u] + color.x;
    outputColorBuffer.values[index + 1u] = outputColorBuffer.values[index + 1u] + color.y;
    outputColorBuffer.values[index + 2u] = outputColorBuffer.values[index + 2u] + color.z;
}`;
class ComputeUniformBufferData extends Float32Array {
    constructor(){
        super(ComputeUniformBufferData.SIZE);
        this.POSITION_OFFSET = 0;
        this.WIDTH_OFFSET = 3;
        this.RIGHT_OFFSET = 4;
        this.HEIGHT_OFFSET = 7;
        this.UP_OFFSET = 8;
        this.SEED_OFFSET = 11;
        this.FORWARD_OFFSET = 12;
        this.FOV_OFFSET = 15;
        this.LOOKAT_OFFSET = 16;
        this.APERTURE_OFFSET = 19;
    }
    getWidth() {
        return this[this.WIDTH_OFFSET];
    }
    setWidth(value) {
        this[this.WIDTH_OFFSET] = value;
    }
    getHeight() {
        return this[this.HEIGHT_OFFSET];
    }
    setHeight(value) {
        this[this.HEIGHT_OFFSET] = value;
    }
    getSeed() {
        return this[this.SEED_OFFSET];
    }
    setSeed(value) {
        this[this.SEED_OFFSET] = value;
    }
    getFieldOfView() {
        return this[this.FOV_OFFSET];
    }
    setFieldOfView(value) {
        this[this.FOV_OFFSET] = value;
    }
    getAperture() {
        return this[this.APERTURE_OFFSET];
    }
    setAperture(value) {
        this[this.APERTURE_OFFSET] = value;
    }
    getPosition(value) {
        (0, _glMatrix.vec3).set(value, this[this.POSITION_OFFSET], this[this.POSITION_OFFSET + 1], this[this.POSITION_OFFSET + 2]);
    }
    setPosition(value) {
        this[this.POSITION_OFFSET] = value[0];
        this[this.POSITION_OFFSET + 1] = value[1];
        this[this.POSITION_OFFSET + 2] = value[2];
    }
    getRight(value) {
        (0, _glMatrix.vec3).set(value, this[this.RIGHT_OFFSET], this[this.RIGHT_OFFSET + 1], this[this.RIGHT_OFFSET + 2]);
    }
    setRight(value) {
        this[this.RIGHT_OFFSET] = value[0];
        this[this.RIGHT_OFFSET + 1] = value[1];
        this[this.RIGHT_OFFSET + 2] = value[2];
    }
    getUp(value) {
        (0, _glMatrix.vec3).set(value, this[this.UP_OFFSET], this[this.UP_OFFSET + 1], this[this.UP_OFFSET + 2]);
    }
    setUp(value) {
        this[this.UP_OFFSET] = value[0];
        this[this.UP_OFFSET + 1] = value[1];
        this[this.UP_OFFSET + 2] = value[2];
    }
    getForward(value) {
        (0, _glMatrix.vec3).set(value, this[this.FORWARD_OFFSET], this[this.FORWARD_OFFSET + 1], this[this.FORWARD_OFFSET + 2]);
    }
    setForward(value) {
        this[this.FORWARD_OFFSET] = value[0];
        this[this.FORWARD_OFFSET + 1] = value[1];
        this[this.FORWARD_OFFSET + 2] = value[2];
    }
    getLookAt(value) {
        (0, _glMatrix.vec3).set(value, this[this.LOOKAT_OFFSET], this[this.LOOKAT_OFFSET + 1], this[this.LOOKAT_OFFSET + 2]);
    }
    setLookAt(value) {
        this[this.LOOKAT_OFFSET] = value[0];
        this[this.LOOKAT_OFFSET + 1] = value[1];
        this[this.LOOKAT_OFFSET + 2] = value[2];
    }
}
ComputeUniformBufferData.SIZE = 20;

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"h6Hz9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FullscreenQuadWgsl", ()=>FullscreenQuadWgsl);
parcelHelpers.export(exports, "FullscreenQuadUniformBufferData", ()=>FullscreenQuadUniformBufferData);
const FullscreenQuadWgsl = `
const GAMMA = vec3<f32>(0.45454545f); // 1 / 2.2

struct ColorData {
    data : array<f32>,
}

                            //         offest   align    size
struct Uniforms {           // ------------------------------
    width: f32,             //              0       4       4
    height: f32,            //              4       4       4
    samplesPerPixel: f32,   //              8       4       4
}                           // ------------------------------
                            //                      4      12

@group(0) @binding(0) var<uniform> uniforms : Uniforms;
@group(0) @binding(1) var<storage, read> colorBuffer : ColorData;

struct VertexOutput {
    @builtin(position) Position : vec4<f32>,
};

@vertex
fn vert_main(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {
    var pos = array<vec2<f32>, 6>(
        vec2<f32>( 1f,  1f),
        vec2<f32>( 1f, -1f),
        vec2<f32>(-1f, -1f),
        vec2<f32>( 1f,  1f),
        vec2<f32>(-1f, -1f),
        vec2<f32>(-1f,  1f));
    var output : VertexOutput;
    output.Position = vec4<f32>(pos[vertexIndex], 0f, 1f);
    return output;
}

@fragment
fn frag_main(@builtin(position) coord: vec4<f32>) -> @location(0) vec4<f32> {
    let x = floor(coord.x);
    let y = floor(coord.y);
    let index = u32(x + y * uniforms.width) * 3u;
    // [0,1]
    var color = vec3<f32>(colorBuffer.data[index + 0u], colorBuffer.data[index + 1u], colorBuffer.data[index + 2u]) / uniforms.samplesPerPixel;

    // Simple tone-mapping from HDR to LDR
    color = color / (color + vec3<f32>(1f, 1f, 1f));

    return vec4<f32>(pow(color, GAMMA), 1f);
}`;
class FullscreenQuadUniformBufferData extends Float32Array {
    constructor(){
        super(FullscreenQuadUniformBufferData.SIZE);
        this.WIDTH_OFFSET = 0;
        this.HEIGHT_OFFSET = 1;
        this.SPP_OFFSET = 2;
    }
    getWidth() {
        return this[this.WIDTH_OFFSET];
    }
    setWidth(value) {
        this[this.WIDTH_OFFSET] = value;
    }
    getHeight() {
        return this[this.HEIGHT_OFFSET];
    }
    setHeight(value) {
        this[this.HEIGHT_OFFSET] = value;
    }
    getSamplesPerPixel() {
        return this[this.SPP_OFFSET];
    }
    setSamplesPerPixel(value) {
        this[this.SPP_OFFSET] = value;
    }
}
FullscreenQuadUniformBufferData.SIZE = 3;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gTIjl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SplitMethod", ()=>SplitMethod);
parcelHelpers.export(exports, "LinearBVHNode", ()=>LinearBVHNode);
parcelHelpers.export(exports, "BVHAccel", ()=>BVHAccel);
parcelHelpers.export(exports, "LinearBVHNodeBufferData", ()=>LinearBVHNodeBufferData);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _mainJs = require("../../main.js");
var _aabbJs = require("./aabb.js");
const SplitMethod = {
    middle: "middle",
    equalCounts: "equalCounts",
    sah: "sah"
};
class BVHPrimitiveInfo {
    constructor(primitiveNumber, bounds){
        this._primitiveNumber = primitiveNumber;
        this._bounds = bounds;
        this._centroid = (0, _glMatrix.vec3).create();
        bounds.centroid(this._centroid);
    }
    get primitiveNumber() {
        return this._primitiveNumber;
    }
    get bounds() {
        return this._bounds;
    }
    get centroid() {
        return this._centroid;
    }
}
class BVHBuildNode {
    constructor(start, end){
        this._start = start;
        this._end = end;
    }
    get bounds() {
        return this._bounds;
    }
    get left() {
        return this._left;
    }
    get right() {
        return this._right;
    }
    get splitAxis() {
        return this._splitAxis;
    }
    get firstPrimOffset() {
        return this._firstPrimOffset;
    }
    get nPrimitives() {
        return this._nPrimitives;
    }
    get start() {
        return this._start;
    }
    get end() {
        return this._end;
    }
    initLeaf(first, n, bounds) {
        this._firstPrimOffset = first;
        this._nPrimitives = n;
        this._bounds = bounds;
        this._left = null;
        this._right = null;
    }
    initInterior(axis, left, right) {
        this._left = left;
        this._right = right;
        this._bounds = new (0, _aabbJs.AABB)();
        this._bounds.unionBounds(this._left.bounds);
        this._bounds.unionBounds(this._right.bounds);
        this._splitAxis = axis;
        this._nPrimitives = 0;
    }
}
class LinearBVHNode {
    constructor(){
        this.bounds = new (0, _aabbJs.AABB)();
        this.primitivesOffset = 0;
        this.secondChildOffset = 0;
        this.nPrimitives = 0;
        this.axis = 0;
        this._centroid = (0, _glMatrix.vec3).create();
        this._size = (0, _glMatrix.vec3).create();
    }
    toBuffer(buffer, index) {
        this.bounds.centroid(this._centroid);
        buffer.setCenter(index, this._centroid);
        this.bounds.size(this._size);
        (0, _glMatrix.vec3).scale(this._size, this._size, 0.5);
        buffer.setSize(index, this._size);
        buffer.setPrimitivesOffset(index, this.primitivesOffset);
        buffer.setSecondChildOffset(index, this.secondChildOffset);
        buffer.setNPrimitives(index, this.nPrimitives);
        buffer.setAxis(index, this.axis);
    }
}
class BVHAccel {
    constructor(core, primitives, maxPrimsInNode, splitMethod){
        this._core = core;
        if (!primitives || primitives.length == 0) return;
        let start = performance.now();
        this._maxPrimsInNode = maxPrimsInNode;
        this._splitMethod = splitMethod;
        this._primitives = primitives;
        this._normalized = (0, _glMatrix.vec3).create();
        this._primitiveInfo = [];
        for(let i = 0; i < primitives.length; i++)this._primitiveInfo.push(new BVHPrimitiveInfo(i, primitives[i].bounds));
        this._totalNodes = 0;
        this._orderedPrimitives = [];
        const root = this._recursiveBuild(0, primitives.length);
        this._core.log.write((0, _mainJs.LogLevel).info, `bvh ${this._totalNodes} nodes split ${this._splitMethod} ${Math.round(window.performance.now() - start)}ms`);
        start = performance.now();
        this._nodes = [];
        for(let i1 = 0; i1 < this._totalNodes; i1++)this._nodes.push(new LinearBVHNode());
        this._offset = 0;
        this._flattenBVHTree(root);
        this._core.log.write((0, _mainJs.LogLevel).info, `bvh flattened ${Math.round(window.performance.now() - start)}ms`);
    }
    get orderedPrimitives() {
        return this._orderedPrimitives;
    }
    get nodes() {
        return this._nodes;
    }
    _recursiveBuild(start, end) {
        const node = new BVHBuildNode(start, end - 1);
        this._totalNodes++;
        const bounds = new (0, _aabbJs.AABB)();
        for(let i = start; i < end; i++)bounds.unionBounds(this._primitiveInfo[i].bounds);
        const nPrimitives = end - start;
        if (nPrimitives == 1) {
            const firstPrimOffset = this._orderedPrimitives.length;
            for(let i1 = start; i1 < end; i1++){
                const primNum = this._primitiveInfo[i1].primitiveNumber;
                this._orderedPrimitives.push(this._primitives[primNum]);
            }
            node.initLeaf(firstPrimOffset, nPrimitives, bounds);
            return node;
        } else {
            const centroidBounds = new (0, _aabbJs.AABB)();
            for(let i2 = start; i2 < end; i2++)centroidBounds.unionPoint(this._primitiveInfo[i2].centroid);
            const dim = centroidBounds.maximumExtent();
            let mid = Math.floor((start + end) / 2);
            if (centroidBounds.max[dim] == centroidBounds.min[dim]) {
                const firstPrimOffset1 = this._orderedPrimitives.length;
                for(let i3 = start; i3 < end; i3++){
                    const primNum1 = this._primitiveInfo[i3].primitiveNumber;
                    this._orderedPrimitives.push(this._primitives[primNum1]);
                }
                node.initLeaf(firstPrimOffset1, nPrimitives, bounds);
                return node;
            } else {
                switch(this._splitMethod){
                    case SplitMethod.middle:
                        break;
                    case SplitMethod.equalCounts:
                        mid = Math.floor((start + end) / 2);
                        const primtiveInfo = this._primitiveInfo.slice(start, end);
                        primtiveInfo.sort(function(a, b) {
                            return a.centroid[dim] - b.centroid[dim];
                        });
                        for(let i4 = start; i4 < end; i4++)this._primitiveInfo[i4] = primtiveInfo[i4 - start];
                        break;
                    case SplitMethod.sah:
                    default:
                        if (nPrimitives <= 4) {
                            mid = Math.floor((start + end) / 2);
                            const primtiveInfo1 = this._primitiveInfo.slice(start, end);
                            primtiveInfo1.sort(function(a, b) {
                                return a.centroid[dim] - b.centroid[dim];
                            });
                            for(let i5 = start; i5 < end; i5++)this._primitiveInfo[i5] = primtiveInfo1[i5 - start];
                        } else {
                            const nBuckets = 12;
                            const buckets = [];
                            for(let i6 = 0; i6 < nBuckets; i6++)buckets.push({
                                count: 0,
                                bounds: new (0, _aabbJs.AABB)()
                            });
                            for(let i7 = start; i7 < end; i7++){
                                centroidBounds.offset(this._primitiveInfo[i7].centroid, this._normalized);
                                const b = Math.min(Math.round(nBuckets * this._normalized[dim]), nBuckets - 1);
                                buckets[b].count++;
                                buckets[b].bounds.unionBounds(this._primitiveInfo[i7].bounds);
                            }
                            const cost = [];
                            for(let i8 = 0; i8 < nBuckets - 1; i8++){
                                const b0 = new (0, _aabbJs.AABB)();
                                const b1 = new (0, _aabbJs.AABB)();
                                let count0 = 0;
                                let count1 = 0;
                                for(let j = 0; j <= i8; j++){
                                    b0.unionBounds(buckets[j].bounds);
                                    count0 += buckets[j].count;
                                }
                                for(let j1 = i8 + 1; j1 < nBuckets; j1++){
                                    b1.unionBounds(buckets[j1].bounds);
                                    count1 += buckets[j1].count;
                                }
                                cost.push(0.125 + (count0 * b0.surfaceArea() + count1 * b1.surfaceArea()) / bounds.surfaceArea());
                            }
                            let minCost = cost[0];
                            let minCostSplitBucket = 0;
                            for(let i9 = 1; i9 < nBuckets - 1; i9++)if (cost[i9] < minCost) {
                                minCost = cost[i9];
                                minCostSplitBucket = i9;
                            }
                            const leafCost = nPrimitives;
                            if (nPrimitives > this._maxPrimsInNode || minCost < leafCost) {
                                const primtiveInfo2 = this._primitiveInfo.slice(start, end);
                                primtiveInfo2.sort(function(a, b) {
                                    return a.centroid[dim] - b.centroid[dim];
                                });
                                for(let i10 = start; i10 < end; i10++)this._primitiveInfo[i10] = primtiveInfo2[i10 - start];
                                for(let i11 = start; i11 < end; i11++){
                                    centroidBounds.offset(this._primitiveInfo[i11].centroid, this._normalized);
                                    const b2 = Math.min(Math.round(nBuckets * this._normalized[dim]), nBuckets - 1);
                                    if (b2 > minCostSplitBucket) {
                                        mid = i11;
                                        break;
                                    }
                                }
                            } else {
                                const firstPrimOffset2 = this._orderedPrimitives.length;
                                for(let i12 = start; i12 < end; i12++){
                                    const primNum2 = this._primitiveInfo[i12].primitiveNumber;
                                    this._orderedPrimitives.push(this._primitives[primNum2]);
                                }
                                node.initLeaf(firstPrimOffset2, nPrimitives, bounds);
                                return node;
                            }
                        }
                        break;
                }
                node.initInterior(dim, this._recursiveBuild(start, mid), this._recursiveBuild(mid, end));
            }
        }
        return node;
    }
    _flattenBVHTree(node) {
        const linearNode = this._nodes[this._offset];
        linearNode.bounds = node.bounds;
        const myOffset = this._offset++;
        if (node.nPrimitives > 0) {
            linearNode.primitivesOffset = node.firstPrimOffset;
            linearNode.nPrimitives = node.nPrimitives;
        } else {
            linearNode.axis = node.splitAxis;
            linearNode.nPrimitives = 0;
            this._flattenBVHTree(node.left);
            linearNode.secondChildOffset = this._flattenBVHTree(node.right);
        }
        return myOffset;
    }
}
class LinearBVHNodeBufferData extends Float32Array {
    constructor(count){
        super(count * LinearBVHNodeBufferData.SIZE);
        this.CENTER_OFFSET = 0;
        this.SIZE_OFFSET = 4;
        this.PRIMITIVES_OFFSET_OFFSET = 3;
        this.SECOND_CHILD_OFFSET_OFFSET = 7;
        this.N_PRIMITIVES_OFFSET = 8;
        this.AXIS_OFFSET = 9;
    }
    getCenter(index, value) {
        const offset = LinearBVHNodeBufferData.SIZE * index + this.CENTER_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setCenter(index, value) {
        const offset = LinearBVHNodeBufferData.SIZE * index + this.CENTER_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getSize(index, value) {
        const offset = LinearBVHNodeBufferData.SIZE * index + this.SIZE_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setSize(index, value) {
        const offset = LinearBVHNodeBufferData.SIZE * index + this.SIZE_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getPrimitivesOffset(index) {
        return this[LinearBVHNodeBufferData.SIZE * index + this.PRIMITIVES_OFFSET_OFFSET];
    }
    setPrimitivesOffset(index, value) {
        this[LinearBVHNodeBufferData.SIZE * index + this.PRIMITIVES_OFFSET_OFFSET] = value;
    }
    getSecondChildOffset(index) {
        return this[LinearBVHNodeBufferData.SIZE * index + this.SECOND_CHILD_OFFSET_OFFSET];
    }
    setSecondChildOffset(index, value) {
        this[LinearBVHNodeBufferData.SIZE * index + this.SECOND_CHILD_OFFSET_OFFSET] = value;
    }
    getNPrimitives(index) {
        return this[LinearBVHNodeBufferData.SIZE * index + this.N_PRIMITIVES_OFFSET];
    }
    setNPrimitives(index, value) {
        this[LinearBVHNodeBufferData.SIZE * index + this.N_PRIMITIVES_OFFSET] = value;
    }
    getAxis(index) {
        return this[LinearBVHNodeBufferData.SIZE * index + this.AXIS_OFFSET];
    }
    setAxis(index, value) {
        this[LinearBVHNodeBufferData.SIZE * index + this.AXIS_OFFSET] = value;
    }
}
LinearBVHNodeBufferData.SIZE = 12;

},{"gl-matrix":"3mrln","../../main.js":"2JYph","./aabb.js":"1HNfg","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1xqM3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextureType", ()=>TextureType);
parcelHelpers.export(exports, "TextureBufferData", ()=>TextureBufferData);
parcelHelpers.export(exports, "Texture", ()=>Texture);
parcelHelpers.export(exports, "SolidColorTexture", ()=>SolidColorTexture);
parcelHelpers.export(exports, "ImageTexture", ()=>ImageTexture);
parcelHelpers.export(exports, "CheckerTexture", ()=>CheckerTexture);
parcelHelpers.export(exports, "GridTexture", ()=>GridTexture);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
const TextureType = {
    none: 0,
    solidColor: 1,
    image: 2,
    sdfText: 3,
    checker: 4,
    grid: 5
};
class TextureBufferData extends Float32Array {
    constructor(count){
        super(count * TextureBufferData.SIZE);
        this.COLOR0_OFFSET = 0;
        this.TYPE_OFFSET = 3;
        this.COLOR1_OFFSET = 4;
        this.SIZE0_OFFSET = 8;
        this.SIZE1_OFFSET = 12;
        this.OFFSET_OFFSET = 16;
    }
    getType(index) {
        return this[TextureBufferData.SIZE * index + this.TYPE_OFFSET];
    }
    setType(index, value) {
        this[TextureBufferData.SIZE * index + this.TYPE_OFFSET] = value;
    }
    getColor0(index, value) {
        const offset = TextureBufferData.SIZE * index + this.COLOR0_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setColor0(index, value) {
        const offset = TextureBufferData.SIZE * index + this.COLOR0_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getColor1(index, value) {
        const offset = TextureBufferData.SIZE * index + this.COLOR1_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setColor1(index, value) {
        const offset = TextureBufferData.SIZE * index + this.COLOR1_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getSize0(index, value) {
        const offset = TextureBufferData.SIZE * index + this.SIZE0_OFFSET;
        (0, _glMatrix.vec4).set(value, this[offset], this[offset + 1], this[offset + 2], this[offset + 3]);
    }
    setSize0(index, value) {
        const offset = TextureBufferData.SIZE * index + this.SIZE0_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
        this[offset + 3] = value[3];
    }
    getSize1(index, value) {
        const offset = TextureBufferData.SIZE * index + this.SIZE1_OFFSET;
        (0, _glMatrix.vec4).set(value, this[offset], this[offset + 1], this[offset + 2], this[offset + 3]);
    }
    setSize1(index, value) {
        const offset = TextureBufferData.SIZE * index + this.SIZE1_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
        this[offset + 3] = value[3];
    }
    getOffset(index, value) {
        const offset = TextureBufferData.SIZE * index + this.OFFSET_OFFSET;
        (0, _glMatrix.vec2).set(value, this[offset], this[offset + 1]);
    }
    setOffset(index, value) {
        const offset = TextureBufferData.SIZE * index + this.OFFSET_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
    }
}
TextureBufferData.SIZE = 20;
class Texture {
}
class SolidColorTexture extends Texture {
    constructor(options){
        super();
        this.color = options.color;
        this._color = (0, _glMatrix.vec3).fromValues(Math.pow(this.color[0], 2.2), Math.pow(this.color[1], 2.2), Math.pow(this.color[2], 2.2));
    }
    toBuffer(buffer, index) {
        buffer.setType(index, TextureType.solidColor);
        buffer.setColor0(index, this._color);
    }
}
class ImageTexture extends Texture {
    constructor(options){
        super();
        this.image = options.image;
    }
    toBuffer(buffer, index) {
        buffer.setType(index, TextureType.image);
    }
}
class CheckerTexture extends Texture {
    constructor(options){
        super();
        this.color0 = options.color0;
        this.color1 = options.color1;
        this.size = options.size;
        this.offset = options.offset;
        this._color0 = (0, _glMatrix.vec3).fromValues(Math.pow(this.color0[0], 2.2), Math.pow(this.color0[1], 2.2), Math.pow(this.color0[2], 2.2));
        this._color1 = (0, _glMatrix.vec3).fromValues(Math.pow(this.color1[0], 2.2), Math.pow(this.color1[1], 2.2), Math.pow(this.color1[2], 2.2));
    }
    toBuffer(buffer, index) {
        buffer.setType(index, TextureType.checker);
        buffer.setColor0(index, this._color0);
        buffer.setColor1(index, this._color1);
        buffer.setSize0(index, (0, _glMatrix.vec4).fromValues(this.size[0], this.size[1], 0, 0));
        buffer.setOffset(index, this.offset);
    }
}
class GridTexture extends Texture {
    constructor(options){
        super();
        this.color0 = options.color0;
        this.color1 = options.color1;
        this.size = options.size;
        this.minorSize = options.minorSize;
        this.thickness = options.thickness;
        this.minorThickness = options.minorThickness;
        this.offset = options.offset;
        this._color0 = (0, _glMatrix.vec3).fromValues(Math.pow(this.color0[0], 2.2), Math.pow(this.color0[1], 2.2), Math.pow(this.color0[2], 2.2));
        this._color1 = (0, _glMatrix.vec3).fromValues(Math.pow(this.color1[0], 2.2), Math.pow(this.color1[1], 2.2), Math.pow(this.color1[2], 2.2));
    }
    toBuffer(buffer, index) {
        buffer.setType(index, TextureType.grid);
        buffer.setColor0(index, this._color0);
        buffer.setColor1(index, this._color1);
        buffer.setSize0(index, (0, _glMatrix.vec4).fromValues(this.size[0], this.size[1], this.minorSize[0], this.minorSize[1]));
        buffer.setSize1(index, (0, _glMatrix.vec4).fromValues(this.thickness[0], this.thickness[1], this.minorThickness[0], this.minorThickness[1]));
        buffer.setOffset(index, this.offset);
    }
}

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1kubX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LightType", ()=>LightType);
parcelHelpers.export(exports, "LightBufferData", ()=>LightBufferData);
parcelHelpers.export(exports, "Light", ()=>Light);
parcelHelpers.export(exports, "SphereLight", ()=>SphereLight);
parcelHelpers.export(exports, "RectLight", ()=>RectLight);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _aabbJs = require("./aabb.js");
const LightType = {
    distant: 0,
    sphere: 1,
    rect: 2,
    disc: 3,
    cylinder: 4,
    dome: 5
};
class LightBufferData extends Float32Array {
    constructor(count){
        super(count * LightBufferData.SIZE);
        this.ROTATION_OFFSET = 0;
        this.CENTER_OFFSET = 4;
        this.TYPE_OFFSET = 7;
        this.SIZE_OFFSET = 8;
        this.COLOR_OFFSET = 12;
    }
    getType(index) {
        return this[LightBufferData.SIZE * index + this.TYPE_OFFSET];
    }
    setType(index, value) {
        this[LightBufferData.SIZE * index + this.TYPE_OFFSET] = value;
    }
    getCenter(index, value) {
        const offset = LightBufferData.SIZE * index + this.CENTER_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setCenter(index, value) {
        const offset = LightBufferData.SIZE * index + this.CENTER_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getSize(index, value) {
        const offset = LightBufferData.SIZE * index + this.SIZE_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setSize(index, value) {
        const offset = LightBufferData.SIZE * index + this.SIZE_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getColor(index, value) {
        const offset = LightBufferData.SIZE * index + this.COLOR_OFFSET;
        (0, _glMatrix.vec3).set(value, this[offset], this[offset + 1], this[offset + 2]);
    }
    setColor(index, value) {
        const offset = LightBufferData.SIZE * index + this.COLOR_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
    }
    getRotation(index, value) {
        const offset = LightBufferData.SIZE * index + this.ROTATION_OFFSET;
        (0, _glMatrix.quat).set(value, this[offset], this[offset + 1], this[offset + 2], this[offset + 3]);
    }
    setRotation(index, value) {
        const offset = LightBufferData.SIZE * index + this.ROTATION_OFFSET;
        this[offset] = value[0];
        this[offset + 1] = value[1];
        this[offset + 2] = value[2];
        this[offset + 3] = value[3];
    }
}
LightBufferData.SIZE = 16;
class Light {
    constructor(options){
        this._color = options.color;
        this._center = options.center;
        this._bounds = new (0, _aabbJs.AABB)();
    }
    get center() {
        return this._center;
    }
    get bounds() {
        return this._bounds;
    }
    toBuffer(buffer, index) {
        buffer.setCenter(index, this._center);
        buffer.setColor(index, this._color);
    }
}
class SphereLight extends Light {
    constructor(options){
        super(options);
        this._radius = options.radius / 2;
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._radius;
        min[1] = this._center[1] - this._radius;
        min[2] = this._center[2] - this._radius;
        max[0] = this._center[0] + this._radius;
        max[1] = this._center[1] + this._radius;
        max[2] = this._center[2] + this._radius;
    }
    get radius() {
        return this._radius;
    }
    toBuffer(buffer, index) {
        super.toBuffer(buffer, index);
        buffer.setType(index, LightType.sphere);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._radius, this._radius, this._radius));
    }
}
class RectLight extends Light {
    constructor(options){
        super(options);
        this._thickness = 0.00001;
        this._size = options.size;
        this._rotation = options.rotation;
        const min = this._bounds.min;
        const max = this._bounds.max;
        min[0] = this._center[0] - this._size[0];
        min[1] = this._center[1] - this._size[1];
        min[2] = this._center[2] - this._thickness;
        max[0] = this._center[0] + this._size[0];
        max[1] = this._center[1] + this._size[1];
        max[2] = this._center[2] + this._thickness;
    }
    get size() {
        return this._size;
    }
    toBuffer(buffer, index) {
        super.toBuffer(buffer, index);
        buffer.setType(index, LightType.rect);
        buffer.setSize(index, (0, _glMatrix.vec3).fromValues(this._size[0], this._size[1], this._thickness));
        buffer.setRotation(index, this._rotation);
    }
}

},{"gl-matrix":"3mrln","./aabb.js":"1HNfg","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"g1W7O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FontVisual", ()=>FontVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _mainJs = require("../../main.js");
class FontVisual {
    constructor(core, font){
        this._core = core;
        this._font = font;
        font.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get font() {
        return this._font;
    }
    initializeContext(device) {
        this._device = device;
        this._hasChanged = true;
        this._isInitialized = true;
    }
    update() {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            const start = window.performance.now();
            const imageData = this._font.atlas.imageData;
            const textureSize = {
                width: imageData.width,
                height: imageData.height
            };
            createImageBitmap(imageData).then((imageBitmap)=>{
                const textureDescriptor = {
                    size: textureSize,
                    format: "rgba8unorm",
                    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
                };
                this.texture = this._device.createTexture(textureDescriptor);
                const imageCopyExternalImage = {
                    source: imageBitmap
                };
                const imageCopyTextureTagged = {
                    texture: this.texture
                };
                const copySize = {
                    width: imageData.width,
                    height: imageData.height
                };
                this._device.queue.copyExternalImageToTexture(imageCopyExternalImage, imageCopyTextureTagged, copySize);
                if (this.hasChangedCallback) this.hasChangedCallback();
                this._core.log.write((0, _mainJs.LogLevel).info, `${this._font.name} texture updated ${Math.round(window.performance.now() - start)}ms`);
            });
        }
    }
}

},{"../../main.js":"2JYph","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2rRl3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageVisual", ()=>ImageVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _imageJs = require("../../components/image.js");
var _mainJs = require("../../main.js");
var _hittableJs = require("./hittable.js");
class ImageVisual {
    constructor(core, main, image){
        this._core = core;
        this._main = main;
        this._image = image;
        this.isVisible = true;
        image.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get image() {
        return this._image;
    }
    render(elapsedTime) {}
    initializeContext(device) {
        this._device = device;
        if (!this._image.isInitialized) this._image.initialize();
        this._hasChanged = true;
        this._isInitialized = true;
    }
    update() {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            const material = this._main.materials[this._image.material];
            const modelPosition = (0, _glMatrix.vec3).create();
            const modelScale = this._core.getModelScale();
            const modelRotation = (0, _glMatrix.quat).create();
            this._core.getModelRotation(modelRotation);
            (0, _glMatrix.vec3).set(modelPosition, this._main.mMatrix[12], this._main.mMatrix[13], this._main.mMatrix[14]);
            if (this._image instanceof (0, _imageJs.ImageQuad)) {
                const imageQuad = this._image;
                const modelSizeX = imageQuad.maxBoundsX - imageQuad.minBoundsX;
                const modelSizeY = imageQuad.maxBoundsY - imageQuad.minBoundsY;
                const modelSizeZ = imageQuad.maxBoundsZ - imageQuad.minBoundsZ;
                const maxBounds = Math.max(modelSizeX, Math.max(modelSizeY, modelSizeZ));
                const boundsScaling = maxBounds == 0 ? 1 : 1 / maxBounds;
                const position = (0, _glMatrix.vec3).fromValues((imageQuad.minBoundsX + imageQuad.maxBoundsX) / 2, (imageQuad.minBoundsY + imageQuad.maxBoundsY) / 2, (imageQuad.minBoundsZ + imageQuad.maxBoundsZ) / 2);
                (0, _glMatrix.vec3).subtract(position, imageQuad.position, position);
                (0, _glMatrix.vec3).scale(position, position, boundsScaling);
                (0, _glMatrix.vec3).scale(position, position, modelScale);
                (0, _glMatrix.vec3).transformQuat(position, position, modelRotation);
                (0, _glMatrix.vec3).add(position, position, modelPosition);
                const hittableRotatedXyRectOptions = {
                    center: position,
                    size: (0, _glMatrix.vec2).fromValues(imageQuad.width * boundsScaling * modelScale / 2, imageQuad.height * boundsScaling * modelScale / 2),
                    material: material,
                    texCoord0: imageQuad.texCoord0,
                    texCoord1: imageQuad.texCoord1,
                    rotation: imageQuad.rotation
                };
                this.hittable = new (0, _hittableJs.HittableRotatedXyRect)(hittableRotatedXyRectOptions);
            } else if (this._image instanceof (0, _imageJs.ImageSphere)) {
                const imageSphere = this._image;
                const modelSizeX1 = imageSphere.maxBoundsX - imageSphere.minBoundsX;
                const modelSizeY1 = imageSphere.maxBoundsY - imageSphere.minBoundsY;
                const modelSizeZ1 = imageSphere.maxBoundsZ - imageSphere.minBoundsZ;
                const maxBounds1 = Math.max(modelSizeX1, Math.max(modelSizeY1, modelSizeZ1));
                const boundsScaling1 = maxBounds1 == 0 ? 1 : 1 / maxBounds1;
                const position1 = imageSphere.position;
                (0, _glMatrix.vec3).subtract(position1, imageSphere.position, position1);
                (0, _glMatrix.vec3).scale(position1, position1, boundsScaling1);
                (0, _glMatrix.vec3).scale(position1, position1, modelScale);
                (0, _glMatrix.vec3).transformQuat(position1, position1, modelRotation);
                (0, _glMatrix.vec3).add(position1, position1, modelPosition);
                const hittableSphereOptions = {
                    center: position1,
                    radius: imageSphere.radius / 2,
                    material: material
                };
                this.hittable = new (0, _hittableJs.HittableSphere)(hittableSphereOptions);
            }
            const imageData = this._image.imageData;
            if (imageData) {
                let start = performance.now();
                const imageDataLinear = new ImageData(imageData.width, imageData.height);
                for(let i = 0; i < imageData.data.length; i++)imageDataLinear.data[i] = Math.pow(imageData.data[i] / 0xff, 2.2) * 0xff;
                this._core.log.write((0, _mainJs.LogLevel).info, `image inverse gamma ${Math.round(window.performance.now() - start)}ms`);
                start = window.performance.now();
                const textureSize = {
                    width: imageData.width,
                    height: imageData.height
                };
                createImageBitmap(imageDataLinear).then((imageBitmap)=>{
                    const textureDescriptor = {
                        size: textureSize,
                        format: "rgba8unorm",
                        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
                    };
                    this.texture = this._device.createTexture(textureDescriptor);
                    const imageCopyExternalImage = {
                        source: imageBitmap,
                        flipY: true
                    };
                    const imageCopyTextureTagged = {
                        texture: this.texture
                    };
                    const copySize = {
                        width: imageData.width,
                        height: imageData.height
                    };
                    this._device.queue.copyExternalImageToTexture(imageCopyExternalImage, imageCopyTextureTagged, copySize);
                    if (this.hasChangedCallback) this.hasChangedCallback();
                    this._core.log.write((0, _mainJs.LogLevel).info, `background image updated ${Math.round(window.performance.now() - start)}ms`);
                });
            }
        }
    }
}

},{"gl-matrix":"3mrln","../../components/image.js":"8weU6","../../main.js":"2JYph","./hittable.js":"9GVRY","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9OoIc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LabelSetVisual", ()=>LabelSetVisual);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _vertexJs = require("../../vertex.js");
var _hittableJs = require("./hittable.js");
var _materialJs = require("./material.js");
var _textureJs = require("./texture.js");
class LabelSetVisual {
    constructor(core, main, labelSet){
        this._core = core;
        this._main = main;
        this._labelSet = labelSet;
        this.isVisible = true;
        labelSet.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        if (!this._labelSet.isInitialized) this._labelSet.initialize();
        if (this._labelSet.text && this._labelSet.text.length > 0) this._hasChanged = true;
        this._isInitialized = true;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    get label() {
        return this._labelSet;
    }
    render(elapsedTime) {}
    update() {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            let material;
            if (this._labelSet.material > -1) material = this._main.materials[this._labelSet.material];
            else material = new (0, _materialJs.LambertianMaterial)({
                texture: new (0, _textureJs.SolidColorTexture)({
                    color: (0, _glMatrix.vec3).fromValues(1, 1, 1)
                })
            });
            this.hittables = [];
            const modelPosition = (0, _glMatrix.vec3).create();
            const modelScale = this._core.getModelScale();
            const modelRotation = (0, _glMatrix.quat).create();
            this._core.getModelRotation(modelRotation);
            (0, _glMatrix.vec3).set(modelPosition, this._main.mMatrix[12], this._main.mMatrix[13], this._main.mMatrix[14]);
            const glpyhRotation = (0, _glMatrix.quat).create();
            const glyphInvRotation = (0, _glMatrix.quat).create();
            const position0 = (0, _glMatrix.vec3).create();
            const position1 = (0, _glMatrix.vec3).create();
            const dataView = this._labelSet.verticesView;
            const labelCount = this._labelSet.text.length;
            let glyphCount = 0;
            for(let j = 0; j < labelCount; j++)glyphCount += this._labelSet.text[j].length;
            for(let j1 = 0; j1 < glyphCount; j1++){
                (0, _vertexJs.PositionTexturePickVertex).getPosition(dataView, j1 * 4 + 2, position0);
                (0, _vertexJs.PositionTexturePickVertex).getPosition(dataView, j1 * 4 + 1, position1);
                (0, _glMatrix.vec3).scale(position0, position0, modelScale);
                (0, _glMatrix.vec3).scale(position1, position1, modelScale);
                (0, _glMatrix.vec3).transformQuat(position0, position0, modelRotation);
                (0, _glMatrix.vec3).transformQuat(position1, position1, modelRotation);
                (0, _glMatrix.vec3).add(position0, position0, modelPosition);
                (0, _glMatrix.vec3).add(position1, position1, modelPosition);
                const centroid = (0, _glMatrix.vec3).create();
                (0, _glMatrix.vec3).add(centroid, position0, position1);
                (0, _glMatrix.vec3).scale(centroid, centroid, 0.5);
                if (this._labelSet.rotation) (0, _glMatrix.quat).set(glpyhRotation, this._labelSet.rotation[0], this._labelSet.rotation[1], this._labelSet.rotation[2], this._labelSet.rotation[3]);
                else if (this._labelSet.rotations) (0, _glMatrix.quat).set(glpyhRotation, this._labelSet.rotations[j1 * 4], this._labelSet.rotations[j1 * 4 + 1], this._labelSet.rotations[j1 * 4 + 2], this._labelSet.rotations[j1 * 4 + 3]);
                else (0, _glMatrix.quat).identity(glpyhRotation);
                const rotation = (0, _glMatrix.quat).clone(glpyhRotation);
                (0, _glMatrix.quat).multiply(rotation, modelRotation, rotation);
                (0, _glMatrix.quat).conjugate(glyphInvRotation, rotation);
                (0, _glMatrix.vec3).subtract(position0, position0, centroid);
                (0, _glMatrix.vec3).subtract(position1, position1, centroid);
                (0, _glMatrix.vec3).transformQuat(position0, position0, glyphInvRotation);
                (0, _glMatrix.vec3).transformQuat(position1, position1, glyphInvRotation);
                (0, _glMatrix.vec3).add(position0, position0, centroid);
                (0, _glMatrix.vec3).add(position1, position1, centroid);
                const texCoord0 = (0, _glMatrix.vec2).create();
                const texCoord1 = (0, _glMatrix.vec2).create();
                (0, _vertexJs.PositionTexturePickVertex).getTexCoord(dataView, j1 * 4 + 2, texCoord0);
                (0, _vertexJs.PositionTexturePickVertex).getTexCoord(dataView, j1 * 4 + 1, texCoord1);
                const hittableRotatedXyRectOptions = {
                    center: centroid,
                    size: (0, _glMatrix.vec2).fromValues((position1[0] - position0[0]) / 2, (position1[1] - position0[1]) / 2),
                    material: material,
                    texCoord0: texCoord0,
                    texCoord1: texCoord1,
                    rotation: rotation
                };
                this.hittables.push(new (0, _hittableJs.HittableRotatedFontXyRect)(hittableRotatedXyRectOptions));
            }
            if (this.hasChangedCallback) this.hasChangedCallback();
        }
    }
}

},{"gl-matrix":"3mrln","../../vertex.js":"7T2qu","./hittable.js":"9GVRY","./material.js":"kU48f","./texture.js":"1xqM3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aSkNF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Buffer", ()=>Buffer);
parcelHelpers.export(exports, "TransitionBuffer", ()=>TransitionBuffer);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _bufferJs = require("../../buffer.js");
var _indexJs = require("../../index.js");
var _mainJs = require("../../main.js");
var _paletteJs = require("../../palette.js");
var _vertexJs = require("../../vertex.js");
var _hittableJs = require("./hittable.js");
var _materialJs = require("./material.js");
var _textureJs = require("./texture.js");
class Buffer extends (0, _bufferJs.BufferBase) {
    constructor(core, ids){
        super(core, ids);
        this._isInitialized = true;
    }
    update() {
        if (this._isInitialized) {
            if (this.hasChangedCallback) this.hasChangedCallback();
        }
    }
}
class TransitionBuffer extends (0, _bufferJs.TransitionBufferBase) {
    constructor(core, main, ids){
        super(core, ids, Buffer, (0, _paletteJs.Palette));
        this._main = main;
        this._buffer1.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        this._buffer2.hasChangedCallback = ()=>{
            this._hasChanged = true;
        };
        this._isInitialized = true;
    }
    update() {
        if (this._hasChanged && this._isInitialized) {
            this._hasChanged = false;
            const start = window.performance.now();
            const textures = [
                new (0, _textureJs.SolidColorTexture)({
                    color: (0, _glMatrix.vec3).fromValues(0.8, 0.4, 0.2)
                }),
                new (0, _textureJs.SolidColorTexture)({
                    color: (0, _glMatrix.vec3).fromValues(0.8, 0.8, 0.8)
                }), 
            ];
            const materials = [
                new (0, _materialJs.MetalMaterial)({
                    texture: textures[1],
                    fuzz: 0.5
                }), 
            ];
            this.hittables = [];
            const unitScale = (0, _glMatrix.vec4).create();
            const modelPosition = (0, _glMatrix.vec3).create();
            const modelScale = this._core.getModelScale();
            const modelRotation = (0, _glMatrix.quat).create();
            this._core.getModelRotation(modelRotation);
            this.minY = Number.MAX_VALUE;
            (0, _glMatrix.vec3).set(modelPosition, this._main.mMatrix[12], this._main.mMatrix[13], this._main.mMatrix[14]);
            const buffer = this.currentBuffer;
            for(let j = 0; j < buffer.ids.length; j++){
                const unitTranslation = (0, _glMatrix.vec3).create();
                (0, _vertexJs.UnitVertex).getTranslation(buffer.dataView, j, unitTranslation);
                const unitRotation = (0, _glMatrix.quat).create();
                (0, _vertexJs.UnitVertex).getRotation(buffer.dataView, j, unitRotation);
                (0, _glMatrix.quat).normalize(unitRotation, unitRotation);
                (0, _glMatrix.quat).multiply(unitRotation, modelRotation, unitRotation);
                (0, _vertexJs.UnitVertex).getScale(buffer.dataView, j, unitScale);
                (0, _glMatrix.vec3).scale(unitTranslation, unitTranslation, modelScale);
                (0, _glMatrix.vec3).transformQuat(unitTranslation, unitTranslation, modelRotation);
                (0, _glMatrix.vec3).add(unitTranslation, unitTranslation, modelPosition);
                const size = (0, _glMatrix.vec3).fromValues(unitScale[0] / 2, unitScale[1] / 2, unitScale[2] / 2);
                (0, _glMatrix.vec3).scale(size, size, modelScale);
                const materialId = (0, _vertexJs.UnitVertex).getMaterial(buffer.dataView, j);
                const material = this._main.materials ? this._main.materials[materialId] : materials[j % materials.length];
                let hittable;
                switch(buffer.unitType){
                    case (0, _indexJs.UnitType).sphere:
                    case (0, _indexJs.UnitType).sphereSdf:
                        hittable = new (0, _hittableJs.HittableSphere)({
                            center: unitTranslation,
                            radius: size[0],
                            material: material
                        });
                        break;
                    case (0, _indexJs.UnitType).block:
                        if (unitRotation[3] == 1) hittable = new (0, _hittableJs.HittableBox)({
                            center: unitTranslation,
                            size: size,
                            material: material
                        });
                        else hittable = new (0, _hittableJs.HittableRotatedBox)({
                            center: unitTranslation,
                            size: size,
                            rotation: unitRotation,
                            material: material
                        });
                        break;
                    case (0, _indexJs.UnitType).blockSdf:
                        hittable = new (0, _hittableJs.HittableBoxSdf)({
                            center: unitTranslation,
                            size: size,
                            radius: Math.min(Math.min(size[0], size[1]), size[2]) * 0.1,
                            material: material
                        });
                        break;
                    case (0, _indexJs.UnitType).cylinder:
                        hittable = new (0, _hittableJs.HittableCylinder)({
                            center: unitTranslation,
                            radius: size[0],
                            height: size[1],
                            rotation: unitRotation,
                            material: material
                        });
                        break;
                    case (0, _indexJs.UnitType).cylinderSdf:
                        hittable = new (0, _hittableJs.HittableCylinderSdf)({
                            center: unitTranslation,
                            radius0: size[0],
                            height: size[1],
                            radius1: size[0] * 0.025,
                            material: material
                        });
                        break;
                    case (0, _indexJs.UnitType).hexPrism:
                        hittable = new (0, _hittableJs.HittableHexPrism)({
                            center: unitTranslation,
                            radius: size[0],
                            height: size[1],
                            material: material
                        });
                        break;
                    case (0, _indexJs.UnitType).hexPrismSdf:
                        hittable = new (0, _hittableJs.HittableHexPrismSdf)({
                            center: unitTranslation,
                            radius0: size[0],
                            height: size[1],
                            radius1: Math.min(size[0], size[1]) * 0.1,
                            material: material
                        });
                        break;
                }
                this.hittables.push(hittable);
                this.minY = Math.min(hittable.bounds.min[1], this.minY);
            }
            if (this.hasChangedCallback) this.hasChangedCallback();
            this._core.log.write((0, _mainJs.LogLevel).info, `buffer updated ${this._length} ${Math.round(window.performance.now() - start)}ms`);
        }
    }
}

},{"gl-matrix":"3mrln","../../buffer.js":"lnUI7","../../index.js":"dzm75","../../main.js":"2JYph","../../palette.js":"46mvC","../../vertex.js":"7T2qu","./hittable.js":"9GVRY","./material.js":"kU48f","./texture.js":"1xqM3","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7tmC7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "Table", ()=>(0, _tableJs.Table));
parcelHelpers.export(exports, "ColumnType", ()=>(0, _tableJs.ColumnType));
parcelHelpers.export(exports, "Filter", ()=>(0, _filterJs.Filter));
var _tableJs = require("./table.js");
var _filterJs = require("./filter.js");

},{"./table.js":"bOs3e","./filter.js":"h1ENP","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iYXYc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ parcelHelpers.export(exports, "CameraBase", ()=>(0, _cameraJs.CameraBase));
parcelHelpers.export(exports, "OrbitCamera", ()=>(0, _orbitJs.OrbitCamera));
parcelHelpers.export(exports, "AltAzimuthCamera", ()=>(0, _altazimuthJs.AltAzimuthCamera));
var _cameraJs = require("./camera.js");
var _orbitJs = require("./orbit.js");
var _altazimuthJs = require("./altazimuth.js");

},{"./camera.js":"ielbK","./orbit.js":"71pR9","./altazimuth.js":"jbaDq","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"71pR9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OrbitCamera", ()=>OrbitCamera);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
var _constantsJs = require("../constants.js");
var _cameraJs = require("./camera.js");
class OrbitCamera extends (0, _cameraJs.CameraBase) {
    getTwist(value) {
        (0, _glMatrix.quat).copy(value, this._cameraRotation);
    }
    setTwist(value, isSmooth) {
        (0, _glMatrix.quat).copy(this._cameraRotation, value);
        if (!isSmooth) (0, _glMatrix.quat).copy(this._smoothedCameraRotation, value);
    }
    twist(angle, x, y) {
        this.unproject(this._vec3, x, y, 1);
        (0, _glMatrix.vec3).normalize(this._vec3, this._vec3);
        (0, _glMatrix.vec3).transformQuat(this._vec3, this._vec3, this._orbitRotation);
        this._twist(this._vec3, angle);
    }
    _twist(axis, angle) {
        (0, _glMatrix.quat).setAxisAngle(this._quat, axis, angle);
        (0, _glMatrix.quat).multiply(this._cameraRotation, this._quat, this._cameraRotation);
    }
    rotate(translationDelta) {
        (0, _glMatrix.vec3).set(this._vec3, translationDelta[1], translationDelta[0], 0);
        const length = (0, _glMatrix.vec3).length(this._vec3);
        const angle = length * (0, _constantsJs.Constants).PI / Math.min(this.width, this.height);
        (0, _glMatrix.vec3).scale(this._vec3, this._vec3, 1 / length);
        (0, _glMatrix.quat).setAxisAngle(this._quat, this._vec3, angle);
        (0, _glMatrix.quat).multiply(this._orbitRotation, this._quat, this._orbitRotation);
    }
}

},{"gl-matrix":"3mrln","../constants.js":"dtECF","./camera.js":"ielbK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4TCpK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Colors", ()=>Colors);
/*!
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 */ var _glMatrix = require("gl-matrix");
class Colors {
}
Colors.MediumVioletRed = (0, _glMatrix.vec3).fromValues(0xc7, 0x15, 0x85);
Colors.DeepPink = (0, _glMatrix.vec3).fromValues(0xff, 0x14, 0x93);
Colors.PaleVioletRed = (0, _glMatrix.vec3).fromValues(0xdb, 0x70, 0x93);
Colors.HotPink = (0, _glMatrix.vec3).fromValues(0xff, 0x69, 0xb4);
Colors.LightPink = (0, _glMatrix.vec3).fromValues(0xff, 0xb6, 0xc1);
Colors.Pink = (0, _glMatrix.vec3).fromValues(0xff, 0xc0, 0xcb);
Colors.DarkRed = (0, _glMatrix.vec3).fromValues(0x8b, 0x00, 0x00);
Colors.Red = (0, _glMatrix.vec3).fromValues(0xff, 0x00, 0x00);
Colors.Firebrick = (0, _glMatrix.vec3).fromValues(0xb2, 0x22, 0x22);
Colors.Crimson = (0, _glMatrix.vec3).fromValues(0xdc, 0x14, 0x3c);
Colors.IndianRed = (0, _glMatrix.vec3).fromValues(0xcd, 0x5c, 0x5c);
Colors.LightCoral = (0, _glMatrix.vec3).fromValues(0xf0, 0x80, 0x80);
Colors.Salmon = (0, _glMatrix.vec3).fromValues(0xfa, 0x80, 0x72);
Colors.DarkSalmon = (0, _glMatrix.vec3).fromValues(0xe9, 0x96, 0x7a);
Colors.LightSalmon = (0, _glMatrix.vec3).fromValues(0xff, 0xa0, 0x7a);
Colors.OrangeRed = (0, _glMatrix.vec3).fromValues(0xff, 0x45, 0x00);
Colors.Tomato = (0, _glMatrix.vec3).fromValues(0xff, 0x63, 0x47);
Colors.DarkOrange = (0, _glMatrix.vec3).fromValues(0xff, 0x8c, 0x00);
Colors.Coral = (0, _glMatrix.vec3).fromValues(0xff, 0x7f, 0x50);
Colors.Orange = (0, _glMatrix.vec3).fromValues(0xff, 0xa5, 0x00);
Colors.DarkKhaki = (0, _glMatrix.vec3).fromValues(0xbd, 0xb7, 0x6b);
Colors.Gold = (0, _glMatrix.vec3).fromValues(0xff, 0xd7, 0x00);
Colors.Khaki = (0, _glMatrix.vec3).fromValues(0xf0, 0xe6, 0x8c);
Colors.PeachPuff = (0, _glMatrix.vec3).fromValues(0xff, 0xda, 0xb9);
Colors.Yellow = (0, _glMatrix.vec3).fromValues(0xff, 0xff, 0x00);
Colors.PaleGoldenrod = (0, _glMatrix.vec3).fromValues(0xee, 0xe8, 0xaa);
Colors.Moccasin = (0, _glMatrix.vec3).fromValues(0xff, 0xe4, 0xb5);
Colors.PapayaWhip = (0, _glMatrix.vec3).fromValues(0xff, 0xef, 0xd5);
Colors.LightGoldenrodYellow = (0, _glMatrix.vec3).fromValues(0xfa, 0xfa, 0xd2);
Colors.LemonChiffon = (0, _glMatrix.vec3).fromValues(0xff, 0xfa, 0xcd);
Colors.LightYellow = (0, _glMatrix.vec3).fromValues(0xff, 0xff, 0xe0);
Colors.Maroon = (0, _glMatrix.vec3).fromValues(0x80, 0x00, 0x00);
Colors.Brown = (0, _glMatrix.vec3).fromValues(0xa5, 0x2a, 0x2a);
Colors.SaddleBrown = (0, _glMatrix.vec3).fromValues(0x8b, 0x45, 0x13);
Colors.Sienna = (0, _glMatrix.vec3).fromValues(0xa0, 0x52, 0x2d);
Colors.Chocolate = (0, _glMatrix.vec3).fromValues(0xd2, 0x69, 0x1e);
Colors.DarkGoldenrod = (0, _glMatrix.vec3).fromValues(0xb8, 0x86, 0x0b);
Colors.Peru = (0, _glMatrix.vec3).fromValues(0xcd, 0x85, 0x3f);
Colors.RosyBrown = (0, _glMatrix.vec3).fromValues(0xbc, 0x8f, 0x8f);
Colors.Goldenrod = (0, _glMatrix.vec3).fromValues(0xda, 0xa5, 0x20);
Colors.SandyBrown = (0, _glMatrix.vec3).fromValues(0xf4, 0xa4, 0x60);
Colors.Tan = (0, _glMatrix.vec3).fromValues(0xd2, 0xb4, 0x8c);
Colors.Burlywood = (0, _glMatrix.vec3).fromValues(0xde, 0xb8, 0x87);
Colors.Wheat = (0, _glMatrix.vec3).fromValues(0xf5, 0xde, 0xb3);
Colors.NavajoWhite = (0, _glMatrix.vec3).fromValues(0xff, 0xde, 0xad);
Colors.Bisque = (0, _glMatrix.vec3).fromValues(0xff, 0xe4, 0xc4);
Colors.BlanchedAlmond = (0, _glMatrix.vec3).fromValues(0xff, 0xeb, 0xcd);
Colors.Cornsilk = (0, _glMatrix.vec3).fromValues(0xff, 0xf8, 0xdc);
Colors.DarkGreen = (0, _glMatrix.vec3).fromValues(0x00, 0x64, 0x00);
Colors.Green = (0, _glMatrix.vec3).fromValues(0x00, 0x80, 0x00);
Colors.DarkOliveGreen = (0, _glMatrix.vec3).fromValues(0x55, 0x6b, 0x2f);
Colors.ForestGreen = (0, _glMatrix.vec3).fromValues(0x22, 0x8b, 0x22);
Colors.SeaGreen = (0, _glMatrix.vec3).fromValues(0x2e, 0x8b, 0x57);
Colors.Olive = (0, _glMatrix.vec3).fromValues(0x80, 0x80, 0x00);
Colors.OliveDrab = (0, _glMatrix.vec3).fromValues(0x6b, 0x8e, 0x23);
Colors.MediumSeaGreen = (0, _glMatrix.vec3).fromValues(0x3c, 0xb3, 0x71);
Colors.LimeGreen = (0, _glMatrix.vec3).fromValues(0x32, 0xcd, 0x32);
Colors.Lime = (0, _glMatrix.vec3).fromValues(0x00, 0xff, 0x00);
Colors.SpringGreen = (0, _glMatrix.vec3).fromValues(0x00, 0xff, 0x7f);
Colors.MediumSpringGreen = (0, _glMatrix.vec3).fromValues(0x00, 0xfa, 0x9a);
Colors.DarkSeaGreen = (0, _glMatrix.vec3).fromValues(0x8f, 0xbc, 0x8f);
Colors.MediumAquamarine = (0, _glMatrix.vec3).fromValues(0x66, 0xcd, 0xaa);
Colors.YellowGreen = (0, _glMatrix.vec3).fromValues(0x9a, 0xcd, 0x32);
Colors.LawnGreen = (0, _glMatrix.vec3).fromValues(0x7c, 0xfc, 0x00);
Colors.Chartreuse = (0, _glMatrix.vec3).fromValues(0x7f, 0xff, 0x00);
Colors.LightGreen = (0, _glMatrix.vec3).fromValues(0x90, 0xee, 0x90);
Colors.GreenYellow = (0, _glMatrix.vec3).fromValues(0xad, 0xff, 0x2f);
Colors.PaleGreen = (0, _glMatrix.vec3).fromValues(0x98, 0xfb, 0x98);
Colors.Teal = (0, _glMatrix.vec3).fromValues(0x00, 0x80, 0x80);
Colors.DarkCyan = (0, _glMatrix.vec3).fromValues(0x00, 0x8b, 0x8b);
Colors.LightSeaGreen = (0, _glMatrix.vec3).fromValues(0x20, 0xb2, 0xaa);
Colors.CadetBlue = (0, _glMatrix.vec3).fromValues(0x5f, 0x9e, 0xa0);
Colors.DarkTurquoise = (0, _glMatrix.vec3).fromValues(0x00, 0xce, 0xd1);
Colors.MediumTurquoise = (0, _glMatrix.vec3).fromValues(0x48, 0xd1, 0xcc);
Colors.Turquoise = (0, _glMatrix.vec3).fromValues(0x40, 0xe0, 0xd0);
Colors.Aqua = (0, _glMatrix.vec3).fromValues(0x00, 0xff, 0xff);
Colors.Cyan = (0, _glMatrix.vec3).fromValues(0x00, 0xff, 0xff);
Colors.Aquamarine = (0, _glMatrix.vec3).fromValues(0x7f, 0xff, 0xd4);
Colors.PaleTurquoise = (0, _glMatrix.vec3).fromValues(0xaf, 0xee, 0xee);
Colors.LightCyan = (0, _glMatrix.vec3).fromValues(0xe0, 0xff, 0xff);
Colors.Navy = (0, _glMatrix.vec3).fromValues(0x00, 0x00, 0x80);
Colors.DarkBlue = (0, _glMatrix.vec3).fromValues(0x00, 0x00, 0x8b);
Colors.MediumBlue = (0, _glMatrix.vec3).fromValues(0x00, 0x00, 0xcd);
Colors.Blue = (0, _glMatrix.vec3).fromValues(0x00, 0x00, 0xff);
Colors.MidnightBlue = (0, _glMatrix.vec3).fromValues(0x19, 0x19, 0x70);
Colors.RoyalBlue = (0, _glMatrix.vec3).fromValues(0x41, 0x69, 0xe1);
Colors.SteelBlue = (0, _glMatrix.vec3).fromValues(0x46, 0x82, 0xb4);
Colors.DodgerBlue = (0, _glMatrix.vec3).fromValues(0x1e, 0x90, 0xff);
Colors.DeepSkyBlue = (0, _glMatrix.vec3).fromValues(0x00, 0xbf, 0xff);
Colors.CornflowerBlue = (0, _glMatrix.vec3).fromValues(0x64, 0x95, 0xed);
Colors.SkyBlue = (0, _glMatrix.vec3).fromValues(0x87, 0xce, 0xeb);
Colors.LightSkyBlue = (0, _glMatrix.vec3).fromValues(0x87, 0xce, 0xfa);
Colors.LightSteelBlue = (0, _glMatrix.vec3).fromValues(0xb0, 0xc4, 0xde);
Colors.LightBlue = (0, _glMatrix.vec3).fromValues(0xad, 0xd8, 0xe6);
Colors.PowderBlue = (0, _glMatrix.vec3).fromValues(0xb0, 0xe0, 0xe6);
Colors.Indigo = (0, _glMatrix.vec3).fromValues(0x4b, 0x00, 0x82);
Colors.Purple = (0, _glMatrix.vec3).fromValues(0x80, 0x00, 0x80);
Colors.DarkMagenta = (0, _glMatrix.vec3).fromValues(0x8b, 0x00, 0x8b);
Colors.DarkViolet = (0, _glMatrix.vec3).fromValues(0x94, 0x00, 0xd3);
Colors.DarkSlateBlue = (0, _glMatrix.vec3).fromValues(0x48, 0x3d, 0x8b);
Colors.BlueViolet = (0, _glMatrix.vec3).fromValues(0x8a, 0x2b, 0xe2);
Colors.DarkOrchid = (0, _glMatrix.vec3).fromValues(0x99, 0x32, 0xcc);
Colors.Fuchsia = (0, _glMatrix.vec3).fromValues(0xff, 0x00, 0xff);
Colors.Magenta = (0, _glMatrix.vec3).fromValues(0xff, 0x00, 0xff);
Colors.SlateBlue = (0, _glMatrix.vec3).fromValues(0x6a, 0x5a, 0xcd);
Colors.MediumSlateBlue = (0, _glMatrix.vec3).fromValues(0x7b, 0x68, 0xee);
Colors.MediumOrchid = (0, _glMatrix.vec3).fromValues(0xba, 0x55, 0xd3);
Colors.MediumPurple = (0, _glMatrix.vec3).fromValues(0x93, 0x70, 0xdb);
Colors.Orchid = (0, _glMatrix.vec3).fromValues(0xda, 0x70, 0xd6);
Colors.Violet = (0, _glMatrix.vec3).fromValues(0xee, 0x82, 0xee);
Colors.Plum = (0, _glMatrix.vec3).fromValues(0xdd, 0xa0, 0xdd);
Colors.Thistle = (0, _glMatrix.vec3).fromValues(0xd8, 0xbf, 0xd8);
Colors.Lavender = (0, _glMatrix.vec3).fromValues(0xe6, 0xe6, 0xfa);
Colors.MistyRose = (0, _glMatrix.vec3).fromValues(0xff, 0xe4, 0xe1);
Colors.AntiqueWhite = (0, _glMatrix.vec3).fromValues(0xfa, 0xeb, 0xd7);
Colors.Linen = (0, _glMatrix.vec3).fromValues(0xfa, 0xf0, 0xe6);
Colors.Beige = (0, _glMatrix.vec3).fromValues(0xf5, 0xf5, 0xdc);
Colors.WhiteSmoke = (0, _glMatrix.vec3).fromValues(0xf5, 0xf5, 0xf5);
Colors.LavenderBlush = (0, _glMatrix.vec3).fromValues(0xff, 0xf0, 0xf5);
Colors.OldLace = (0, _glMatrix.vec3).fromValues(0xfd, 0xf5, 0xe6);
Colors.AliceBlue = (0, _glMatrix.vec3).fromValues(0xf0, 0xf8, 0xff);
Colors.Seashell = (0, _glMatrix.vec3).fromValues(0xff, 0xf5, 0xee);
Colors.GhostWhite = (0, _glMatrix.vec3).fromValues(0xf8, 0xf8, 0xff);
Colors.Honeydew = (0, _glMatrix.vec3).fromValues(0xf0, 0xff, 0xf0);
Colors.FloralWhite = (0, _glMatrix.vec3).fromValues(0xff, 0xfa, 0xf0);
Colors.Azure = (0, _glMatrix.vec3).fromValues(0xf0, 0xff, 0xff);
Colors.MintCream = (0, _glMatrix.vec3).fromValues(0xf5, 0xff, 0xfa);
Colors.Snow = (0, _glMatrix.vec3).fromValues(0xff, 0xfa, 0xfa);
Colors.Ivory = (0, _glMatrix.vec3).fromValues(0xff, 0xff, 0xf0);
Colors.White = (0, _glMatrix.vec3).fromValues(0xff, 0xff, 0xff);
Colors.Black = (0, _glMatrix.vec3).fromValues(0x00, 0x00, 0x00);
Colors.DarkSlateGray = (0, _glMatrix.vec3).fromValues(0x2f, 0x4f, 0x4f);
Colors.DimGray = (0, _glMatrix.vec3).fromValues(0x69, 0x69, 0x69);
Colors.SlateGray = (0, _glMatrix.vec3).fromValues(0x70, 0x80, 0x90);
Colors.Gray = (0, _glMatrix.vec3).fromValues(0x80, 0x80, 0x80);
Colors.LightSlateGray = (0, _glMatrix.vec3).fromValues(0x77, 0x88, 0x99);
Colors.DarkGray = (0, _glMatrix.vec3).fromValues(0xa9, 0xa9, 0xa9);
Colors.Silver = (0, _glMatrix.vec3).fromValues(0xc0, 0xc0, 0xc0);
Colors.LightGray = (0, _glMatrix.vec3).fromValues(0xd3, 0xd3, 0xd3);
Colors.Gainsboro = (0, _glMatrix.vec3).fromValues(0xdc, 0xdc, 0xdc);
Colors.Copper = (0, _glMatrix.vec3).fromValues(0xb8, 0x73, 0x33);
Colors.Bronze = (0, _glMatrix.vec3).fromValues(0xcd, 0x7f, 0x32);
Colors.Steel = (0, _glMatrix.vec3).fromValues(0xce, 0xd2, 0xd7);
Colors.Platinum = (0, _glMatrix.vec3).fromValues(0xe5, 0xe4, 0xe2);
Colors.Gunmetal = (0, _glMatrix.vec3).fromValues(0x5c, 0x5d, 0x5b);
Colors.Titanium = (0, _glMatrix.vec3).fromValues(0x87, 0x86, 0x81);
Colors.RoseGold = (0, _glMatrix.vec3).fromValues(0xcb, 0xa3, 0xb2);
Colors.AquaGlass = (0, _glMatrix.vec3).fromValues(0xd2, 0xe8, 0xdf);
Colors.BlueGlass = (0, _glMatrix.vec3).fromValues(0xc7, 0xe3, 0xe1);

},{"gl-matrix":"3mrln","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eR5Ig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//alphabetize for documentation
parcelHelpers.export(exports, "addDiv", ()=>(0, _htmlHelpers.addDiv));
parcelHelpers.export(exports, "addEl", ()=>(0, _htmlHelpers.addEl));
parcelHelpers.export(exports, "allTruthy", ()=>(0, _array.allTruthy));
parcelHelpers.export(exports, "clone", ()=>(0, _clone.clone));
parcelHelpers.export(exports, "colorFromString", ()=>(0, _color.colorFromString));
parcelHelpers.export(exports, "colorIsEqual", ()=>(0, _color.colorIsEqual));
parcelHelpers.export(exports, "colorToString", ()=>(0, _color.colorToString));
parcelHelpers.export(exports, "concat", ()=>(0, _array.concat));
parcelHelpers.export(exports, "createElement", ()=>(0, _tsxCreateElement.createElement));
parcelHelpers.export(exports, "deepMerge", ()=>(0, _clone.deepMerge));
parcelHelpers.export(exports, "desaturate", ()=>(0, _color.desaturate));
parcelHelpers.export(exports, "getActiveElementInfo", ()=>(0, _tsxCreateElement.getActiveElementInfo));
parcelHelpers.export(exports, "mount", ()=>(0, _tsxCreateElement.mount));
parcelHelpers.export(exports, "outerSize", ()=>(0, _htmlHelpers.outerSize));
parcelHelpers.export(exports, "push", ()=>(0, _array.push));
parcelHelpers.export(exports, "setActiveElement", ()=>(0, _tsxCreateElement.setActiveElement));
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ /**
 * This file is for external facing export only, do not use this for internal references,
 * as it may cause circular dependencies in Rollup.
 */ var _array = require("../array");
var _htmlHelpers = require("../htmlHelpers");
var _clone = require("../clone");
var _color = require("../color");
var _tsxCreateElement = require("tsx-create-element");

},{"../array":"6yl9e","../htmlHelpers":"hDHUb","../clone":"l4wsy","../color":"cXyMC","tsx-create-element":"1Cr5U","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"6yl9e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ parcelHelpers.export(exports, "concat", ()=>concat);
/**
 * Returns array with items which are truthy.
 * @param args array or arrays to concat into a single array.
 */ parcelHelpers.export(exports, "allTruthy", ()=>allTruthy);
/**
 * Add an array to an existing array in place.
 * @param arr Array to append to.
 * @param items Arrof of items to append.
 */ parcelHelpers.export(exports, "push", ()=>push);
function concat(...args) {
    return args.reduce((p, c)=>c ? p.concat(c) : p, []);
}
function allTruthy(...args) {
    return args.reduce((p, c)=>c ? p.concat(c) : p, []).filter(Boolean);
}
function push(arr, items) {
    arr.push.apply(arr, items);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"hDHUb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ /**
 * Create a new element as a child of another element.
 * @param tagName Tag name of the new tag to create.
 * @param parentElement Reference of the element to append to.
 * @returns new HTMLElement.
 */ parcelHelpers.export(exports, "addEl", ()=>addEl);
/**
 * Create a new div HTMLElement as a child of another element.
 * @param parentElement Reference of the element to append to.
 * @param className Optional css class name to apply to the div.
 */ parcelHelpers.export(exports, "addDiv", ()=>addDiv);
/**
 * Measure the outer height and width of an HTMLElement, including margin, padding and border.
 * @param el HTML Element to measure.
 */ parcelHelpers.export(exports, "outerSize", ()=>outerSize);
function addEl(tagName, parentElement) {
    const el = document.createElement(tagName);
    parentElement.appendChild(el);
    return el;
}
function addDiv(parentElement, className) {
    const div = addEl("div", parentElement);
    if (className) div.className = className;
    return div;
}
function outerSize(el) {
    const cs = getComputedStyle(el);
    const height = parseFloat(cs.marginTop) + parseFloat(cs.paddingTop) + parseFloat(cs.borderTopWidth) + el.offsetHeight + parseFloat(cs.borderBottomWidth) + parseFloat(cs.paddingBottom) + parseFloat(cs.marginBottom);
    const width = parseFloat(cs.marginLeft) + parseFloat(cs.paddingLeft) + parseFloat(cs.borderLeftWidth) + el.offsetWidth + parseFloat(cs.borderRightWidth) + parseFloat(cs.paddingRight) + parseFloat(cs.marginRight);
    return {
        height,
        width
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"l4wsy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clone", ()=>clone);
parcelHelpers.export(exports, "deepMerge", ()=>deepMerge);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _deepmerge = require("deepmerge");
var _isPlainObject = require("is-plain-object");
const deepmerge = _deepmerge.default || _deepmerge;
function clone(objectToClone) {
    if (!objectToClone) return objectToClone;
    return deepmerge.all([
        objectToClone
    ]);
}
const dontMerge = (destination, source)=>source;
function deepMerge(...objectsToMerge) {
    const objects = objectsToMerge.filter(Boolean);
    return deepmerge.all(objects, {
        arrayMerge: dontMerge,
        isMergeableObject: (0, _isPlainObject.isPlainObject)
    });
}

},{"deepmerge":"aBSNt","is-plain-object":"kkGtE","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aBSNt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isMergeableObject = function isMergeableObject(value) {
    return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
    return !!value && typeof value === "object";
}
function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 0xeac7;
function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
    });
}
function mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) Object.keys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
    Object.keys(source).forEach(function(key) {
        if (!options.isMergeableObject(source[key]) || !target[key]) destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        else destination[key] = deepmerge(target[key], source[key], options);
    });
    return destination;
}
function deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) return cloneUnlessOtherwiseSpecified(source, options);
    else if (sourceIsArray) return options.arrayMerge(target, source, options);
    else return mergeObject(target, source, options);
}
deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) throw new Error("first argument should be an array");
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
    }, {});
};
var deepmerge_1 = deepmerge;
exports.default = deepmerge_1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"kkGtE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ function isObject(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject(o) {
    var ctor, prot;
    if (isObject(o) === false) return false;
    // If has modified constructor
    ctor = o.constructor;
    if (ctor === undefined) return true;
    // If has modified prototype
    prot = ctor.prototype;
    if (isObject(prot) === false) return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) return false;
    // Most likely a plain Object
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cXyMC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Compares 2 colors to see if they are equal.
 * @param a RGBAColor to compare
 * @param b RGBAColor to compare
 * @returns True if colors are equal.
 */ parcelHelpers.export(exports, "colorIsEqual", ()=>colorIsEqual);
/**
 * Convert a CSS color string to a Deck.gl RGBAColor array - (The rgba color of each object, in r, g, b, [a]. Each component is in the 0-255 range.).
 * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
 */ parcelHelpers.export(exports, "colorFromString", ()=>colorFromString);
/**
 * Convert a Deck.gl color to a CSS rgba() string.
 * @param color A Deck.gl RGBAColor array - (The rgba color of each object, in r, g, b, [a]. Each component is in the 0-255 range.)
 */ parcelHelpers.export(exports, "colorToString", ()=>colorToString);
parcelHelpers.export(exports, "desaturate", ()=>desaturate);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _d3Color = require("d3-color");
function rgbToDeckglColor(c) {
    return [
        c.r,
        c.g,
        c.b,
        c.opacity * 255
    ];
}
function colorIsEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0; i < a.length; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function colorFromString(cssColorSpecifier) {
    if (cssColorSpecifier) {
        const dc = (0, _d3Color.color)(cssColorSpecifier);
        if (dc) {
            const c = dc.rgb();
            return rgbToDeckglColor(c);
        }
    }
}
function colorToString(color) {
    const c = [
        ...color
    ];
    if (c.length > 3) c[3] /= 255;
    return `rgba(${c.join(",")})`;
}
function desaturate(color, value) {
    const rgb = (0, _d3Color.rgb)(color[0], color[1], color[2], color[3] / 255);
    const hslColor = (0, _d3Color.hsl)(rgb);
    hslColor.s = value;
    const c = hslColor.rgb();
    return rgbToDeckglColor(c);
}

},{"d3-color":"lXI9k","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lXI9k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>(0, _colorJsDefault.default));
parcelHelpers.export(exports, "rgb", ()=>(0, _colorJs.rgb));
parcelHelpers.export(exports, "hsl", ()=>(0, _colorJs.hsl));
parcelHelpers.export(exports, "lab", ()=>(0, _labJsDefault.default));
parcelHelpers.export(exports, "hcl", ()=>(0, _labJs.hcl));
parcelHelpers.export(exports, "lch", ()=>(0, _labJs.lch));
parcelHelpers.export(exports, "gray", ()=>(0, _labJs.gray));
parcelHelpers.export(exports, "cubehelix", ()=>(0, _cubehelixJsDefault.default));
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);

},{"./color.js":"9Zb99","./lab.js":false,"./cubehelix.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9Zb99":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "darker", ()=>darker);
parcelHelpers.export(exports, "brighter", ()=>brighter);
parcelHelpers.export(exports, "rgbConvert", ()=>rgbConvert);
parcelHelpers.export(exports, "rgb", ()=>rgb);
parcelHelpers.export(exports, "Rgb", ()=>Rgb);
parcelHelpers.export(exports, "hslConvert", ()=>hslConvert);
parcelHelpers.export(exports, "hsl", ()=>hsl);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
};
(0, _defineJsDefault.default)(Color, color, {
    copy (channels) {
        return Object.assign(new this.constructor, this, channels);
    },
    displayable () {
        return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
});
function color_formatHex() {
    return this.rgb().formatHex();
}
function color_formatHex8() {
    return this.rgb().formatHex8();
}
function color_formatHsl() {
    return hslConvert(this).formatHsl();
}
function color_formatRgb() {
    return this.rgb().formatRgb();
}
function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
     : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
     : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
     : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
     : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
     : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
     : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
     : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
     : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
     : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
     : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
     : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
exports.default = color;
function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}
function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Rgb, rgb, (0, _defineJs.extend)(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb () {
        return this;
    },
    clamp () {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable () {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
}));
function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
}
function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else s = l > 0 && l < 1 ? 0 : h;
    return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Hsl, hsl, (0, _defineJs.extend)(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    clamp () {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl () {
        const a = clampa(this.opacity);
        return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
}));
function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
}
function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
}
/* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

},{"./define.js":"aPcHT","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aPcHT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extend", ()=>extend);
exports.default = function(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
};
function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for(var key in definition)prototype[key] = definition[key];
    return prototype;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"rYstm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minHeight", ()=>minHeight);
parcelHelpers.export(exports, "minWidth", ()=>minWidth);
parcelHelpers.export(exports, "defaultPresenterStyle", ()=>defaultPresenterStyle);
parcelHelpers.export(exports, "defaultPresenterConfig", ()=>defaultPresenterConfig);
parcelHelpers.export(exports, "createStage", ()=>createStage);
parcelHelpers.export(exports, "groupStrokeWidth", ()=>groupStrokeWidth);
parcelHelpers.export(exports, "lineZ", ()=>lineZ);
parcelHelpers.export(exports, "defaultView", ()=>defaultView);
parcelHelpers.export(exports, "minZ", ()=>minZ);
parcelHelpers.export(exports, "min3dDepth", ()=>min3dDepth);
parcelHelpers.export(exports, "minPixelSize", ()=>minPixelSize);
parcelHelpers.export(exports, "defaultOnAxisItem", ()=>defaultOnAxisItem);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _color = require("./color");
const minHeight = "100px";
const minWidth = "100px";
const defaultPresenterStyle = {
    cssPrefix: "vega-morphcharts-",
    defaultCubeColor: [
        128,
        128,
        128,
        255
    ],
    highlightColor: [
        0,
        0,
        0,
        255
    ]
};
const defaultPresenterConfig = {
    onCubeClick: (e, cube)=>{},
    onCubeHover: (e, cube)=>{},
    transitionDurations: {
        position: 600,
        stagger: 600,
        view: 600
    },
    renderer: {
        advanced: false,
        advancedOptions: {},
        basicOptions: {
            antialias: true
        }
    }
};
function createStage(view) {
    const stage = {
        view,
        cubeData: [],
        pathData: [],
        axes: {
            x: [],
            y: [],
            z: []
        },
        gridLines: [],
        textData: [],
        legend: {
            rows: {}
        },
        facets: []
    };
    return stage;
}
const groupStrokeWidth = 1;
const lineZ = 0;
const defaultView = "2d";
const minZ = 0.5;
const min3dDepth = 0.05;
const minPixelSize = 0.5;
const zAxisEncodeColor = [
    7,
    7,
    7,
    255
];
const zAxisOutColor = [
    0,
    0,
    0,
    255
];
function defaultOnAxisItem(vegaItem, stageItem, stage, currAxis) {
    if ((0, _color.colorIsEqual)(stageItem.color, zAxisEncodeColor)) {
        stageItem.color = zAxisOutColor;
        if (currAxis.axisRole !== "z") {
            const previousAxisRole = removeCurrentAxes(stage, currAxis);
            if (previousAxisRole) {
                currAxis.axisRole = "z";
                stage.axes.z.push(currAxis);
            }
        }
    }
}
function removeCurrentAxes(stage, currAxis) {
    //find the current axis, remove it from parent
    for(const axisRole in stage.axes){
        const axes = stage.axes[axisRole];
        for(let i = 0; i < axes.length; i++)if (axes[i] === currAxis) {
            axes.splice(i, 1);
            return axisRole;
        }
    }
}

},{"./color":"cXyMC","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4hPDY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base", ()=>base);
/**
 * Specify the dependency libraries to use for rendering.
 * @param vega Vega library.
 */ parcelHelpers.export(exports, "use", ()=>use);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ const vega = {
    CanvasHandler: null,
    inferType: null,
    inferTypes: null,
    loader: null,
    parse: null,
    read: null,
    renderModule: null,
    Renderer: null,
    sceneVisit: null,
    scheme: null,
    truncate: null,
    View: null
};
const base = {
    vega
};
function use(vega) {
    base.vega = vega;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"bqYNS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Class which presents a Stage of chart data using MorphCharts to render.
 */ parcelHelpers.export(exports, "Presenter", ()=>Presenter);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _clone = require("./clone");
var _defaults = require("./defaults");
var _enums = require("./enums");
var _legend = require("./legend");
var _panel = require("./panel");
var _patchedCubeArray = require("./patchedCubeArray");
var _stagers = require("./stagers");
var _tsxCreateElement = require("tsx-create-element");
var _morphcharts = require("./morphcharts");
class Presenter {
    /**
     * Instantiate a new Presenter.
     * @param el Parent HTMLElement to present within.
     * @param style Optional PresenterStyle styling options.
     */ constructor(el, style){
        this.el = el;
        this.style = (0, _clone.deepMerge)((0, _defaults.defaultPresenterStyle), style);
        (0, _panel.initializePanel)(this);
        this._last = {
            view: null,
            height: null,
            width: null,
            cubeCount: null,
            stage: null
        };
    }
    /**
     * Get the previously rendered Stage object.
     */ get stage() {
        return this._last.stage;
    }
    /**
     * Get the current View camera type.
     */ get view() {
        return this._last.view;
    }
    /**
     * Cancels any pending animation, calling animationCanceled() on original queue.
     */ animationCancel() {
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = null;
            if (this.logger) this.logger(`canceling animation ${this.queuedAnimationOptions && this.queuedAnimationOptions.handlerLabel || "handler"}`);
            if (this.queuedAnimationOptions && this.queuedAnimationOptions.animationCanceled) this.queuedAnimationOptions.animationCanceled.call(null);
        }
    }
    /**
     * Stops the current animation and queues a new animation.
     * @param handler Function to invoke when timeout is complete.
     * @param timeout Length of time to wait before invoking the handler.
     * @param options Optional QueuedAnimationOptions object.
     */ animationQueue(handler, timeout, options) {
        if (this.logger) this.logger(`queueing animation ${options && options.waitingLabel || "waiting"}...(${timeout})`);
        this.animationCancel();
        this.animationTimer = setTimeout(()=>{
            if (this.logger) this.logger(`queueing animation ${options && options.handlerLabel || "handler"}...`);
            handler();
        }, timeout);
    }
    /**
     * Retrieve a sub-element of the rendered output.
     * @param type PresenterElement type of the HTMLElement to retrieve.
     */ getElement(type) {
        const elements = this.el.getElementsByClassName((0, _panel.className)(type, this));
        if (elements && elements.length) return elements[0];
    }
    /**
     * Present the Vega Scene, or Stage object using Morphcharts.
     * @param sceneOrStage Vega Scene object, or Stage object containing chart layout info.
     * @param height Height of the rendering area.
     * @param width Width of the rendering area.
     * @param config Optional presentation configuration object.
     */ present(sceneOrStage, height, width, config) {
        this.animationCancel();
        const scene = sceneOrStage;
        let stage;
        const options = {
            maxOrdinal: 0,
            currAxis: null,
            defaultCubeColor: this.style.defaultCubeColor,
            assignCubeOrdinal: config && config.onSceneRectAssignCubeOrdinal || (()=>options.maxOrdinal++),
            modifyAxis: (config === null || config === void 0 ? void 0 : config.onAxisItem) ? config.onAxisItem : (0, _defaults.defaultOnAxisItem),
            zAxisZindex: config === null || config === void 0 ? void 0 : config.zAxisZindex
        };
        //determine if this is a vega scene
        if (scene.marktype) {
            stage = (0, _defaults.createStage)(scene.view);
            (0, _stagers.sceneToStage)(options, stage, scene);
        } else stage = sceneOrStage;
        const c = (0, _clone.deepMerge)((0, _defaults.defaultPresenterConfig), config);
        if (!this.morphchartsref) {
            this._morphChartsOptions = {
                container: this.getElement((0, _enums.PresenterElement).gl),
                pickGridCallback: c.axisPickGridCallback,
                onCubeHover: (e, ordinal)=>{
                    c.onCubeHover(e, {
                        ordinal,
                        color: null,
                        position: null,
                        size: null
                    });
                },
                onCubeClick: (e, ordinal)=>{
                    c.onCubeClick(e, {
                        ordinal,
                        color: null,
                        position: null,
                        size: null
                    });
                },
                onCanvasClick: config === null || config === void 0 ? void 0 : config.onLayerClick,
                onLasso: config === null || config === void 0 ? void 0 : config.onLasso
            };
            this.morphchartsref = (0, _morphcharts.init)(this._morphChartsOptions, c.renderer || (0, _defaults.defaultPresenterConfig).renderer);
        }
        let cubeCount = Math.max(this._last.cubeCount, stage.cubeData.length);
        if (options.maxOrdinal) {
            cubeCount = Math.max(cubeCount, options.maxOrdinal);
            const empty = {
                isEmpty: true
            };
            stage.cubeData = (0, _patchedCubeArray.patchCubeArray)(cubeCount, empty, stage.cubeData);
        }
        config.preLayer && config.preLayer(stage);
        this.morphChartsRenderResult = (0, _morphcharts.morphChartsRender)(this.morphchartsref, this._last.stage, stage, height, width, config && config.preStage, config && config.morphChartsColors, c);
        delete stage.cubeData;
        delete stage.redraw;
        this._last = {
            cubeCount,
            height,
            width,
            stage,
            view: stage.view
        };
        const a = (0, _tsxCreateElement.getActiveElementInfo)();
        (0, _tsxCreateElement.mount)((0, _legend.LegendView)({
            legend: stage.legend,
            onClick: config && config.onLegendClick
        }), this.getElement((0, _enums.PresenterElement).legend));
        (0, _tsxCreateElement.setActiveElement)(a);
        if (config && config.onPresent) config.onPresent();
    }
    canvasToDataURL() {
        return new Promise((resolve, reject)=>{
            this.morphchartsref.core.afterRenderCallback = ()=>{
                this.morphchartsref.core.afterRenderCallback = null;
                const canvas = this.getElement((0, _enums.PresenterElement).gl).getElementsByTagName("canvas")[0];
                const png = canvas.toDataURL("image/png");
                resolve(png);
            };
        });
    }
    configColors(mcColors) {
        (0, _morphcharts.colorConfig)(this.morphchartsref, mcColors);
    }
    /**
     * Home the camera to the last initial position.
     */ homeCamera() {
        var _a;
        (_a = this.morphchartsref) === null || _a === void 0 || _a.reset();
    }
    /**
     * Show guidelines of rendering height/width and center of OrbitView.
     */ showGuides() {
        this.getElement((0, _enums.PresenterElement).gl).classList.add("show-center");
    //TODO Morphcharts gridlines
    }
    finalize() {
        this.animationCancel();
        if (this.morphchartsref) this.morphchartsref.core.stop();
        if (this.el) this.el.innerHTML = "";
        this._last = null;
        this.morphchartsref = null;
        this.el = null;
        this.logger = null;
        this.queuedAnimationOptions = null;
    }
}

},{"./clone":"l4wsy","./defaults":"rYstm","./enums":"gGi06","./legend":"5qk80","./panel":"5yXsp","./patchedCubeArray":"2YUY8","./stagers":"7lcmH","tsx-create-element":"1Cr5U","./morphcharts":"gGHdI","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gGi06":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PresenterElement", ()=>PresenterElement);
var PresenterElement;
(function(PresenterElement) {
    PresenterElement[PresenterElement["root"] = 0] = "root";
    PresenterElement[PresenterElement["gl"] = 1] = "gl";
    PresenterElement[PresenterElement["panel"] = 2] = "panel";
    PresenterElement[PresenterElement["legend"] = 3] = "legend";
    PresenterElement[PresenterElement["vegaControls"] = 4] = "vegaControls";
})(PresenterElement || (PresenterElement = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5qk80":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LegendView", ()=>LegendView);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _tsxCreateElement = require("tsx-create-element");
var _controls = require("./controls");
const LegendView = (props)=>{
    const rows = [];
    const addRow = (row, i)=>{
        const fn = symbolMap[row.symbol.shape];
        let jsx;
        if (fn) jsx = fn(row.symbol);
        else jsx = (0, _tsxCreateElement.createElement)("span", null, "x");
        rows.push({
            cells: [
                {
                    className: "symbol",
                    content: jsx
                },
                {
                    className: "label",
                    content: row.label,
                    title: row.label
                }, 
            ]
        });
    };
    const sorted = Object.keys(props.legend.rows).sort((a, b)=>+a - +b);
    sorted.forEach((i)=>addRow(props.legend.rows[i], +i));
    if (sorted.length) return (0, _tsxCreateElement.createElement)((0, _controls.Table), {
        rows: rows,
        rowClassName: "legend-row",
        onRowClick: (e, i)=>props.onClick(e, props.legend, i)
    }, props.legend.title !== void 0 && (0, _tsxCreateElement.createElement)("tr", {
        onClick: (e)=>props.onClick(e, props.legend, null)
    }, (0, _tsxCreateElement.createElement)("th", {
        colSpan: 2
    }, props.legend.title)));
};
const symbolMap = {
    square: function(symbol) {
        return (0, _tsxCreateElement.createElement)("div", {
            style: {
                height: `${symbol.bounds.y2 - symbol.bounds.y1}px`,
                width: `${symbol.bounds.x2 - symbol.bounds.x1}px`,
                backgroundColor: symbol.fill,
                borderColor: symbol.fill
            }
        });
    }
};

},{"tsx-create-element":"1Cr5U","./controls":"8CX6f","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"5yXsp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initializePanel", ()=>initializePanel);
parcelHelpers.export(exports, "className", ()=>className);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _tsxCreateElement = require("tsx-create-element");
var _defaults = require("./defaults");
var _enums = require("./enums");
function initializePanel(presenter) {
    const rootDiv = (0, _tsxCreateElement.createElement)("div", {
        className: className((0, _enums.PresenterElement).root, presenter)
    }, (0, _tsxCreateElement.createElement)("div", {
        className: className((0, _enums.PresenterElement).gl, presenter),
        style: {
            minHeight: (0, _defaults.minHeight),
            minWidth: (0, _defaults.minWidth)
        }
    }), (0, _tsxCreateElement.createElement)("div", {
        className: className((0, _enums.PresenterElement).panel, presenter)
    }, (0, _tsxCreateElement.createElement)("div", {
        className: className((0, _enums.PresenterElement).vegaControls, presenter)
    }), (0, _tsxCreateElement.createElement)("div", {
        className: className((0, _enums.PresenterElement).legend, presenter)
    })));
    (0, _tsxCreateElement.mount)(rootDiv, presenter.el);
}
function className(type, presenter) {
    return `${presenter.style.cssPrefix}${(0, _enums.PresenterElement)[type]}`;
}

},{"tsx-create-element":"1Cr5U","./defaults":"rYstm","./enums":"gGi06","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"2YUY8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ parcelHelpers.export(exports, "patchCubeArray", ()=>patchCubeArray);
function patchCubeArray(allocatedSize, empty, cubes) {
    const patched = new Array(allocatedSize);
    patched.fill(empty);
    cubes.forEach((cube)=>patched[cube.ordinal] = cube);
    return patched;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7lcmH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sceneToStage", ()=>sceneToStage);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _legend = require("./marks/legend");
var _legendDefault = parcelHelpers.interopDefault(_legend);
var _image = require("./marks/image");
var _imageDefault = parcelHelpers.interopDefault(_image);
var _rect = require("./marks/rect");
var _rectDefault = parcelHelpers.interopDefault(_rect);
var _rule = require("./marks/rule");
var _ruleDefault = parcelHelpers.interopDefault(_rule);
var _line = require("./marks/line");
var _lineDefault = parcelHelpers.interopDefault(_line);
var _text = require("./marks/text");
var _textDefault = parcelHelpers.interopDefault(_text);
var _base = require("./base");
var _color = require("./color");
var _defaults = require("./defaults");
var _interfaces = require("./marks/interfaces");
function getAxisGroupType(item, options) {
    const axisItem = item;
    const axisMark = axisItem === null || axisItem === void 0 ? void 0 : axisItem.mark;
    if ((axisMark === null || axisMark === void 0 ? void 0 : axisMark.zindex) === options.zAxisZindex && options.zAxisZindex !== undefined) return (0, _interfaces.GroupType).zAxis;
    switch(axisItem.orient){
        case "bottom":
        case "top":
            return (0, _interfaces.GroupType).xAxis;
        case "left":
        case "right":
            return (0, _interfaces.GroupType).yAxis;
    }
}
function convertGroupRole(item, options) {
    if (item.mark.role === "legend") return (0, _interfaces.GroupType).legend;
    if (item.mark.role === "axis") {
        const groupType = getAxisGroupType(item, options);
        if (groupType !== undefined) return groupType;
    }
}
const group = (options, stage, scene, x, y, groupType)=>{
    (0, _base.base).vega.sceneVisit(scene, function(g) {
        const gx = g.x || 0, gy = g.y || 0;
        if (g.context && g.context.background && !stage.backgroundColor) stage.backgroundColor = (0, _color.colorFromString)(g.context.background);
        if (g.stroke) {
            const facetRect = {
                datum: g.datum,
                lines: (0, _rule.box)(gx + x, gy + y, g.height, g.width, g.stroke, (0, _defaults.groupStrokeWidth))
            };
            stage.facets.push(facetRect);
        }
        groupType = convertGroupRole(g, options) || groupType;
        setCurrentAxis(options, stage, groupType);
        // draw group contents
        (0, _base.base).vega.sceneVisit(g, function(item) {
            mainStager(options, stage, item, gx + x, gy + y, groupType);
        });
    });
};
function setCurrentAxis(options, stage, groupType) {
    let axisRole;
    switch(groupType){
        case (0, _interfaces.GroupType).xAxis:
            axisRole = "x";
            break;
        case (0, _interfaces.GroupType).yAxis:
            axisRole = "y";
            break;
        case (0, _interfaces.GroupType).zAxis:
            axisRole = "z";
            break;
        default:
            return;
    }
    options.currAxis = {
        axisRole,
        domain: null,
        tickText: [],
        ticks: []
    };
    stage.axes[axisRole].push(options.currAxis);
}
const markStagers = {
    group,
    legend: (0, _legendDefault.default),
    image: (0, _imageDefault.default),
    rect: (0, _rectDefault.default),
    rule: (0, _ruleDefault.default),
    line: (0, _lineDefault.default),
    text: (0, _textDefault.default)
};
const mainStager = (options, stage, scene, x, y, groupType)=>{
    if (scene.marktype !== "group" && groupType === (0, _interfaces.GroupType).legend) (0, _legendDefault.default)(options, stage, scene, x, y, groupType);
    else {
        const markStager = markStagers[scene.marktype];
        if (markStager) markStager(options, stage, scene, x, y, groupType);
    }
};
function sceneToStage(options, stage, scene) {
    mainStager(options, stage, scene, 0, 0, null);
    sortAxis(stage.axes.x, 0);
    sortAxis(stage.axes.y, 1);
    sortAxis(stage.axes.z, 1);
}
function sortAxis(axes, dim) {
    axes.forEach((axis)=>{
        if (axis.domain) orderDomain(axis.domain, dim);
        axis.ticks.sort((a, b)=>a.sourcePosition[dim] - b.sourcePosition[dim]);
        axis.tickText.sort((a, b)=>a.position[dim] - b.position[dim]);
    });
}
function orderDomain(domain, dim) {
    if (domain.sourcePosition[dim] > domain.targetPosition[dim]) {
        const temp = domain.targetPosition;
        domain.targetPosition = domain.sourcePosition;
        domain.sourcePosition = temp;
    }
}

},{"./marks/legend":"byXAS","./marks/image":"79573","./marks/rect":"dPt5N","./marks/rule":"7VQ6s","./marks/line":"fTgYt","./marks/text":"iaph5","./base":"4hPDY","./color":"cXyMC","./defaults":"rYstm","./marks/interfaces":"8AxXf","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"byXAS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _base = require("../base");
const legendMap = {
    "legend-title": function(legend, textItem) {
        legend.title = textItem.text;
    },
    "legend-symbol": function(legend, symbol) {
        const { bounds , fill , shape  } = symbol;
        //this object is safe for serialization
        const legendRowSymbol = {
            bounds,
            fill,
            shape
        };
        const i = symbol.datum.index;
        legend.rows[i] = legend.rows[i] || {};
        legend.rows[i].symbol = legendRowSymbol;
    },
    "legend-label": function(legend, label) {
        const i = label.datum.index;
        legend.rows[i] = legend.rows[i] || {};
        const row = legend.rows[i];
        row.label = label.text;
        row.value = label.datum.value;
    }
};
const markStager = (options, stage, scene, x, y, groupType)=>{
    (0, _base.base).vega.sceneVisit(scene, function(item) {
        const fn = legendMap[item.mark.role];
        if (fn) fn(stage.legend, item);
    });
};
exports.default = markStager;

},{"../base":"4hPDY","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"79573":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _base = require("../base");
const markStager = (options, stage, scene, x, y, groupType)=>{
    (0, _base.base).vega.sceneVisit(scene, function(item) {
        const { bounds , height , url , width  } = item;
        let { x1 , x2 , y1 , y2  } = bounds;
        x1 += x;
        x2 += x;
        y1 += y;
        y2 += y;
        if (!stage.backgroundImages) stage.backgroundImages = [];
        stage.backgroundImages.push({
            bounds: {
                x1,
                x2,
                y1,
                y2
            },
            height,
            url,
            width
        });
    });
};
exports.default = markStager;

},{"../base":"4hPDY","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"dPt5N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _base = require("../base");
var _color = require("../color");
var _defaults = require("../defaults");
const markStager = (options, stage, scene, x, y, groupType)=>{
    (0, _base.base).vega.sceneVisit(scene, function(item) {
        const noZ = item.z === undefined;
        const z = noZ ? 0 : (item.z || 0) + (0, _defaults.minZ);
        const depth = (noZ ? 0 : item.depth || 0) + (0, _defaults.min3dDepth);
        //change direction of y from SVG to GL
        const ty = -1;
        const ordinal = options.assignCubeOrdinal(item.datum);
        if (ordinal > options.maxOrdinal) options.maxOrdinal = ordinal;
        if (ordinal === undefined) ;
        else {
            const cube = {
                ordinal,
                size: [
                    item.width,
                    item.height,
                    depth
                ],
                position: [
                    x + (+item.x || 0),
                    ty * (y + (+item.y || 0)) - +item.height,
                    z
                ],
                color: (0, _color.colorFromString)(item.fill) || options.defaultCubeColor || [
                    128,
                    128,
                    128,
                    128
                ]
            };
            cube.color[3] = item.opacity === undefined ? 255 : 255 * item.opacity;
            stage.cubeData.push(cube);
        }
    });
};
exports.default = markStager;

},{"../base":"4hPDY","../color":"cXyMC","../defaults":"rYstm","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"7VQ6s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "box", ()=>box);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _base = require("../base");
var _color = require("../color");
var _defaults = require("../defaults");
const markStager = (options, stage, scene, x, y, groupType)=>{
    (0, _base.base).vega.sceneVisit(scene, function(item) {
        const x1 = item.x || 0;
        const y1 = item.y || 0;
        const x2 = item.x2 != null ? item.x2 : x1;
        const y2 = item.y2 != null ? item.y2 : y1;
        const lineItem = styledLine(x1 + x, y1 + y, x2 + x, y2 + y, item.stroke, item.strokeWidth);
        const { currAxis  } = options;
        if (options.modifyAxis) options.modifyAxis(item, lineItem, stage, currAxis);
        if (item.mark.role === "axis-tick") currAxis.ticks.push(lineItem);
        else if (item.mark.role === "axis-domain") currAxis.domain = lineItem;
        else stage.gridLines.push(lineItem);
    });
};
function styledLine(x1, y1, x2, y2, stroke, strokeWidth) {
    const line = {
        sourcePosition: [
            x1,
            -y1,
            (0, _defaults.lineZ)
        ],
        targetPosition: [
            x2,
            -y2,
            (0, _defaults.lineZ)
        ],
        color: (0, _color.colorFromString)(stroke),
        strokeWidth: strokeWidth
    };
    return line;
}
function box(gx, gy, height, width, stroke, strokeWidth, diagonals = false) {
    const lines = [
        styledLine(gx, gy, gx + width, gy, stroke, strokeWidth),
        styledLine(gx + width, gy, gx + width, gy + height, stroke, strokeWidth),
        styledLine(gx + width, gy + height, gx, gy + height, stroke, strokeWidth),
        styledLine(gx, gy + height, gx, gy, stroke, strokeWidth), 
    ];
    if (diagonals) {
        lines.push(styledLine(gx, gy, gx + width, gy + height, stroke, strokeWidth));
        lines.push(styledLine(gx, gy + height, gx + width, gy, stroke, strokeWidth));
    }
    return lines;
}
exports.default = markStager;

},{"../base":"4hPDY","../color":"cXyMC","../defaults":"rYstm","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fTgYt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _color = require("../color");
//change direction of y from SVG to GL
const ty = -1;
const markStager = (options, stage, scene, x, y, groupType)=>{
    const g = Object.assign({
        opacity: 1,
        strokeOpacity: 1,
        strokeWidth: 1
    }, scene.items[0]);
    const path = {
        strokeWidth: g.strokeWidth,
        strokeColor: (0, _color.colorFromString)(g.stroke),
        positions: scene.items.map((it)=>[
                it.x,
                ty * it.y,
                it.z || 0, 
            ])
    };
    path.strokeColor[3] *= g.strokeOpacity;
    path.strokeColor[3] *= g.opacity;
    stage.pathData.push(path);
};
exports.default = markStager;

},{"../color":"cXyMC","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"iaph5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ // import { AlignmentBaseline, TextAnchor } from '@deck.gl/layers/text-layer/text-layer';
var _base = require("../base");
var _color = require("../color");
const markStager = (options, stage, scene, x, y, groupType)=>{
    //change direction of y from SVG to GL
    const ty = -1;
    (0, _base.base).vega.sceneVisit(scene, function(item) {
        if (!item.text) return;
        const size = item.fontSize;
        //const alignmentBaseline = convertBaseline(item.baseline);
        //const yOffset = alignmentBaseline === 'top' ? item.fontSize / 2 : 0;    //fixup to get tick text correct
        const yOffset = 0;
        const textItem = {
            color: (0, _color.colorFromString)(item.fill),
            text: item.limit === undefined ? item.text : (0, _base.base).vega.truncate(item.text, item.limit, "right", item.ellipsis || "..."),
            position: [
                x + (item.x || 0),
                ty * (y + (item.y || 0) + yOffset),
                0
            ],
            size,
            angle: convertAngle(item.angle),
            //textAnchor: convertAlignment(item.align),
            //alignmentBaseline,
            metaData: item.metaData
        };
        const { currAxis  } = options;
        if (options.modifyAxis) options.modifyAxis(item, textItem, stage, currAxis);
        if (item.mark.role === "axis-label") {
            const tickText = textItem;
            tickText.value = item.datum.value;
            currAxis.tickText.push(tickText);
        } else if (item.mark.role === "axis-title") currAxis.title = textItem;
        else stage.textData.push(textItem);
    });
};
function convertAngle(vegaTextAngle) {
    if (vegaTextAngle && !isNaN(vegaTextAngle)) return 360 - vegaTextAngle;
    return 0;
}
// function convertAlignment(textAlign: SceneTextAlign): TextAnchor {
//     switch (textAlign) {
//         case 'center': return 'middle';
//         case 'left': return 'start';
//         case 'right': return 'end';
//     }
//     return 'start';
// }
// function convertBaseline(baseline: SceneTextBaseline): AlignmentBaseline {
//     switch (baseline) {
//         case 'middle': return 'center';
//     }
//     return baseline || 'bottom';
// }
exports.default = markStager;

},{"../base":"4hPDY","../color":"cXyMC","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8AxXf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GroupType", ()=>GroupType);
var GroupType;
(function(GroupType) {
    GroupType[GroupType["none"] = 0] = "none";
    GroupType[GroupType["legend"] = 1] = "legend";
    GroupType[GroupType["xAxis"] = 2] = "xAxis";
    GroupType[GroupType["yAxis"] = 3] = "yAxis";
    GroupType[GroupType["zAxis"] = 4] = "zAxis";
})(GroupType || (GroupType = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gGHdI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _render = require("./render");
parcelHelpers.exportAll(_render, exports);
var _color = require("./color");
parcelHelpers.exportAll(_color, exports);
var _init = require("./init");
parcelHelpers.exportAll(_init, exports);

},{"./render":"fjsYU","./color":"4Hopn","./init":"9V139","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fjsYU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "morphChartsRender", ()=>morphChartsRender);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _axes = require("./axes");
var _bounds = require("./bounds");
var _cubes = require("./cubes");
var _lines = require("./lines");
var _text = require("./text");
var _image = require("./image");
var _defaults = require("../defaults");
var _color = require("./color");
var _defaults1 = require("./defaults");
function morphChartsRender(ref, prevStage, stage, height, width, preStage, colors, config) {
    const { qCameraRotation2d , qCameraRotation3d , qModelRotation2d , qModelRotation3d , vCameraPosition  } = (0, _defaults1.cameraDefaults);
    const { core , cameraTransitioner , modelTransitioner , positionTransitioner  } = ref;
    let cameraTo;
    let holdCamera;
    if (config.camera === "hold") holdCamera = true;
    else cameraTo = config.camera;
    if (prevStage && prevStage.view !== stage.view) {
        modelTransitioner.shouldTransition = !holdCamera;
        if (stage.view === "2d") {
            modelTransitioner.qRotation.from = qModelRotation3d;
            modelTransitioner.qRotation.to = qModelRotation2d;
            cameraTransitioner.qRotation.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.rotation) || qCameraRotation2d;
            cameraTransitioner.vPosition.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.position) || vCameraPosition;
        } else {
            modelTransitioner.qRotation.from = qModelRotation2d;
            modelTransitioner.qRotation.to = qModelRotation3d;
            cameraTransitioner.qRotation.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.rotation) || qCameraRotation3d;
            cameraTransitioner.vPosition.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.position) || vCameraPosition;
        }
    } else {
        modelTransitioner.shouldTransition = false;
        if (stage.view === "2d") {
            modelTransitioner.qRotation.to = qModelRotation2d;
            cameraTransitioner.qRotation.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.rotation) || qCameraRotation2d;
            cameraTransitioner.vPosition.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.position) || vCameraPosition;
        } else {
            modelTransitioner.qRotation.to = qModelRotation3d;
            cameraTransitioner.qRotation.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.rotation) || qCameraRotation3d;
            cameraTransitioner.vPosition.to = (cameraTo === null || cameraTo === void 0 ? void 0 : cameraTo.position) || vCameraPosition;
        }
    }
    core.camera.getOrbit(cameraTransitioner.qRotation.from);
    core.camera.getPosition(cameraTransitioner.vPosition.from);
    if (!prevStage) {
        core.setModelRotation(modelTransitioner.qRotation.to, false);
        core.camera.setOrbit(cameraTransitioner.qRotation.to, false);
        core.camera.setPosition(cameraTransitioner.vPosition.to, false);
    } else if (!holdCamera) cameraTransitioner.begin();
    positionTransitioner.begin();
    if (modelTransitioner.shouldTransition) modelTransitioner.begin();
    const props = {
        ref,
        stage,
        height,
        width,
        config
    };
    const cubeLayer = (0, _cubes.createCubeLayer)(props);
    const lineLayer = (0, _lines.createLineLayer)(props);
    const textLayer = (0, _text.createTextLayer)(props);
    const { backgroundImages  } = stage;
    let contentBounds = (0, _bounds.outerBounds)((0, _bounds.outerBounds)(cubeLayer === null || cubeLayer === void 0 ? void 0 : cubeLayer.bounds, lineLayer === null || lineLayer === void 0 ? void 0 : lineLayer.bounds), (0, _bounds.outerBounds)(textLayer === null || textLayer === void 0 ? void 0 : textLayer.bounds, null));
    backgroundImages === null || backgroundImages === void 0 || backgroundImages.forEach((backgroundImage)=>{
        contentBounds = (0, _bounds.outerBounds)(contentBounds, convertBounds(backgroundImage.bounds));
    });
    props.bounds = contentBounds;
    const axesLayer = (0, _axes.createAxesLayer)(props);
    core.config.transitionStaggering = config.transitionDurations.stagger;
    core.config.transitionDuration = config.transitionDurations.position;
    let bounds;
    if (axesLayer && axesLayer.bounds) bounds = axesLayer.bounds;
    else bounds = contentBounds;
    ref.setMorphChartsRendererOptions(config.renderer);
    if (preStage) preStage(stage, cubeLayer);
    //add images
    core.renderer.images = [];
    if (backgroundImages) {
        const addImage = (imageBounds, imageData)=>{
            const imageWidth = imageBounds.maxBoundsX - imageBounds.minBoundsX;
            const imageHeight = imageBounds.maxBoundsY - imageBounds.minBoundsY;
            const position = [
                imageBounds.minBoundsX + imageWidth / 2,
                imageBounds.minBoundsY + imageHeight / 2,
                0
            ];
            const imageQuad = (0, _image.createImageQuad)(core, imageData, contentBounds, position, imageWidth, imageHeight);
            const imageVisual = core.renderer.createImageVisual(imageQuad);
            core.renderer.images.push(imageVisual);
        };
        const imageDataCache = {};
        backgroundImages.forEach((backgroundImage)=>{
            const imageBounds = convertBounds(backgroundImage.bounds);
            const imageData = imageDataCache[backgroundImage.url];
            if (imageData) addImage(imageBounds, imageData);
            else (0, _image.getImageData)(backgroundImage.url).then((imageData)=>{
                imageDataCache[backgroundImage.url] = imageData;
                addImage(imageBounds, imageData);
            });
        });
    }
    //Now call update on each layout
    layersWithSelection(cubeLayer, lineLayer, textLayer, config.layerSelection, bounds, ref.layerStagger);
    ref.lastPresenterConfig = config;
    ref.lastView = stage.view;
    core.renderer.transitionTime = 0; // Set renderer transition time for this render pass to prevent rendering target buffer for single frame
    (0, _color.colorConfig)(ref, colors);
    return {
        bounds,
        getCubeLayer: ()=>cubeLayer,
        update: (layerSelection)=>layersWithSelection(cubeLayer, lineLayer, textLayer, layerSelection, bounds, ref.layerStagger),
        activate: (id)=>core.renderer.transitionBuffers[0].activeId = id,
        moveCamera: (camera)=>{
            if (!(positionTransitioner.isTransitioning || modelTransitioner.isTransitioning)) {
                core.camera.getOrbit(cameraTransitioner.qRotation.from);
                core.camera.getPosition(cameraTransitioner.vPosition.from);
                cameraTransitioner.move(camera.position, camera.rotation);
            }
        }
    };
}
function layersWithSelection(cubeLayer, lineLayer, textLayer, layerSelection, bounds, layerStagger) {
    const layerItems = [
        {
            layer: cubeLayer,
            selection: layerSelection === null || layerSelection === void 0 ? void 0 : layerSelection.cubes,
            stagger: layerStagger === null || layerStagger === void 0 ? void 0 : layerStagger.cubes
        },
        {
            layer: lineLayer,
            selection: layerSelection === null || layerSelection === void 0 ? void 0 : layerSelection.lines,
            stagger: layerStagger === null || layerStagger === void 0 ? void 0 : layerStagger.lines
        },
        {
            layer: textLayer,
            selection: layerSelection === null || layerSelection === void 0 ? void 0 : layerSelection.texts,
            stagger: layerStagger === null || layerStagger === void 0 ? void 0 : layerStagger.texts
        }, 
    ];
    layerItems.forEach((layerItem)=>{
        var _a;
        return (_a = layerItem.layer) === null || _a === void 0 ? void 0 : _a.update(bounds, layerItem.selection, layerItem.stagger);
    });
}
function convertBounds(bounds) {
    if (!bounds) return;
    return {
        minBoundsX: bounds.x1,
        maxBoundsX: bounds.x2,
        minBoundsY: -bounds.y2,
        maxBoundsY: -bounds.y1,
        minBoundsZ: (0, _defaults.minZ),
        maxBoundsZ: (0, _defaults.minZ)
    };
}

},{"./axes":"cqVLQ","./bounds":"ipKbZ","./cubes":"8Swgd","./lines":"1NssX","./text":"gXSar","./image":"82mLv","../defaults":"rYstm","./color":"4Hopn","./defaults":"lUHd0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"cqVLQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAxesLayer", ()=>createAxesLayer);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
var _bounds = require("./bounds");
const createAxesLayer = (props)=>{
    const { config , height , ref , stage  } = props;
    const { core  } = ref;
    const { renderer  } = core;
    const { x , y , z  } = stage.axes;
    const xyz = [
        ...x,
        ...y,
        ...z
    ];
    renderer.currentAxes = [];
    if (!xyz.length) {
        renderer.axesVisibility = (0, _morphcharts.AxesVisibility).none;
        return;
    }
    renderer.axesVisibility = (0, _morphcharts.AxesVisibility).current;
    const correlation = new AxesCorrelation(stage, 3);
    const { axesSets , labels  } = correlation;
    const grid = correlation.getGrid();
    if (grid.byColumn[0]) {
        grid.byColumn[0].forEach((row)=>{
            row.axesSet.showFacetTitleY = true;
        });
        grid.byRow[0].forEach((col)=>{
            col.axesSet.showFacetTitleX = true;
        });
    }
    if (grid.rows > 1) {
        const { byRow  } = grid;
        byRow[0].forEach(({ axesSet  }, col)=>{
            if (!axesSet.y) {
                if (byRow[1][col].axesSet) {
                    //move x up
                    byRow[1][col].axesSet.x.tickText = axesSet.x.tickText;
                    byRow[1][col].axesSet.showFacetTitleX = axesSet.showFacetTitleX;
                    delete axesSet.x;
                }
            }
        });
    }
    let bounds;
    const allAxesSetBounds = [];
    let anyZ = false;
    for(let i = 0; i < axesSets.length; i++)if (axesSets[i].z) {
        anyZ = true;
        break;
    }
    const is3d = stage.view === "3d" && anyZ;
    axesSets.forEach((axesSet)=>{
        if (!axesSet.x && !axesSet.y) return;
        const axesSetBounds = {
            axesSet,
            maxBoundsX: null,
            maxBoundsY: null,
            maxBoundsZ: null,
            minBoundsX: null,
            minBoundsY: null,
            minBoundsZ: null
        };
        if (is3d) {
            const zBounds = getDomainBounds(1, axesSet.z);
            axesSetBounds.minBoundsZ = -zBounds.maxBounds;
            axesSetBounds.maxBoundsZ = -zBounds.minBounds;
        }
        const yBounds = getDomainBounds(1, axesSet.y);
        axesSetBounds.minBoundsY = yBounds.minBounds;
        axesSetBounds.maxBoundsY = yBounds.maxBounds;
        axesSetBounds.y = yBounds.minBounds;
        axesSetBounds.h = yBounds.maxBounds - yBounds.minBounds;
        const xBounds = getDomainBounds(0, axesSet.x);
        axesSetBounds.minBoundsX = xBounds.minBounds;
        axesSetBounds.maxBoundsX = xBounds.maxBounds;
        axesSetBounds.x = xBounds.minBounds;
        axesSetBounds.w = xBounds.maxBounds - xBounds.minBounds;
        allAxesSetBounds.push(axesSetBounds);
        bounds = (0, _bounds.outerBounds)(bounds, axesSetBounds);
    });
    const facetLabelX = labels.filter((label)=>label.axisRole === "x")[0];
    const facetLabelY = labels.filter((label)=>label.axisRole === "y")[0];
    core.inputManager.pickAxesTitleCallback = ({ axis , axes , manipulator  })=>{
        const axesSet = axesSets[axes];
        let a;
        let f;
        switch(axis){
            case 0:
                a = axesSet.x;
                f = facetLabelX;
                break;
            case 1:
                a = axesSet.y;
                f = facetLabelY;
                break;
            case 2:
                a = axesSet.z;
                break;
        }
        if (a) config.onTextClick(manipulator.event, a.title || f.title);
    };
    allAxesSetBounds.forEach((axesSetBounds)=>{
        const { axesSet  } = axesSetBounds;
        if (!axesSet.x && !axesSet.y) return;
        const cartesian = new (is3d ? (0, _morphcharts.Axes).Cartesian3dAxes : (0, _morphcharts.Axes).Cartesian2dAxes)(core);
        cartesian.isDivisionPickingEnabled = [
            false,
            false,
            false
        ];
        cartesian.arePickDivisionsVisible = [
            false,
            false,
            false
        ];
        cartesian.isLabelPickingEnabled = [
            false,
            false,
            false
        ];
        cartesian.isTitlePickingEnabled = [
            false,
            false,
            false
        ];
        cartesian.isGridPickingEnabled = false;
        cartesian.isHeadingPickingEnabled = [
            false,
            false,
            false
        ];
        createAxes(cartesian, 0, 0, axesSet.x, (0, _morphcharts.AxesTextOrientation).perpendicular, height, props, axesSet.showFacetTitleX && facetLabelX);
        createAxes(cartesian, 1, 1, axesSet.y, (0, _morphcharts.AxesTextOrientation).perpendicular, height, props, axesSet.showFacetTitleY && facetLabelY);
        if (is3d) createAxes(cartesian, 1, 2, axesSet.z, (0, _morphcharts.AxesTextOrientation).perpendicular, height, props);
        configCartesianAxes(is3d, bounds, cartesian);
        const { maxBoundsX , maxBoundsY , minBoundsX , minBoundsY ,  } = bounds;
        const w = maxBoundsX - minBoundsX;
        const h = maxBoundsY - minBoundsY;
        cartesian.scalingX = axesSetBounds.w / w;
        cartesian.scalingY = axesSetBounds.h / h;
        cartesian.offsetX = (axesSetBounds.x - minBoundsX + axesSetBounds.w / 2) / w - 0.5;
        cartesian.offsetY = (axesSetBounds.y - minBoundsY + axesSetBounds.h / 2) / h - 0.5;
        const aspect = h / w;
        if (aspect > 1) cartesian.offsetX /= aspect;
        else cartesian.offsetY *= aspect;
        const axes = is3d ? renderer.createCartesian3dAxesVisual(cartesian) : renderer.createCartesian2dAxesVisual(cartesian);
        renderer.currentAxes.push(axes);
        props.config.onAxesComplete && props.config.onAxesComplete(cartesian);
    });
    return {
        bounds
    };
};
const nullDomain = {
    sourcePosition: [
        0,
        0,
        0
    ],
    targetPosition: [
        0,
        0,
        0
    ]
};
class AxesCorrelation {
    constructor(stage, dimensions){
        this.dimensions = dimensions;
        const { x , y , z  } = stage.axes;
        this.axesSets = [];
        this.labels = [];
        [
            x,
            y,
            z
        ].forEach((axes)=>{
            axes.forEach((axis)=>{
                if (this.axesSets.length === 0) this.initialize(axis);
                else this.correlate(axis);
            });
        });
    }
    getGrid() {
        const mapCols = {};
        const mapRows = {};
        this.axesSets.forEach((axesSet)=>{
            var _a;
            const domain = (_a = axesSet === null || axesSet === void 0 ? void 0 : axesSet.x) === null || _a === void 0 ? void 0 : _a.domain;
            if (!domain) return;
            const col = domain.sourcePosition[0].toString();
            const row = domain.sourcePosition[1].toString();
            if (!mapCols[col]) mapCols[col] = {};
            mapCols[col][row] = axesSet;
            mapRows[row] = null;
        });
        const colKeys = Object.keys(mapCols).sort((a, b)=>+a - +b);
        const rowKeys = Object.keys(mapRows).sort((a, b)=>+a - +b);
        return {
            cols: colKeys.length,
            rows: rowKeys.length,
            byColumn: colKeys.map((colKey)=>rowKeys.map((rowKey)=>{
                    return {
                        colKey,
                        rowKey,
                        axesSet: mapCols[colKey][rowKey]
                    };
                })),
            byRow: rowKeys.map((rowKey)=>colKeys.map((colKey)=>{
                    return {
                        colKey,
                        rowKey,
                        axesSet: mapCols[colKey][rowKey]
                    };
                }))
        };
    }
    initialize(axis) {
        if (!axis.domain) {
            this.labels.push(axis);
            return;
        }
        const axesSet = {};
        axesSet[axis.axisRole] = axis;
        this.axesSets.push(axesSet);
    }
    correlate(axis) {
        if (!axis.domain) {
            this.labels.push(axis);
            return;
        }
        for(let i = 0; i < this.axesSets.length; i++){
            const axesSet = this.axesSets[i];
            for(const axisRole in axesSet){
                const test = axesSet[axisRole];
                if (this.matchDomains(axis.domain, test.domain)) {
                    //prefer the axes with titles
                    if (!axesSet[axis.axisRole] || !axesSet[axis.axisRole].tickText.length && axis.tickText.length) axesSet[axis.axisRole] = axis;
                    return;
                }
            }
        }
        this.initialize(axis);
    }
    matchDomains(a, b) {
        if (this.matchPoint(a.sourcePosition, b.sourcePosition)) return true;
        if (this.matchPoint(a.sourcePosition, b.targetPosition)) return true;
        if (this.matchPoint(a.targetPosition, b.targetPosition)) return true;
        if (this.matchPoint(a.targetPosition, b.sourcePosition)) return true;
        return false;
    }
    matchPoint(a, b) {
        for(let i = 0; i < this.dimensions; i++){
            if (a[i] !== b[i]) return false;
        }
        return true;
    }
}
function createAxes(cartesian, dim2d, dim3d, axis, orientation, height, props, facetLabel) {
    const domain = (axis === null || axis === void 0 ? void 0 : axis.domain) || nullDomain;
    const { tickPositions , tickText , textPos , textSize  } = convertAxis(axis, domain, dim2d, height);
    cartesian.setTickPositions(dim3d, tickPositions);
    cartesian.zero[dim3d] = 0; //TODO get any "zero" gridline position from vega
    cartesian.setLabelPositions(dim3d, textPos);
    cartesian.setLabels(dim3d, tickText);
    cartesian.setLabelSizes(dim3d, textSize);
    const title = (axis === null || axis === void 0 ? void 0 : axis.title) || (facetLabel === null || facetLabel === void 0 ? void 0 : facetLabel.title);
    if (title === null || title === void 0 ? void 0 : title.text) {
        cartesian.setTitle(dim3d, title.text);
        cartesian.setTitleSize(dim3d, title.size / height);
    }
    cartesian.setLabelOrientation(dim3d, orientation);
    props.config.onAxisConfig && props.config.onAxisConfig(cartesian, dim3d, axis);
    return {
        tickText
    };
}
function configCartesianAxes(is3d, bounds, cartesian) {
    if (is3d) cartesian.isEdgeVisible[(0, _morphcharts.Edge3D).topBack] = false;
    cartesian.isEdgeVisible[(0, _morphcharts.Edge3D).backRight] = false;
    cartesian.isEdgeVisible[(0, _morphcharts.Edge3D).bottomRight] = false;
    cartesian.isEdgeVisible[(0, _morphcharts.Edge3D).frontRight] = false;
    cartesian.isEdgeVisible[(0, _morphcharts.Edge3D).topFront] = false;
    cartesian.isEdgeVisible[(0, _morphcharts.Edge3D).topRight] = false;
    const { maxBoundsX , maxBoundsY , maxBoundsZ , minBoundsX , minBoundsY , minBoundsZ ,  } = bounds;
    cartesian.minBoundsX = minBoundsX;
    cartesian.maxBoundsX = maxBoundsX;
    cartesian.minBoundsY = minBoundsY;
    cartesian.maxBoundsY = maxBoundsY;
    if (is3d) {
        cartesian.minBoundsZ = minBoundsZ;
        cartesian.maxBoundsZ = maxBoundsZ;
    }
}
function getDomainBounds(dim2d, axis) {
    const domain = (axis === null || axis === void 0 ? void 0 : axis.domain) || nullDomain;
    const minBounds = domain.sourcePosition[dim2d];
    const maxBounds = domain.targetPosition[dim2d];
    return {
        maxBounds,
        minBounds
    };
}
function convertAxis(axis, domain, dim, height) {
    const tickPositions = axis ? axis.ticks.map((t)=>(t.sourcePosition[dim] - domain.sourcePosition[dim]) / (domain.targetPosition[dim] - domain.sourcePosition[dim])) : [];
    const tickText = axis ? axis.tickText.map((t)=>t.text) : [];
    const textPos = axis ? axis.tickText.map((t)=>(t.position[dim] - domain.sourcePosition[dim]) / (domain.targetPosition[dim] - domain.sourcePosition[dim])) : [];
    const textSize = axis ? axis.tickText.map((t)=>t.size / height) : [];
    if (tickPositions.length) {
        if (tickPositions[0] !== 0) tickPositions[0] = 0;
        if (tickPositions[tickPositions.length - 1] !== 1) tickPositions[tickPositions.length - 1] = 1;
    }
    return {
        tickPositions,
        tickText,
        textPos,
        textSize
    };
}

},{"morphcharts":"dzm75","./bounds":"ipKbZ","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"ipKbZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ parcelHelpers.export(exports, "outerBounds", ()=>outerBounds);
parcelHelpers.export(exports, "increment", ()=>increment);
function outerBounds(b1, b2) {
    if (!b1 && !b2) return;
    if (!b1) return b2;
    if (!b2) return b1;
    const minProps = [
        "minBoundsX",
        "minBoundsY",
        "minBoundsZ", 
    ];
    const maxProps = [
        "maxBoundsX",
        "maxBoundsY",
        "maxBoundsZ", 
    ];
    const result = {};
    minProps.forEach((p)=>result[p] = notNull(Math.min, b1[p], b2[p]));
    maxProps.forEach((p)=>result[p] = notNull(Math.max, b1[p], b2[p]));
    return result;
}
function notNull(fn, v1, v2) {
    if (v1 == null && v2 == null) return null;
    if (v1 == null) return v2;
    if (v2 == null) return v1;
    return fn(v1, v2);
}
function increment(b, minBoundsX, minBoundsY, minBoundsZ, maxBoundsX, maxBoundsY, maxBoundsZ) {
    return outerBounds(b, {
        minBoundsX,
        minBoundsY,
        minBoundsZ,
        maxBoundsX,
        maxBoundsY,
        maxBoundsZ
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8Swgd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCubeLayer", ()=>createCubeLayer);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
var _bounds = require("./bounds");
var _color = require("./color");
const key = "cube";
const createCubeLayer = (props)=>{
    const { ref , stage  } = props;
    const { core  } = ref;
    const scatter = new (0, _morphcharts.Layouts).Scatter(core);
    const { ids , colors , positionsX , positionsY , positionsZ , sizesX , sizesY , sizesZ , bounds , maxColor , palette ,  } = convert(stage);
    if (!ids.length) return;
    const { renderer  } = core;
    let cubeTransitionBuffer = renderer.transitionBuffers.find((t)=>t.key === key);
    if (!cubeTransitionBuffer) {
        cubeTransitionBuffer = renderer.createTransitionBuffer(ids);
        cubeTransitionBuffer.key = key;
        renderer.transitionBuffers.push(cubeTransitionBuffer);
    } else cubeTransitionBuffer.swap();
    scatter.layout(cubeTransitionBuffer.currentBuffer, ids, {
        positionsX,
        positionsY,
        positionsZ
    });
    const layer = {
        positionsX,
        positionsY,
        positionsZ,
        update: (newBounds, selected, stagger)=>{
            const { colors , maxColor , minColor , palette  } = layer.unitColorMap;
            // reference off of core.renderer to get the actual buffer
            const currCubeTransitionBuffer = core.renderer.transitionBuffers.find((t)=>t.key === key);
            currCubeTransitionBuffer.currentBuffer.unitType = (0, _morphcharts.UnitType).block;
            currCubeTransitionBuffer.currentPalette.colors = palette;
            let options = Object.assign({
                selected,
                colors,
                minColor,
                maxColor,
                sizesX,
                sizesY,
                sizesZ
            }, newBounds);
            if (stagger === null || stagger === void 0 ? void 0 : stagger.staggerOrders) {
                const { maxStaggerOrder , minStaggerOrder , staggerOrders  } = stagger;
                options = Object.assign(Object.assign({}, options), {
                    maxStaggerOrder,
                    minStaggerOrder,
                    staggerOrders
                });
            }
            scatter.update(currCubeTransitionBuffer.currentBuffer, ids, options);
        },
        bounds,
        unitColorMap: {
            colors,
            ids,
            minColor: 0,
            maxColor,
            palette
        }
    };
    return layer;
};
function convert(stage) {
    const { cubeData  } = stage;
    const { length  } = cubeData;
    const ids = [];
    const colors = new Float64Array(length);
    const positionsX = new Float64Array(length);
    const positionsY = new Float64Array(length);
    const positionsZ = new Float64Array(length);
    const sizesX = new Float64Array(length);
    const sizesY = new Float64Array(length);
    const sizesZ = new Float64Array(length);
    let bounds;
    const colorMap = new (0, _color.ColorMap)();
    cubeData.forEach((cube, i)=>{
        ids.push(i);
        if (cube.isEmpty) {
            positionsX[i] = 0;
            positionsY[i] = 0;
            positionsZ[i] = 0;
            sizesX[i] = 0;
            sizesY[i] = 0;
            sizesZ[i] = 0;
            colors[i] = 0;
        } else {
            //ids.push(cube.ordinal);
            positionsX[i] = cube.position[0] + cube.size[0] * 0.5;
            positionsY[i] = cube.position[1] + cube.size[1] * 0.5;
            positionsZ[i] = cube.position[2] + cube.size[2] * 0.5;
            sizesX[i] = cube.size[0];
            sizesY[i] = cube.size[1];
            sizesZ[i] = cube.size[2];
            bounds = (0, _bounds.increment)(bounds, cube.position[0], cube.position[1], cube.position[2], cube.position[0] + cube.size[0], cube.position[1] + cube.size[1], cube.position[2] + cube.size[2]);
            colors[i] = colorMap.registerColor(cube.color);
        }
    });
    const { palette , maxColor  } = colorMap.getPalette();
    return {
        ids: new Uint32Array(ids),
        colors,
        positionsX,
        positionsY,
        positionsZ,
        sizesX,
        sizesY,
        sizesZ,
        bounds,
        maxColor,
        palette
    };
}

},{"morphcharts":"dzm75","./bounds":"ipKbZ","./color":"4Hopn","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"4Hopn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorMap", ()=>ColorMap);
parcelHelpers.export(exports, "colorConfig", ()=>colorConfig);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _color = require("../color");
class ColorMap {
    constructor(quant = 5){
        this.quant = quant;
        this.colorMap = {};
        this.colorArray = [];
    }
    getColorKey(rgbaColor) {
        const color = rgbaColor.slice(0, 3).map((e)=>Math.floor(e / this.quant) * this.quant);
        color[3] = rgbaColor[3]; //retain alpha
        return JSON.stringify(color);
    }
    registerColor(rgbaColor) {
        const colorKey = this.getColorKey(rgbaColor);
        if (!this.colorMap[colorKey]) {
            this.colorMap[colorKey] = {
                index: this.colorArray.length,
                rgbaColor
            };
            this.colorArray.push(rgbaColor);
        }
        return this.colorMap[colorKey].index;
    }
    getPalette() {
        return {
            palette: new Uint8Array(this.colorArray.flat()),
            maxColor: this.colorArray.length - 1
        };
    }
}
function convert(newColor) {
    const c = (0, _color.colorFromString)(newColor).slice(0, 3);
    return c.map((v)=>v / 255);
}
function colorConfig(ref, colors) {
    if (!colors) return;
    const { config  } = ref.core;
    config.activeColor = convert(colors.activeItemColor);
    config.backgroundColor = convert(colors.backgroundColor);
    config.textColor = convert(colors.textColor);
    config.textBorderColor = convert(colors.textBorderColor);
    config.axesTextColor = convert(colors.axesTextLabelColor);
    config.axesGridBackgroundColor = convert(colors.axesGridBackgroundColor);
    config.axesGridHighlightColor = convert(colors.axesGridHighlightColor);
    config.axesGridMinorColor = convert(colors.axesGridMinorColor);
    config.axesGridMajorColor = convert(colors.axesGridMajorColor);
    config.axesGridZeroColor = convert(colors.axesGridZeroColor);
    //TODO fix this - hack to reset the background color
    ref.core.renderer["_theme"] = null;
}

},{"../color":"cXyMC","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"1NssX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLineLayer", ()=>createLineLayer);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
var _bounds = require("./bounds");
var _color = require("./color");
const key = "line";
const createLineLayer = (props)=>{
    const { height , ref , stage , width  } = props;
    const { core  } = ref;
    const lines = new (0, _morphcharts.Layouts).Line(core);
    const { ids , fromIds , toIds , lineColors , lineSizes , bounds , positionsX , positionsY , positionsZ , lineMaxColor , palette ,  } = convert(stage, height, width);
    if (!ids.length) return;
    const { renderer  } = core;
    let lineTransitionBuffer = renderer.transitionBuffers.find((t)=>t.key === key);
    if (!lineTransitionBuffer) {
        lineTransitionBuffer = renderer.createTransitionBuffer(ids);
        lineTransitionBuffer.key = key;
        renderer.transitionBuffers.push(lineTransitionBuffer);
    } else lineTransitionBuffer.swap();
    lines.layout(lineTransitionBuffer.currentBuffer, ids, fromIds, toIds, {
        positionsX,
        positionsY,
        positionsZ,
        lineSizes,
        sizeScaling: 1
    });
    let options = {
        lineColors,
        lineMinColor: 0,
        lineMaxColor
    };
    // Unit type
    lineTransitionBuffer.currentBuffer.unitType = (0, _morphcharts.UnitType).cylinder;
    lineTransitionBuffer.currentPalette.colors = palette;
    return {
        update: (newBounds)=>{
            options = Object.assign(Object.assign({}, options), newBounds);
            // reference off of core.renderer to get the actual buffer
            const currLineTransitionBuffer = core.renderer.transitionBuffers.find((t)=>t.key === key);
            lines.update(currLineTransitionBuffer.currentBuffer, ids, fromIds, toIds, options);
        },
        bounds,
        unitColorMap: {
            ids,
            colors: lineColors,
            minColor: 0,
            maxColor: lineMaxColor,
            palette
        }
    };
};
function convert(stage, height, width) {
    const { pathData  } = stage;
    const positions = [];
    const lines = [];
    const colorMap = new (0, _color.ColorMap)();
    pathData.forEach((path)=>{
        const color = colorMap.registerColor(path.strokeColor);
        let from = positions.length;
        positions.push(path.positions[0]);
        for(let i = 1; i < path.positions.length; i++){
            const to = positions.length;
            positions.push(path.positions[i]);
            lines.push({
                id: lines.length,
                from,
                to,
                color,
                size: path.strokeWidth
            });
            from = to;
        }
    });
    const ids = new Uint32Array(lines.length);
    const fromIds = new Uint32Array(lines.length);
    const toIds = new Uint32Array(lines.length);
    const lineColors = new Float64Array(lines.length);
    const lineSizes = new Float64Array(lines.length);
    lines.forEach((line, i)=>{
        ids[i] = i;
        fromIds[i] = line.from;
        toIds[i] = line.to;
        lineColors[i] = line.color;
        lineSizes[i] = line.size;
    });
    const positionsX = new Float64Array(positions.length);
    const positionsY = new Float64Array(positions.length);
    const positionsZ = new Float64Array(positions.length);
    let bounds;
    positions.forEach((p, i)=>{
        positionsX[i] = p[0];
        positionsY[i] = p[1] + height;
        positionsZ[i] = p[2];
        bounds = (0, _bounds.increment)(bounds, positionsX[i], positionsY[i], positionsZ[i], positionsX[i], positionsY[i], positionsZ[i]);
    });
    const { palette , maxColor: lineMaxColor  } = colorMap.getPalette();
    return {
        ids,
        fromIds,
        toIds,
        lineColors,
        lineSizes,
        bounds,
        positionsX,
        positionsY,
        positionsZ,
        lineMaxColor,
        palette
    };
}

},{"morphcharts":"dzm75","./bounds":"ipKbZ","./color":"4Hopn","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"gXSar":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTextLayer", ()=>createTextLayer);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
var _bounds = require("./bounds");
var _color = require("./color");
const createTextLayer = (props)=>{
    const { ref , stage  } = props;
    const { core  } = ref;
    const { positionsX , positionsY , positionsZ , sizes , bounds , maxGlyphs , text ,  } = convert(stage);
    if (text.length === 0) {
        core.renderer.labelSets = [];
        return;
    }
    const options = {
        text,
        maxGlyphs,
        scales: sizes
    };
    const labelSet = new (0, _morphcharts.Components).LabelSet(core, options);
    labelSet.positionsX = positionsX;
    labelSet.positionsY = positionsY;
    labelSet.positionsZ = positionsZ;
    labelSet.horizontalAlignment = (0, _morphcharts.HorizontalAlignment).center;
    labelSet.verticalAlignment = (0, _morphcharts.VerticalAlignment).center;
    const layer = {
        update: (bounds)=>{
            const { maxBoundsX , maxBoundsY , maxBoundsZ , minBoundsX , minBoundsY , minBoundsZ ,  } = bounds;
            labelSet.minBoundsX = minBoundsX;
            labelSet.minBoundsY = minBoundsY;
            labelSet.minBoundsZ = minBoundsZ;
            labelSet.maxBoundsX = maxBoundsX;
            labelSet.maxBoundsY = maxBoundsY;
            labelSet.maxBoundsZ = maxBoundsZ;
        },
        bounds
    };
    const labelSetVisual = core.renderer.createLabelSetVisual(labelSet);
    core.renderer.labelSets = [
        labelSetVisual
    ];
    return layer;
};
function convert(stage) {
    const { textData  } = stage;
    const { length  } = textData;
    const ids = [];
    const text = [];
    const colors = new Float64Array(length);
    const positionsX = new Float64Array(length);
    const positionsY = new Float64Array(length);
    const positionsZ = new Float64Array(length);
    const sizes = new Float64Array(length);
    let bounds;
    let maxGlyphs = 0;
    const colorMap = new (0, _color.ColorMap)();
    textData.forEach((t, i)=>{
        ids.push(i);
        text.push(t.text);
        maxGlyphs += t.text.length;
        positionsX[i] = t.position[0];
        positionsY[i] = t.position[1];
        positionsZ[i] = t.position[2];
        sizes[i] = 1.5 * t.size; //scale similar to axes
        bounds = (0, _bounds.increment)(bounds, t.position[0], t.position[1], t.position[2], t.position[0], t.position[1], t.position[2]);
        colors[i] = colorMap.registerColor(t.color);
    });
    const { palette , maxColor  } = colorMap.getPalette();
    return {
        ids: new Uint32Array(ids),
        colors,
        positionsX,
        positionsY,
        positionsZ,
        sizes,
        bounds,
        maxColor,
        maxGlyphs,
        palette,
        text
    };
}

},{"morphcharts":"dzm75","./bounds":"ipKbZ","./color":"4Hopn","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"82mLv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getImageData", ()=>getImageData);
parcelHelpers.export(exports, "createImageQuad", ()=>createImageQuad);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
function getImageData(url) {
    return new Promise((resolve, reject)=>{
        const imageElement = document.createElement("img");
        imageElement.onload = ()=>{
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            const { height , width  } = imageElement;
            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(imageElement, 0, 0);
            resolve(ctx.getImageData(0, 0, width, height));
        };
        imageElement.src = url;
    });
}
function createImageQuad(core, imageData, bounds, position, width, height) {
    const { maxBoundsX , maxBoundsY , maxBoundsZ , minBoundsX , minBoundsY , minBoundsZ  } = bounds;
    const imageOptions = {
        imageData,
        position,
        height,
        width,
        minBoundsX,
        maxBoundsX,
        minBoundsZ,
        maxBoundsZ,
        minBoundsY,
        maxBoundsY
    };
    return new (0, _morphcharts.Components).ImageQuad(core, imageOptions);
}

},{"morphcharts":"dzm75","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"lUHd0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cameraDefaults", ()=>cameraDefaults);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _glMatrix = require("gl-matrix");
var _morphcharts = require("morphcharts");
function createCameraDefaults() {
    const qModelRotation2d = (0, _glMatrix.quat).create();
    const qModelRotation3d = (0, _morphcharts.Constants).QUAT_ROTATEX_MINUS_90;
    const qCameraRotation2d = (0, _glMatrix.quat).create();
    const qCameraRotation3d = (0, _glMatrix.quat).create();
    const qAngle = (0, _glMatrix.quat).create();
    const vCameraPosition = (0, _glMatrix.vec3).create();
    // Altitude (pitch around local right axis)
    (0, _glMatrix.quat).setAxisAngle(qCameraRotation3d, (0, _morphcharts.Constants).VECTOR3_UNITX, (0, _morphcharts.Helpers).AngleHelper.degreesToRadians(30));
    // Azimuth (yaw around global up axis)
    (0, _glMatrix.quat).setAxisAngle(qAngle, (0, _morphcharts.Constants).VECTOR3_UNITY, (0, _morphcharts.Helpers).AngleHelper.degreesToRadians(-25));
    (0, _glMatrix.quat).multiply(qCameraRotation3d, qCameraRotation3d, qAngle);
    return {
        qModelRotation2d,
        qModelRotation3d,
        qCameraRotation2d,
        qCameraRotation3d,
        vCameraPosition
    };
}
const cameraDefaults = createCameraDefaults();

},{"gl-matrix":"3mrln","morphcharts":"dzm75","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9V139":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "init", ()=>init);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
var _renderer = require("./renderer");
var _glMatrix = require("gl-matrix");
var _canvas = require("./canvas");
var _transition = require("../transition");
var _defaults = require("./defaults");
function init(options, mcRendererOptions) {
    const { container  } = options;
    const core = new (0, _morphcharts.Core)({
        container
    });
    (0, _renderer.getRenderer)(mcRendererOptions, core);
    (0, _canvas.listenCanvasEvents)(core, options);
    core.config.pickSelectDelay = 50;
    const cameraTransitioner = new (0, _transition.CameraTransitioner)();
    const modelTransitioner = new (0, _transition.ModelTransitioner)();
    const positionTransitioner = new (0, _transition.Transitioner)();
    const ref = {
        supportedRenders: {
            advanced: (0, _renderer.rendererEnabled)(true),
            basic: (0, _renderer.rendererEnabled)(false)
        },
        reset: ()=>{
            const { qCameraRotation2d , qCameraRotation3d , qModelRotation2d , qModelRotation3d , vCameraPosition  } = (0, _defaults.cameraDefaults);
            const { cameraTransitioner , modelTransitioner  } = ref;
            core.reset(true);
            if (ref.lastView === "3d") {
                modelTransitioner.qRotation.to = qModelRotation3d;
                cameraTransitioner.qRotation.to = qCameraRotation3d;
                cameraTransitioner.vPosition.to = vCameraPosition;
            } else {
                modelTransitioner.qRotation.to = qModelRotation2d;
                cameraTransitioner.qRotation.to = qCameraRotation2d;
                cameraTransitioner.vPosition.to = vCameraPosition;
            }
            (0, _glMatrix.quat).slerp(modelTransitioner.qRotation.current, modelTransitioner.qRotation.to, modelTransitioner.qRotation.to, 0);
            core.setModelRotation(modelTransitioner.qRotation.current, true);
            core.camera.setOrbit(cameraTransitioner.qRotation.to, true);
            core.camera.setPosition(cameraTransitioner.vPosition.to, true);
        },
        cameraTransitioner,
        modelTransitioner,
        positionTransitioner,
        core,
        setMorphChartsRendererOptions (mcRendererOptions) {
            if ((0, _renderer.shouldChangeRenderer)(ref.lastMorphChartsRendererOptions, mcRendererOptions)) {
                (0, _renderer.getRenderer)(mcRendererOptions, core);
                (0, _canvas.listenCanvasEvents)(core, options);
            } else if (mcRendererOptions.advanced) //same renderer, poke the config
            (0, _renderer.setRendererOptions)(core.renderer, mcRendererOptions);
            ref.lastMorphChartsRendererOptions = mcRendererOptions;
        },
        lastMorphChartsRendererOptions: mcRendererOptions,
        lastPresenterConfig: null,
        lastView: null,
        layerStagger: {}
    };
    const cam = (t)=>{
        (0, _glMatrix.quat).slerp(cameraTransitioner.qRotation.current, cameraTransitioner.qRotation.from, cameraTransitioner.qRotation.to, t);
        (0, _glMatrix.vec3).lerp(cameraTransitioner.vPosition.current, cameraTransitioner.vPosition.from, cameraTransitioner.vPosition.to, t);
        core.camera.setOrbit(cameraTransitioner.qRotation.current, false);
        core.camera.setPosition(cameraTransitioner.vPosition.current, false);
        // disable picking during transitions, as the performance degradation could reduce the framerate
        core.inputManager.isPickingEnabled = false;
    };
    core.updateCallback = (elapsedTime)=>{
        const { transitionDurations  } = ref.lastPresenterConfig;
        if (positionTransitioner.isTransitioning) core.renderer.transitionTime = positionTransitioner.elapse(elapsedTime, transitionDurations.position + transitionDurations.stagger);
        if (modelTransitioner.isTransitioning) {
            const tm = modelTransitioner.elapse(elapsedTime, transitionDurations.view, true);
            if (modelTransitioner.shouldTransition) {
                (0, _glMatrix.quat).slerp(modelTransitioner.qRotation.current, modelTransitioner.qRotation.from, modelTransitioner.qRotation.to, tm);
                core.setModelRotation(modelTransitioner.qRotation.current, false);
            }
            cam(tm);
        }
        if (cameraTransitioner.isTransitioning) {
            const t = cameraTransitioner.elapse(elapsedTime, transitionDurations.view, true);
            cam(t);
        } else core.inputManager.isPickingEnabled = true;
    };
    return ref;
}

},{"morphcharts":"dzm75","./renderer":"aQlAd","gl-matrix":"3mrln","./canvas":"keiIA","../transition":"eZK1M","./defaults":"lUHd0","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aQlAd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shouldChangeRenderer", ()=>shouldChangeRenderer);
parcelHelpers.export(exports, "getRenderer", ()=>getRenderer);
parcelHelpers.export(exports, "setRendererOptions", ()=>setRendererOptions);
parcelHelpers.export(exports, "rendererEnabled", ()=>rendererEnabled);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
function shouldChangeRenderer(prev, next) {
    var _a, _b;
    if (!prev || !next) return true;
    if (prev.advanced !== next.advanced) return true;
    if (!prev.advanced) return ((_a = prev.basicOptions) === null || _a === void 0 ? void 0 : _a.antialias) != ((_b = next.basicOptions) === null || _b === void 0 ? void 0 : _b.antialias);
}
function getRenderer(mcRendererOptions, core) {
    const advanced = mcRendererOptions === null || mcRendererOptions === void 0 ? void 0 : mcRendererOptions.advanced;
    const r = advanced ? new (0, _morphcharts.Renderers).Advanced.Main() : new (0, _morphcharts.Renderers).Basic.Main(mcRendererOptions === null || mcRendererOptions === void 0 ? void 0 : mcRendererOptions.basicOptions);
    core.renderer = r;
    setRendererOptions(r, mcRendererOptions);
    return r;
}
function setRendererOptions(renderer, mcRendererOptions) {
    const o = mcRendererOptions === null || mcRendererOptions === void 0 ? void 0 : mcRendererOptions.advancedOptions;
    if ((mcRendererOptions === null || mcRendererOptions === void 0 ? void 0 : mcRendererOptions.advanced) && o) for(const key in o)renderer.config[key] = o[key];
}
function rendererEnabled(advanced) {
    const r = advanced ? new (0, _morphcharts.Renderers).Advanced.Main() : new (0, _morphcharts.Renderers).Basic.Main();
    return r.isSupported;
}

},{"morphcharts":"dzm75","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"keiIA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "listenCanvasEvents", ()=>listenCanvasEvents);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _morphcharts = require("morphcharts");
const rightButton = 2;
function listenCanvasEvents(core, options) {
    const { container , pickGridCallback  } = options;
    const { inputManager  } = core;
    if (options.onLasso) inputManager.pickLassoCallback = (result)=>{
        options.onLasso(result.ids[0], result.manipulator.event);
    };
    inputManager.singleTouchAction = (manipulator)=>{
        if (manipulator.button == rightButton || manipulator.shiftKey || manipulator.ctrlKey) return (0, _morphcharts.SingleTouchAction).rotate;
        else if (manipulator.altKey) return (0, _morphcharts.SingleTouchAction).lasso;
        else return (0, _morphcharts.SingleTouchAction).translate;
    };
    inputManager.pickAxesGridCallback = ({ divisionX , divisionY , divisionZ , manipulator  })=>{
        clearClickTimeout();
        const { altKey , button , shiftKey  } = manipulator;
        const me = {
            altKey,
            shiftKey,
            button
        };
        const e = me;
        pickGridCallback([
            divisionX,
            divisionY,
            divisionZ
        ], e);
    };
    const canvas = container.getElementsByTagName("canvas")[0];
    let pickedId;
    const hover = (e)=>{
        if (core.renderer.pickedId !== pickedId) {
            pickedId = core.renderer.pickedId;
            const ordinal = core.renderer.transitionBuffers[0].pickIdLookup[pickedId];
            options.onCubeHover(e, ordinal);
        }
    };
    canvas.addEventListener("mousemove", (e)=>{
        clearClickTimeout();
        if (mousedown) options.onCubeHover(e, null);
        hover(e);
    });
    canvas.addEventListener("mouseout", hover);
    canvas.addEventListener("mouseover", hover);
    let mousedown;
    canvas.addEventListener("mousedown", ()=>{
        mousedown = true;
    });
    canvas.addEventListener("mouseup", (e)=>{
        mousedown = false;
    });
    let canvasClickTimeout;
    const clearClickTimeout = ()=>{
        clearTimeout(canvasClickTimeout);
        canvasClickTimeout = null;
    };
    canvas.addEventListener("click", (e)=>{
        canvasClickTimeout = setTimeout(()=>{
            options.onCanvasClick(e);
        }, 50);
    });
    inputManager.pickItemCallback = ({ manipulator  })=>{
        clearClickTimeout();
        const ordinal = core.renderer.transitionBuffers[0].pickIdLookup[pickedId];
        options.onCubeClick(manipulator.event, ordinal);
    };
}

},{"morphcharts":"dzm75","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"eZK1M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transitioner", ()=>Transitioner);
parcelHelpers.export(exports, "CameraTransitioner", ()=>CameraTransitioner);
parcelHelpers.export(exports, "ModelTransitioner", ()=>ModelTransitioner);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _glMatrix = require("gl-matrix");
var _easing = require("./easing");
class Transitioner {
    constructor(){
        this.isTransitioning = false;
    }
    begin() {
        this.isTransitioning = true;
        this.time = 0;
    }
    elapse(elapsedTime, totalTime, ease = false) {
        this.time += elapsedTime;
        if (this.time >= totalTime) {
            this.isTransitioning = false;
            this.time = totalTime;
        }
        const t = this.time / totalTime;
        return ease ? (0, _easing.easing)(t) : t;
    }
}
class CameraTransitioner extends Transitioner {
    constructor(){
        super();
        this.qRotation = {
            from: (0, _glMatrix.quat).create(),
            to: null,
            current: (0, _glMatrix.quat).create()
        };
        this.vPosition = {
            from: (0, _glMatrix.vec3).create(),
            to: null,
            current: (0, _glMatrix.vec3).create()
        };
    }
    move(position, rotation) {
        this.begin();
        this.qRotation.to = rotation;
        this.vPosition.to = position;
    }
}
class ModelTransitioner extends Transitioner {
    constructor(){
        super();
        this.shouldTransition = false;
        this.qRotation = {
            from: null,
            to: null,
            current: (0, _glMatrix.quat).create()
        };
    }
}

},{"gl-matrix":"3mrln","./easing":"aJG37","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aJG37":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easing", ()=>easing);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _d3Ease = require("d3-ease");
function easing(t) {
    if (t === 0 || t === 1) return t;
    return (0, _d3Ease.easeCubicInOut)(t);
}

},{"d3-ease":"jpnuI","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"jpnuI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easeLinear", ()=>(0, _linearJs.linear));
parcelHelpers.export(exports, "easeQuad", ()=>(0, _quadJs.quadInOut));
parcelHelpers.export(exports, "easeQuadIn", ()=>(0, _quadJs.quadIn));
parcelHelpers.export(exports, "easeQuadOut", ()=>(0, _quadJs.quadOut));
parcelHelpers.export(exports, "easeQuadInOut", ()=>(0, _quadJs.quadInOut));
parcelHelpers.export(exports, "easeCubic", ()=>(0, _cubicJs.cubicInOut));
parcelHelpers.export(exports, "easeCubicIn", ()=>(0, _cubicJs.cubicIn));
parcelHelpers.export(exports, "easeCubicOut", ()=>(0, _cubicJs.cubicOut));
parcelHelpers.export(exports, "easeCubicInOut", ()=>(0, _cubicJs.cubicInOut));
parcelHelpers.export(exports, "easePoly", ()=>(0, _polyJs.polyInOut));
parcelHelpers.export(exports, "easePolyIn", ()=>(0, _polyJs.polyIn));
parcelHelpers.export(exports, "easePolyOut", ()=>(0, _polyJs.polyOut));
parcelHelpers.export(exports, "easePolyInOut", ()=>(0, _polyJs.polyInOut));
parcelHelpers.export(exports, "easeSin", ()=>(0, _sinJs.sinInOut));
parcelHelpers.export(exports, "easeSinIn", ()=>(0, _sinJs.sinIn));
parcelHelpers.export(exports, "easeSinOut", ()=>(0, _sinJs.sinOut));
parcelHelpers.export(exports, "easeSinInOut", ()=>(0, _sinJs.sinInOut));
parcelHelpers.export(exports, "easeExp", ()=>(0, _expJs.expInOut));
parcelHelpers.export(exports, "easeExpIn", ()=>(0, _expJs.expIn));
parcelHelpers.export(exports, "easeExpOut", ()=>(0, _expJs.expOut));
parcelHelpers.export(exports, "easeExpInOut", ()=>(0, _expJs.expInOut));
parcelHelpers.export(exports, "easeCircle", ()=>(0, _circleJs.circleInOut));
parcelHelpers.export(exports, "easeCircleIn", ()=>(0, _circleJs.circleIn));
parcelHelpers.export(exports, "easeCircleOut", ()=>(0, _circleJs.circleOut));
parcelHelpers.export(exports, "easeCircleInOut", ()=>(0, _circleJs.circleInOut));
parcelHelpers.export(exports, "easeBounce", ()=>(0, _bounceJs.bounceOut));
parcelHelpers.export(exports, "easeBounceIn", ()=>(0, _bounceJs.bounceIn));
parcelHelpers.export(exports, "easeBounceOut", ()=>(0, _bounceJs.bounceOut));
parcelHelpers.export(exports, "easeBounceInOut", ()=>(0, _bounceJs.bounceInOut));
parcelHelpers.export(exports, "easeBack", ()=>(0, _backJs.backInOut));
parcelHelpers.export(exports, "easeBackIn", ()=>(0, _backJs.backIn));
parcelHelpers.export(exports, "easeBackOut", ()=>(0, _backJs.backOut));
parcelHelpers.export(exports, "easeBackInOut", ()=>(0, _backJs.backInOut));
parcelHelpers.export(exports, "easeElastic", ()=>(0, _elasticJs.elasticOut));
parcelHelpers.export(exports, "easeElasticIn", ()=>(0, _elasticJs.elasticIn));
parcelHelpers.export(exports, "easeElasticOut", ()=>(0, _elasticJs.elasticOut));
parcelHelpers.export(exports, "easeElasticInOut", ()=>(0, _elasticJs.elasticInOut));
var _linearJs = require("./linear.js");
var _quadJs = require("./quad.js");
var _cubicJs = require("./cubic.js");
var _polyJs = require("./poly.js");
var _sinJs = require("./sin.js");
var _expJs = require("./exp.js");
var _circleJs = require("./circle.js");
var _bounceJs = require("./bounce.js");
var _backJs = require("./back.js");
var _elasticJs = require("./elastic.js");

},{"./linear.js":false,"./quad.js":false,"./cubic.js":"8kYMP","./poly.js":false,"./sin.js":false,"./exp.js":false,"./circle.js":false,"./bounce.js":false,"./back.js":false,"./elastic.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"8kYMP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubicIn", ()=>cubicIn);
parcelHelpers.export(exports, "cubicOut", ()=>cubicOut);
parcelHelpers.export(exports, "cubicInOut", ()=>cubicInOut);
function cubicIn(t) {
    return t * t * t;
}
function cubicOut(t) {
    return --t * t * t + 1;
}
function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"fQ572":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ViewGl", ()=>ViewGl);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _base = require("../base");
var _defaults = require("../defaults");
var _presenter = require("../presenter");
var _enums = require("../enums");
var _rendererGl = require("./rendererGl");
let registered = false;
//dynamic superclass lets us create a subclass at execution phase instead of declaration phase.
//This allows us to retrieve vega.View from either UMD or ES6 consumers of this class.
//pass in the SuperClass, which should be a vega.View
function _ViewGl(runtime, config) {
    //dynamic superclass, since we don't know have vega.View in the declaration phase
    class ViewGlInternal extends (0, _base.base).vega.View {
        constructor(runtime, config = {}){
            super(runtime, config);
            this.config = config;
            this.presenter = config.presenter;
            config.presenterConfig = config.presenterConfig || {};
            config.presenterConfig.redraw = ()=>{
                this._redraw = true; //use Vega View private member _redraw
                this.run();
            };
        }
        renderer(...args) {
            if (args && args.length) {
                const renderer = args[0];
                if (renderer === "morphcharts" && !registered) {
                    (0, _base.base).vega.renderModule("morphcharts", {
                        handler: (0, _base.base).vega.CanvasHandler,
                        renderer: (0, _rendererGl.RendererGl)
                    });
                    registered = true;
                }
                return super.renderer(renderer);
            } else return super.renderer();
        }
        initialize(el) {
            if (!this.presenter) this.presenter = new (0, _presenter.Presenter)(el);
            super.initialize(this.presenter.getElement((0, _enums.PresenterElement).vegaControls));
            const renderer = this._renderer;
            renderer.presenterConfig = this.config.presenterConfig;
            renderer.presenter = this.presenter;
            renderer.getView = this.config && this.config.getView || (()=>this.presenter.view || (0, _defaults.defaultView));
            return this;
        }
        error(e) {
            if (this.presenter.logger) this.presenter.logger(e);
        }
    }
    const instance = new ViewGlInternal(runtime, config);
    return instance;
}
const ViewGl = _ViewGl;

},{"../base":"4hPDY","../defaults":"rYstm","../presenter":"bqYNS","../enums":"gGi06","./rendererGl":"9Q6VK","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"9Q6VK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RendererGl", ()=>RendererGl);
/*!
* Copyright (c) Microsoft Corporation.
* Licensed under the MIT License.
*/ var _base = require("../base");
//pass in the SuperClass, which should be a vega.View
function _RendererGl(loader) {
    //dynamic superclass, since we don't know have vega.View in the declaration phase
    class RendererGlInternal extends (0, _base.base).vega.Renderer {
        initialize(el, width, height, origin) {
            this.height = height;
            this.width = width;
            // this method will invoke resize to size the canvas appropriately
            return super.initialize(el, width, height, origin);
        }
        resize(width, height, origin) {
            super.resize(width, height, origin);
            this.origin = origin;
            this.height = height;
            this.width = width;
            //rteturn this for vega
            return this;
        }
        _render(scene, items) {
            const scene3d = scene;
            scene3d.view = this.getView();
            this.presenter.present(scene3d, this.height, this.width, this.presenterConfig);
            //return this for vega
            return this;
        }
    }
    const instance = new RendererGlInternal(loader);
    return instance;
}
const RendererGl = _RendererGl;

},{"../base":"4hPDY","@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}],"aUbEh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "1.0.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jA2du"}]},["dlIYU"], "dlIYU", "parcelRequire1c68")

